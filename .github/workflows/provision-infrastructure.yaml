name: Provision AWS Infrastructure

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Confirm to deploy resources"
        required: true
        default: "main"

jobs:
  terraform-apply-ecr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Validate
        working-directory: terraform
        run: terraform validate

      - name: Terraform Fmt
        working-directory: terraform
        run: terraform fmt --recursive

      - name: Terraform Plan
        working-directory: terraform
        run: terraform plan

      - name: Terraform Apply ECR
        working-directory: terraform
        run: |
          terraform apply -target=module.aws_ecr_repository.aws_ecr_repository.tm_app -auto-approve

  docker-build-push:
    runs-on: ubuntu-latest
    needs: terraform-apply-ecr
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Lint Dockerfile
        run: docker run --rm -i hadolint/hadolint < Dockerfile

      - name: Build Docker image
        run: |
          docker build -t aws-threat-modeling-app .

      - name: Test Docker image
        run: |
          docker run -d -p 3000:3000 aws-threat-modeling-app
          docker ps | grep aws-threat-modeling-app

      - name: Tag and Push Docker image to ECR
        run: |
          docker tag aws-threat-modeling-app:latest ${{ steps.login-ecr.outputs.registry }}/aws-threat-modeling-app:latest
          docker push ${{ steps.login-ecr.outputs.registry }}/aws-threat-modeling-app:latest

  terraform-apply-route53:
    runs-on: ubuntu-latest
    needs: docker-build-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init for Route 53
        working-directory: terraform
        run: terraform init

      - name: Terraform Apply Route 53
        working-directory: terraform
        run: |
          terraform apply -target=module.route53.aws_route53_zone.zone -auto-approve > tf_output.txt
          grep -A 4 'name_servers = tolist' tf_output.txt | sed -n '/name_servers = tolist/,/\])/p' > name_servers.txt

      - name: Upload Name Servers to S3
        run: |
          aws s3 cp terraform/name_servers.txt s3://name-server-bucket-101/name_servers.txt

  terraform-apply-remaining:
    runs-on: ubuntu-latest
    needs: terraform-apply-route53
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init for Remaining Resources
        working-directory: terraform
        run: terraform init

      - name: Terraform Apply Remaining Resources
        working-directory: terraform
        run: terraform apply -auto-approve
