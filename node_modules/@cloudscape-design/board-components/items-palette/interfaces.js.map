{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../src/items-palette/interfaces.ts"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { BoardItemDefinitionBase, DataFallbackType } from \"../internal/interfaces\";\n\n/*\n  Note:\n  The component does not provide handling of items state (loading, error, loaded).\n  It is the responsibility of the client to control it and provide the necessary\n  ARIA-live announcements.\n*/\n\nexport interface ItemsPaletteProps<D = DataFallbackType> {\n  /**\n   * Specifies the items displayed in the palette. The content of each item is controlled by the `renderItem` property.\n   *\n   * The ItemsPaletteProps.Item includes:\n   * * `id` (string) - the unique item identifier. The IDs of any two items in a page must be different.\n   * * `definition.minRowSpan` (number, optional) - the minimal number of rows the item is allowed to take. It can't be less than two. Defaults to two.\n   * * `definition.minColumnSpan` (number, optional) - the minimal number of columns the item is allowed to take (in a 4 column layout). It can't be less than one. Defaults to one.\n   * * `definition.defaultRowSpan` (number) - the number or rows the item will take when inserted to the board. It can't be less than `definition.minRowSpan`.\n   * * `definition.defaultColumnSpan` (number) - the number or columns the item will take (in a 4 column layout) when inserted to the board. It can't be less than `definition.minColumnSpan`.\n   * * `data` (D) - optional item data which can include the specific configurations of an item, such as its title.\n   */\n  items: ReadonlyArray<ItemsPaletteProps.Item<D>>;\n\n  /**\n   * Specifies a function to render content for a palette item. The return value must include board item component.\n   *\n   * The function takes the item and its associated context (ItemsPaletteProps.ItemContext) that include:\n   * * `showPreview` (boolean) - a flag that indicates if the item's content needs to be rendered in preview mode.\n   */\n  renderItem: (item: ItemsPaletteProps.Item<D>, context: ItemsPaletteProps.ItemContext) => JSX.Element;\n\n  /**\n   * An object containing all the necessary localized strings required by the component.\n   *\n   * Live announcements:\n   * * `liveAnnouncementDndStarted` (string) - live announcement string to indicate start of DnD.\n   * * `liveAnnouncementDndDiscarded` (string) - live announcement string to indicate discard of DnD.\n   */\n  i18nStrings: ItemsPaletteProps.I18nStrings<D>;\n}\n\nexport namespace ItemsPaletteProps {\n  export type Item<D = DataFallbackType> = BoardItemDefinitionBase<D>;\n\n  export interface ItemContext {\n    showPreview: boolean;\n  }\n\n  export interface I18nStrings<D> {\n    liveAnnouncementDndStarted: string;\n    liveAnnouncementDndDiscarded: string;\n    /** @deprecated Has no effect. */\n    navigationAriaLabel: string;\n    /** @deprecated Has no effect. */\n    navigationAriaDescription?: string;\n    /** @deprecated Has no effect. */\n    navigationItemAriaLabel: (item: ItemsPaletteProps.Item<D>) => string;\n  }\n}\n"]}