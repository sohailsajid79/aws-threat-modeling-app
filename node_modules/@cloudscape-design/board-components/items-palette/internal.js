import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import { useRef, useState } from "react";
import { getIsRtl } from "@cloudscape-design/component-toolkit/internal";
import SpaceBetween from "@cloudscape-design/components/space-between";
import { getDataAttributes } from "../internal/base-component/get-data-attributes";
import { useDragSubscription } from "../internal/dnd-controller/controller";
import { ItemContainer } from "../internal/item-container";
import LiveRegion from "../internal/live-region";
import styles from "./styles.css.js";
export function InternalItemsPalette({ items, renderItem, i18nStrings, __internalRootRef, ...rest }) {
    const paletteRef = useRef(null);
    const itemContainerRef = useRef({});
    const [dropState, setDropState] = useState();
    const [announcement, setAnnouncement] = useState("");
    const isRtl = () => getIsRtl(paletteRef.current);
    useDragSubscription("start", ({ draggableItem: { id } }) => {
        setDropState({ id });
        // Announce only if the target item belongs to the palette.
        if (items.some((it) => it.id === id)) {
            setAnnouncement(i18nStrings.liveAnnouncementDndStarted);
        }
        else {
            setAnnouncement("");
        }
    });
    useDragSubscription("update", ({ draggableItem: { id } }) => {
        setDropState({ id });
    });
    useDragSubscription("submit", () => {
        setDropState(undefined);
        // Announce only if the target item belongs to the palette.
        if (dropState && items.some((it) => it.id === dropState.id)) {
            setAnnouncement(i18nStrings.liveAnnouncementDndDiscarded);
        }
    });
    useDragSubscription("discard", () => {
        setDropState(undefined);
        // Announce only if the target item belongs to the palette.
        if (items.some((it) => it.id === (dropState === null || dropState === void 0 ? void 0 : dropState.id))) {
            setAnnouncement(i18nStrings.liveAnnouncementDndDiscarded);
        }
    });
    useDragSubscription("acquire", ({ draggableItem }) => {
        // "Disconnect" target item from the palette if borrowed.
        if (items.some((it) => it.id === draggableItem.id)) {
            setDropState(undefined);
        }
    });
    return (_jsxs("div", { ref: __internalRootRef, ...getDataAttributes(rest), children: [_jsx("div", { ref: paletteRef, className: styles.root, children: _jsx(SpaceBetween, { size: "l", children: items.map((item) => (_jsx(ItemContainer, { ref: (elem) => {
                            if (elem) {
                                itemContainerRef.current[item.id] = elem;
                            }
                            else {
                                delete itemContainerRef.current[item.id];
                            }
                        }, item: item, placed: false, acquired: false, transform: undefined, inTransition: false, getItemSize: (dropContext) => {
                            if (!dropContext) {
                                throw new Error("Invariant violation: cannot query palette item size with no drop context.");
                            }
                            const { width, height } = dropContext.scale(item);
                            return { width, minWidth: width, maxWidth: width, height, minHeight: height, maxHeight: height };
                        }, isRtl: isRtl, children: (hasDropTarget) => renderItem(item, { showPreview: hasDropTarget }) }, item.id))) }) }), _jsx(LiveRegion, { children: announcement })] }));
}
//# sourceMappingURL=internal.js.map