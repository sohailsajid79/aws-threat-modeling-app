{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../src/board/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ReactNode } from \"react\";\n\nimport { InteractionType, Operation } from \"../internal/dnd-controller/controller\";\nimport {\n  BoardItemDefinition,\n  BoardItemDefinitionBase,\n  DataFallbackType,\n  Direction,\n  GridLayout,\n  GridLayoutItem,\n  ItemId,\n  Rect,\n} from \"../internal/interfaces\";\nimport { LayoutEngine } from \"../internal/layout-engine/engine\";\nimport { LayoutShift } from \"../internal/layout-engine/interfaces\";\nimport { NonCancelableEventHandler } from \"../internal/utils/events\";\nimport { Position } from \"../internal/utils/position\";\n\n/*\n  Note:\n  The component does not provide handling of items state (loading, error, loaded).\n  It is the responsibility of the client to control it and provide the necessary\n  ARIA-live announcements.\n*/\n\nexport interface BoardProps<D = DataFallbackType> {\n  /**\n   * Specifies the items displayed in the board. Each item includes its position on the board and\n   * optional data. The content of an item is controlled by the `renderItem` property.\n   *\n   * The BoardProps.Item includes:\n   * * `id` (string) - the unique item identifier. The IDs of any two items in a page must be different.\n   * * `definition.minRowSpan` (number, optional) - the minimal number of rows the item is allowed to take. It can't be less than two. Defaults to two.\n   * * `definition.minColumnSpan` (number, optional) - the minimal number of columns the item is allowed to take. It can't be less than one. Defaults to one.\n   * * `definition.defaultRowSpan` (number, optional) - the number or rows the item will take when inserted to the board. It can't be less than `definition.minRowSpan`.\n   * * `definition.defaultColumnSpan` (number, optional) - the number or columns the item will take when inserted in the board. It can't be less than `definition.minColumnSpan`.\n   * * `columnOffset` (mapping, optional) - the item's offset from the first column (per layout) starting from zero. The value is updated by `onItemsChange` after an update is committed.\n   * * `rowSpan` (number, optional) - the item's vertical size starting from two. The value is updated by `onItemsChange` after an update is committed.\n   * * `columnSpan` (number, optional) - the item's horizontal size starting from one. The value is updated by `onItemsChange` after an update is committed.\n   * * `data` (D) - optional item data which can include the specific configurations of an item, such as its title.\n   */\n  items: ReadonlyArray<BoardProps.Item<D>>;\n\n  /**\n   * Specifies a function to render content for board items. The return value must include board item component.\n   *\n   * The function takes the item and its associated actions (BoardProps.ItemActions) that include:\n   * * `removeItem(): void` - the callback to issue the item's removal. Once issued, the `onItemsChange` will fire to update the state.\n   */\n  renderItem: (item: BoardProps.Item<D>, actions: BoardProps.ItemActions) => JSX.Element;\n\n  /**\n   * An object containing all the necessary localized strings required by the component.\n   *\n   * Live announcements:\n   * * `liveAnnouncementDndStarted(BoardProps.DndOperationType): string` - the function to create a live announcement string to indicate start of DnD (\"reorder\", \"resize\" or \"insert\").\n   * * `liveAnnouncementDndItemReordered(BoardProps.DndReorderState<D>): string` - the function to create a live announcement string to indicate when DnD reorder is performed.\n   * * `liveAnnouncementDndItemResized(BoardProps.DndResizeState<D>): string` - the function to create a live announcement string to indicate when DnD resize is performed.\n   * * `liveAnnouncementDndItemInserted(BoardProps.DndInsertState<D>): string` - the function to create a live announcement string to indicate when DnD insert is performed.\n   * * `liveAnnouncementDndDiscarded(BoardProps.DndOperationType): string` - the function to create a live announcement string to indicate commit of DnD (\"reorder\", \"resize\" or \"insert\").\n   * * `liveAnnouncementDndCommitted(BoardProps.DndOperationType): string` - the function to create a live announcement string to indicate discard of DnD (\"reorder\", \"resize\" or \"insert\").\n   * * `liveAnnouncementItemRemoved(BoardProps.OperationStateRemove<D>): string` - the function to create a live announcement string to indicate when item is removed.\n   */\n  i18nStrings: BoardProps.I18nStrings<D>;\n\n  /**\n   * Called when a user modifies the size or position of board items.\n   *\n   * The change detail has the following properties:\n   *\n   * * `items`: (readonly Item<D>[]) - the updated items array.\n   * * `addedItem`: (Item<D>, optional) - the item that was added as part of the update, if applicable.\n   * * `removedItem`: (Item<D>, optional) - the item that was removed as part of the update, if applicable.\n   * * `resizedItem`: (Item<D>, optional) - the item that was resized as part of the update, if applicable.\n   * * `movedItem`: (Item<D>, optional) - the item that was moved as part of the update, if applicable.\n   */\n  onItemsChange: NonCancelableEventHandler<BoardProps.ItemsChangeDetail<D>>;\n\n  /**\n   * Rendered when the `items` array is empty.\n   *\n   * When items are loading the slot can be used to render the loading indicator.\n   */\n  empty: ReactNode;\n}\n\nexport namespace BoardProps {\n  export type Item<D = DataFallbackType> = BoardItemDefinition<D>;\n\n  export interface ItemActions {\n    removeItem(): void;\n  }\n\n  export interface ItemsChangeDetail<D = DataFallbackType> {\n    items: ReadonlyArray<Item<D>>;\n    movedItem?: Item<D>;\n    resizedItem?: Item<D>;\n    addedItem?: Item<D>;\n    removedItem?: Item<D>;\n  }\n\n  export interface I18nStrings<D> {\n    liveAnnouncementDndStarted: (operationType: DndOperationType) => string;\n    liveAnnouncementDndItemReordered: (operation: DndReorderState<D>) => string;\n    liveAnnouncementDndItemResized: (operation: DndResizeState<D>) => string;\n    liveAnnouncementDndItemInserted: (operation: DndInsertState<D>) => string;\n    liveAnnouncementDndCommitted: (operationType: DndOperationType) => string;\n    liveAnnouncementDndDiscarded: (operationType: DndOperationType) => string;\n    liveAnnouncementItemRemoved: (operation: ItemRemovedState<D>) => string;\n\n    /** @deprecated Has no effect. */\n    navigationAriaLabel: string;\n    /** @deprecated Has no effect. */\n    navigationAriaDescription?: string;\n    /** @deprecated Has no effect. */\n    navigationItemAriaLabel: (item: null | BoardProps.Item<D>) => string;\n  }\n\n  export type DndOperationType = \"reorder\" | \"resize\" | \"insert\";\n\n  export interface ItemPlacement {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  }\n\n  export interface DndReorderState<D> {\n    item: Item<D>;\n    placement: ItemPlacement;\n    direction: \"horizontal\" | \"vertical\";\n    conflicts: readonly Item<D>[];\n    disturbed: readonly Item<D>[];\n  }\n\n  export interface DndInsertState<D> {\n    item: Item<D>;\n    placement: ItemPlacement;\n    conflicts: readonly Item<D>[];\n    disturbed: readonly Item<D>[];\n  }\n\n  export interface DndResizeState<D> {\n    item: Item<D>;\n    placement: ItemPlacement;\n    direction: \"horizontal\" | \"vertical\";\n    isMinimalColumnsReached: boolean;\n    isMinimalRowsReached: boolean;\n    conflicts: readonly Item<D>[];\n    disturbed: readonly Item<D>[];\n  }\n\n  export interface ItemRemovedState<D> {\n    item: Item<D>;\n    disturbed: readonly Item<D>[];\n  }\n}\n\nexport interface Transition<D> {\n  operation: Operation;\n  interactionType: InteractionType;\n  itemsLayout: GridLayout;\n  layoutEngine: LayoutEngine;\n  insertionDirection: null | Direction;\n  draggableItem: BoardItemDefinitionBase<D>;\n  draggableRect: Rect;\n  acquiredItem: null | BoardItemDefinitionBase<D>;\n  collisionIds: Set<ItemId>;\n  layoutShift: null | LayoutShift;\n  path: readonly Position[];\n  acquiredItemElement?: ReactNode;\n}\n\nexport interface RemoveTransition<D> {\n  items: readonly BoardProps.Item<D>[];\n  removedItem: BoardItemDefinitionBase<D>;\n  layoutShift: LayoutShift;\n}\n\nexport type TransitionAnnouncement =\n  | DndStartedAnnouncement\n  | DndActionAnnouncement\n  | DndCommittedAnnouncement\n  | DndDiscardedAnnouncement\n  | ItemRemovedAnnouncement;\n\nexport interface DndStartedAnnouncement {\n  type: \"dnd-started\";\n  item: BoardItemDefinitionBase<unknown>;\n  operation: Operation;\n}\nexport interface DndActionAnnouncement {\n  type: \"dnd-action\";\n  item: BoardItemDefinitionBase<unknown>;\n  operation: Operation;\n  placement: Omit<GridLayoutItem, \"id\">;\n  direction: null | Direction;\n  conflicts: Set<ItemId>;\n  disturbed: Set<ItemId>;\n}\nexport interface DndCommittedAnnouncement {\n  type: \"dnd-committed\";\n  item: BoardItemDefinitionBase<unknown>;\n  operation: Operation;\n}\nexport interface DndDiscardedAnnouncement {\n  type: \"dnd-discarded\";\n  item: BoardItemDefinitionBase<unknown>;\n  operation: Operation;\n}\nexport interface ItemRemovedAnnouncement {\n  type: \"item-removed\";\n  item: BoardItemDefinitionBase<unknown>;\n  disturbed: Set<ItemId>;\n}\n"]}