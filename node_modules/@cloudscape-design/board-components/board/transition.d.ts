import { Dispatch, ReactNode } from "react";
import { InteractionType, Operation } from "../internal/dnd-controller/controller";
import { BoardItemDefinitionBase, Direction, GridLayout, ItemId, Rect } from "../internal/interfaces";
import { Coordinates } from "../internal/utils/coordinates";
import { Position } from "../internal/utils/position";
import { BoardProps, RemoveTransition, Transition, TransitionAnnouncement } from "./interfaces";
export interface TransitionState<D> {
    transition: null | Transition<D>;
    removeTransition: null | RemoveTransition<D>;
    announcement: null | TransitionAnnouncement;
}
export type Action<D> = InitAction<D> | InitRemoveAction<D> | SubmitAction | DiscardAction | UpdateWithPointerAction | UpdateWithKeyboardAction | AcquireItemAction;
interface InitAction<D> {
    type: "init";
    operation: Operation;
    interactionType: InteractionType;
    itemsLayout: GridLayout;
    draggableItem: BoardItemDefinitionBase<D>;
    draggableRect: Rect;
    collisionIds: readonly ItemId[];
}
interface InitRemoveAction<D> {
    type: "init-remove";
    items: readonly BoardProps.Item<D>[];
    removedItem: BoardItemDefinitionBase<D>;
    itemsLayout: GridLayout;
}
interface SubmitAction {
    type: "submit";
}
interface DiscardAction {
    type: "discard";
}
interface UpdateWithPointerAction {
    type: "update-with-pointer";
    collisionIds: readonly ItemId[];
    positionOffset: Coordinates;
    draggableRect: Rect;
}
interface UpdateWithKeyboardAction {
    type: "update-with-keyboard";
    direction: Direction;
}
interface AcquireItemAction {
    type: "acquire-item";
    position: Position;
    layoutElement: HTMLElement;
    acquiredItemElement?: ReactNode;
}
export declare function useTransition<D>({ isRtl }: {
    isRtl: () => boolean;
}): [TransitionState<D>, Dispatch<Action<D>>];
export declare function selectTransitionRows<D>(state: TransitionState<D>): number;
export {};
