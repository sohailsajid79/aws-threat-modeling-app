{"version":3,"file":"transition.js","sourceRoot":"","sources":["../../../src/board/transition.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Dispatch, ReactNode, useReducer } from \"react\";\n\nimport { getLogicalBoundingClientRect } from \"@cloudscape-design/component-toolkit/internal\";\n\nimport { InteractionType, Operation } from \"../internal/dnd-controller/controller\";\nimport { BoardItemDefinitionBase, Direction, GridLayout, ItemId, Rect } from \"../internal/interfaces\";\nimport { LayoutEngine } from \"../internal/layout-engine/engine\";\nimport { Coordinates } from \"../internal/utils/coordinates\";\nimport { getDefaultColumnSpan, getDefaultRowSpan, getMinColumnSpan, getMinRowSpan } from \"../internal/utils/layout\";\nimport { Position } from \"../internal/utils/position\";\nimport { BoardProps, RemoveTransition, Transition, TransitionAnnouncement } from \"./interfaces\";\nimport { createOperationAnnouncement } from \"./utils/announcements\";\nimport { getHoveredRect } from \"./utils/get-hovered-rect\";\nimport { getInsertionDirection, getLayoutPlaceholders, getLayoutRows, getLayoutShift } from \"./utils/layout\";\nimport { appendMovePath, appendResizePath } from \"./utils/path\";\n\nexport interface TransitionState<D> {\n  transition: null | Transition<D>;\n  removeTransition: null | RemoveTransition<D>;\n  announcement: null | TransitionAnnouncement;\n}\n\nexport type Action<D> =\n  | InitAction<D>\n  | InitRemoveAction<D>\n  | SubmitAction\n  | DiscardAction\n  | UpdateWithPointerAction\n  | UpdateWithKeyboardAction\n  | AcquireItemAction;\n\ninterface InitAction<D> {\n  type: \"init\";\n  operation: Operation;\n  interactionType: InteractionType;\n  itemsLayout: GridLayout;\n  draggableItem: BoardItemDefinitionBase<D>;\n  draggableRect: Rect;\n  collisionIds: readonly ItemId[];\n}\ninterface InitRemoveAction<D> {\n  type: \"init-remove\";\n  items: readonly BoardProps.Item<D>[];\n  removedItem: BoardItemDefinitionBase<D>;\n  itemsLayout: GridLayout;\n}\ninterface SubmitAction {\n  type: \"submit\";\n}\ninterface DiscardAction {\n  type: \"discard\";\n}\ninterface UpdateWithPointerAction {\n  type: \"update-with-pointer\";\n  collisionIds: readonly ItemId[];\n  positionOffset: Coordinates;\n  draggableRect: Rect;\n}\ninterface UpdateWithKeyboardAction {\n  type: \"update-with-keyboard\";\n  direction: Direction;\n}\ninterface AcquireItemAction {\n  type: \"acquire-item\";\n  position: Position;\n  layoutElement: HTMLElement;\n  acquiredItemElement?: ReactNode;\n}\n\nexport function useTransition<D>({ isRtl }: { isRtl: () => boolean }): [TransitionState<D>, Dispatch<Action<D>>] {\n  return useReducer(createTransitionReducer<D>({ isRtl }), {\n    transition: null,\n    removeTransition: null,\n    announcement: null,\n  });\n}\n\nexport function selectTransitionRows<D>(state: TransitionState<D>) {\n  return state.transition ? getLayoutRows(state.transition) : 0;\n}\n\nfunction createTransitionReducer<D>({ isRtl }: { isRtl: () => boolean }) {\n  return function transitionReducer(state: TransitionState<D>, action: Action<D>): TransitionState<D> {\n    switch (action.type) {\n      case \"init\":\n        return initTransition(action);\n      case \"init-remove\":\n        return initRemoveTransition(action);\n      case \"submit\":\n        return submitTransition(state);\n      case \"discard\":\n        return discardTransition(state);\n      case \"update-with-pointer\":\n        return updateTransitionWithPointerEvent(state, action);\n      case \"update-with-keyboard\":\n        return updateTransitionWithKeyboardEvent(state, action, { isRtl });\n      case \"acquire-item\":\n        return acquireTransitionItem(state, action);\n    }\n  };\n}\n\nfunction initTransition<D>({\n  operation,\n  interactionType,\n  itemsLayout,\n  draggableItem,\n  draggableRect,\n  collisionIds,\n}: InitAction<D>): TransitionState<D> {\n  const transition: Transition<D> = {\n    operation,\n    interactionType,\n    itemsLayout,\n    layoutEngine: new LayoutEngine(itemsLayout),\n    insertionDirection: null,\n    draggableItem,\n    draggableRect,\n    acquiredItem: null,\n    collisionIds: new Set(),\n    layoutShift: null,\n    path: [],\n  };\n\n  const placeholdersLayout = getLayoutPlaceholders(transition);\n\n  const layoutItem = itemsLayout.items.find((it) => it.id === draggableItem.id);\n\n  let path: Position[] = [];\n  if (interactionType === \"pointer\" || operation === \"insert\") {\n    const collisionRect = getHoveredRect(collisionIds, placeholdersLayout.items);\n    const appendPath = operation === \"resize\" ? appendResizePath : appendMovePath;\n    path = layoutItem ? appendPath([], collisionRect) : [];\n  } else if (layoutItem) {\n    path =\n      operation === \"resize\"\n        ? [new Position({ x: layoutItem.x + layoutItem.width, y: layoutItem.y + layoutItem.height })]\n        : [new Position({ x: layoutItem.x, y: layoutItem.y })];\n  }\n\n  return {\n    transition: { ...transition, path },\n    removeTransition: null,\n    announcement: layoutItem ? { type: \"dnd-started\", item: draggableItem, operation } : null,\n  };\n}\n\nfunction initRemoveTransition<D>({ items, removedItem, itemsLayout }: InitRemoveAction<D>): TransitionState<D> {\n  const layoutShift = new LayoutEngine(itemsLayout).remove(removedItem.id);\n  const removeTransition: RemoveTransition<D> = { items, removedItem, layoutShift };\n  return { transition: null, removeTransition, announcement: null };\n}\n\nfunction submitTransition<D>(state: TransitionState<D>): TransitionState<D> {\n  const { transition, removeTransition } = state;\n\n  if (removeTransition) {\n    const disturbed = new Set(removeTransition.layoutShift.moves.map((move) => move.itemId));\n    disturbed.delete(removeTransition.removedItem.id);\n    return {\n      transition: null,\n      removeTransition: null,\n      announcement: { type: \"item-removed\", item: removeTransition.removedItem, disturbed },\n    };\n  }\n\n  if (!transition) {\n    throw new Error(\"Invariant violation: no transition.\");\n  }\n\n  const { operation, itemsLayout, draggableItem: item, acquiredItem } = transition;\n  const itemBelongsToBoard = item.id === acquiredItem?.id || itemsLayout.items.some((it) => it.id === item.id);\n\n  return transition.layoutShift?.conflicts.length === 0\n    ? {\n        transition: null,\n        removeTransition: null,\n        announcement: itemBelongsToBoard ? { type: \"dnd-committed\", item, operation } : null,\n      }\n    : {\n        transition: null,\n        removeTransition: null,\n        announcement: itemBelongsToBoard ? { type: \"dnd-discarded\", item, operation } : null,\n      };\n}\n\nfunction discardTransition<D>(state: TransitionState<D>): TransitionState<D> {\n  const { transition, removeTransition } = state;\n\n  if (removeTransition) {\n    throw new Error(\"Can't discard remove transition.\");\n  }\n\n  if (!transition) {\n    throw new Error(\"Invariant violation: no transition.\");\n  }\n\n  const { operation, itemsLayout, draggableItem: item, acquiredItem } = transition;\n  const itemBelongsToBoard = item.id === acquiredItem?.id || itemsLayout.items.some((it) => it.id === item.id);\n\n  return {\n    transition: null,\n    removeTransition: null,\n    announcement: itemBelongsToBoard ? { type: \"dnd-discarded\", item, operation } : null,\n  };\n}\n\nfunction updateTransitionWithPointerEvent<D>(\n  state: TransitionState<D>,\n  { collisionIds, positionOffset, draggableRect }: UpdateWithPointerAction,\n): TransitionState<D> {\n  const { transition } = state;\n\n  if (!transition) {\n    throw new Error(\"Invariant violation: no transition.\");\n  }\n\n  const layout = transition.layoutShift?.next ?? transition.itemsLayout;\n  const layoutItem = layout.items.find((it) => it.id === transition.draggableItem.id);\n  const itemWidth = layoutItem ? layoutItem.width : getDefaultColumnSpan(transition.draggableItem, layout.columns);\n  const itemHeight = layoutItem ? layoutItem.height : getDefaultRowSpan(transition.draggableItem);\n  const itemSize = itemWidth * itemHeight;\n\n  const isOutOfBoundaries =\n    transition.operation !== \"resize\" ? collisionIds.length < itemSize : collisionIds.length === 0;\n\n  if (isOutOfBoundaries) {\n    return {\n      transition: {\n        ...transition,\n        draggableRect,\n        collisionIds: new Set(),\n        layoutShift: null,\n        insertionDirection: null,\n      },\n      removeTransition: null,\n      announcement: null,\n    };\n  }\n\n  const placeholdersLayout = getLayoutPlaceholders(transition);\n  const collisionRect = getHoveredRect(collisionIds, placeholdersLayout.items);\n  const appendPath = transition.operation === \"resize\" ? appendResizePath : appendMovePath;\n  const path = appendPath(transition.path, collisionRect);\n\n  const insertionDirection = transition.insertionDirection ?? getInsertionDirection(positionOffset);\n  const layoutShift = getLayoutShift(transition, path, insertionDirection);\n\n  return {\n    transition: {\n      ...transition,\n      draggableRect,\n      collisionIds: new Set(collisionIds),\n      layoutShift,\n      path,\n      insertionDirection,\n    },\n    removeTransition: null,\n    announcement: null,\n  };\n}\n\nfunction updateTransitionWithKeyboardEvent<D>(\n  state: TransitionState<D>,\n  { direction }: UpdateWithKeyboardAction,\n  { isRtl }: { isRtl: () => boolean },\n): TransitionState<D> {\n  const { transition } = state;\n\n  if (!transition) {\n    throw new Error(\"Invariant violation: no transition.\");\n  }\n\n  const updateManualItemTransition = (transition: Transition<D>, direction: Direction): TransitionState<D> => {\n    const xDelta = direction === \"left\" ? -1 : direction === \"right\" ? 1 : 0;\n    const yDelta = direction === \"up\" ? -1 : direction === \"down\" ? 1 : 0;\n    const lastPosition = transition.path[transition.path.length - 1];\n    const nextPosition = new Position({ x: lastPosition.x + xDelta, y: lastPosition.y + yDelta });\n    const nextPath = [...transition.path, nextPosition];\n\n    // Check resizing below min size.\n    const layout = transition.layoutShift?.next ?? transition.itemsLayout;\n    const layoutItem = layout.items.find((it) => it.id === transition.draggableItem.id);\n    const minWidth = getMinColumnSpan(transition.draggableItem, transition.itemsLayout.columns);\n    const minHeight = getMinRowSpan(transition.draggableItem);\n    if (\n      transition.operation === \"resize\" &&\n      layoutItem &&\n      (layoutItem.width + xDelta < minWidth || layoutItem.height + yDelta < minHeight)\n    ) {\n      return state;\n    }\n\n    try {\n      const layoutShift = getLayoutShift(transition, nextPath);\n      const nextTransition = { ...transition, layoutShift, path: nextPath };\n      return {\n        transition: nextTransition,\n        removeTransition: null,\n        announcement: createOperationAnnouncement(nextTransition, direction),\n      };\n    } catch (e) {\n      // Can't create next layout because the next path is out of bounds.\n      return state;\n    }\n  };\n\n  switch (direction) {\n    case \"left\":\n      return updateManualItemTransition(transition, !isRtl() ? \"left\" : \"right\");\n    case \"right\":\n      return updateManualItemTransition(transition, !isRtl() ? \"right\" : \"left\");\n    case \"up\":\n      return updateManualItemTransition(transition, \"up\");\n    case \"down\":\n      return updateManualItemTransition(transition, \"down\");\n  }\n}\n\nfunction acquireTransitionItem<D>(\n  state: TransitionState<D>,\n  { position, layoutElement, acquiredItemElement }: AcquireItemAction,\n): TransitionState<D> {\n  const { transition } = state;\n\n  if (!transition) {\n    throw new Error(\"Invariant violation: no transition.\");\n  }\n\n  const { columns } = transition.itemsLayout;\n\n  const layoutRect = getLogicalBoundingClientRect(layoutElement);\n  const itemRect = transition.draggableRect;\n  const coordinatesX = itemRect.left - layoutRect.insetInlineStart;\n  const offset = new Coordinates({ x: coordinatesX, y: itemRect.top - layoutRect.insetBlockStart });\n  const insertionDirection = getInsertionDirection(offset);\n\n  // Update original insertion position if the item can't fit into the layout by width.\n  const width = getDefaultColumnSpan(transition.draggableItem, columns);\n  position = new Position({ x: Math.min(columns - width, position.x), y: position.y });\n\n  const path = [...transition.path, position];\n\n  const layoutShift = getLayoutShift(transition, path, insertionDirection);\n\n  // The columnOffset, columnSpan and rowSpan are of no use as of being overridden by the layout shift.\n  const acquiredItem = { ...transition.draggableItem, columnOffset: 0, columnSpan: 1, rowSpan: 1 };\n\n  const nextTransition: Transition<D> = {\n    ...transition,\n    collisionIds: new Set(),\n    layoutShift,\n    path,\n    acquiredItem,\n    acquiredItemElement,\n  };\n  return {\n    transition: nextTransition,\n    removeTransition: null,\n    announcement: createOperationAnnouncement(nextTransition, null),\n  };\n}\n"]}