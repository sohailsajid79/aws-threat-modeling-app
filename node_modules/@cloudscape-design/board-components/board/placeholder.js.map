{"version":3,"file":"placeholder.js","sourceRoot":"","sources":["../../../src/board/placeholder.tsx"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAO,EAAE,MAAM,EAAE,MAAM,OAAO,CAAC;AAC/B,OAAO,IAAI,MAAM,MAAM,CAAC;AAExB,OAAO,EAAE,YAAY,EAAE,MAAM,uCAAuC,CAAC;AAGrE,OAAO,EAAE,oBAAoB,EAAE,iBAAiB,EAAE,MAAM,0BAA0B,CAAC;AAEnF,OAAO,MAAM,MAAM,iBAAiB,CAAC;AAWrC,MAAM,CAAC,OAAO,UAAU,WAAW,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,WAAW,EAAE,OAAO,EAAoB;IACvF,MAAM,GAAG,GAAG,MAAM,CAAiB,IAAI,CAAC,CAAC;IAEzC,MAAM,iBAAiB,GAAG;QACxB,KAAK,EAAE,CAAC,IAAsC,EAAE,IAAwC,EAAE,EAAE;;YAC1F,MAAM,KAAK,GAAG,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,KAAK,mCAAI,oBAAoB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;YACjE,MAAM,MAAM,GAAG,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,MAAM,mCAAI,iBAAiB,CAAC,IAAI,CAAC,CAAC;YACvD,OAAO;gBACL,KAAK,EAAE,WAAW,CAAC,QAAQ,CAAC,KAAK,CAAC;gBAClC,MAAM,EAAE,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC;aACtC,CAAC;QACJ,CAAC;KACF,CAAC;IAEF,YAAY,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,OAAO,EAAE,iBAAiB,EAAE,UAAU,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,OAAQ,EAAE,CAAC,CAAC;IAEzF,OAAO,cAAK,GAAG,EAAE,GAAG,EAAE,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,MAAM,CAAC,gBAAgB,KAAK,EAAE,CAAC,CAAC,GAAI,CAAC;AACjG,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useRef } from \"react\";\nimport clsx from \"clsx\";\n\nimport { useDroppable } from \"../internal/dnd-controller/controller\";\nimport { GridContext } from \"../internal/grid/interfaces\";\nimport { BoardItemDefinitionBase } from \"../internal/interfaces\";\nimport { getDefaultColumnSpan, getDefaultRowSpan } from \"../internal/utils/layout\";\n\nimport styles from \"./styles.css.js\";\n\nexport type PlaceholderState = \"default\" | \"active\" | \"hover\";\n\nexport interface PlaceholderProps {\n  id: string;\n  state: PlaceholderState;\n  gridContext: GridContext;\n  columns: number;\n}\n\nexport default function Placeholder({ id, state, gridContext, columns }: PlaceholderProps) {\n  const ref = useRef<HTMLDivElement>(null);\n\n  const dropTargetContext = {\n    scale: (item: BoardItemDefinitionBase<unknown>, size?: { width: number; height: number }) => {\n      const width = size?.width ?? getDefaultColumnSpan(item, columns);\n      const height = size?.height ?? getDefaultRowSpan(item);\n      return {\n        width: gridContext.getWidth(width),\n        height: gridContext.getHeight(height),\n      };\n    },\n  };\n\n  useDroppable({ itemId: id, context: dropTargetContext, getElement: () => ref.current! });\n\n  return <div ref={ref} className={clsx(styles.placeholder, styles[`placeholder--${state}`])} />;\n}\n"]}