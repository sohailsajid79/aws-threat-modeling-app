// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import { createCustomEvent } from "../../internal/utils/events";
import { transformItems } from "../../internal/utils/layout";
export function createItemsChangeEvent(items, layoutShift) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const insertTarget = (_b = (_a = layoutShift.moves.find((move) => move.type === "INSERT")) === null || _a === void 0 ? void 0 : _a.itemId) !== null && _b !== void 0 ? _b : null;
    const moveTarget = (_d = (_c = layoutShift.moves.find((move) => move.type === "MOVE")) === null || _c === void 0 ? void 0 : _c.itemId) !== null && _d !== void 0 ? _d : null;
    const removeTarget = (_f = (_e = layoutShift.moves.find((move) => move.type === "REMOVE")) === null || _e === void 0 ? void 0 : _e.itemId) !== null && _f !== void 0 ? _f : null;
    const resizeTarget = (_h = (_g = layoutShift.moves.find((move) => move.type === "RESIZE")) === null || _g === void 0 ? void 0 : _g.itemId) !== null && _h !== void 0 ? _h : null;
    const newItems = transformItems(items, layoutShift.next, resizeTarget !== null && resizeTarget !== void 0 ? resizeTarget : insertTarget);
    return createCustomEvent({
        items: newItems,
        addedItem: newItems.find((it) => it.id === insertTarget),
        removedItem: items.find((it) => it.id === removeTarget),
        resizedItem: newItems.find((it) => it.id === resizeTarget),
        movedItem: !insertTarget ? newItems.find((it) => it.id === moveTarget) : undefined,
    });
}
//# sourceMappingURL=events.js.map