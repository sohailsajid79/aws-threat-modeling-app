{"version":3,"file":"layout.js","sourceRoot":"","sources":["../../../../src/board/utils/layout.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Direction } from \"../../internal/interfaces\";\nimport { LayoutShift } from \"../../internal/layout-engine/interfaces\";\nimport { Coordinates } from \"../../internal/utils/coordinates\";\nimport { createPlaceholdersLayout, getDefaultColumnSpan, getDefaultRowSpan } from \"../../internal/utils/layout\";\nimport { Position } from \"../../internal/utils/position\";\nimport { Transition } from \"../interfaces\";\nimport { normalizeInsertionPath } from \"./path\";\n\nexport function getLayoutColumns<D>(transition: Transition<D>) {\n  return transition.itemsLayout.columns;\n}\n\n// The rows can be overridden during transition to create more drop targets at the bottom.\nexport function getLayoutRows<D>(transition: Transition<D>) {\n  const layout = transition.layoutShift?.next ?? transition.itemsLayout;\n\n  const layoutItem = layout.items.find((it) => it.id === transition.draggableItem.id);\n  const itemHeight = layoutItem?.height ?? getDefaultRowSpan(transition.draggableItem);\n  // Add extra row for resize when already at the bottom.\n  if (transition.operation === \"resize\") {\n    return Math.max(layout.rows, layoutItem ? layoutItem.y + layoutItem.height + 1 : 0);\n  }\n  // Add extra row(s) for reorder/insert based on item's height.\n  else {\n    return Math.max(layout.rows, transition.itemsLayout.rows + itemHeight);\n  }\n}\n\nexport function getLayoutPlaceholders<D>(transition: Transition<D>) {\n  const rows = getLayoutRows(transition);\n  const columns = getLayoutColumns(transition);\n  return createPlaceholdersLayout(rows, columns);\n}\n\n/**\n * Retrieves direction from where the inserting item comes.\n */\nexport function getInsertionDirection(cursorOffset: Coordinates): Direction {\n  if (cursorOffset.x < 0) {\n    return \"right\";\n  }\n  if (cursorOffset.x > 0) {\n    return \"left\";\n  }\n  if (cursorOffset.y < 0) {\n    return \"down\";\n  }\n  if (cursorOffset.y > 0) {\n    return \"up\";\n  }\n  return \"right\";\n}\n\n/**\n * Applies transition operation (reorder/move/insert) and retrieves an object that describes the updated\n * layout and the moves to be made including and not including items float to top.\n *\n * The layout shift w/o refloat is used for rendering and w/ refloat is used for live announcements.\n */\nexport function getLayoutShift<D>(\n  transition: Transition<D>,\n  path: readonly Position[],\n  insertionDirection?: Direction,\n): null | LayoutShift {\n  if (path.length === 0) {\n    return null;\n  }\n\n  const width = getDefaultColumnSpan(transition.draggableItem, getLayoutColumns(transition));\n  const height = getDefaultRowSpan(transition.draggableItem);\n  const rows = getLayoutRows(transition);\n  const columns = getLayoutColumns(transition);\n\n  switch (transition.operation) {\n    case \"resize\":\n      return transition.layoutEngine.resize({ itemId: transition.draggableItem.id, path });\n    case \"reorder\":\n      return transition.layoutEngine.move({ itemId: transition.draggableItem.id, path });\n    case \"insert\":\n      return transition.layoutEngine.insert({\n        itemId: transition.draggableItem.id,\n        width,\n        height,\n        path: normalizeInsertionPath(path, insertionDirection ?? \"right\", columns, rows),\n      });\n  }\n}\n"]}