/**
 * Creates a mapping of between items and transforms to be applied while in transition.
 */
export function createTransforms(grid, moves, gridContext) {
    const transforms = {};
    for (const move of moves) {
        const item = grid.items.find((prev) => prev.id === move.itemId);
        if (move.type === "REMOVE") {
            transforms[move.itemId] = { type: "remove" };
        }
        else if (item) {
            transforms[item.id] = {
                type: "move",
                x: gridContext.getColOffset(move.x - item.x),
                y: gridContext.getRowOffset(move.y - item.y),
                width: gridContext.getWidth(move.width),
                height: gridContext.getHeight(move.height),
            };
        }
    }
    return transforms;
}
//# sourceMappingURL=create-transforms.js.map