import { KeyboardEvent, PointerEvent as ReactPointerEvent, ReactNode, RefObject } from "react";
import { DropTargetContext } from "../dnd-controller/controller";
import { BoardItemDefinitionBase, Direction, Transform } from "../interfaces";
export interface ItemContainerRef {
    focusDragHandle(): void;
}
interface ItemContextType {
    isActive: boolean;
    dragHandle: {
        ref: RefObject<HTMLButtonElement>;
        onPointerDown(event: ReactPointerEvent): void;
        onKeyDown(event: KeyboardEvent): void;
        isActive: boolean;
    };
    resizeHandle: null | {
        onPointerDown(event: ReactPointerEvent): void;
        onKeyDown(event: KeyboardEvent): void;
        isActive: boolean;
    };
}
export declare const ItemContext: import("react").Context<ItemContextType | null>;
export declare function useItemContext(): ItemContextType;
/**
 * Defines item's parameters and its relation with the layout.
 *
 * `item` - the unique board item base object to be used in d&d context.
 * `placed` - specifies if the item already belongs to the board.
 * `acquired` - specifies if the item is essentially a copy temporarily acquired by a droppable but not submitted yet.
 * `inTransition` - specifies if the item is currently being moved.
 * `transform` - specifies if the item's position needs to be altered.
 * `getItemSize` - item size getter that takes droppable context as argument.
 * `onKeyMove` - a callback that fires when arrow keys are pressed in drag- or resize handle.
 */
export interface ItemContainerProps {
    item: BoardItemDefinitionBase<unknown>;
    placed: boolean;
    acquired: boolean;
    inTransition: boolean;
    transform: Transform | undefined;
    getItemSize: (context: null | DropTargetContext) => {
        width: number;
        minWidth: number;
        maxWidth: number;
        height: number;
        minHeight: number;
        maxHeight: number;
    };
    onKeyMove?(direction: Direction): void;
    children: (hasDropTarget: boolean) => ReactNode;
    isRtl: () => boolean;
}
export declare const ItemContainer: import("react").ForwardRefExoticComponent<ItemContainerProps & import("react").RefAttributes<ItemContainerRef>>;
export {};
