{"version":3,"file":"generators.js","sourceRoot":"","sources":["../../../../src/internal/debug-tools/generators.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Direction, GridLayout, GridLayoutItem } from \"../interfaces\";\nimport { InsertCommand, MoveCommand, ResizeCommand } from \"../layout-engine/interfaces\";\nimport { Position } from \"../utils/position\";\nimport { toMatrix } from \".\";\n\nexport type GenerateMoveType = \"any\" | \"vertical\" | \"horizontal\";\n\nexport interface GenerateGridOptions {\n  width?: number;\n  totalItems?: number;\n  averageItemWidth?: number;\n  averageItemHeight?: number;\n}\n\nexport interface GenerateGridResizeOptions {\n  maxWidthIncrement?: number;\n  maxWidthDecrement?: number;\n  maxHeightIncrement?: number;\n  maxHeightDecrement?: number;\n}\n\nexport interface GenerateGridInsertOptions {\n  maxWidth?: number;\n  maxHeight?: number;\n}\n\nconst LETTER_INDICES = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\nexport function generateGrid(options?: GenerateGridOptions): GridLayout {\n  const width = options?.width ?? 6;\n  const totalItems = options?.totalItems ?? 20;\n  const averageItemWidth = options?.averageItemWidth ?? 1.44;\n  const averageItemHeight = options?.averageItemHeight ?? 1.44;\n\n  const allowance = {\n    horizontal: Math.floor(totalItems * (averageItemWidth - 1)),\n    vertical: Math.floor(totalItems * (averageItemHeight - 1)),\n  };\n\n  const items: GridLayoutItem[] = [...Array(totalItems)].map((_, index) => ({\n    id: getGridItemId(index),\n    width: 1,\n    height: 1,\n    y: 0,\n    x: 0,\n  }));\n\n  let selectedAllowance: \"horizontal\" | \"vertical\" = \"horizontal\";\n  while (allowance.horizontal > 0 || allowance.vertical > 0) {\n    if (allowance.horizontal === 0) {\n      selectedAllowance = \"vertical\";\n    } else if (allowance.vertical === 0) {\n      selectedAllowance = \"horizontal\";\n    } else {\n      selectedAllowance = selectedAllowance === \"horizontal\" ? \"vertical\" : \"horizontal\";\n    }\n\n    const index = getRandomIndex(items);\n\n    if (selectedAllowance === \"horizontal\") {\n      items[index].width = Math.min(width - items[index].x, items[index].width + 1);\n      for (let i = 0; i < items[index].height; i++) {\n        allowance.horizontal--;\n      }\n    } else {\n      items[index].height++;\n      for (let i = 0; i < items[index].width; i++) {\n        allowance.vertical--;\n      }\n    }\n  }\n\n  const grid: string[][] = [];\n\n  for (const item of items) {\n    item.x = getRandomOffset(width, item.width);\n\n    for (let y = 0; y < grid.length; y++) {\n      for (let x = item.x; x < item.x + item.width; x++) {\n        if (grid[y][x].trim()) {\n          item.y = y + 1;\n          break;\n        }\n      }\n    }\n\n    for (let y = item.y; y < item.y + item.height; y++) {\n      while (grid.length <= y) {\n        grid.push([...Array(width)].map(() => \" \"));\n      }\n\n      for (let x = item.x; x < item.x + item.width; x++) {\n        grid[y][x] = item.id;\n      }\n    }\n  }\n\n  items.sort((a, b) => (b.y - a.y === 0 ? b.x - a.x : b.y - a.y));\n\n  return { items, columns: width, rows: grid.length };\n}\n\nexport function generateMove(grid: GridLayout, type: GenerateMoveType = \"any\"): MoveCommand {\n  const textGrid = toMatrix(grid);\n  const moveTarget = grid.items[getRandomIndex(grid.items)];\n\n  const affordance: [Direction, number][] = [];\n\n  if (moveTarget.y > 0) {\n    affordance.push([\"up\", moveTarget.y]);\n  }\n  if (moveTarget.y + moveTarget.height <= textGrid.length) {\n    affordance.push([\"down\", 1 + textGrid.length - (moveTarget.y + moveTarget.height)]);\n  }\n  if (moveTarget.x > 0) {\n    affordance.push([\"left\", moveTarget.x]);\n  }\n  if (moveTarget.x + moveTarget.width < textGrid[0].length) {\n    affordance.push([\"right\", textGrid[0].length - (moveTarget.x + moveTarget.width)]);\n  }\n\n  function swap(type: \"vertical\" | \"horizontal\" | \"any\"): Position {\n    const verticalAffordance = affordance.filter(([direction]) => direction === \"up\" || direction === \"down\");\n    const horizontalAffordance = affordance.filter(([direction]) => direction === \"left\" || direction === \"right\");\n    const chosenAffordance =\n      type === \"any\" ? affordance : type === \"vertical\" ? verticalAffordance : horizontalAffordance;\n\n    if (chosenAffordance.length === 0) {\n      throw new Error(\"Move is not possible\");\n    }\n\n    const [direction, maxDistance] = chosenAffordance[getRandomIndex(chosenAffordance)];\n    const distance = 1 + Math.floor(Math.random() * maxDistance);\n    switch (direction) {\n      case \"up\":\n        return new Position({ y: moveTarget.y - distance, x: moveTarget.x });\n      case \"down\":\n        return new Position({ y: moveTarget.y + distance, x: moveTarget.x });\n      case \"left\":\n        return new Position({ y: moveTarget.y, x: moveTarget.x - distance });\n      case \"right\":\n        return new Position({ y: moveTarget.y, x: moveTarget.x + distance });\n    }\n  }\n\n  function replace(): Position {\n    const verticalAffordance = affordance.filter(([direction]) => direction === \"up\" || direction === \"down\");\n    const horizontalAffordance = affordance.filter(([direction]) => direction === \"left\" || direction === \"right\");\n\n    if (horizontalAffordance.length === 0) {\n      throw new Error(\"Move is not possible\");\n    }\n\n    const [directionVertical, maxDistanceVertical] = verticalAffordance[getRandomIndex(verticalAffordance)];\n    const distanceVertical = 1 + Math.floor(Math.random() * maxDistanceVertical);\n\n    const [directionHorizontal, maxDistanceHorizontal] = horizontalAffordance[getRandomIndex(horizontalAffordance)];\n    const distanceHorizontal = 1 + Math.floor(Math.random() * maxDistanceHorizontal);\n\n    switch (`${directionVertical}-${directionHorizontal}`) {\n      case \"top-left\":\n        return new Position({\n          y: moveTarget.y - distanceVertical,\n          x: moveTarget.x - distanceHorizontal,\n        });\n      case \"top-right\":\n        return new Position({\n          y: moveTarget.y - distanceVertical,\n          x: moveTarget.x + distanceHorizontal,\n        });\n      case \"bottom-left\":\n        return new Position({\n          y: moveTarget.y + distanceVertical,\n          x: moveTarget.x - distanceHorizontal,\n        });\n      case \"bottom-right\":\n        return new Position({\n          y: moveTarget.y + distanceVertical,\n          x: moveTarget.x + distanceHorizontal,\n        });\n    }\n\n    return new Position({ y: moveTarget.y, x: moveTarget.x });\n  }\n\n  const position = (() => {\n    let repeatCounter = 0;\n    while (repeatCounter < 10) {\n      try {\n        repeatCounter++;\n\n        switch (type) {\n          case \"vertical\":\n            return swap(\"vertical\");\n          case \"horizontal\":\n            return swap(\"horizontal\");\n          case \"any\":\n            return Math.random() > 0.5 ? swap(\"any\") : replace();\n        }\n      } catch {\n        // noop\n      }\n    }\n\n    throw new Error(\"Move is not possible\");\n  })();\n\n  const path = generateRandomPath(new Position({ y: moveTarget.y, x: moveTarget.x }), position);\n\n  return { itemId: moveTarget.id, path };\n}\n\nexport function generateResize(grid: GridLayout, options?: GenerateGridResizeOptions): ResizeCommand {\n  const maxWidthIncrement = options?.maxHeightIncrement ?? grid.columns - 1;\n  const maxWidthDecrement = options?.maxHeightDecrement ?? grid.columns - 1;\n  const maxHeightIncrement = options?.maxHeightIncrement ?? Math.floor((grid.items.length - 1) % 2) + 1;\n  const maxHeightDecrement = options?.maxHeightDecrement ?? Math.floor((grid.items.length - 1) % 2) + 1;\n\n  const resizeTarget = grid.items[getRandomIndex(grid.items)];\n\n  let maxWidthDelta = getRandomDirection();\n  if (maxWidthDelta === 1 && maxWidthIncrement) {\n    maxWidthDelta *= maxWidthIncrement;\n  } else if (maxWidthDelta === -1 && maxWidthDecrement) {\n    maxWidthDelta *= maxWidthDecrement;\n  } else if (maxWidthIncrement) {\n    maxWidthDelta = maxWidthIncrement;\n  } else {\n    maxWidthDelta = -maxWidthDecrement;\n  }\n  if (resizeTarget.width + maxWidthDelta < 1) {\n    maxWidthDelta = -(resizeTarget.width - 1);\n  } else if (resizeTarget.x + resizeTarget.width + maxWidthDelta >= grid.columns) {\n    maxWidthDelta = grid.columns - (resizeTarget.x + resizeTarget.width);\n  }\n  const widthDelta = Math.sign(maxWidthDelta) * getRandomInt(0, Math.abs(maxWidthDelta) + 1);\n\n  let maxHeightDelta = getRandomDirection();\n  if (maxHeightDelta === 1 && maxHeightIncrement) {\n    maxHeightDelta *= maxHeightIncrement;\n  } else if (maxHeightDelta === -1 && maxHeightDecrement) {\n    maxHeightDelta *= maxHeightDecrement;\n  } else if (maxHeightIncrement) {\n    maxHeightDelta = maxHeightIncrement;\n  } else {\n    maxHeightDelta = -maxHeightDecrement;\n  }\n  if (resizeTarget.height + maxHeightDelta < 1) {\n    maxHeightDelta = -(resizeTarget.height - 1);\n  }\n  const heightDelta = Math.sign(maxHeightDelta) * getRandomInt(0, Math.abs(maxHeightDelta) + 1);\n\n  const path = generateRandomPath(\n    new Position({ x: resizeTarget.x + resizeTarget.width, y: resizeTarget.y + resizeTarget.height }),\n    new Position({\n      x: resizeTarget.x + resizeTarget.width + widthDelta,\n      y: resizeTarget.y + resizeTarget.height + heightDelta,\n    }),\n  );\n\n  return { itemId: resizeTarget.id, path };\n}\n\nexport function generateInsert(grid: GridLayout, insertId = \"X\", options?: GenerateGridInsertOptions): InsertCommand {\n  const maxWidth = options?.maxWidth ?? grid.columns;\n  const maxHeight = options?.maxHeight ?? Math.floor(grid.items.length / 2) + 1;\n\n  const textGrid = toMatrix(grid);\n\n  const y = getRandomIndex(textGrid);\n  const x = getRandomIndex(textGrid[y]);\n  const width = getRandomInt(1, Math.max(1, maxWidth + 1 - x));\n  const height = getRandomInt(1, maxHeight + 1);\n\n  return { itemId: insertId, width, height, path: [new Position({ x, y })] };\n}\n\nexport function generateRandomPath(from: Position, to: Position): Position[] {\n  const path = [];\n  const directions: [\"y\", \"x\"] = [\"y\", \"x\"];\n\n  const last = { ...from };\n  while (last.y !== to.y || last.x !== to.x) {\n    let direction = directions[getRandomIndex(directions)];\n    if (last.y === to.y) {\n      direction = \"x\";\n    }\n    if (last.x === to.x) {\n      direction = \"y\";\n    }\n    last[direction] += to[direction] > from[direction] ? 1 : -1;\n    path.push({ ...last });\n  }\n\n  return path;\n}\n\nfunction getRandomIndex(array: readonly unknown[]): number {\n  return Math.floor(Math.random() * array.length);\n}\n\nfunction getRandomOffset(gridWidth: number, itemWidth: number): number {\n  return Math.floor(Math.random() * (1 + gridWidth - itemWidth));\n}\n\nfunction getRandomDirection(): number {\n  return Math.random() > 0.5 ? 1 : -1;\n}\n\nfunction getRandomInt(from: number, until: number): number {\n  return Math.floor(Math.random() * (until - from)) + from;\n}\n\nfunction getGridItemId(index: number): string {\n  const letter = LETTER_INDICES[index % LETTER_INDICES.length];\n  const letterIndex = Math.floor(index / LETTER_INDICES.length);\n  return letter + (letterIndex === 0 ? \"\" : letterIndex);\n}\n"]}