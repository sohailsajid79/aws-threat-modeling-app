{"version":3,"file":"layout.js","sourceRoot":"","sources":["../../../../src/internal/utils/layout.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { MIN_COL_SPAN, MIN_ROW_SPAN } from \"../constants\";\nimport { BoardItemDefinition, GridLayout, GridLayoutItem, ItemId } from \"../interfaces\";\n\ntype Item<D = unknown> = BoardItemDefinition<D>;\n\n/**\n * The function produces grid layout from board items and given number of columns.\n * The positional data is taken from the items when available or the default placement is used otherwise.\n */\nexport function interpretItems(items: readonly Item[], columns: number): GridLayout {\n  const layoutItems: GridLayoutItem[] = [];\n  const columnHeights = Array(columns).fill(0);\n\n  function getColumnSpan(item: Item): number {\n    const minColumnSpan = getMinColumnSpan(item, columns);\n    const columnSpan = item.columnSpan ?? getDefaultColumnSpan(item, columns);\n    return Math.min(columns, Math.max(minColumnSpan, columnSpan));\n  }\n\n  function getRowSpan(item: Item): number {\n    const minRowSpan = getMinRowSpan(item);\n    const rowSpan = item.rowSpan ?? getDefaultRowSpan(item);\n    return Math.max(minRowSpan, rowSpan);\n  }\n\n  function getColumnOffset(item: Item, currentOffset: number): number {\n    const columnSpan = getColumnSpan(item);\n    const rowSpan = getRowSpan(item);\n    const columnOffset = item.columnOffset?.[columns] ?? findOptimalColumnOffset(currentOffset, columnSpan, rowSpan);\n    return columnOffset + columnSpan <= columns ? columnOffset : 0;\n  }\n\n  function findOptimalColumnOffset(currentColumnOffset: number, columnSpan: number, rowSpan: number): number {\n    for (let colOffset = currentColumnOffset; colOffset + columnSpan <= columns; colOffset++) {\n      if (getRowOffset(colOffset, columnSpan) + rowSpan <= getRowOffset(0, columns)) {\n        return colOffset;\n      }\n    }\n    for (let colOffset = 0; colOffset + columnSpan <= columns; colOffset++) {\n      if (getRowOffset(colOffset, columnSpan) + rowSpan <= getRowOffset(0, columns)) {\n        return colOffset;\n      }\n    }\n    return currentColumnOffset;\n  }\n\n  function getRowOffset(columnOffset: number, columnSpan: number) {\n    let rowOffset = 0;\n    for (let col = columnOffset; col < columnOffset + columnSpan; col++) {\n      rowOffset = Math.max(rowOffset, columnHeights[col]);\n    }\n    return rowOffset;\n  }\n\n  for (let index = 0, columnOffset = 0, rowOffset = 0; index < items.length; index++, rowOffset = 0) {\n    const columnSpan = getColumnSpan(items[index]);\n    const rowSpan = getRowSpan(items[index]);\n    columnOffset = getColumnOffset(items[index], columnOffset);\n    rowOffset = getRowOffset(columnOffset, columnSpan);\n\n    layoutItems.push({ id: items[index].id, width: columnSpan, height: rowSpan, x: columnOffset, y: rowOffset });\n\n    for (let col = columnOffset; col < columnOffset + columnSpan; col++) {\n      columnHeights[col] = rowOffset + rowSpan;\n    }\n\n    columnOffset += columnSpan;\n  }\n\n  layoutItems.sort(itemComparator);\n\n  return { items: layoutItems, columns, rows: getRowOffset(0, columns) };\n}\n\n/**\n * The function produces new items from the current state and updated grid layout.\n * The positional data for the given number of columns is preserved as is while the other layouts are partially invalidated.\n */\nexport function transformItems<D>(\n  sourceItems: readonly BoardItemDefinition<D>[],\n  gridLayout: GridLayout,\n  resizeTarget: null | ItemId,\n): readonly BoardItemDefinition<D>[] {\n  const itemById = new Map(sourceItems.map((item) => [item.id, item]));\n  const getItem = (itemId: ItemId) => {\n    const item = itemById.get(itemId);\n    if (!item) {\n      throw new Error(\"Invariant violation: no matching source item found.\");\n    }\n    return item;\n  };\n\n  const sortedLayout = gridLayout.items.slice().sort(itemComparator);\n\n  const items: BoardItemDefinition<D>[] = [];\n\n  let changeFromIndex = sortedLayout.findIndex(({ id }, index) => id !== sourceItems[index].id || id === resizeTarget);\n  changeFromIndex = changeFromIndex !== -1 ? changeFromIndex : sortedLayout.length;\n\n  for (let index = 0; index < sortedLayout.length; index++) {\n    const { id, x, width, height } = sortedLayout[index];\n\n    const item = { ...getItem(id) };\n\n    if (index >= changeFromIndex) {\n      item.columnOffset = undefined;\n    }\n    item.columnOffset = { ...item.columnOffset, [gridLayout.columns]: x };\n\n    if (item.id === resizeTarget) {\n      item.columnSpan = width;\n      item.rowSpan = height;\n    }\n\n    items.push(item);\n  }\n\n  return items;\n}\n\nexport function createPlaceholdersLayout(rows: number, columns: number): GridLayout {\n  const layoutItems: GridLayoutItem[] = [];\n\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < columns; col++) {\n      layoutItems.push({ id: `awsui-placeholder-${row}-${col}`, x: col, y: row, width: 1, height: 1 });\n    }\n  }\n\n  return { items: layoutItems, columns, rows };\n}\n\nexport function getMinColumnSpan(item: Item, columns: number) {\n  return Math.min(columns, Math.max(MIN_COL_SPAN, item.definition?.minColumnSpan ?? 0));\n}\n\nexport function getDefaultColumnSpan(item: Item, columns: number) {\n  return Math.min(columns, Math.max(getMinColumnSpan(item, columns), item.definition?.defaultColumnSpan ?? 0));\n}\n\nexport function getMinRowSpan(item: Item) {\n  return Math.max(MIN_ROW_SPAN, item.definition?.minRowSpan ?? 0);\n}\n\nexport function getDefaultRowSpan(item: Item) {\n  return Math.max(getMinRowSpan(item), item.definition?.defaultRowSpan ?? 0);\n}\n\nfunction itemComparator(a: GridLayoutItem, b: GridLayoutItem) {\n  if (a.y !== b.y) {\n    return a.y > b.y ? 1 : -1;\n  }\n  return a.x > b.x ? 1 : -1;\n}\n"]}