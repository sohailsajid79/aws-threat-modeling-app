import { BoardItemDefinition, GridLayout, ItemId } from "../interfaces";
type Item<D = unknown> = BoardItemDefinition<D>;
/**
 * The function produces grid layout from board items and given number of columns.
 * The positional data is taken from the items when available or the default placement is used otherwise.
 */
export declare function interpretItems(items: readonly Item[], columns: number): GridLayout;
/**
 * The function produces new items from the current state and updated grid layout.
 * The positional data for the given number of columns is preserved as is while the other layouts are partially invalidated.
 */
export declare function transformItems<D>(sourceItems: readonly BoardItemDefinition<D>[], gridLayout: GridLayout, resizeTarget: null | ItemId): readonly BoardItemDefinition<D>[];
export declare function createPlaceholdersLayout(rows: number, columns: number): GridLayout;
export declare function getMinColumnSpan(item: Item, columns: number): number;
export declare function getDefaultColumnSpan(item: Item, columns: number): number;
export declare function getMinRowSpan(item: Item): number;
export declare function getDefaultRowSpan(item: Item): number;
export {};
