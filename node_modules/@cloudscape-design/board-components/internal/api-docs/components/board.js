module.exports = {
  "name": "Board",
  "releaseStatus": "stable",
  "regions": [
    {
      "name": "empty",
      "description": "Rendered when the `items` array is empty.\nWhen items are loading the slot can be used to render the loading indicator.\n",
      "isDefault": false
    }
  ],
  "functions": [],
  "properties": [
    {
      "name": "i18nStrings",
      "type": "BoardProps.I18nStrings<D>",
      "inlineType": {
        "name": "BoardProps.I18nStrings",
        "type": "object",
        "properties": [
          {
            "name": "liveAnnouncementDndCommitted",
            "type": "(operationType: BoardProps.DndOperationType) => string",
            "optional": false
          },
          {
            "name": "liveAnnouncementDndDiscarded",
            "type": "(operationType: BoardProps.DndOperationType) => string",
            "optional": false
          },
          {
            "name": "liveAnnouncementDndItemInserted",
            "type": "(operation: BoardProps.DndInsertState<D>) => string",
            "optional": false
          },
          {
            "name": "liveAnnouncementDndItemReordered",
            "type": "(operation: BoardProps.DndReorderState<D>) => string",
            "optional": false
          },
          {
            "name": "liveAnnouncementDndItemResized",
            "type": "(operation: BoardProps.DndResizeState<D>) => string",
            "optional": false
          },
          {
            "name": "liveAnnouncementDndStarted",
            "type": "(operationType: BoardProps.DndOperationType) => string",
            "optional": false
          },
          {
            "name": "liveAnnouncementItemRemoved",
            "type": "(operation: BoardProps.ItemRemovedState<D>) => string",
            "optional": false
          },
          {
            "name": "navigationAriaDescription",
            "type": "string",
            "optional": true
          },
          {
            "name": "navigationAriaLabel",
            "type": "string",
            "optional": false
          },
          {
            "name": "navigationItemAriaLabel",
            "type": "(item: BoardProps.Item<D> | null) => string",
            "optional": false
          }
        ]
      },
      "optional": false,
      "description": "An object containing all the necessary localized strings required by the component.\nLive announcements:\n* `liveAnnouncementDndStarted(BoardProps.DndOperationType): string` - the function to create a live announcement string to indicate start of DnD (\"reorder\", \"resize\" or \"insert\").\n* `liveAnnouncementDndItemReordered(BoardProps.DndReorderState<D>): string` - the function to create a live announcement string to indicate when DnD reorder is performed.\n* `liveAnnouncementDndItemResized(BoardProps.DndResizeState<D>): string` - the function to create a live announcement string to indicate when DnD resize is performed.\n* `liveAnnouncementDndItemInserted(BoardProps.DndInsertState<D>): string` - the function to create a live announcement string to indicate when DnD insert is performed.\n* `liveAnnouncementDndDiscarded(BoardProps.DndOperationType): string` - the function to create a live announcement string to indicate commit of DnD (\"reorder\", \"resize\" or \"insert\").\n* `liveAnnouncementDndCommitted(BoardProps.DndOperationType): string` - the function to create a live announcement string to indicate discard of DnD (\"reorder\", \"resize\" or \"insert\").\n* `liveAnnouncementItemRemoved(BoardProps.OperationStateRemove<D>): string` - the function to create a live announcement string to indicate when item is removed.\n"
    },
    {
      "name": "items",
      "type": "ReadonlyArray<BoardProps.Item<D>>",
      "optional": false,
      "description": "Specifies the items displayed in the board. Each item includes its position on the board and\noptional data. The content of an item is controlled by the `renderItem` property.\nThe BoardProps.Item includes:\n* `id` (string) - the unique item identifier. The IDs of any two items in a page must be different.\n* `definition.minRowSpan` (number, optional) - the minimal number of rows the item is allowed to take. It can't be less than two. Defaults to two.\n* `definition.minColumnSpan` (number, optional) - the minimal number of columns the item is allowed to take. It can't be less than one. Defaults to one.\n* `definition.defaultRowSpan` (number, optional) - the number or rows the item will take when inserted to the board. It can't be less than `definition.minRowSpan`.\n* `definition.defaultColumnSpan` (number, optional) - the number or columns the item will take when inserted in the board. It can't be less than `definition.minColumnSpan`.\n* `columnOffset` (mapping, optional) - the item's offset from the first column (per layout) starting from zero. The value is updated by `onItemsChange` after an update is committed.\n* `rowSpan` (number, optional) - the item's vertical size starting from two. The value is updated by `onItemsChange` after an update is committed.\n* `columnSpan` (number, optional) - the item's horizontal size starting from one. The value is updated by `onItemsChange` after an update is committed.\n* `data` (D) - optional item data which can include the specific configurations of an item, such as its title.\n"
    },
    {
      "name": "renderItem",
      "type": "(item: BoardProps.Item<D>, actions: BoardProps.ItemActions) => Element",
      "optional": false,
      "description": "Specifies a function to render content for board items. The return value must include board item component.\nThe function takes the item and its associated actions (BoardProps.ItemActions) that include:\n* `removeItem(): void` - the callback to issue the item's removal. Once issued, the `onItemsChange` will fire to update the state.\n"
    }
  ],
  "events": [
    {
      "name": "onItemsChange",
      "description": "Called when a user modifies the size or position of board items.\nThe change detail has the following properties:\n\n* `items`: (readonly Item<D>[]) - the updated items array.\n* `addedItem`: (Item<D>, optional) - the item that was added as part of the update, if applicable.\n* `removedItem`: (Item<D>, optional) - the item that was removed as part of the update, if applicable.\n* `resizedItem`: (Item<D>, optional) - the item that was resized as part of the update, if applicable.\n* `movedItem`: (Item<D>, optional) - the item that was moved as part of the update, if applicable.\n",
      "cancelable": false,
      "detailType": "BoardProps.ItemsChangeDetail<D>",
      "detailInlineType": {
        "name": "BoardProps.ItemsChangeDetail",
        "type": "object",
        "properties": [
          {
            "name": "addedItem",
            "type": "BoardProps.Item<D>",
            "optional": true
          },
          {
            "name": "items",
            "type": "ReadonlyArray<BoardProps.Item<D>>",
            "optional": false
          },
          {
            "name": "movedItem",
            "type": "BoardProps.Item<D>",
            "optional": true
          },
          {
            "name": "removedItem",
            "type": "BoardProps.Item<D>",
            "optional": true
          },
          {
            "name": "resizedItem",
            "type": "BoardProps.Item<D>",
            "optional": true
          }
        ]
      }
    }
  ]
};