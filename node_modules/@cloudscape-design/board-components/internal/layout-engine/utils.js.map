{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../src/internal/layout-engine/utils.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Direction, GridLayoutItem } from \"../interfaces\";\nimport { Position } from \"../utils/position\";\nimport { CommittedMove } from \"./interfaces\";\n\nexport interface Rect {\n  left: number;\n  right: number;\n  top: number;\n  bottom: number;\n}\n\nexport function sortGridItems(items: GridLayoutItem[]): readonly GridLayoutItem[] {\n  return items.sort((a, b) => (b.y - a.y === 0 ? b.x - a.x : b.y - a.y));\n}\n\nexport function normalizeMovePath(origin: Position, path: readonly Position[]): readonly Position[] {\n  path = normalizePathOrigin(origin, path);\n\n  // Store last visited indexes per position.\n  const positionToLastIndex = new Map<string, number>();\n  for (let index = 0; index < path.length; index++) {\n    positionToLastIndex.set(`${path[index].x}:${path[index].y}`, index);\n  }\n\n  // Compose path from last visited indices only.\n  const normalizedPath: Position[] = [];\n  let index = 0;\n  while (index < path.length) {\n    const lastVisitedIndex = positionToLastIndex.get(`${path[index].x}:${path[index].y}`)!;\n    normalizedPath.push(path[lastVisitedIndex]);\n    index = lastVisitedIndex + 1;\n  }\n\n  return normalizePathSteps(origin, normalizedPath);\n}\n\nexport function normalizeResizePath(origin: Position, path: readonly Position[]): readonly Position[] {\n  path = normalizePathOrigin(origin, path);\n\n  if (path.length === 0) {\n    return [];\n  }\n\n  const normalizedPath: Position[] = [path[path.length - 1]];\n  for (let stepIndex = path.length - 2; stepIndex >= 0; stepIndex--) {\n    const prev = normalizedPath[normalizedPath.length - 1];\n    const current = path[stepIndex];\n    if (current.x < prev.x || current.y < prev.y) {\n      normalizedPath.push(current);\n    }\n  }\n  normalizedPath.reverse();\n\n  return normalizePathSteps(origin, normalizedPath);\n}\n\nexport function createMove(\n  type: CommittedMove[\"type\"],\n  item: GridLayoutItem,\n  next: Position,\n  score = 0,\n): CommittedMove {\n  const distanceX = type === \"RESIZE\" ? next.x - item.width : next.x - item.x;\n  const distanceY = type === \"RESIZE\" ? next.y - item.height : next.y - item.y;\n  return {\n    type,\n    itemId: item.id,\n    x: type !== \"RESIZE\" ? next.x : item.x,\n    y: type !== \"RESIZE\" ? next.y : item.y,\n    width: type === \"RESIZE\" ? next.x : item.width,\n    height: type === \"RESIZE\" ? next.y : item.height,\n    direction: distanceX > 0 ? \"right\" : distanceX < 0 ? \"left\" : distanceY < 0 ? \"up\" : \"down\",\n    distanceX,\n    distanceY,\n    score,\n  };\n}\n\nexport function getMoveOriginalRect(move: CommittedMove): Rect {\n  return {\n    left: move.x - move.distanceX,\n    right: move.x - move.distanceX + move.width - 1,\n    top: move.y - move.distanceY,\n    bottom: move.y - move.distanceY + move.height - 1,\n  };\n}\n\nexport function getMoveRect(move: CommittedMove): Rect {\n  return {\n    left: move.x,\n    right: move.x + move.width - 1,\n    top: move.y,\n    bottom: move.y + move.height - 1,\n  };\n}\n\nexport function checkItemsIntersection(i1: GridLayoutItem, i2: GridLayoutItem): boolean {\n  if (i1.id === i2.id) {\n    return false;\n  }\n  return (\n    i1.x <= i2.x + i2.width - 1 &&\n    i2.x <= i1.x + i1.width - 1 &&\n    i1.y <= i2.y + i2.height - 1 &&\n    i2.y <= i1.y + i1.height - 1\n  );\n}\n\nexport function checkOppositeDirections(d1: Direction, d2: Direction): boolean {\n  return (\n    (d1 === \"down\" && d2 === \"up\") ||\n    (d1 === \"up\" && d2 === \"down\") ||\n    (d1 === \"left\" && d2 === \"right\") ||\n    (d1 === \"right\" && d2 === \"left\")\n  );\n}\n\n// Removes path prefixes that return to the original location.\nfunction normalizePathOrigin(origin: Position, path: readonly Position[]): readonly Position[] {\n  let lastOriginIndex = -1;\n  for (let i = 0; i < path.length; i++) {\n    if (path[i].x === origin.x && path[i].y === origin.y) {\n      lastOriginIndex = i;\n    }\n  }\n  return path.slice(lastOriginIndex + 1);\n}\n\n// Ensures path only includes single-length steps.\nfunction normalizePathSteps(origin: Position, path: readonly Position[]): readonly Position[] {\n  const normalizedPath: Position[] = [];\n\n  let prevX = origin.x;\n  let prevY = origin.y;\n\n  for (const step of path) {\n    const vx = Math.sign(step.x - prevX);\n    const vy = Math.sign(step.y - prevY);\n\n    for (let x = prevX, y = prevY; x !== step.x || y !== step.y; ) {\n      if (x !== step.x) {\n        x += vx;\n      } else {\n        y += vy;\n      }\n      normalizedPath.push(new Position({ x, y }));\n    }\n\n    prevX = step.x;\n    prevY = step.y;\n  }\n\n  return normalizedPath;\n}\n"]}