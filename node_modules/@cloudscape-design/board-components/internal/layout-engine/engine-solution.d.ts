import { Conflicts } from "./engine-state";
import { LayoutEngineGrid, ReadonlyLayoutEngineGrid } from "./grid";
import { CommittedMove } from "./interfaces";
export type MoveSolution = [state: MoveSolutionState, nextMove: CommittedMove];
export declare class MoveSolutionState {
    grid: LayoutEngineGrid;
    moves: CommittedMove[];
    moveIndex: number;
    conflicts: null | Conflicts;
    overlaps: Map<string, string>;
    score: number;
    constructor(grid: ReadonlyLayoutEngineGrid, moves: readonly CommittedMove[], conflicts: null | Conflicts);
    static clone({ grid, moves, moveIndex, conflicts, overlaps, score }: MoveSolutionState): {
        grid: LayoutEngineGrid;
        moves: CommittedMove[];
        moveIndex: number;
        conflicts: Conflicts | null;
        overlaps: Map<string, string>;
        score: number;
    };
}
/**
 * Given a solution state finds a set of all possible moves each resolving a particular overlap.
 */
export declare function findNextSolutions(state: MoveSolutionState): MoveSolution[];
