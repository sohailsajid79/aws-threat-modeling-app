import { GridLayout, ItemId } from "../interfaces";
import { LayoutEngineCacheNode } from "./engine-cache";
import { InsertCommand, LayoutShift, MoveCommand, ResizeCommand } from "./interfaces";
/**
 * Layout engine is an abstraction to compute effects of user actions (move, resize, insert, remove).
 * The engine is initialized with the board state and then takes a command to calculate the respective layout shift.
 * Use a single engine instance until the user commits their move to take advantage of the internal cache.
 * Once user move is committed the layout engine needs to be re-initialized with the updated layout state.
 */
export declare class LayoutEngine {
    private layout;
    private cache;
    constructor(layout: GridLayout);
    move(moveCommand: MoveCommand, cache?: LayoutEngineCacheNode): LayoutShift;
    resize(resizeCommand: ResizeCommand): LayoutShift;
    insert({ itemId, width, height, path: [position, ...movePath] }: InsertCommand): LayoutShift;
    remove(itemId: ItemId): LayoutShift;
    private getLayoutShift;
    private validateMovePath;
    private validateResizePath;
}
