{"version":3,"file":"grid.js","sourceRoot":"","sources":["../../../../src/internal/layout-engine/grid.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { GridLayoutItem, ItemId } from \"../interfaces\";\nimport { checkItemsIntersection } from \"./utils\";\n\nexport class ReadonlyLayoutEngineGrid {\n  protected _width: number;\n  protected _height: number;\n  protected _items = new Array<GridLayoutItem>();\n  protected _itemsMap = new Map<ItemId, GridLayoutItem>();\n\n  static clone(grid: ReadonlyLayoutEngineGrid): LayoutEngineGrid {\n    const clone = new LayoutEngineGrid([], 0);\n    clone._width = grid._width;\n    clone._height = grid._height;\n    for (const item of grid._items) {\n      const itemClone = { ...item };\n      clone._itemsMap.set(itemClone.id, itemClone);\n      clone._items.push(itemClone);\n    }\n    return clone;\n  }\n\n  constructor(items: readonly GridLayoutItem[], columns: number) {\n    this._width = columns;\n    this._height = 0;\n\n    for (const item of items) {\n      if (item.x < 0 || item.y < 0 || item.x + item.width > this._width) {\n        throw new Error(\"Invalid grid: items outside the boundaries.\");\n      }\n      if (item.width < 1 || item.height < 1) {\n        throw new Error(\"Invalid grid: items of invalid size.\");\n      }\n\n      for (const gridItem of this._items) {\n        if (checkItemsIntersection(gridItem, item)) {\n          throw new Error(\"Invalid grid: items overlap.\");\n        }\n      }\n\n      const itemClone = { ...item };\n      this._itemsMap.set(itemClone.id, itemClone);\n      this._items.push(itemClone);\n      this._height = Math.max(this.height, itemClone.y + itemClone.height);\n    }\n  }\n\n  get width(): number {\n    return this._width;\n  }\n\n  get height(): number {\n    return this._height;\n  }\n\n  get items(): GridLayoutItem[] {\n    return this._items;\n  }\n\n  getItem(itemId: ItemId): GridLayoutItem {\n    const item = this._itemsMap.get(itemId);\n    if (!item) {\n      throw new Error(`Item with id \"${itemId}\" not found in the grid.`);\n    }\n    return item;\n  }\n\n  getOverlaps(item: GridLayoutItem): GridLayoutItem[] {\n    return this._items.filter((gridItem) => checkItemsIntersection(gridItem, item));\n  }\n}\n\nexport class LayoutEngineGrid extends ReadonlyLayoutEngineGrid {\n  move(itemId: ItemId, x: number, y: number): void {\n    const item = this.getItem(itemId);\n    item.x = x;\n    item.y = y;\n    this._height = Math.max(this.height, item.y + item.height);\n  }\n\n  resize(itemId: ItemId, width: number, height: number): void {\n    const item = this.getItem(itemId);\n    item.width = width;\n    item.height = height;\n    this._height = Math.max(this.height, item.y + item.height);\n  }\n\n  insert(item: GridLayoutItem): void {\n    if (item.x < 0 || item.y < 0 || item.x + item.width > this._width) {\n      throw new Error(\"Inserting item is outside the boundaries.\");\n    }\n    if (item.width < 1 || item.height < 1) {\n      throw new Error(\"Inserting item has invalid size.\");\n    }\n    const itemClone = { ...item };\n    this._itemsMap.set(itemClone.id, itemClone);\n    this._items.push(itemClone);\n    this._height = Math.max(this.height, item.y + item.height);\n  }\n\n  remove(itemId: ItemId): void {\n    this._itemsMap.delete(itemId);\n    this._items = this._items.filter((item) => item.id !== itemId);\n  }\n}\n"]}