import { jsx as _jsx } from "react/jsx-runtime";
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import { Children, useRef } from "react";
import clsx from "clsx";
import { useContainerQuery } from "@cloudscape-design/component-toolkit";
import { useDensityMode } from "@cloudscape-design/component-toolkit/internal";
import { useMergeRefs } from "../utils/use-merge-refs";
import { zipTwoArrays } from "../utils/zip-arrays";
import GridItem from "./item";
import styles from "./styles.css.js";
/* Matches grid gap in CSS. */
const GRID_GAP = {
    comfortable: 20,
    compact: 16,
};
/* Matches grid-auto-rows in CSS. */
const ROWSPAN_HEIGHT = {
    comfortable: 96,
    compact: 76,
};
export default function Grid({ layout, children: render, columns, isRtl }) {
    const gridRef = useRef(null);
    const [gridWidth, containerQueryRef] = useContainerQuery((entry) => entry.contentBoxWidth, []);
    const densityMode = useDensityMode(gridRef);
    const gridGap = GRID_GAP[densityMode];
    const rowspanHeight = ROWSPAN_HEIGHT[densityMode];
    // The below getters translate relative grid units into size/offset values in pixels.
    const getWidth = (colspan) => {
        colspan = Math.min(columns, colspan);
        const cellWidth = ((gridWidth || 0) - (columns - 1) * gridGap) / columns;
        return colspan * cellWidth + (colspan - 1) * gridGap;
    };
    const getHeight = (rowspan) => rowspan * rowspanHeight + (rowspan - 1) * gridGap;
    const getColOffset = (x) => {
        const offset = getWidth(x) + gridGap;
        return !(isRtl === null || isRtl === void 0 ? void 0 : isRtl()) ? offset : -offset;
    };
    const getRowOffset = (y) => getHeight(y) + gridGap;
    const gridContext = { getWidth, getHeight, getColOffset, getRowOffset };
    const children = render === null || render === void 0 ? void 0 : render(gridContext);
    const zipped = zipTwoArrays(layout, Children.toArray(children));
    const ref = useMergeRefs(gridRef, containerQueryRef);
    return (_jsx("div", { ref: ref, className: clsx(styles.grid, styles[`grid-${densityMode}`], styles[`columns-${columns}`]), children: zipped.map(([item, children]) => (_jsx(GridItem, { item: item, children: children }, item.id))) }));
}
//# sourceMappingURL=grid.js.map