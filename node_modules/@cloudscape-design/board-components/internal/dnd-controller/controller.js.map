{"version":3,"file":"controller.js","sourceRoot":"","sources":["../../../../src/internal/dnd-controller/controller.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ReactNode, useEffect } from \"react\";\n\nimport { useStableCallback } from \"@cloudscape-design/component-toolkit/internal\";\n\nimport { BoardItemDefinitionBase, ItemId, Rect } from \"../interfaces\";\nimport { Coordinates } from \"../utils/coordinates\";\nimport { EventEmitter } from \"./event-emitter\";\nimport { getHoveredDroppables } from \"./get-hovered-droppables\";\n\ntype Item = BoardItemDefinitionBase<unknown>;\n\nexport type Operation = \"reorder\" | \"resize\" | \"insert\";\n\nexport type InteractionType = \"pointer\" | \"keyboard\";\n\n/**\n * Represents the relations between droppables and draggables.\n *\n * The `scale` function transforms draggable's width/height in relative units\n * to the absolute width/height in pixels the droppable expects.\n */\nexport interface DropTargetContext {\n  scale: (item: Item, size?: { width: number; height: number }) => { width: number; height: number };\n}\n\nexport interface DragAndDropData {\n  operation: Operation;\n  interactionType: InteractionType;\n  draggableItem: Item;\n  collisionRect: Rect;\n  positionOffset: Coordinates;\n  coordinates: Coordinates;\n  collisionIds: ItemId[];\n  dropTarget: null | DropTargetContext;\n}\n\nexport interface Droppable {\n  element: HTMLElement;\n  context: DropTargetContext;\n}\n\nexport interface AcquireData {\n  droppableId: ItemId;\n  draggableItem: Item;\n  renderAcquiredItem: () => ReactNode;\n}\n\nexport interface DragAndDropEvents {\n  start: (data: DragAndDropData) => void;\n  update: (data: DragAndDropData) => void;\n  submit: () => void;\n  discard: () => void;\n  acquire: (data: AcquireData) => void;\n}\n\ninterface Transition {\n  operation: Operation;\n  interactionType: InteractionType;\n  draggableItem: Item;\n  getCollisionRect: (operation: Operation, coordinates: Coordinates, dropTarget: null | DropTargetContext) => Rect;\n  startCoordinates: Coordinates;\n}\n\nclass DragAndDropController extends EventEmitter<DragAndDropEvents> {\n  private droppables = new Map<ItemId, Droppable>();\n  private transition: null | Transition = null;\n\n  /**\n   * Inits a drag transition and issues a \"start\" event.\n   *\n   * The method overrides the previous transition if exists (w/o a cancellation event)!\n   */\n  public start(transition: Transition) {\n    this.transition = { ...transition };\n    this.emit(\"start\", this.getDragAndDropData(transition.startCoordinates));\n  }\n\n  /**\n   * Updates current transition with given coordinates and issues an \"update\" event.\n   */\n  public update(coordinates: Coordinates) {\n    this.emit(\"update\", this.getDragAndDropData(coordinates));\n  }\n\n  /**\n   * Removes transition and issues a \"submit\" event.\n   */\n  public submit() {\n    this.emit(\"submit\");\n    this.transition = null;\n  }\n\n  /**\n   * Removes transition and issues a \"discard\" event.\n   */\n  public discard() {\n    this.emit(\"discard\");\n    this.transition = null;\n  }\n\n  /**\n   * Issues an \"acquire\" event to notify the current transition draggable is acquired by the given droppable.\n   */\n  public acquire(droppableId: ItemId, renderAcquiredItem: () => ReactNode) {\n    if (!this.transition) {\n      throw new Error(\"Invariant violation: no transition present for acquire.\");\n    }\n    this.emit(\"acquire\", { droppableId, draggableItem: this.transition.draggableItem, renderAcquiredItem });\n  }\n\n  /**\n   * Registers a droppable used for collisions check, acquire, and dropTarget provision.\n   */\n  public addDroppable(id: ItemId, context: DropTargetContext, element: HTMLElement) {\n    this.droppables.set(id, { element, context });\n  }\n\n  /**\n   * Un-registers the droppable - use it when component unmounts.\n   */\n  public removeDroppable(id: ItemId) {\n    this.droppables.delete(id);\n  }\n\n  /**\n   * Retrieves all registered droppables to run a manual match against.\n   */\n  public getDroppables() {\n    return [...this.droppables.entries()];\n  }\n\n  private getDragAndDropData(coordinates: Coordinates): DragAndDropData {\n    if (!this.transition) {\n      throw new Error(\"Invariant violation: no transition present for interaction.\");\n    }\n    const positionOffset = Coordinates.cursorOffset(coordinates, this.transition.startCoordinates);\n    const collisionRect = this.getCollisionRect(this.transition, coordinates);\n    const { collisionIds, dropTarget } = this.getCollisions(collisionRect);\n    return { ...this.transition, positionOffset, coordinates, collisionRect, collisionIds, dropTarget };\n  }\n\n  private getCollisionRect(transition: Transition, coordinates: Coordinates) {\n    const originalCollisionRect = transition.getCollisionRect(transition.operation, coordinates, null);\n    const { dropTarget } = this.getCollisions(originalCollisionRect);\n    return transition.getCollisionRect(transition.operation, coordinates, dropTarget);\n  }\n\n  private getCollisions(collisionRect: Rect) {\n    const droppableEntries = [...this.droppables.entries()];\n    const droppableElements: [ItemId, HTMLElement][] = droppableEntries.map(([id, entry]) => [id, entry.element]);\n    const collisionIds = getHoveredDroppables(collisionRect, droppableElements);\n    if (collisionIds.length === 0) {\n      return { collisionIds, dropTarget: null };\n    }\n\n    const matchedDroppable = droppableEntries.find(([id]) => id === collisionIds[0]);\n    if (!matchedDroppable) {\n      throw new Error(\"Invariant violation: no droppable matches collision.\");\n    }\n    return { collisionIds, dropTarget: matchedDroppable[1].context };\n  }\n}\n\n// Controller is a singleton and is shared between all d&d elements.\nconst controller = new DragAndDropController();\n\nexport function useDragSubscription<K extends keyof DragAndDropEvents>(event: K, handler: DragAndDropEvents[K]) {\n  const stableHandler = useStableCallback(handler);\n  useEffect(() => controller.on(event, stableHandler), [event, stableHandler]);\n}\n\nexport function useDraggable({\n  draggableItem,\n  getCollisionRect,\n}: {\n  draggableItem: Item;\n  getCollisionRect: (operation: Operation, coordinates: Coordinates, dropTarget: null | DropTargetContext) => Rect;\n}) {\n  return {\n    start(operation: Operation, interactionType: InteractionType, startCoordinates: Coordinates) {\n      controller.start({ operation, interactionType, draggableItem, getCollisionRect, startCoordinates });\n    },\n    updateTransition(coordinates: Coordinates) {\n      controller.update(coordinates);\n    },\n    submitTransition() {\n      controller.submit();\n    },\n    discardTransition() {\n      controller.discard();\n    },\n    acquire(droppableId: ItemId, renderAcquiredItem: () => ReactNode) {\n      controller.acquire(droppableId, renderAcquiredItem);\n    },\n    getDroppables() {\n      return controller.getDroppables();\n    },\n  };\n}\n\nexport function useDroppable({\n  itemId,\n  context,\n  getElement,\n}: {\n  itemId: ItemId;\n  context: DropTargetContext;\n  getElement: () => HTMLElement;\n}) {\n  useEffect(() => {\n    controller.addDroppable(itemId, context, getElement());\n    return () => controller.removeDroppable(itemId);\n  }, [itemId, context, getElement]);\n}\n"]}