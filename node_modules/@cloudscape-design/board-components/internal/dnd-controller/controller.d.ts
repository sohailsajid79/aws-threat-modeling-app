import { ReactNode } from "react";
import { BoardItemDefinitionBase, ItemId, Rect } from "../interfaces";
import { Coordinates } from "../utils/coordinates";
type Item = BoardItemDefinitionBase<unknown>;
export type Operation = "reorder" | "resize" | "insert";
export type InteractionType = "pointer" | "keyboard";
/**
 * Represents the relations between droppables and draggables.
 *
 * The `scale` function transforms draggable's width/height in relative units
 * to the absolute width/height in pixels the droppable expects.
 */
export interface DropTargetContext {
    scale: (item: Item, size?: {
        width: number;
        height: number;
    }) => {
        width: number;
        height: number;
    };
}
export interface DragAndDropData {
    operation: Operation;
    interactionType: InteractionType;
    draggableItem: Item;
    collisionRect: Rect;
    positionOffset: Coordinates;
    coordinates: Coordinates;
    collisionIds: ItemId[];
    dropTarget: null | DropTargetContext;
}
export interface Droppable {
    element: HTMLElement;
    context: DropTargetContext;
}
export interface AcquireData {
    droppableId: ItemId;
    draggableItem: Item;
    renderAcquiredItem: () => ReactNode;
}
export interface DragAndDropEvents {
    start: (data: DragAndDropData) => void;
    update: (data: DragAndDropData) => void;
    submit: () => void;
    discard: () => void;
    acquire: (data: AcquireData) => void;
}
export declare function useDragSubscription<K extends keyof DragAndDropEvents>(event: K, handler: DragAndDropEvents[K]): void;
export declare function useDraggable({ draggableItem, getCollisionRect, }: {
    draggableItem: Item;
    getCollisionRect: (operation: Operation, coordinates: Coordinates, dropTarget: null | DropTargetContext) => Rect;
}): {
    start(operation: Operation, interactionType: InteractionType, startCoordinates: Coordinates): void;
    updateTransition(coordinates: Coordinates): void;
    submitTransition(): void;
    discardTransition(): void;
    acquire(droppableId: ItemId, renderAcquiredItem: () => ReactNode): void;
    getDroppables(): [string, Droppable][];
};
export declare function useDroppable({ itemId, context, getElement, }: {
    itemId: ItemId;
    context: DropTargetContext;
    getElement: () => HTMLElement;
}): void;
export {};
