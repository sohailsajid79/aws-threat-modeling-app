{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/breadcrumb-group/utils.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { BreadcrumbGroupProps } from './interfaces';\n\nexport const getEventDetail = <T extends BreadcrumbGroupProps.Item>(item: T) => ({\n  item,\n  text: item.text,\n  href: item.href,\n});\n\nconst defaultMinBreadcrumbWidth = 150;\nconst ellipsisWidth = 50;\n\nexport const getItemsDisplayProperties = (itemsWidths: Array<number>, navWidth: number | null) => {\n  const minBreadcrumbWidth = optimizeMinWidth(itemsWidths, navWidth);\n  const shrinkFactors = itemsWidths.map(width => (width <= minBreadcrumbWidth ? 0 : Math.round(width)));\n  const minWidths = itemsWidths.map(width => (width <= minBreadcrumbWidth ? 0 : minBreadcrumbWidth));\n  const collapsedWidths = itemsWidths.map(width => Math.min(width, minBreadcrumbWidth));\n\n  return {\n    shrinkFactors,\n    minWidths,\n    collapsed: computeNumberOfCollapsedItems(collapsedWidths, navWidth),\n  };\n};\n\nconst computeNumberOfCollapsedItems = (collapsedWidths: Array<number>, navWidth: number | null): number => {\n  if (!navWidth) {\n    return 0;\n  }\n  let collapsed = 0;\n  const itemsCount = collapsedWidths.length;\n  if (itemsCount > 2) {\n    collapsed = itemsCount - 2;\n    let remainingWidth = navWidth - collapsedWidths[0] - collapsedWidths[itemsCount - 1] - ellipsisWidth;\n    let j = 1;\n    while (remainingWidth > 0 && j < itemsCount - 1) {\n      remainingWidth -= collapsedWidths[itemsCount - 1 - j];\n      j++;\n      if (remainingWidth >= 0) {\n        collapsed--;\n      }\n    }\n  }\n  return collapsed;\n};\n\nconst optimizeMinWidth = (itemsWidths: Array<number>, navWidth: number | null): number => {\n  const collapsedWidths = itemsWidths.map(width => Math.min(width, defaultMinBreadcrumbWidth));\n  if (!navWidth) {\n    return defaultMinBreadcrumbWidth;\n  }\n  const itemsCount = collapsedWidths.length;\n  if (itemsCount > 2) {\n    const minCollapsedWidth = collapsedWidths[0] + ellipsisWidth + collapsedWidths[collapsedWidths.length - 1];\n    if (minCollapsedWidth > navWidth) {\n      return (navWidth - ellipsisWidth) / 2;\n    }\n  }\n  if (itemsCount === 2) {\n    const minCollapsedWidth = collapsedWidths[0] + collapsedWidths[1];\n    if (minCollapsedWidth > navWidth) {\n      return navWidth / 2;\n    }\n  }\n  if (itemsCount === 1) {\n    return Math.min(navWidth, collapsedWidths[0]);\n  }\n  return defaultMinBreadcrumbWidth;\n};\n"]}