{"version":3,"file":"bar-series.js","sourceRoot":"","sources":["../../../src/mixed-line-bar-chart/bar-series.tsx"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\n\nimport { ChartScale, NumericChartScale } from '../internal/components/cartesian-chart/scales';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport { ScaleContinuousNumeric, ScaleTime } from '../internal/vendor/d3-scale';\nimport { createOneSideRoundedRectPath } from './create-one-side-rounded-rect-path';\nimport { ChartDataTypes, MixedLineBarChartProps } from './interfaces';\nimport { getKeyValue, matchesX, StackedBarValues } from './utils';\n\nimport styles from './styles.css.js';\n\nexport interface BarSeriesProps<T> {\n  axis: 'x' | 'y';\n\n  series: MixedLineBarChartProps.BarDataSeries<T>;\n\n  color: string;\n  totalSeriesCount: number;\n  seriesIndex: number;\n\n  xScale: ChartScale;\n  yScale: NumericChartScale;\n\n  plotSize: number;\n  chartAreaClipPath: string;\n\n  highlighted: boolean;\n  dimmed: boolean;\n  highlightedGroupIndex: number | null;\n\n  // Contains values to be used for stacked bars.\n  stackedBarValues?: StackedBarValues;\n\n  isRtl?: boolean;\n}\n\nexport default function BarSeries<T extends ChartDataTypes>({\n  axis,\n  series,\n  color,\n  xScale,\n  yScale,\n  highlighted,\n  dimmed,\n  highlightedGroupIndex,\n  totalSeriesCount,\n  seriesIndex,\n  plotSize,\n  chartAreaClipPath,\n  stackedBarValues,\n  isRtl,\n}: BarSeriesProps<T>) {\n  const isRefresh = useVisualRefresh();\n  const isStacked = !!stackedBarValues;\n  const isVertical = axis === 'x';\n\n  const xCoordinates = (() => {\n    if (series.type !== 'bar' || !xScale.isCategorical()) {\n      return [];\n    }\n\n    const yContinuosScale: ScaleContinuousNumeric<number, number> | ScaleTime<number, number> = yScale.d3Scale;\n    const xPoints = (series.data as ReadonlyArray<MixedLineBarChartProps.Datum<ChartDataTypes>>).map(\n      ({ x }) => xScale.d3Scale(x) || NaN\n    );\n\n    const zeroY = yScale.d3Scale(0) ?? NaN;\n    const baseY = isFinite(zeroY) ? Math.min(plotSize, zeroY) : plotSize;\n\n    let barWidth = xScale.d3Scale.bandwidth();\n\n    const PADDING = 4;\n    const MINWIDTH = 4;\n\n    if (!isStacked && totalSeriesCount > 1) {\n      // Regular grouped bars\n      barWidth = (barWidth - (totalSeriesCount - 1) * PADDING) / totalSeriesCount;\n      barWidth = Math.max(barWidth, MINWIDTH);\n    }\n\n    return xPoints.map((x, i) => {\n      const d = series.data[i];\n      const key = getKeyValue(d.x);\n      let barX = x;\n      let yValue = d.y;\n      let isRoundedStart = !isStacked;\n      let isRoundedEnd = !isStacked;\n\n      // Stacked bars\n      if (isStacked) {\n        const allXValues = stackedBarValues.get(key) ?? new Map();\n        yValue = allXValues.get(seriesIndex) ?? 0;\n        const allXValuesSorted = Array.from(allXValues.values()).sort((a, b) => a - b);\n        isRoundedStart = yValue === allXValuesSorted[0];\n        isRoundedEnd = yValue === allXValuesSorted[allXValuesSorted.length - 1];\n      }\n      // Regular grouped bars\n      else if (totalSeriesCount > 1) {\n        barX += seriesIndex * (barWidth + PADDING);\n      }\n\n      // Account for negative values growing \"down\" instead of \"up\"\n      yValue = yValue < 0 ? yValue - d.y : yValue;\n\n      return {\n        x: barX,\n        y: yContinuosScale(yValue) ?? NaN,\n        width: barWidth,\n        height: Math.abs((yContinuosScale(d.y) ?? NaN) - baseY),\n        isRoundedStart,\n        isRoundedEnd,\n      };\n    });\n  })();\n\n  const highlightedXValue = highlightedGroupIndex !== null ? xScale.domain[highlightedGroupIndex] : null;\n\n  return (\n    <g\n      aria-label={series.title}\n      clipPath={`url(#${chartAreaClipPath})`}\n      className={clsx(styles.series, styles['series--bar'], {\n        [styles['series--highlighted']]: highlighted,\n        [styles['series--dimmed']]: dimmed,\n      })}\n    >\n      {xCoordinates.map(({ x, y, width, height, isRoundedStart, isRoundedEnd }, i) => {\n        if (!isFinite(x) || !isFinite(height)) {\n          return;\n        }\n\n        // Create margins between stacked series but only when series data is not too small.\n        const baseHeightOffset = isStacked ? 3 : 0;\n        const isSmallBar = height < 4;\n        const heightOffset = isSmallBar ? 0 : baseHeightOffset;\n        const widthOffset = 2;\n\n        const rx = isRefresh ? (isSmallBar ? 2 : 4) : 0;\n        const placement = isVertical\n          ? {\n              x: x + widthOffset / 2,\n              y: y + heightOffset / 2,\n              width: width - widthOffset,\n              height: height - heightOffset,\n            }\n          : {\n              x: y - (!isRtl ? height : 0) + heightOffset / 2,\n              y: x + widthOffset / 2,\n              width: height - heightOffset,\n              height: width - widthOffset,\n            };\n\n        const className = clsx(styles.series__rect, {\n          [styles['series--dimmed']]: highlightedXValue !== null && !matchesX(highlightedXValue, series.data[i].x),\n        });\n        const styleProps = { fill: color, className };\n\n        let side: 'left' | 'right' | 'top' | 'bottom' | 'all' | 'none' = 'none';\n        if (isRoundedStart && isRoundedEnd) {\n          side = 'all';\n        } else if (!isRoundedStart && !isRoundedEnd) {\n          side = 'none';\n        } else if (isVertical) {\n          side = isRoundedStart ? 'bottom' : 'top';\n        } else if (!isRtl) {\n          side = isRoundedStart ? 'left' : 'right';\n        } else {\n          side = isRoundedStart ? 'right' : 'left';\n        }\n\n        if (side === 'all') {\n          return <rect key={i} {...placement} {...styleProps} rx={rx} />;\n        }\n        if (side === 'none') {\n          return <rect key={i} {...placement} {...styleProps} rx={0} />;\n        }\n        return <path key={i} d={createOneSideRoundedRectPath(placement, rx, side)} {...styleProps} />;\n      })}\n    </g>\n  );\n}\n"]}