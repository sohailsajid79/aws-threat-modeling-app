{"version":3,"file":"create-one-side-rounded-rect-path.js","sourceRoot":"","sources":["../../../src/mixed-line-bar-chart/create-one-side-rounded-rect-path.ts"],"names":[],"mappings":"AAAA,kCAAkC;AAClC,uDAAuD;AAEvD,MAAM,UAAU,4BAA4B,CAC1C,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,EAA2D,EAChF,MAAc,EACd,IAAyC;IAEzC,MAAM,WAAW,GAAG;QAClB,EAAE,CAAC,EAAE,CAAC,EAAE;QACR,EAAE,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE;QACnB,EAAE,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE;QAC/B,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE;KACxB,CAAC;IAEF,iCAAiC;IACjC,MAAM,UAAU,GAAG,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;IAElE,IAAI,IAAI,GAAG,EAAE,CAAC;IACd,KAAK,IAAI,CAAC,GAAG,UAAU,EAAE,CAAC,GAAG,UAAU,GAAG,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;QACrE,MAAM,KAAK,GAAG,WAAW,CAAC,CAAC,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC;QAClD,MAAM,GAAG,GAAG,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC;QAEtD,yFAAyF;QACzF,MAAM,CAAC,GAAG,MAAM,IAAI,CAAC,GAAG,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAElH,sEAAsE;QACtE,IAAI,CAAC,KAAK,UAAU,EAAE;YACpB,IAAI,IAAI,IAAI,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC;SAC9E;QACD,0BAA0B;QAC1B,IAAI,CAAC,GAAG,UAAU,EAAE;YAClB,IAAI,IAAI,IAAI,KAAK,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC;SACpG;QACD,wEAAwE;QACxE,IAAI,CAAC,GAAG,UAAU,GAAG,WAAW,CAAC,MAAM,EAAE;YACvC,IAAI,IAAI,IAAI,KAAK,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;SAC9E;KACF;IACD,OAAO,IAAI,GAAG,GAAG,CAAC;AACpB,CAAC","sourcesContent":["/* eslint-disable header/header */\n// Source https://stackoverflow.com/a/65186378/16648714\n\nexport function createOneSideRoundedRectPath(\n  { x, y, width, height }: { x: number; y: number; width: number; height: number },\n  radius: number,\n  side: 'left' | 'right' | 'top' | 'bottom'\n) {\n  const coordinates = [\n    { x, y },\n    { x: x + width, y },\n    { x: x + width, y: y + height },\n    { x: x, y: y + height },\n  ];\n\n  // Starting from the target side.\n  const startIndex = { left: 2, right: 0, top: 3, bottom: 1 }[side];\n\n  let path = '';\n  for (let i = startIndex; i < startIndex + coordinates.length + 1; i++) {\n    const start = coordinates[i % coordinates.length];\n    const end = coordinates[(i + 1) % coordinates.length];\n\n    // Define curvature for the first 3 points to only add rounded corners to the first side.\n    const c = radius && i < startIndex + 3 ? Math.min(radius / Math.hypot(end.x - start.x, end.y - start.y), 0.5) : 0;\n\n    // Insert start point. When c=0 the start point is [start.x, start.y].\n    if (i === startIndex) {\n      path += `M${start.x * (1 - c) + end.x * c},${start.y * (1 - c) + end.y * c}`;\n    }\n    // Insert quadratic curve.\n    if (i > startIndex) {\n      path += `Q${start.x},${start.y} ${start.x * (1 - c) + end.x * c},${start.y * (1 - c) + end.y * c}`;\n    }\n    // Draw line to the end point. When c=0 the end point is [end.x, end.y].\n    if (i < startIndex + coordinates.length) {\n      path += `L${start.x * c + end.x * (1 - c)},${start.y * c + end.y * (1 - c)}`;\n    }\n  }\n  return path + 'Z';\n}\n"]}