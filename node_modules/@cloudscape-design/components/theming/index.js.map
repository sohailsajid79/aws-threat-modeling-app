{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/theming/index.ts"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAO,EACL,UAAU,IAAI,cAAc,EAC5B,uBAAuB,IAAI,2BAA2B,GACvD,MAAM,oCAAoC,CAAC;AAE5C,OAAO,EAAE,MAAM,EAAiB,MAAM,+BAA+B,CAAC;AAYtE,MAAM,UAAU,UAAU,CAAC,EAAE,KAAK,EAAE,WAAW,EAAoB;IACjE,OAAO,cAAc,CAAC;QACpB,QAAQ,EAAE,KAAK;QACf,MAAM;QACN,WAAW;KACZ,CAAC,CAAC;AACL,CAAC;AAOD,MAAM,UAAU,uBAAuB,CAAC,EAAE,KAAK,EAAE,WAAW,EAAiC;IAC3F,OAAO,2BAA2B,CAAC;QACjC,QAAQ,EAAE,KAAK;QACf,MAAM;QACN,WAAW;KACZ,CAAC,CAAC;AACL,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport {\n  applyTheme as coreApplyTheme,\n  generateThemeStylesheet as coreGenerateThemeStylesheet,\n} from '@cloudscape-design/theming-runtime';\n\nimport { preset, TypedOverride } from '../internal/generated/theming';\n\nexport type Theme = TypedOverride;\nexport interface ApplyThemeParams {\n  theme: Theme;\n  baseThemeId?: string;\n}\n\nexport interface ApplyThemeResult {\n  reset: () => void;\n}\n\nexport function applyTheme({ theme, baseThemeId }: ApplyThemeParams): ApplyThemeResult {\n  return coreApplyTheme({\n    override: theme,\n    preset,\n    baseThemeId,\n  });\n}\n\nexport interface GenerateThemeStylesheetParams {\n  theme: Theme;\n  baseThemeId?: string;\n}\n\nexport function generateThemeStylesheet({ theme, baseThemeId }: GenerateThemeStylesheetParams): string {\n  return coreGenerateThemeStylesheet({\n    override: theme,\n    preset,\n    baseThemeId,\n  });\n}\n"]}