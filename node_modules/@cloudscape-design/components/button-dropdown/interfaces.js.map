{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../src/button-dropdown/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\n\nimport { GeneratedAnalyticsMetadataFragment } from '@cloudscape-design/component-toolkit/internal/analytics-metadata';\n\nimport { ButtonProps } from '../button/interfaces';\nimport { IconProps } from '../icon/interfaces';\nimport { BaseComponentProps } from '../internal/base-component';\nimport { ExpandToViewport } from '../internal/components/dropdown/interfaces';\nimport { BaseNavigationDetail, CancelableEventHandler } from '../internal/events';\nimport { InternalBaseComponentProps } from '../internal/hooks/use-base-component';\n\nexport interface ButtonDropdownProps extends BaseComponentProps, ExpandToViewport {\n  /**\n   * Array of objects with a number of supported types.\n   *\n   * The following properties are supported across all types:\n   *\n   * - `type` (string) - The type of the item. Can be `action`, `group`, `checkbox`. Defaults to `action` if `items` undefined and `group` otherwise.\n   * - `id` (string) - allows to identify the item that the user clicked on. Mandatory for individual items, optional for categories.\n   * - `text` (string) - description shown in the menu for this item. Mandatory for individual items, optional for categories.\n   * - `lang` (string) - (Optional) The language of the item, provided as a BCP 47 language tag.\n   * - `disabled` (boolean) - whether the item is disabled. Disabled items are not clickable, but they can be highlighted with the keyboard to make them accessible.\n   * - `disabledReason` (string) - (Optional) Displays text near the `text` property when item is disabled. Use to provide additional context.\n   * - `description` (string) - additional data that will be passed to a `data-description` attribute.\n   * - `ariaLabel` (string) - (Optional) - ARIA label of the item element.\n   *\n   * ### action\n   *\n   * - `href` (string) - (Optional) Defines the target URL of the menu item, turning it into a link.\n   * - `external` (boolean) - Marks a menu item as external by adding an icon after the menu item text. The link will open in a new tab when clicked. Note that this only works when `href` is also provided.\n   * - `externalIconAriaLabel` (string) - Adds an `aria-label` to the external icon.\n   * - `iconName` (string) - (Optional) Specifies the name of the icon, used with the [icon component](/components/icon/).\n   * - `iconAlt` (string) - (Optional) Specifies alternate text for the icon when using `iconUrl`.\n   * - `iconUrl` (string) - (Optional) Specifies the URL of a custom icon.\n   * - `iconSvg` (ReactNode) - (Optional) Custom SVG icon. Equivalent to the `svg` slot of the [icon component](/components/icon/).\n   *\n   * ### checkbox\n   *\n   * When `type` is set to \"checkbox\", the values set to `href`, `external` and `externalIconAriaLabel` will be ignored.\n   *\n   * - `checked` (boolean) - Controls the state of the checkbox item.\n   * - `iconName` (string) - (Optional) Specifies the name of the icon, used with the [icon component](/components/icon/).\n   * - `iconAlt` (string) - (Optional) Specifies alternate text for the icon when using `iconUrl`.\n   * - `iconUrl` (string) - (Optional) Specifies the URL of a custom icon.\n   * - `iconSvg` (ReactNode) - (Optional) Custom SVG icon. Equivalent to the `svg` slot of the [icon component](/components/icon/).\n   *\n   * ### group\n   *\n   * - `items` (ReadonlyArray<Item>) - an array of item objects. Items will be rendered as nested menu items but only for the first nesting level, multi-nesting is not supported.\n   * An item which belongs to nested group has the following properties: `id`, `text`, `disabled`, and `description`.\n   *\n   */\n  items: ReadonlyArray<ButtonDropdownProps.ItemOrGroup>;\n  /**\n   * Determines whether the button dropdown is disabled. Users cannot interact with the control if it's disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Provides a reason why the button dropdown is disabled (only when `disabled` is `true`).\n   * If provided, the disabled button becomes focusable.\n   */\n  disabledReason?: string;\n  /**\n   * Renders the button as being in a loading state. It takes precedence over the `disabled` if both are set to `true`.\n   * It prevents clicks.\n   */\n  loading?: boolean;\n  /**\n   * Specifies the text that screen reader announces when the button dropdown is in a loading state.\n   */\n  loadingText?: string;\n  /** Determines the general styling of the button dropdown.\n   * * `primary` for primary buttons\n   * * `normal` for secondary buttons\n   * * `icon` for icon buttons\n   * * `inline-icon` for icon buttons with no outer padding\n   */\n  variant?: ButtonDropdownProps.Variant;\n  /**\n   * Controls expandability of the item groups.\n   */\n  expandableGroups?: boolean;\n  /**\n   * Adds `aria-label` to the button dropdown trigger.\n   * Use this to provide an accessible name for buttons that don't have visible text.\n   */\n  ariaLabel?: string;\n  /**\n   * Text displayed in the button dropdown trigger.\n   * @displayname text\n   */\n  children?: React.ReactNode;\n  /**\n   * Called when the user clicks on an item, and the item is not disabled.  The event detail object contains the id of the clicked item.\n   */\n  onItemClick?: CancelableEventHandler<ButtonDropdownProps.ItemClickDetails>;\n  /**\n   * Called when the user clicks on an item with the left mouse button without pressing\n   * modifier keys (that is, CTRL, ALT, SHIFT, META), and the item has an `href` set.\n   */\n  onItemFollow?: CancelableEventHandler<ButtonDropdownProps.ItemClickDetails>;\n  /**\n   * A standalone action that is shown prior to the dropdown trigger.\n   * Use it with \"primary\" and \"normal\" variant only.\n   *\n   * Main action properties:\n   * * `text` (string) - Specifies the text shown in the main action.\n   * * `external` (boolean) - Marks the main action as external by adding an icon after the text. The link will open in a new tab when clicked. Note that this only works when `href` is also provided.\n   * * `externalIconAriaLabel` (string) - Adds an ARIA label to the external icon.\n   *\n   * The main action also supports the following properties of the [button](/components/button/?tabId=api) component:\n   * `ariaLabel`, `disabled`, `loading`, `loadingText`, `href`, `target`, `rel`, `download`, `iconAlt`, `iconName`, `iconUrl`, `iconSvg`, `onClick`, `onFollow`.\n   */\n  mainAction?: ButtonDropdownProps.MainAction;\n}\n\nexport namespace ButtonDropdownProps {\n  export type Variant = 'normal' | 'primary' | 'icon' | 'inline-icon';\n  export type ItemType = 'action' | 'group';\n\n  export interface MainAction {\n    text?: string;\n    ariaLabel?: string;\n    onClick?: CancelableEventHandler<ButtonProps.ClickDetail>;\n    onFollow?: CancelableEventHandler<ButtonProps.FollowDetail>;\n    disabled?: boolean;\n    disabledReason?: string;\n    loading?: boolean;\n    loadingText?: string;\n    href?: string;\n    target?: string;\n    rel?: string;\n    download?: boolean | string;\n    external?: boolean;\n    externalIconAriaLabel?: string;\n    iconAlt?: string;\n    iconName?: IconProps.Name;\n    iconUrl?: string;\n    iconSvg?: React.ReactNode;\n  }\n\n  export interface Item {\n    itemType?: ItemType;\n    id: string;\n    text: string;\n    ariaLabel?: string;\n    lang?: string;\n    disabled?: boolean;\n    disabledReason?: string;\n    description?: string;\n    href?: string;\n    external?: boolean;\n    externalIconAriaLabel?: string;\n    iconAlt?: string;\n    iconName?: IconProps.Name;\n    iconUrl?: string;\n    iconSvg?: React.ReactNode;\n  }\n\n  export interface CheckboxItem\n    extends Omit<ButtonDropdownProps.Item, 'href' | 'external' | 'externalIconAriaLabel' | 'itemType'> {\n    itemType: 'checkbox';\n    checked: boolean;\n  }\n\n  export interface ItemGroup extends Omit<Item, 'id' | 'text' | 'itemType'> {\n    itemType?: 'group';\n    id?: string;\n    text?: string;\n    items: Items;\n  }\n\n  export type ItemOrGroup = Item | CheckboxItem | ItemGroup;\n\n  export type Items = ReadonlyArray<ItemOrGroup>;\n\n  export interface ItemClickDetails extends BaseNavigationDetail {\n    id: string;\n    checked?: boolean;\n  }\n\n  export interface Ref {\n    /**\n     * Focuses the underlying native button.\n     */\n    focus(): void;\n  }\n}\n\nexport interface ButtonDropdownSettings {\n  // this means whether action is required to make group expand\n  hasExpandableGroups: boolean;\n  // on smaller screens expandable groups are integrated into parent dropdown\n  // this changes keyboard navigation, highlight and activation behavior for parent dropdown\n  isInRestrictedView?: boolean;\n}\n\nexport interface HighlightProps {\n  targetItem: ButtonDropdownProps.ItemOrGroup | null;\n  isHighlighted: (item: ButtonDropdownProps.ItemOrGroup) => boolean;\n  isKeyboardHighlight: (item: ButtonDropdownProps.ItemOrGroup) => boolean;\n  isExpanded: (group: ButtonDropdownProps.ItemGroup) => boolean;\n  highlightItem: (item: ButtonDropdownProps.ItemOrGroup) => void;\n}\n\nexport type GroupToggle = (item: ButtonDropdownProps.ItemGroup, event: React.SyntheticEvent) => void;\nexport type ItemActivate = (\n  item: ButtonDropdownProps.Item | ButtonDropdownProps.CheckboxItem,\n  event: React.MouseEvent | React.KeyboardEvent\n) => void;\n\nexport interface CategoryProps extends HighlightProps {\n  item: ButtonDropdownProps.ItemGroup;\n  onGroupToggle: GroupToggle;\n  onItemActivate: ItemActivate;\n  disabled: boolean;\n  lastInDropdown: boolean;\n  expandToViewport?: boolean;\n  variant?: ItemListProps['variant'];\n  position?: string;\n}\n\nexport interface ItemListProps extends HighlightProps {\n  items: ButtonDropdownProps.Items;\n  onGroupToggle: GroupToggle;\n  onItemActivate: ItemActivate;\n  categoryDisabled?: boolean;\n  hasExpandableGroups?: boolean;\n  hasCategoryHeader?: boolean;\n  lastInDropdown: boolean;\n  expandToViewport?: boolean;\n  variant?: InternalButtonDropdownProps['variant'];\n  position?: string;\n  analyticsMetadataTransformer?: InternalButtonDropdownProps['analyticsMetadataTransformer'];\n  linkStyle?: boolean;\n}\n\nexport interface LinkItem extends ButtonDropdownProps.Item {\n  href: string;\n}\n\nexport interface ItemProps {\n  item: ButtonDropdownProps.Item | ButtonDropdownProps.CheckboxItem | LinkItem;\n  disabled: boolean;\n  highlighted: boolean;\n  onItemActivate: ItemActivate;\n  highlightItem: (item: ButtonDropdownProps.ItemOrGroup) => void;\n  showDivider: boolean;\n  hasCategoryHeader: boolean;\n  isKeyboardHighlighted?: boolean;\n  variant?: ItemListProps['variant'];\n  position?: string;\n  analyticsMetadataTransformer?: InternalButtonDropdownProps['analyticsMetadataTransformer'];\n  linkStyle?: boolean;\n}\n\nexport interface InternalItem extends ButtonDropdownProps.Item {\n  badge?: boolean;\n}\n\nexport interface InternalItemGroup extends Omit<ButtonDropdownProps.ItemGroup, 'items'> {\n  items: InternalItems;\n}\n\nexport type InternalItems = ReadonlyArray<InternalItemOrGroup>;\n\nexport type InternalItemOrGroup = InternalItem | ButtonDropdownProps.CheckboxItem | InternalItemGroup;\n\nexport interface InternalButtonDropdownProps\n  extends Omit<ButtonDropdownProps, 'variant' | 'items'>,\n    InternalBaseComponentProps {\n  customTriggerBuilder?: (props: CustomTriggerProps) => React.ReactNode;\n  variant?: ButtonDropdownProps['variant'] | 'navigation';\n  items: ReadonlyArray<InternalItemOrGroup>;\n\n  /**\n   * Optional text that is displayed as the title at the top of the dropdown.\n   */\n  title?: string;\n\n  /**\n   * Optional text that is displayed underneath the title at the top of the dropdown.\n   */\n  description?: string;\n\n  /**\n   * Only show main action button as a regular, non-split button.\n   * That is needed so that button dropdown test utils wrapper can still be used.\n   */\n  showMainActionOnly?: boolean;\n\n  /**\n   * Determines that the dropdown should preferably be aligned to the center of the trigger\n   * instead of dropping left or right.\n   */\n  preferCenter?: boolean;\n\n  /**\n   * Determines whether simple items should be displayed with the link styles.\n   * Used in Breadcrumb group component for collapsed breadcrumbs\n   */\n  linkStyle?: boolean;\n\n  analyticsMetadataTransformer?: (input: GeneratedAnalyticsMetadataFragment) => GeneratedAnalyticsMetadataFragment;\n}\n\nexport interface CustomTriggerProps {\n  triggerRef: React.Ref<HTMLElement>;\n  testUtilsClass: string;\n  ariaLabel: string | undefined;\n  disabled: boolean;\n  disabledReason?: string;\n  isOpen: boolean;\n  onClick: () => void;\n  ariaExpanded: boolean;\n}\n"]}