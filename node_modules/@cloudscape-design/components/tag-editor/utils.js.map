{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/tag-editor/utils.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useEffect, useRef } from 'react';\n\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\n\nimport { isDevelopment } from '../internal/is-development';\nimport { TagEditorProps } from './interfaces';\n\n/**\n * Ponyfill for Array.prototype.findIndex.\n */\nexport function findIndex<T>(array: ReadonlyArray<T>, condition: (t: T) => unknown): number {\n  for (let i = 0; i < array.length; i++) {\n    if (condition(array[i])) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nfunction makeMemoizedArray<T>(\n  prev: ReadonlyArray<T>,\n  next: ReadonlyArray<T>,\n  isEqual: (prev: T, next: T) => boolean\n): ReadonlyArray<T> {\n  for (let i = 0; i < Math.max(prev.length, next.length); i++) {\n    // The next array is shorter, but all the items match.\n    if (i === next.length) {\n      return prev.slice(0, i);\n    }\n    // The prev array is shorter, but all the items so far match.\n    if (i === prev.length) {\n      return [...prev.slice(0, i), ...next.slice(i)];\n    }\n    // The item is not equal. Partition at this point.\n    if (!isEqual(prev[i], next[i])) {\n      return [...prev.slice(0, i), next[i], ...makeMemoizedArray(prev.slice(i + 1), next.slice(i + 1), isEqual)];\n    }\n  }\n\n  // All the references match. Return the old array.\n  return prev;\n}\n\nexport function useMemoizedArray<T>(array: ReadonlyArray<T>, isEqual: (prev: T, next: T) => boolean): ReadonlyArray<T> {\n  const ref = useRef<ReadonlyArray<T>>(array);\n  const updated = makeMemoizedArray(ref.current, array, isEqual);\n  useEffect(() => {\n    ref.current = updated;\n  }, [updated]);\n  return updated;\n}\n\ninterface GetTagsDiffResult {\n  created: Record<string, string>;\n  removed: string[];\n}\n\nfunction hasDuplicateKeys(arr: readonly TagEditorProps.Tag[]): boolean {\n  const keys = arr.map(obj => obj.key);\n  const uniqueKeys = new Set(keys);\n  return uniqueKeys.size !== keys.length;\n}\n\n/**\n * Compares the initial tags with the current tags passed to the tag editor\n * and returns the differences, identifying which tags have been created or removed.\n *\n * This utility can be used to track tag changes and inform your tagging service about\n * the removed and added tags.\n *\n * @param initialTags - The original tags fetched from the backend or tagging service.\n * @param tags - The current tags provided to the tag editor, including any new or modified tags.\n * @returns An object containing two arrays:\n * - `created`: An record of tags that are new or updated (with modified values).\n *    Each tag is represented by its `key` and `value`.\n * - `removed`: An array of tag keys that were present in the initial tags but marked for removal.\n *\n * Updated tags are treated as both `created` and `removed` tags.\n */\nexport function getTagsDiff(\n  initialTags: readonly TagEditorProps.Tag[],\n  tags: readonly TagEditorProps.Tag[]\n): GetTagsDiffResult {\n  if (isDevelopment) {\n    if (initialTags.some(t => !t.existing)) {\n      warnOnce('getTagsDiff: existing property', 'all initial tags should have `existing` property set to `true`.');\n    }\n    if (hasDuplicateKeys(initialTags) || hasDuplicateKeys(tags)) {\n      warnOnce('getTagsDiff: duplicate keys', 'tags should not have duplicate keys.');\n    }\n  }\n  const updated = tags.filter(tag =>\n    initialTags.some(({ key, value }) => {\n      return !tag.markedForRemoval && tag.key === key && tag.existing && tag.value !== value;\n    })\n  );\n  const created = [...tags.filter(tag => !tag.existing), ...updated]\n    .map(({ key, value }) => ({ key, value }))\n    .reduce((acc: Record<string, string>, tag) => {\n      acc[tag.key] = tag.value;\n      return acc;\n    }, {});\n  const removed = [...tags.filter(tag => tag.existing && tag.markedForRemoval), ...updated].map(t => t.key);\n\n  return { created, removed };\n}\n"]}