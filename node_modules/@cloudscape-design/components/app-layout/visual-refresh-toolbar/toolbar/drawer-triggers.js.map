{"version":3,"file":"drawer-triggers.js","sourceRoot":"","sources":["../../../../../src/app-layout/visual-refresh-toolbar/toolbar/drawer-triggers.tsx"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef } from 'react';\nimport clsx from 'clsx';\n\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\n\nimport { useMobile } from '../../../internal/hooks/use-mobile';\nimport { splitItems } from '../../drawer/drawers-helpers';\nimport OverflowMenu from '../../drawer/overflow-menu';\nimport { AppLayoutProps, AppLayoutPropsWithDefaults } from '../../interfaces';\nimport { TOOLS_DRAWER_ID } from '../../utils/use-drawers';\nimport { Focusable, FocusControlMultipleStates } from '../../utils/use-focus-control';\nimport TriggerButton from './trigger-button';\n\nimport splitPanelTestUtilStyles from '../../../split-panel/test-classes/styles.css.js';\nimport testutilStyles from '../../test-classes/styles.css.js';\nimport styles from './styles.css.js';\n\nexport interface SplitPanelToggleProps {\n  displayed: boolean;\n  ariaLabel: string | undefined;\n  controlId: string | undefined;\n  active: boolean;\n  position: AppLayoutProps.SplitPanelPosition;\n}\n\ninterface DrawerTriggersProps {\n  ariaLabels: AppLayoutPropsWithDefaults['ariaLabels'];\n\n  activeDrawerId: string | null;\n  drawersFocusRef: React.Ref<Focusable> | undefined;\n  drawers: ReadonlyArray<AppLayoutProps.Drawer>;\n  onActiveDrawerChange: ((drawerId: string | null) => void) | undefined;\n\n  activeGlobalDrawersIds: ReadonlyArray<string>;\n  globalDrawersFocusControl?: FocusControlMultipleStates;\n  globalDrawers: ReadonlyArray<AppLayoutProps.Drawer>;\n  onActiveGlobalDrawersChange?: (newDrawerId: string) => void;\n\n  splitPanelOpen?: boolean;\n  splitPanelPosition?: AppLayoutProps.SplitPanelPreferences['position'];\n  splitPanelToggleProps: SplitPanelToggleProps | undefined;\n  splitPanelFocusRef: React.Ref<Focusable> | undefined;\n  onSplitPanelToggle: (() => void) | undefined;\n  disabled: boolean;\n}\n\nexport function DrawerTriggers({\n  ariaLabels,\n  activeDrawerId,\n  drawers,\n  drawersFocusRef,\n  onActiveDrawerChange,\n  splitPanelOpen,\n  splitPanelPosition = 'bottom',\n  splitPanelFocusRef,\n  splitPanelToggleProps,\n  onSplitPanelToggle,\n  disabled,\n  activeGlobalDrawersIds,\n  globalDrawers,\n  globalDrawersFocusControl,\n  onActiveGlobalDrawersChange,\n}: DrawerTriggersProps) {\n  const isMobile = useMobile();\n  const hasMultipleTriggers = drawers.length > 1;\n  const previousActiveLocalDrawerId = useRef(activeDrawerId);\n  const previousActiveGlobalDrawersIds = useRef(activeGlobalDrawersIds);\n  const [containerWidth, triggersContainerRef] = useContainerQuery(rect => rect.contentBoxWidth);\n  if (!drawers.length && !globalDrawers.length && !splitPanelToggleProps) {\n    return null;\n  }\n\n  if (activeDrawerId) {\n    previousActiveLocalDrawerId.current = activeDrawerId;\n  }\n\n  if (activeGlobalDrawersIds.length) {\n    previousActiveGlobalDrawersIds.current = activeGlobalDrawersIds;\n  }\n\n  const getIndexOfOverflowItem = () => {\n    if (isMobile) {\n      return 2;\n    }\n    if (containerWidth) {\n      const ITEM_WIDTH = 50; // Roughly 34px + padding = 42px but added extra for safety\n      const overflowSpot = containerWidth;\n\n      const index = Math.floor(overflowSpot / ITEM_WIDTH);\n\n      let splitPanelItem = 0;\n      if (splitPanelToggleProps) {\n        splitPanelItem = 1;\n      }\n      return index - splitPanelItem;\n    }\n    return 0;\n  };\n\n  const indexOfOverflowItem = getIndexOfOverflowItem();\n\n  const { visibleItems, overflowItems } = splitItems(\n    [...drawers, ...globalDrawers],\n    indexOfOverflowItem,\n    activeDrawerId ?? null\n  );\n  const overflowMenuHasBadge = !!overflowItems.find(item => item.badge);\n  const toolsOnlyMode = drawers.length === 1 && drawers[0].id === TOOLS_DRAWER_ID;\n  const globalDrawersStartIndex = drawers.length;\n  const hasOpenDrawer = !!activeDrawerId || (splitPanelPosition === 'side' && splitPanelOpen);\n\n  return (\n    <aside\n      className={styles[`drawers-${isMobile ? 'mobile' : 'desktop'}-triggers-container`]}\n      aria-label={ariaLabels?.drawers}\n      ref={triggersContainerRef}\n      role=\"region\"\n    >\n      <div\n        className={clsx(styles['drawers-trigger-content'], {\n          [styles['has-multiple-triggers']]: hasMultipleTriggers,\n          [styles['has-open-drawer']]: activeDrawerId,\n        })}\n        role=\"toolbar\"\n        aria-orientation=\"horizontal\"\n      >\n        {splitPanelToggleProps && (\n          <>\n            <TriggerButton\n              ariaLabel={splitPanelToggleProps.ariaLabel}\n              ariaControls={splitPanelToggleProps.controlId}\n              ariaExpanded={splitPanelToggleProps.active}\n              className={clsx(\n                styles['drawers-trigger'],\n                testutilStyles['drawers-trigger'],\n                splitPanelTestUtilStyles['open-button']\n              )}\n              iconName={splitPanelToggleProps.position === 'side' ? 'view-vertical' : 'view-horizontal'}\n              onClick={() => onSplitPanelToggle?.()}\n              selected={splitPanelToggleProps.active}\n              ref={splitPanelFocusRef}\n              hasTooltip={true}\n              isMobile={isMobile}\n              isForSplitPanel={true}\n              disabled={disabled}\n            />\n            {hasMultipleTriggers ? <div className={styles['group-divider']}></div> : null}\n          </>\n        )}\n        {visibleItems.slice(0, globalDrawersStartIndex).map(item => {\n          const isForPreviousActiveDrawer = previousActiveLocalDrawerId?.current === item.id;\n          return (\n            <TriggerButton\n              ariaLabel={item.ariaLabels?.triggerButton}\n              ariaExpanded={item.id === activeDrawerId}\n              ariaControls={activeDrawerId === item.id ? item.id : undefined}\n              className={clsx(\n                styles['drawers-trigger'],\n                !toolsOnlyMode && testutilStyles['drawers-trigger'],\n                item.id === TOOLS_DRAWER_ID && testutilStyles['tools-toggle']\n              )}\n              iconName={item.trigger!.iconName}\n              iconSvg={item.trigger!.iconSvg}\n              key={item.id}\n              onClick={() => onActiveDrawerChange?.(activeDrawerId !== item.id ? item.id : null)}\n              ref={item.id === previousActiveLocalDrawerId.current ? drawersFocusRef : undefined}\n              selected={item.id === activeDrawerId}\n              badge={item.badge}\n              testId={`awsui-app-layout-trigger-${item.id}`}\n              hasTooltip={true}\n              hasOpenDrawer={hasOpenDrawer}\n              tooltipText={item.ariaLabels?.drawerName}\n              isForPreviousActiveDrawer={isForPreviousActiveDrawer}\n              isMobile={isMobile}\n              disabled={disabled}\n            />\n          );\n        })}\n        {visibleItems.length > globalDrawersStartIndex && <div className={styles['group-divider']}></div>}\n        {visibleItems.slice(globalDrawersStartIndex).map(item => {\n          const isForPreviousActiveDrawer = previousActiveGlobalDrawersIds?.current.includes(item.id);\n          return (\n            <TriggerButton\n              ariaLabel={item.ariaLabels?.triggerButton}\n              ariaExpanded={activeGlobalDrawersIds.includes(item.id)}\n              ariaControls={activeGlobalDrawersIds.includes(item.id) ? item.id : undefined}\n              className={clsx(\n                styles['drawers-trigger'],\n                testutilStyles['drawers-trigger'],\n                testutilStyles['drawers-trigger-global']\n              )}\n              iconName={item.trigger!.iconName}\n              iconSvg={item.trigger!.iconSvg}\n              key={item.id}\n              onClick={() => {\n                onActiveGlobalDrawersChange && onActiveGlobalDrawersChange(item.id);\n              }}\n              ref={globalDrawersFocusControl?.refs[item.id]?.toggle}\n              selected={activeGlobalDrawersIds.includes(item.id)}\n              badge={item.badge}\n              testId={`awsui-app-layout-trigger-${item.id}`}\n              hasTooltip={true}\n              hasOpenDrawer={hasOpenDrawer}\n              tooltipText={item.ariaLabels?.drawerName}\n              isForPreviousActiveDrawer={isForPreviousActiveDrawer}\n              isMobile={isMobile}\n              disabled={disabled}\n            />\n          );\n        })}\n        {overflowItems.length > 0 && (\n          <OverflowMenu\n            items={overflowItems.map(item => ({\n              ...item,\n              active: activeGlobalDrawersIds.includes(item.id),\n            }))}\n            ariaLabel={overflowMenuHasBadge ? ariaLabels?.drawersOverflowWithBadge : ariaLabels?.drawersOverflow}\n            customTriggerBuilder={({ onClick, triggerRef, ariaLabel, ariaExpanded, testUtilsClass }) => {\n              return (\n                <TriggerButton\n                  ref={triggerRef}\n                  ariaLabel={ariaLabel}\n                  ariaExpanded={ariaExpanded}\n                  badge={overflowMenuHasBadge}\n                  className={clsx(\n                    styles['drawers-trigger'],\n                    testutilStyles['drawers-trigger'],\n                    testutilStyles['drawers-trigger-global'],\n                    testUtilsClass\n                  )}\n                  iconName=\"ellipsis\"\n                  onClick={onClick}\n                  disabled={disabled}\n                />\n              );\n            }}\n            onItemClick={event => {\n              const id = event.detail.id;\n              if (globalDrawers.find(drawer => drawer.id === id)) {\n                onActiveGlobalDrawersChange?.(id);\n              } else {\n                onActiveDrawerChange?.(event.detail.id);\n              }\n            }}\n            globalDrawersStartIndex={globalDrawersStartIndex - indexOfOverflowItem}\n          />\n        )}\n      </div>\n    </aside>\n  );\n}\n"]}