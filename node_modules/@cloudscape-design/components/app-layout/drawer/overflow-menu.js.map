{"version":3,"file":"overflow-menu.js","sourceRoot":"","sources":["../../../../src/app-layout/drawer/overflow-menu.tsx"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAO,KAAK,MAAM,OAAO,CAAC;AAO1B,OAAO,sBAAsB,MAAM,gCAAgC,CAAC;AAIpE,OAAO,cAAc,MAAM,+BAA+B,CAAC;AAY3D,MAAM,eAAe,GAAG,CAAC,MAAc,EAAE,EAAE,CAAC,CAAC;IAC3C,EAAE,EAAE,MAAM,CAAC,EAAE;IACb,IAAI,EAAE,MAAM,CAAC,UAAU,CAAC,UAAU;IAClC,QAAQ,EAAE,MAAM,CAAC,OAAQ,CAAC,QAAQ;IAClC,OAAO,EAAE,MAAM,CAAC,OAAQ,CAAC,OAAO;IAChC,KAAK,EAAE,MAAM,CAAC,KAAK;IACnB,QAAQ,EAAE,UAA0C;IACpD,OAAO,EAAE,MAAM,CAAC,MAAM;CACvB,CAAC,CAAC;AAEH,MAAM,CAAC,OAAO,UAAU,YAAY,CAAC,EACnC,KAAK,EAAE,OAAO,EACd,WAAW,EACX,oBAAoB,EACpB,SAAS,EACT,uBAAuB,GACL;IAClB,MAAM,aAAa,GAAG,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;IACnD,IAAI,KAAyC,CAAC;IAC9C,IAAI,uBAAuB,KAAK,SAAS,IAAI,uBAAuB,GAAG,CAAC,EAAE;QACxE,KAAK,GAAG;YACN,EAAE,KAAK,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE,uBAAuB,CAAC,EAAE;YAC1D,EAAE,KAAK,EAAE,aAAa,CAAC,KAAK,CAAC,uBAAuB,CAAC,EAAE;SACxD,CAAC;KACH;SAAM;QACL,KAAK,GAAG,aAAa,CAAC;KACvB;IAED,OAAO,CACL,oBAAC,sBAAsB,IACrB,KAAK,EAAE,KAAK,EACZ,SAAS,EAAE,cAAc,CAAC,eAAe,CAAC,EAC1C,WAAW,EAAE,WAAW,EACxB,SAAS,EAAE,SAAS,EACpB,OAAO,EAAC,MAAM,EACd,oBAAoB,EAAE,oBAAoB,EAC1C,gBAAgB,EAAE,IAAI,GACtB,CACH,CAAC;AACJ,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\n\nimport {\n  ButtonDropdownProps,\n  InternalButtonDropdownProps,\n  InternalItemOrGroup,\n} from '../../button-dropdown/interfaces';\nimport InternalButtonDropdown from '../../button-dropdown/internal';\nimport { CancelableEventHandler } from '../../internal/events';\nimport { AppLayoutProps } from '../interfaces';\n\nimport testutilStyles from '../test-classes/styles.css.js';\n\ntype Drawer = AppLayoutProps.Drawer & { active?: boolean };\n\ninterface OverflowMenuProps {\n  items: Array<Drawer>;\n  onItemClick: CancelableEventHandler<ButtonDropdownProps.ItemClickDetails>;\n  customTriggerBuilder?: InternalButtonDropdownProps['customTriggerBuilder'];\n  ariaLabel?: string;\n  globalDrawersStartIndex?: number;\n}\n\nconst mapDrawerToItem = (drawer: Drawer) => ({\n  id: drawer.id,\n  text: drawer.ariaLabels.drawerName,\n  iconName: drawer.trigger!.iconName,\n  iconSvg: drawer.trigger!.iconSvg,\n  badge: drawer.badge,\n  itemType: 'checkbox' as ButtonDropdownProps.ItemType,\n  checked: drawer.active,\n});\n\nexport default function OverflowMenu({\n  items: drawers,\n  onItemClick,\n  customTriggerBuilder,\n  ariaLabel,\n  globalDrawersStartIndex,\n}: OverflowMenuProps) {\n  const itemsFlatList = drawers.map(mapDrawerToItem);\n  let items: ReadonlyArray<InternalItemOrGroup>;\n  if (globalDrawersStartIndex !== undefined && globalDrawersStartIndex > 0) {\n    items = [\n      { items: itemsFlatList.slice(0, globalDrawersStartIndex) },\n      { items: itemsFlatList.slice(globalDrawersStartIndex) },\n    ];\n  } else {\n    items = itemsFlatList;\n  }\n\n  return (\n    <InternalButtonDropdown\n      items={items}\n      className={testutilStyles['overflow-menu']}\n      onItemClick={onItemClick}\n      ariaLabel={ariaLabel}\n      variant=\"icon\"\n      customTriggerBuilder={customTriggerBuilder}\n      expandToViewport={true}\n    />\n  );\n}\n"]}