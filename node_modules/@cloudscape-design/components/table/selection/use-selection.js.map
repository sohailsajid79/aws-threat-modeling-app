{"version":3,"file":"use-selection.js","sourceRoot":"","sources":["../../../../src/table/selection/use-selection.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useState } from 'react';\n\nimport { fireNonCancelableEvent } from '../../internal/events';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport { joinStrings } from '../../internal/utils/strings';\nimport { TableProps } from '../interfaces';\nimport { getTrackableValue } from '../utils';\nimport { SelectionProps } from './interfaces';\nimport { ItemSet } from './utils';\n\ntype SelectionOptions<T> = Pick<\n  TableProps<T>,\n  | 'ariaLabels'\n  | 'isItemDisabled'\n  | 'items'\n  | 'loading'\n  | 'onSelectionChange'\n  | 'selectedItems'\n  | 'selectionType'\n  | 'trackBy'\n>;\n\nexport function useSelection<T>(options: SelectionOptions<T>): {\n  isItemSelected: (item: T) => boolean;\n  getSelectAllProps?: () => SelectionProps;\n  getItemSelectionProps?: (item: T) => SelectionProps;\n} {\n  const singleSelectionProps = useSingleSelection(options);\n  const multiSelectionProps = useMultiSelection(options);\n  return options.selectionType === 'single' ? singleSelectionProps : multiSelectionProps;\n}\n\nfunction useSingleSelection<T>({\n  ariaLabels,\n  isItemDisabled = () => false,\n  onSelectionChange,\n  selectedItems = [],\n  selectionType,\n  trackBy,\n}: SelectionOptions<T>) {\n  // The name assigned to all controls to combine them in a single group.\n  const selectionControlName = useUniqueId();\n\n  if (selectionType !== 'single') {\n    return { isItemSelected: () => false };\n  }\n\n  // Selection state for individual items.\n  const selectedSet = new ItemSet(trackBy, selectedItems.slice(0, 1));\n  const isItemSelected = selectedSet.has.bind(selectedSet);\n\n  const handleToggleItem = (item: T) => {\n    if (!isItemDisabled(item) && !isItemSelected(item)) {\n      fireNonCancelableEvent(onSelectionChange, { selectedItems: [item] });\n    }\n  };\n\n  return {\n    isItemSelected,\n    getItemSelectionProps: (item: T): SelectionProps => ({\n      name: selectionControlName,\n      selectionType: 'single',\n      disabled: isItemDisabled(item),\n      checked: isItemSelected(item),\n      onChange: () => handleToggleItem(item),\n      ariaLabel: joinStrings(\n        ariaLabels?.selectionGroupLabel,\n        ariaLabels?.itemSelectionLabel?.({ selectedItems }, item)\n      ),\n    }),\n  };\n}\n\nfunction useMultiSelection<T>({\n  ariaLabels,\n  isItemDisabled = () => false,\n  items,\n  loading,\n  onSelectionChange,\n  selectedItems = [],\n  selectionType,\n  trackBy,\n}: SelectionOptions<T>) {\n  // The name assigned to all controls to combine them in a single group.\n  const selectionControlName = useUniqueId();\n  const [shiftPressed, setShiftPressed] = useState(false);\n  const [lastClickedItem, setLastClickedItem] = useState<null | T>(null);\n\n  if (selectionType !== 'multi') {\n    return { isItemSelected: () => false };\n  }\n\n  // Selection state for individual items.\n  const selectedSet = new ItemSet(trackBy, selectedItems);\n  const isItemSelected = selectedSet.has.bind(selectedSet);\n\n  // Derived selection state for all-items checkbox.\n  let allItemsDisabled = true;\n  let allEnabledItemsSelected = true;\n  for (const item of items) {\n    allItemsDisabled = allItemsDisabled && isItemDisabled(item);\n    allEnabledItemsSelected = allEnabledItemsSelected && (isItemSelected(item) || isItemDisabled(item));\n  }\n  const allItemsCheckboxSelected = selectedItems.length > 0 && allEnabledItemsSelected;\n  const allItemsCheckboxIndeterminate = selectedItems.length > 0 && !allEnabledItemsSelected;\n\n  // Shift-selection helpers.\n  const itemIndexesMap = new Map<T, number>();\n  items.forEach((item, i) => itemIndexesMap.set(getTrackableValue(trackBy, item), i));\n  const getShiftSelectedItems = (item: T): T[] => {\n    const lastClickedItemIndex = lastClickedItem\n      ? itemIndexesMap.get(getTrackableValue(trackBy, lastClickedItem))\n      : undefined;\n    // We use lastClickedItemIndex to determine if filtering/sorting/pagination\n    // made previously selected item invisible, therefore we reset state for shift-select.\n    if (lastClickedItemIndex !== undefined) {\n      const currentItemIndex = itemIndexesMap.get(getTrackableValue(trackBy, item))!;\n      const start = Math.min(currentItemIndex, lastClickedItemIndex);\n      const end = Math.max(currentItemIndex, lastClickedItemIndex);\n      return items.slice(start, end + 1);\n    }\n    return [item];\n  };\n\n  // Select items that are not already selected or disabled.\n  const selectItems = (requestedItems: readonly T[]) => {\n    const newSelectedItems = [...selectedItems];\n    requestedItems.forEach(newItem => {\n      if (!isItemSelected(newItem) && !isItemDisabled(newItem)) {\n        newSelectedItems.push(newItem);\n      }\n    });\n    return newSelectedItems;\n  };\n\n  // Unselect items unless they are disabled.\n  const deselectItems = (requestedItems: readonly T[]) => {\n    const requestedItemsSet = new ItemSet(trackBy, requestedItems);\n    const newSelectedItems: Array<T> = [];\n    selectedItems.forEach(selectedItem => {\n      const shouldUnselect = requestedItemsSet.has(selectedItem);\n      if (!shouldUnselect || isItemDisabled(selectedItem)) {\n        newSelectedItems.push(selectedItem);\n      }\n    });\n    return newSelectedItems;\n  };\n\n  const handleToggleAll = () => {\n    const newSelectedItems = allEnabledItemsSelected ? deselectItems(items) : selectItems(items);\n    fireNonCancelableEvent(onSelectionChange, { selectedItems: newSelectedItems });\n  };\n\n  const handleToggleItem = (item: T) => {\n    if (!isItemDisabled(item)) {\n      const requestedItems = shiftPressed ? getShiftSelectedItems(item) : [item];\n      const selectedItems = isItemSelected(item) ? deselectItems(requestedItems) : selectItems(requestedItems);\n      fireNonCancelableEvent(onSelectionChange, { selectedItems });\n      setLastClickedItem(item);\n    }\n  };\n\n  return {\n    isItemSelected,\n    getSelectAllProps: (): SelectionProps => ({\n      name: selectionControlName,\n      selectionType: 'multi',\n      disabled: allItemsDisabled || !!loading,\n      checked: allItemsCheckboxSelected,\n      indeterminate: allItemsCheckboxIndeterminate,\n      onChange: handleToggleAll,\n      ariaLabel: joinStrings(ariaLabels?.selectionGroupLabel, ariaLabels?.allItemsSelectionLabel?.({ selectedItems })),\n    }),\n    getItemSelectionProps: (item: T): SelectionProps => ({\n      name: selectionControlName,\n      selectionType: 'multi',\n      disabled: isItemDisabled(item),\n      checked: isItemSelected(item),\n      onChange: () => handleToggleItem(item),\n      onShiftToggle: (value: boolean) => setShiftPressed(value),\n      ariaLabel: joinStrings(\n        ariaLabels?.selectionGroupLabel,\n        ariaLabels?.itemSelectionLabel?.({ selectedItems }, item)\n      ),\n    }),\n  };\n}\n"]}