{"version":3,"file":"progressive-loading-utils.js","sourceRoot":"","sources":["../../../../src/table/progressive-loading/progressive-loading-utils.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\n\nimport { TableProps, TableRow } from '../interfaces';\n\nexport function useProgressiveLoadingProps<T>({\n  items,\n  getLoadingStatus,\n  getExpandableItemProps,\n}: {\n  items: readonly T[];\n  getLoadingStatus?: (item: null | T) => TableProps.LoadingStatus;\n  getExpandableItemProps: (item: T) => { level: number; parent: null | T; isExpanded: boolean; children: readonly T[] };\n}) {\n  // The rows are either data or loader.\n  // A loader row can be added to the root level (level=0) in which case it has no associated item (item=null).\n  // Loader rows can be added to expandable rows (level>0) in which case they have an associated item (item!=null).\n  // The \"from\" property of the loader row is the index of the first item to be loaded starting 0. It is used to generate unique React keys.\n  const allRows = new Array<TableRow<T>>();\n\n  const getItemParent = (item: T) => getExpandableItemProps(item).parent;\n  const getItemChildren = (item: T) => getExpandableItemProps(item).children;\n  const getItemLevel = (item?: T) => (item ? getExpandableItemProps(item).level : 0);\n  const isItemExpanded = (item: T) => getExpandableItemProps(item).isExpanded;\n\n  for (let i = 0; i < items.length; i++) {\n    allRows.push({ type: 'data', item: items[i] });\n\n    // Insert empty expandable item loader\n    if (isItemExpanded(items[i]) && getItemChildren(items[i]).length === 0) {\n      const status = getLoadingStatus?.(items[i]);\n      if (status && (status === 'loading' || status === 'error')) {\n        allRows.push({ type: 'loader', item: items[i], level: getItemLevel(items[i]), status, from: 0 });\n      } else {\n        warnOnce('Table', 'Expanded items without children must have \"loading\" or \"error\" loading status.');\n      }\n    }\n\n    // Insert expandable items loaders\n    let currentParent = getItemParent(items[i]);\n    let levelsDiff = getItemLevel(items[i]) - getItemLevel(items[i + 1]);\n    while (currentParent && levelsDiff > 0) {\n      const status = getLoadingStatus?.(currentParent);\n      if (status && status !== 'finished') {\n        const level = currentParent ? getItemLevel(currentParent) : 0;\n        const children = currentParent ? getItemChildren(currentParent) : [];\n        allRows.push({ type: 'loader', item: currentParent, level, status, from: children.length });\n      }\n      currentParent = currentParent && getItemParent(currentParent);\n      levelsDiff--;\n    }\n\n    // Insert root loader\n    const rootLoadingStatus = getLoadingStatus?.(null);\n    if (i === items.length - 1 && rootLoadingStatus && rootLoadingStatus !== 'finished') {\n      allRows.push({ type: 'loader', item: null, level: 0, status: rootLoadingStatus, from: items.length });\n    }\n  }\n\n  return { allRows };\n}\n"]}