{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/select/index.tsx"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,OAAO,EAAE,6BAA6B,EAAE,MAAM,kEAAkE,CAAC;AAEjH,OAAO,gBAAgB,MAAM,sCAAsC,CAAC;AACpE,OAAO,EAAE,gBAAgB,EAAE,MAAM,sCAAsC,CAAC;AACxE,OAAO,EAAE,gBAAgB,EAAE,MAAM,kCAAkC,CAAC;AAGpE,OAAO,cAAc,MAAM,YAAY,CAAC;AAIxC,OAAO,kBAAkB,MAAM,wEAAwE,CAAC;AAExG,MAAM,MAAM,GAAG,KAAK,CAAC,UAAU,CAC7B,CACE,EAMc,EACd,GAA+B,EAC/B,EAAE;QARF,EACE,OAAO,GAAG,EAAE,EACZ,aAAa,GAAG,MAAM,EACtB,UAAU,GAAG,UAAU,EACvB,cAAc,GAAG,OAAO,OAEZ,EADT,SAAS,cALd,4DAMC,CADa;IAId,MAAM,kBAAkB,GAAG,gBAAgB,CAAC,QAAQ,EAAE;QACpD,KAAK,EAAE;YACL,SAAS,EAAE,SAAS,CAAC,SAAS;YAC9B,gBAAgB,EAAE,SAAS,CAAC,gBAAgB;YAC5C,aAAa;YACb,cAAc;YACd,aAAa,EAAE,SAAS,CAAC,aAAa;YACtC,QAAQ,EAAE,SAAS,CAAC,QAAQ;SAC7B;QACD,QAAQ,EAAE;YACR,cAAc,EAAE,OAAO,CAAC,SAAS,CAAC,eAAe,CAAC;SACnD;KACF,CAAC,CAAC;IACH,MAAM,aAAa,GAAG,gBAAgB,CAAC,SAAS,CAAC,CAAC;IAElD,MAAM,0BAA0B,GAA8C;QAC5E,IAAI,EAAE,cAAc;QACpB,KAAK,EAAE,IAAI,kBAAkB,CAAC,gBAAgB,CAAC,EAAE;QACjD,UAAU,EAAE;YACV,QAAQ,EAAE,GAAG,CAAC,CAAC,aAAa,CAAC,QAAQ,EAAE;SACxC;KACF,CAAC;IAEF,OAAO,CACL,oBAAC,cAAc,kBACb,OAAO,EAAE,OAAO,EAChB,aAAa,EAAE,aAAa,EAC5B,UAAU,EAAE,UAAU,EACtB,cAAc,EAAE,cAAc,IAC1B,aAAa,EACb,kBAAkB,IACtB,GAAG,EAAE,GAAG,IACJ,6BAA6B,CAAC,EAAE,SAAS,EAAE,0BAA0B,EAAE,CAAC,EAC5E,CACH,CAAC;AACJ,CAAC,CACF,CAAC;AAEF,gBAAgB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;AACnC,eAAe,MAAM,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\n\nimport { getAnalyticsMetadataAttribute } from '@cloudscape-design/component-toolkit/internal/analytics-metadata';\n\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport { getExternalProps } from '../internal/utils/external-props';\nimport { GeneratedAnalyticsMetadataSelectComponent } from './analytics-metadata/interfaces';\nimport { SelectProps } from './interfaces';\nimport InternalSelect from './internal';\n\nexport { SelectProps };\n\nimport analyticsSelectors from '../internal/components/button-trigger/analytics-metadata/styles.css.js';\n\nconst Select = React.forwardRef(\n  (\n    {\n      options = [],\n      filteringType = 'none',\n      statusType = 'finished',\n      triggerVariant = 'label',\n      ...restProps\n    }: SelectProps,\n    ref: React.Ref<SelectProps.Ref>\n  ) => {\n    const baseComponentProps = useBaseComponent('Select', {\n      props: {\n        autoFocus: restProps.autoFocus,\n        expandToViewport: restProps.expandToViewport,\n        filteringType,\n        triggerVariant,\n        virtualScroll: restProps.virtualScroll,\n        readOnly: restProps.readOnly,\n      },\n      metadata: {\n        hasInlineLabel: Boolean(restProps.inlineLabelText),\n      },\n    });\n    const externalProps = getExternalProps(restProps);\n\n    const componentAnalyticsMetadata: GeneratedAnalyticsMetadataSelectComponent = {\n      name: 'awsui.Select',\n      label: `.${analyticsSelectors['button-trigger']}`,\n      properties: {\n        disabled: `${!!externalProps.disabled}`,\n      },\n    };\n\n    return (\n      <InternalSelect\n        options={options}\n        filteringType={filteringType}\n        statusType={statusType}\n        triggerVariant={triggerVariant}\n        {...externalProps}\n        {...baseComponentProps}\n        ref={ref}\n        {...getAnalyticsMetadataAttribute({ component: componentAnalyticsMetadata })}\n      />\n    );\n  }\n);\n\napplyDisplayName(Select, 'Select');\nexport default Select;\n"]}