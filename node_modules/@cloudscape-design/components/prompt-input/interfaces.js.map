{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../src/prompt-input/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { IconProps } from '../icon/interfaces';\nimport {\n  BaseChangeDetail,\n  BaseInputProps,\n  InputAutoComplete,\n  InputAutoCorrect,\n  InputKeyEvents,\n  InputSpellcheck,\n} from '../input/interfaces';\nimport { BaseComponentProps } from '../internal/base-component';\nimport { FormFieldValidationControlProps } from '../internal/context/form-field-context';\nimport { BaseKeyDetail, NonCancelableEventHandler } from '../internal/events';\n\nexport interface PromptInputProps\n  extends BaseInputProps,\n    InputKeyEvents,\n    InputAutoCorrect,\n    InputAutoComplete,\n    InputSpellcheck,\n    BaseComponentProps,\n    FormFieldValidationControlProps {\n  /**\n   * Called whenever a user clicks the action button or presses the \"Enter\" key.\n   * The event `detail` contains the current value of the field.\n   */\n  onAction?: NonCancelableEventHandler<PromptInputProps.ActionDetail>;\n  /**\n   * Determines what icon to display in the action button.\n   */\n  actionButtonIconName?: IconProps.Name;\n  /**\n   * Specifies the URL of a custom icon. Use this property if the icon you want isn't available.\n   *\n   * If you set both `actionButtonIconUrl` and `actionButtonIconSvg`, `actionButtonIconSvg` will take precedence.\n   */\n  actionButtonIconUrl?: string;\n  /**\n   * Specifies the SVG of a custom icon.\n   *\n   * Use this property if you want your custom icon to inherit colors dictated by variant or hover states.\n   * When this property is set, the component will be decorated with `aria-hidden=\"true\"`. Ensure that the `svg` element:\n   * - has attribute `focusable=\"false\"`.\n   * - has `viewBox=\"0 0 16 16\"`.\n   *\n   * If you set the `svg` element as the root node of the slot, the component will automatically\n   * - set `stroke=\"currentColor\"`, `fill=\"none\"`, and `vertical-align=\"top\"`.\n   * - set the stroke width based on the size of the icon.\n   * - set the width and height of the SVG element based on the size of the icon.\n   *\n   * If you don't want these styles to be automatically set, wrap the `svg` element into a `span`.\n   * You can still set the stroke to `currentColor` to inherit the color of the surrounding elements.\n   *\n   * If you set both `actionButtonIconUrl` and `actionButtonIconSvg`, `iconSvg` will take precedence.\n   *\n   * *Note:* Remember to remove any additional elements (for example: `defs`) and related CSS classes from SVG files exported from design software.\n   * In most cases, they aren't needed, as the `svg` element inherits styles from the icon component.\n   */\n  actionButtonIconSvg?: React.ReactNode;\n  /**\n   * Specifies alternate text for a custom icon. We recommend that you provide this for accessibility.\n   * This property is ignored if you use a predefined icon or if you set your custom icon using the `iconSvg` slot.\n   */\n  actionButtonIconAlt?: string;\n  /**\n   * Adds an aria-label to the action button.\n   * @i18n\n   */\n  actionButtonAriaLabel?: string;\n\n  /**\n   * Specifies whether to disable the action button.\n   */\n  disableActionButton?: boolean;\n\n  /**\n   * Specifies the minimum number of lines of text to set the height to.\n   */\n  minRows?: number;\n\n  /**\n   * Specifies the maximum number of lines of text the textarea will expand to.\n   */\n  maxRows?: number;\n\n  /**\n   * Use this slot to add secondary actions to the prompt input.\n   */\n  secondaryActions?: React.ReactNode;\n\n  /**\n   * Use this slot to add secondary content, such as file attachments, to the prompt input.\n   */\n  secondaryContent?: React.ReactNode;\n\n  /**\n   * Determines whether the secondary actions area of the input has padding. If true, removes the default padding from the secondary actions area.\n   */\n  disableSecondaryActionsPaddings?: boolean;\n\n  /**\n   * Determines whether the secondary content area of the input has padding. If true, removes the default padding from the secondary content area.\n   */\n  disableSecondaryContentPaddings?: boolean;\n}\n\nexport namespace PromptInputProps {\n  export type KeyDetail = BaseKeyDetail;\n  export type ActionDetail = BaseChangeDetail;\n\n  export interface Ref {\n    /**\n     * Sets input focus on the textarea control.\n     */\n    focus(): void;\n\n    /**\n     * Selects all text in the textarea control.\n     */\n    select(): void;\n  }\n}\n"]}