{"version":3,"file":"runtime-content-wrapper.js","sourceRoot":"","sources":["../../../../../src/internal/plugins/helpers/runtime-content-wrapper.tsx"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAO,KAAK,EAAE,EAAE,UAAU,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,OAAO,CAAC;AAE7D,OAAO,EAAE,oBAAoB,EAAE,MAAM,8CAA8C,CAAC;AAWpF,MAAM,UAAU,qBAAqB,CAAC,EAAE,YAAY,EAAE,cAAc,EAAE,EAAE,EAA8B;IACpG,MAAM,GAAG,GAAG,MAAM,CAAiB,IAAI,CAAC,CAAC;IACzC,MAAM,wBAAwB,GAAG,MAAM,CAA4B,IAAI,CAAC,CAAC;IACzE,MAAM,gBAAgB,GAAG,UAAU,CAAC,oBAAoB,CAAC,CAAC;IAC1D,MAAM,SAAS,GAAG,CAAC,CAAC,EAAE,IAAI,gBAAgB,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IAExD,SAAS,CAAC,GAAG,EAAE;QACb,MAAM,SAAS,GAAG,GAAG,CAAC,OAAQ,CAAC;QAC/B,YAAY,CAAC,SAAS,EAAE;YACtB,kBAAkB,EAAE,EAAE,CAAC,EAAE;gBACvB,wBAAwB,CAAC,OAAO,GAAG,EAAE,CAAC;YACxC,CAAC;SACF,CAAC,CAAC;QACH,OAAO,GAAG,EAAE;YACV,cAAc,CAAC,SAAS,CAAC,CAAC;YAC1B,wBAAwB,CAAC,OAAO,GAAG,IAAI,CAAC;QAC1C,CAAC,CAAC;QACF,uDAAuD;IACzD,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,SAAS,CAAC,GAAG,EAAE;;QACb,MAAA,wBAAwB,CAAC,OAAO,yEAAG,SAAS,CAAC,CAAC;IAChD,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;IAEhB,OAAO,6BAAK,GAAG,EAAE,GAAG,GAAQ,CAAC;AAC/B,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useContext, useEffect, useRef } from 'react';\n\nimport { ActiveDrawersContext } from '../../../app-layout/utils/visibility-context';\nimport { MountContentContext } from '../controllers/drawers';\n\ntype VisibilityCallback = (isVisible: boolean) => void;\n\ninterface RuntimeContentWrapperProps {\n  mountContent: (container: HTMLElement, mountContent: MountContentContext) => void;\n  unmountContent: (container: HTMLElement) => void;\n  id?: string;\n}\n\nexport function RuntimeContentWrapper({ mountContent, unmountContent, id }: RuntimeContentWrapperProps) {\n  const ref = useRef<HTMLDivElement>(null);\n  const visibilityChangeCallback = useRef<VisibilityCallback | null>(null);\n  const activeDrawersIds = useContext(ActiveDrawersContext);\n  const isVisible = !!id && activeDrawersIds.includes(id);\n\n  useEffect(() => {\n    const container = ref.current!;\n    mountContent(container, {\n      onVisibilityChange: cb => {\n        visibilityChangeCallback.current = cb;\n      },\n    });\n    return () => {\n      unmountContent(container);\n      visibilityChangeCallback.current = null;\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    visibilityChangeCallback.current?.(isVisible);\n  }, [isVisible]);\n\n  return <div ref={ref}></div>;\n}\n"]}