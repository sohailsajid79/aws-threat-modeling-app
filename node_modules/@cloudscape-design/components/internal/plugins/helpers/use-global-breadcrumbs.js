// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import { useEffect, useLayoutEffect, useRef, useState } from 'react';
import { useAppLayoutToolbarEnabled } from '../../../app-layout/utils/feature-flags';
import { awsuiPluginsInternal } from '../api';
function useSetGlobalBreadcrumbsImplementation(props) {
    const registrationRef = useRef();
    const [registered, setRegistered] = useState(false);
    useEffect(() => {
        const registration = awsuiPluginsInternal.breadcrumbs.registerBreadcrumbs(props, () => setRegistered(true));
        registrationRef.current = registration;
        return () => {
            registration.cleanup();
        };
        // subsequent prop changes are handled by another effect
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    useLayoutEffect(() => {
        var _a;
        (_a = registrationRef.current) === null || _a === void 0 ? void 0 : _a.update(props);
    });
    return registered;
}
export function useSetGlobalBreadcrumbs(props) {
    // avoid additional side effects when this feature is not active
    if (!useAppLayoutToolbarEnabled()) {
        return false;
    }
    // getGlobalFlag() value does not change without full page reload
    // eslint-disable-next-line react-hooks/rules-of-hooks
    return useSetGlobalBreadcrumbsImplementation(props);
}
export function useGetGlobalBreadcrumbs(enabled) {
    const [discoveredBreadcrumbs, setDiscoveredBreadcrumbs] = useState(null);
    useEffect(() => {
        if (!enabled) {
            return;
        }
        return awsuiPluginsInternal.breadcrumbs.registerAppLayout(breadcrumbs => {
            setDiscoveredBreadcrumbs(breadcrumbs);
        });
    }, [enabled]);
    return discoveredBreadcrumbs;
}
//# sourceMappingURL=use-global-breadcrumbs.js.map