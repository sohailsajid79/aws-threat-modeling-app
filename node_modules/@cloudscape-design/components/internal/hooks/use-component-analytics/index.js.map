{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/internal/hooks/use-component-analytics/index.ts"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC;AAEtC,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,OAAO,CAAC;AAE1C,OAAO,EAAE,gBAAgB,EAAE,MAAM,iBAAiB,CAAC;AACnD,OAAO,EAAE,WAAW,EAAE,MAAM,kBAAkB,CAAC;AAE/C,SAAS,2BAA2B,CAAC,UAAwC,EAAE,KAAa;IAC1F,MAAM,aAAa,GAAG,oCAAoC,CAAC;IAE3D,MAAM,iBAAiB,GAAG,MAAM,EAAsB,CAAC;IAEvD,SAAS,CAAC,GAAG,EAAE;;QACb,0FAA0F;QAC1F,iBAAiB,CAAC,OAAO,GAAG,KAAK,CAAC;QAClC,MAAA,UAAU,CAAC,OAAO,0CAAE,YAAY,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;IACzD,CAAC,EAAE,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC,CAAC;IAExB,OAAO;QACL,CAAC,aAAa,CAAC,EAAE,iBAAiB,CAAC,OAAO;KAC3C,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,qBAAqB,CACnC,aAAqB,EACrB,UAAwC,EACxC,UAAuE;IAEvE,MAAM,iBAAiB,GAAG,WAAW,EAAE,CAAC;IACxC,MAAM,UAAU,GAAG,2BAA2B,CAAC,UAAU,EAAE,iBAAiB,CAAC,CAAC;IAE9E,SAAS,CAAC,GAAG,EAAE;QACb,gBAAgB,CAAC,gBAAgB,CAAC,EAAE,iBAAiB,EAAE,aAAa,EAAE,OAAO,EAAE,UAAU,EAAE,EAAE,CAAC,CAAC;QAC/F,uDAAuD;IACzD,CAAC,EAAE,CAAC,iBAAiB,CAAC,CAAC,CAAC;IAExB,OAAO,EAAE,iBAAiB,EAAE,UAAU,EAAE,CAAC;AAC3C,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { useEffect, useRef } from 'react';\n\nimport { ComponentMetrics } from '../../analytics';\nimport { useRandomId } from '../use-unique-id';\n\nfunction useTaskInteractionAttribute(elementRef: React.RefObject<HTMLElement>, value: string) {\n  const attributeName = 'data-analytics-task-interaction-id';\n\n  const attributeValueRef = useRef<string | undefined>();\n\n  useEffect(() => {\n    // With this effect, we apply the attribute only on the client, to avoid hydration errors.\n    attributeValueRef.current = value;\n    elementRef.current?.setAttribute(attributeName, value);\n  }, [value, elementRef]);\n\n  return {\n    [attributeName]: attributeValueRef.current,\n  };\n}\n\nexport function useComponentAnalytics(\n  componentName: string,\n  elementRef: React.RefObject<HTMLElement>,\n  getDetails: () => Record<string, string | boolean | number | undefined>\n) {\n  const taskInteractionId = useRandomId();\n  const attributes = useTaskInteractionAttribute(elementRef, taskInteractionId);\n\n  useEffect(() => {\n    ComponentMetrics.componentMounted({ taskInteractionId, componentName, details: getDetails() });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [taskInteractionId]);\n\n  return { taskInteractionId, attributes };\n}\n"]}