{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../../src/internal/analytics/interfaces.ts"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nexport type FunnelType = 'single-page' | 'multi-page' | 'modal';\nexport type FlowType = 'create' | 'edit' | 'delete' | 'home' | 'dashboard' | 'view-resource';\nexport interface AnalyticsMetadata {\n  instanceIdentifier?: string;\n  flowType?: FlowType;\n  errorContext?: string;\n  resourceType?: string;\n}\n\n// Common properties for all funnels\nexport interface BaseFunnelProps {\n  funnelIdentifier?: string;\n  funnelInteractionId: string;\n  currentDocument?: Document;\n}\n\nexport interface FunnelErrorProps extends BaseFunnelProps {\n  funnelErrorContext?: string;\n}\n\nexport interface FunnelStartProps extends Omit<BaseFunnelProps, 'funnelInteractionId'> {\n  flowType?: FlowType;\n  resourceType?: string;\n  funnelName: string;\n  funnelNameSelector: string;\n  totalFunnelSteps: number;\n  optionalStepNumbers: number[];\n  stepConfiguration?: StepConfiguration[];\n  funnelType: FunnelType;\n  funnelVersion: string;\n  componentVersion: string;\n  componentTheme: string;\n  funnelInteractionId?: string;\n}\n\n// A function type for a generic funnel method\nexport type FunnelMethod<T extends BaseFunnelProps> = (props: T) => void;\n\n// Interface for table interaction method props\nexport interface TableInteractionProps {\n  // Time to render table in either no data state or with data after user actions like filtering, pagination.\n  // in milliseconds\n  interactionTime: number;\n  // User action like sorting, filtering, pagination which triggered new data load in table.\n  userAction: string;\n  // Unique instance identifier for the component.\n  // Default: ''\n  instanceIdentifier?: string;\n  // Component identifier like table header which can be used to identify the table\n  // Default: ''\n  componentIdentifier?: string;\n  // Number of resources in table after user action\n  // Default: 0\n  noOfResourcesInTable?: number;\n  // Additional metadata related to user interaction\n  interactionMetadata?: string;\n}\n\nexport type TableInteractionMethod = (props: TableInteractionProps) => void;\n\n// A function type specifically for funnelStart\nexport type FunnelStartMethod = (props: FunnelStartProps) => string;\n\n// Define individual method props by extending the base\nexport interface FunnelStepProps extends BaseFunnelProps {\n  stepIdentifier?: string;\n  stepNumber: number;\n  stepName?: string | undefined;\n  stepNameSelector?: string;\n  subStepAllSelector: string;\n  totalSubSteps?: number;\n  subStepConfiguration?: SubStepConfiguration[];\n}\n\nexport interface FunnelStepNavigationProps extends FunnelStepProps {\n  destinationStepNumber: number;\n  navigationType: string;\n  totalSubSteps?: number;\n}\n\nexport interface FunnelStepErrorProps extends FunnelStepProps {\n  stepErrorContext?: string;\n  stepErrorSelector: string;\n}\n\nexport interface FunnelSubStepProps extends FunnelStepProps {\n  subStepIdentifier?: string;\n  subStepSelector: string;\n  subStepName?: string | undefined;\n  subStepNameSelector: string;\n  subStepNumber?: number;\n}\n\nexport interface FunnelSubStepErrorProps extends FunnelSubStepProps {\n  subStepErrorContext?: string;\n  fieldIdentifier?: string;\n  fieldErrorContext?: string;\n  fieldLabelSelector: string;\n  fieldErrorSelector: string;\n}\n\nexport interface OptionalFunnelSubStepErrorProps extends FunnelSubStepProps {\n  subStepErrorContext?: string;\n  fieldIdentifier?: string;\n  fieldErrorContext?: string;\n  fieldLabelSelector?: string;\n  fieldErrorSelector?: string;\n}\n\nexport interface FunnelLinkInteractionProps extends FunnelSubStepProps {\n  elementSelector: string;\n}\n\nexport interface FunnelChangeProps extends BaseFunnelProps {\n  stepConfiguration: StepConfiguration[];\n}\n\nexport interface StepConfiguration {\n  number: number;\n  name: string;\n  isOptional: boolean;\n  stepIdentifier?: string;\n}\n\nexport interface SubStepConfiguration {\n  number: number;\n  name: string;\n  subStepIdentifier?: string;\n}\n\n// Define the interface using the method type\nexport interface IFunnelMetrics {\n  funnelStart: FunnelStartMethod;\n  funnelError: FunnelMethod<FunnelErrorProps>;\n  funnelComplete: FunnelMethod<BaseFunnelProps>;\n  funnelSuccessful: FunnelMethod<BaseFunnelProps>;\n  funnelCancelled: FunnelMethod<BaseFunnelProps>;\n  funnelChange: FunnelMethod<FunnelChangeProps>;\n\n  funnelStepStart: FunnelMethod<FunnelStepProps>;\n  funnelStepComplete: FunnelMethod<FunnelStepProps>;\n  funnelStepNavigation: FunnelMethod<FunnelStepNavigationProps>;\n  funnelStepError: FunnelMethod<FunnelStepErrorProps>;\n  funnelStepChange: FunnelMethod<FunnelStepProps>;\n\n  funnelSubStepStart: FunnelMethod<FunnelSubStepProps>;\n  funnelSubStepComplete: FunnelMethod<FunnelSubStepProps>;\n  funnelSubStepError: FunnelMethod<OptionalFunnelSubStepErrorProps>;\n\n  helpPanelInteracted: FunnelMethod<FunnelLinkInteractionProps>;\n  externalLinkInteracted: FunnelMethod<FunnelLinkInteractionProps>;\n}\n\n// Interface for task completion method props\nexport interface TaskCompletionDataProps {\n  // Time taken to respond to customers after customers submit the form\n  // in milliseconds\n  timeToRespondAfterFormSubmit: number;\n  // Unique identifier for the task aka funnelInteractionId.\n  // Default: ''\n  taskInteractionId: string;\n  // Task name identifier to identify the task aka funnelName\n  // Default: ''\n  taskIdentifier?: string;\n  // To identify create or edit flow\n  // Default: ''\n  taskFlowType?: string;\n  //\"single-page\" | \"multi-page\"\n  // Default: ''\n  taskType?: FunnelType;\n  // Additional metadata related to completion such as success or error\n  completionMetadata?: string;\n}\n\nexport type TaskCompletionDataMethod = (props: TaskCompletionDataProps) => void;\n\nexport interface IPerformanceMetrics {\n  tableInteraction: TableInteractionMethod;\n  taskCompletionData: TaskCompletionDataMethod;\n}\n\nexport interface ComponentMountedProps {\n  componentName: string;\n  taskInteractionId?: string;\n  details: Record<string, string | boolean | number | undefined>;\n}\nexport type ComponentMountedMethod = (props: ComponentMountedProps) => string;\nexport interface IComponentMetrics {\n  componentMounted: ComponentMountedMethod;\n}\n"]}