{"version":3,"file":"internal.js","sourceRoot":"","sources":["../../../src/toggle-button/internal.tsx"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,IAAI,MAAM,MAAM,CAAC;AAExB,OAAO,EAAE,QAAQ,EAAE,MAAM,+CAA+C,CAAC;AAEzE,OAAO,cAAc,MAAM,oBAAoB,CAAC;AAChD,OAAO,EAAE,sBAAsB,EAAE,MAAM,oBAAoB,CAAC;AAC5D,OAAO,EAAE,aAAa,EAAE,MAAM,4BAA4B,CAAC;AAE3D,OAAO,EAAE,aAAa,EAAE,MAAM,QAAQ,CAAC;AAEvC,OAAO,MAAM,MAAM,iBAAiB,CAAC;AAErC,MAAM,CAAC,MAAM,oBAAoB,GAAG,KAAK,CAAC,UAAU,CAClD,CACE,EAYoB,EACpB,GAAqC,EACrC,EAAE;QAdF,EACE,OAAO,EACP,QAAQ,EAAE,eAAe,EACzB,eAAe,EACf,OAAO,EAAE,cAAc,EACvB,cAAc,EACd,OAAO,EAAE,cAAc,EACvB,cAAc,EACd,OAAO,EACP,QAAQ,EACR,SAAS,OAES,EADf,IAAI,cAXT,wIAYC,CADQ;IAIT,IAAI,aAAa,EAAE;QACjB,IAAI,eAAe,IAAI,CAAC,eAAe,EAAE;YACvC,QAAQ,CAAC,cAAc,EAAE,yDAAyD,CAAC,CAAC;SACrF;QAED,IAAI,cAAc,IAAI,CAAC,cAAc,EAAE;YACrC,QAAQ,CAAC,cAAc,EAAE,wDAAwD,CAAC,CAAC;SACpF;QAED,IAAI,cAAc,IAAI,CAAC,cAAc,EAAE;YACrC,QAAQ,CAAC,cAAc,EAAE,wDAAwD,CAAC,CAAC;SACpF;KACF;IAED,OAAO,CACL,oBAAC,cAAc,kBACb,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,WAAW,OAAO,EAAE,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,CAAC,EACvF,OAAO,EAAE,OAAO,EAChB,UAAU,EAAC,MAAM,EACjB,QAAQ,EAAE,aAAa,CAAC,OAAO,EAAE,eAAe,EAAE,eAAe,CAAC,EAClE,OAAO,EAAE,aAAa,CAAC,OAAO,EAAE,cAAc,EAAE,cAAc,CAAC,EAC/D,OAAO,EAAE,aAAa,CAAC,OAAO,EAAE,cAAc,EAAE,cAAc,CAAC,kBACjD,OAAO,EACrB,OAAO,EAAE,KAAK,CAAC,EAAE;YACf,KAAK,CAAC,cAAc,EAAE,CAAC;YAEvB,sBAAsB,CAAC,QAAQ,EAAE,EAAE,OAAO,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC;QAC1D,CAAC,IACG,IAAI,IACR,GAAG,EAAE,GAAG,IACR,CACH,CAAC;AACJ,CAAC,CACF,CAAC;AAEF,eAAe,oBAAoB,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\n\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\n\nimport InternalButton from '../button/internal';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { isDevelopment } from '../internal/is-development';\nimport { ToggleButtonProps } from './interfaces';\nimport { getToggleIcon } from './util';\n\nimport styles from './styles.css.js';\n\nexport const InternalToggleButton = React.forwardRef(\n  (\n    {\n      pressed,\n      iconName: defaultIconName,\n      pressedIconName,\n      iconSvg: defaultIconSvg,\n      pressedIconSvg,\n      iconUrl: defaultIconUrl,\n      pressedIconUrl,\n      variant,\n      onChange,\n      className,\n      ...rest\n    }: ToggleButtonProps,\n    ref: React.Ref<ToggleButtonProps.Ref>\n  ) => {\n    if (isDevelopment) {\n      if (defaultIconName && !pressedIconName) {\n        warnOnce('ToggleButton', '`pressedIconName` must be provided for `pressed` state.');\n      }\n\n      if (defaultIconSvg && !pressedIconSvg) {\n        warnOnce('ToggleButton', '`pressedIconSvg` must be provided for `pressed` state.');\n      }\n\n      if (defaultIconUrl && !pressedIconUrl) {\n        warnOnce('ToggleButton', '`pressedIconUrl` must be provided for `pressed` state.');\n      }\n    }\n\n    return (\n      <InternalButton\n        className={clsx(className, styles[`variant-${variant}`], { [styles.pressed]: pressed })}\n        variant={variant}\n        formAction=\"none\"\n        iconName={getToggleIcon(pressed, defaultIconName, pressedIconName)}\n        iconUrl={getToggleIcon(pressed, defaultIconUrl, pressedIconUrl)}\n        iconSvg={getToggleIcon(pressed, defaultIconSvg, pressedIconSvg)}\n        aria-pressed={pressed}\n        onClick={event => {\n          event.preventDefault();\n\n          fireNonCancelableEvent(onChange, { pressed: !pressed });\n        }}\n        {...rest}\n        ref={ref}\n      />\n    );\n  }\n);\n\nexport default InternalToggleButton;\n"]}