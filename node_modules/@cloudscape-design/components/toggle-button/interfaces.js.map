{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../src/toggle-button/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\n\nimport { BaseButtonProps } from '../button/interfaces';\nimport { IconProps } from '../icon/interfaces';\nimport { BaseComponentProps } from '../internal/base-component';\nimport { NonCancelableEventHandler } from '../internal/events';\n\nexport interface ToggleButtonProps extends BaseComponentProps, BaseButtonProps {\n  /** Determines the general styling of the toggle button as follows:\n   * * `normal` for secondary buttons.\n   * * `icon` to display an icon only (no text).\n   *\n   * Defaults to `normal` if not specified.\n   */\n  variant?: ToggleButtonProps.Variant;\n\n  /**\n   * Displays an icon next to the text.\n   */\n  iconName?: IconProps.Name;\n\n  /**\n   * Displays an icon next to the text in pressed state.\n   */\n  pressedIconName?: IconProps.Name;\n\n  /**\n   * Specifies the URL of a custom icon in pressed state. Use this property if the icon needed for your use case isn't available.\n   *\n   * `pressedIconSvg` will take precedence if you set both `pressedIconUrl` and `pressedIconSvg`.\n   */\n  pressedIconUrl?: string;\n  /**\n   * Specifies the SVG of a custom icon in pressed state.\n   *\n   * Use this property if you want your custom icon to inherit colors dictated by variant or hover states.\n   * When this property is set, the component will be decorated with `aria-hidden=\"true\"`. Ensure that the `svg` element:\n   * - has attribute `focusable=\"false\"`\n   * - has `viewBox=\"0 0 16 16\"`\n   *\n   * If you set the `svg` element as the root node of the slot, the component will automatically:\n   * - set `stroke=\"currentColor\"`, `fill=\"none\"`, and `vertical-align=\"top\"`.\n   * - set the stroke width based on the size of the icon.\n   * - set the width and height of the SVG element based on the size of the icon.\n   *\n   * If you don't want these styles to be automatically set, wrap the `svg` element into a `span`.\n   * You can still set the stroke to `currentColor` to inherit the color of the surrounding elements.\n   *\n   * If you set both `pressedIconUrl` and `pressedIconSvg`, `pressedIconSvg` will take precedence.\n   *\n   * *Note:* Remember to remove any additional elements (for example: `defs`) and related CSS classes from SVG files exported from design software.\n   * In most cases, they aren't needed, as the `svg` element inherits styles from the icon component.\n   */\n  pressedIconSvg?: React.ReactNode;\n\n  /**\n   * Sets the toggle button to pressed state.\n   */\n  pressed: boolean;\n\n  /**\n   * Provides a reason why the button is disabled (only when `disabled` is `true`).\n   * If provided, the button becomes focusable.\n   * Applicable only for the normal variant.\n   */\n  disabledReason?: string;\n\n  /**\n   * Called when the user changes their selection.\n   * The event `detail` contains the current value for the `pressed` property.\n   */\n  onChange?: NonCancelableEventHandler<ToggleButtonProps.ChangeDetail>;\n}\n\nexport namespace ToggleButtonProps {\n  export type Variant = 'normal' | 'icon';\n\n  export interface ChangeDetail {\n    pressed: boolean;\n  }\n\n  export interface Ref {\n    /**\n     * Focuses the underlying native button.\n     */\n    focus(options?: FocusOptions): void;\n  }\n}\n"]}