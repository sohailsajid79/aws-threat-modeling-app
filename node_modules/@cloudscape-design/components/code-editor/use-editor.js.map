{"version":3,"file":"use-editor.js","sourceRoot":"","sources":["../../../src/code-editor/use-editor.tsx"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { Ace } from 'ace-builds';\n\nimport { useCurrentMode } from '@cloudscape-design/component-toolkit/internal';\n\nimport { CodeEditorProps } from './interfaces';\nimport { getAceTheme, getDefaultConfig, getDefaultTheme } from './util';\n\nexport function useEditor(ace: any, themes?: CodeEditorProps.AvailableThemes, loading?: boolean) {\n  const editorRef = useRef<HTMLDivElement>(null);\n  const [editor, setEditor] = useState<null | Ace.Editor>(null);\n  const [initialTheme] = useState(getAceTheme(getDefaultTheme(useCurrentMode(editorRef), themes)));\n\n  useEffect(() => {\n    const elem = editorRef.current;\n    if (!ace || !elem) {\n      return;\n    }\n    const config = getDefaultConfig(ace);\n    setEditor(\n      ace.edit(elem, {\n        ...config,\n        theme: initialTheme,\n      })\n    );\n  }, [ace, loading, initialTheme]);\n\n  return { editorRef, editor };\n}\n\nexport function useSyncEditorLabels(\n  editor: null | Ace.Editor,\n  {\n    controlId,\n    ariaLabel,\n    ariaLabelledby,\n    ariaDescribedby,\n  }: { controlId?: string; ariaLabel?: string; ariaLabelledby?: string; ariaDescribedby?: string }\n) {\n  useEffect(() => {\n    if (!editor) {\n      return;\n    }\n\n    const { textarea } = editor.renderer as unknown as { textarea: HTMLTextAreaElement };\n    if (!textarea) {\n      return;\n    }\n\n    // Update attributes on the textarea element manually. This is fine as long as ace\n    // doesn't touch these attributes as well.\n    const updateAttribute = (attribute: string, value: string | undefined) => {\n      if (value) {\n        textarea.setAttribute(attribute, value);\n      } else {\n        textarea.removeAttribute(attribute);\n      }\n    };\n    updateAttribute('id', controlId);\n    updateAttribute('aria-labelledby', ariaLabelledby);\n    updateAttribute('aria-describedby', ariaDescribedby);\n\n    // Ace (starting from v1.34.0) has a built-in setting to provide an aria-label.\n    // For older versions (before aria-label was managed by ace), we still use the\n    // attribute method.\n    if (typeof editor.getOption('textInputAriaLabel') === 'string') {\n      editor.setOption('textInputAriaLabel', ariaLabel ?? '');\n    } else {\n      updateAttribute('aria-label', ariaLabel);\n    }\n  }, [ariaLabel, ariaDescribedby, ariaLabelledby, controlId, editor]);\n}\n\nexport function useSyncEditorSize(\n  editor: null | Ace.Editor,\n  { width, height }: { width?: null | number; height?: null | number }\n) {\n  useEffect(() => {\n    editor?.resize();\n  }, [editor, width, height]);\n\n  const onResize = useCallback(() => {\n    editor?.resize();\n  }, [editor]);\n\n  return { onResize };\n}\n\nexport function useSyncEditorValue(editor: null | Ace.Editor, value: string) {\n  useEffect(() => {\n    if (!editor) {\n      return;\n    }\n    if (value === editor.getValue()) {\n      return;\n    }\n    const pos = editor.session.selection.toJSON();\n    editor.setValue(value, -1);\n    editor.session.selection.fromJSON(pos);\n  }, [editor, value]);\n}\n\nexport function useSyncEditorLanguage(editor: null | Ace.Editor, language: string) {\n  useEffect(() => {\n    editor?.session.setMode(`ace/mode/${language}`);\n  }, [editor, language]);\n}\n\nexport function useSyncEditorWrapLines(editor: null | Ace.Editor, wrapLines?: boolean) {\n  useEffect(() => {\n    editor?.session.setUseWrapMode(wrapLines ?? true);\n  }, [editor, wrapLines]);\n}\n\nexport function useSyncEditorTheme(editor: null | Ace.Editor, theme: CodeEditorProps.Theme) {\n  useEffect(() => {\n    editor?.setTheme(getAceTheme(theme));\n  }, [editor, theme]);\n}\n"]}