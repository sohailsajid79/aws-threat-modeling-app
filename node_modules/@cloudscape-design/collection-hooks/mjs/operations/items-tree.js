// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var ItemsTree = /** @class */ (function () {
    function ItemsTree(items, treeProps) {
        var _this = this;
        var _a;
        this.size = 0;
        this.hasNesting = false;
        this.roots = new Array();
        this.idToChildren = new Map();
        this.filter = function (predicate) {
            if (!_this.hasNesting) {
                _this.items = _this.items.filter(predicate);
                _this.size = _this.items.length;
            }
            else {
                _this.filterTree(predicate);
            }
            return _this;
        };
        this.sort = function (comparator) {
            if (!_this.hasNesting) {
                _this.items = _this.items.slice().sort(comparator);
            }
            else {
                _this.sortTree(comparator);
            }
            return _this;
        };
        this.getChildren = function (item) {
            var _a;
            return (_a = (_this.treeProps && _this.idToChildren.get(_this.treeProps.getId(item)))) !== null && _a !== void 0 ? _a : [];
        };
        this.getItems = function () {
            if (_this.hasNesting) {
                return _this.roots;
            }
            return _this.items;
        };
        this.getSize = function () {
            return _this.size;
        };
        this.filterTree = function (predicate) {
            var filterNode = function (item) {
                var children = _this.getChildren(item);
                var filteredChildren = children.filter(filterNode);
                _this.size -= children.length - filteredChildren.length;
                _this.setChildren(item, filteredChildren);
                return predicate(item) || filteredChildren.length > 0;
            };
            var roots = _this.roots;
            _this.roots = _this.roots.filter(filterNode);
            _this.size -= roots.length - _this.roots.length;
        };
        this.sortTree = function (comparator) {
            var sortLevel = function (items) {
                items.sort(comparator);
                for (var _i = 0, items_2 = items; _i < items_2.length; _i++) {
                    var item = items_2[_i];
                    sortLevel(_this.getChildren(item));
                }
            };
            sortLevel(_this.roots);
        };
        this.size = items.length;
        this.items = items;
        this.treeProps = treeProps;
        if (!treeProps) {
            return;
        }
        // Assign item children.
        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
            var item = items_1[_i];
            var parentId = treeProps.getParentId(item);
            if (parentId === null) {
                this.roots.push(item);
            }
            else {
                var children = (_a = this.idToChildren.get(parentId)) !== null && _a !== void 0 ? _a : [];
                children.push(item);
                this.idToChildren.set(parentId, children);
                this.hasNesting = true;
            }
        }
        // Assign item levels.
        var traverse = function (item, level) {
            var _a;
            if (level === void 0) { level = 1; }
            for (var _i = 0, _b = (_a = _this.idToChildren.get(treeProps.getId(item))) !== null && _a !== void 0 ? _a : []; _i < _b.length; _i++) {
                var child = _b[_i];
                traverse(child, level + 1);
            }
        };
        this.roots.forEach(function (root) { return traverse(root); });
    }
    ItemsTree.prototype.setChildren = function (item, children) {
        if (this.treeProps) {
            this.idToChildren.set(this.treeProps.getId(item), children);
        }
    };
    return ItemsTree;
}());
export { ItemsTree };
