var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { fixupFalsyValues } from './operations/property-filter.js';
export function collectionReducer(state, action) {
    var newState = __assign({}, state);
    switch (action.type) {
        case 'selection':
            newState.selectedItems = action.selectedItems;
            break;
        case 'expansion':
            newState.expandedItems = action.expandedItems;
            break;
        case 'filtering':
            newState.currentPageIndex = 1;
            newState.filteringText = action.filteringText;
            break;
        case 'sorting':
            newState.currentPageIndex = 1;
            newState.sortingState = action.sortingState;
            break;
        case 'pagination':
            newState.currentPageIndex = action.pageIndex;
            break;
        case 'property-filtering':
            newState.currentPageIndex = 1;
            newState.propertyFilteringQuery = action.query;
            break;
    }
    return newState;
}
export function createActions(_a) {
    var dispatch = _a.dispatch, collectionRef = _a.collectionRef;
    return {
        setFiltering: function (filteringText) {
            dispatch({ type: 'filtering', filteringText: filteringText });
            collectionRef.current && collectionRef.current.scrollToTop();
        },
        setSorting: function (state) {
            dispatch({ type: 'sorting', sortingState: state });
            collectionRef.current && collectionRef.current.scrollToTop();
        },
        setCurrentPage: function (pageIndex) {
            dispatch({ type: 'pagination', pageIndex: pageIndex });
            collectionRef.current && collectionRef.current.scrollToTop();
        },
        setSelectedItems: function (selectedItems) {
            dispatch({ type: 'selection', selectedItems: selectedItems });
        },
        setPropertyFiltering: function (query) {
            dispatch({ type: 'property-filtering', query: query });
            collectionRef.current && collectionRef.current.scrollToTop();
        },
        setExpandedItems: function (expandedItems) {
            dispatch({ type: 'expansion', expandedItems: expandedItems });
        },
    };
}
export function createSyncProps(options, _a, actions, collectionRef, _b) {
    var _c, _d, _e, _f, _g;
    var filteringText = _a.filteringText, sortingState = _a.sortingState, selectedItems = _a.selectedItems, expandedItems = _a.expandedItems, currentPageIndex = _a.currentPageIndex, propertyFilteringQuery = _a.propertyFilteringQuery;
    var pagesCount = _b.pagesCount, actualPageIndex = _b.actualPageIndex, allItems = _b.allItems, allPageItems = _b.allPageItems, itemsTree = _b.itemsTree;
    var empty = options.filtering
        ? allItems.length
            ? options.filtering.noMatch
            : options.filtering.empty
        : null;
    empty = options.propertyFiltering
        ? allItems.length
            ? options.propertyFiltering.noMatch
            : options.propertyFiltering.empty
        : empty;
    var filteringOptions = options.propertyFiltering
        ? options.propertyFiltering.filteringProperties.reduce(function (acc, property) {
            Object.keys(allItems.reduce(function (acc, item) {
                acc['' + fixupFalsyValues(item[property.key])] = true;
                return acc;
            }, {})).forEach(function (value) {
                if (value !== '') {
                    acc.push({
                        propertyKey: property.key,
                        value: value,
                    });
                }
            });
            return acc;
        }, [])
        : [];
    return {
        collectionProps: __assign(__assign(__assign(__assign(__assign({ empty: empty }, (options.sorting
            ? {
                onSortingChange: function (_a) {
                    var detail = _a.detail;
                    actions.setSorting(detail);
                },
                sortingColumn: sortingState === null || sortingState === void 0 ? void 0 : sortingState.sortingColumn,
                sortingDescending: sortingState === null || sortingState === void 0 ? void 0 : sortingState.isDescending,
            }
            : {})), (options.expandableRows
            ? {
                expandableRows: {
                    getItemChildren: function (item) {
                        return itemsTree.getChildren(item);
                    },
                    isItemExpandable: function (item) {
                        return itemsTree.getChildren(item).length > 0;
                    },
                    expandedItems: expandedItems,
                    onExpandableItemToggle: function (_a) {
                        var _b = _a.detail, item = _b.item, expanded = _b.expanded;
                        var getId = options.expandableRows.getId;
                        if (expanded) {
                            for (var _i = 0, expandedItems_1 = expandedItems; _i < expandedItems_1.length; _i++) {
                                var stateItem = expandedItems_1[_i];
                                if (getId(stateItem) === getId(item)) {
                                    return;
                                }
                            }
                            actions.setExpandedItems(__spreadArray(__spreadArray([], expandedItems, true), [item], false));
                        }
                        else {
                            actions.setExpandedItems(expandedItems.filter(function (stateItem) { return getId(stateItem) !== getId(item); }));
                        }
                    },
                },
                // The trackBy property is used to match expanded items by ID and not by object reference.
                // The property can be overridden by the explicitly provided selection.trackBy.
                // If that is the case, we assume both selection.trackBy and expandableRows.getId have the same result.
                // If not, the expandable state won't be matched correctly by the table.
                trackBy: options.expandableRows.getId,
            }
            : {})), (options.selection
            ? {
                onSelectionChange: function (_a) {
                    var selectedItems = _a.detail.selectedItems;
                    actions.setSelectedItems(selectedItems);
                },
                selectedItems: selectedItems,
                trackBy: (_c = options.selection.trackBy) !== null && _c !== void 0 ? _c : (_d = options.expandableRows) === null || _d === void 0 ? void 0 : _d.getId,
            }
            : {})), { ref: collectionRef, firstIndex: 1, totalItemsCount: allPageItems.length }), (((_e = options.pagination) === null || _e === void 0 ? void 0 : _e.pageSize)
            ? {
                firstIndex: ((actualPageIndex !== null && actualPageIndex !== void 0 ? actualPageIndex : currentPageIndex) - 1) * options.pagination.pageSize + 1,
            }
            : {})),
        filterProps: {
            filteringText: filteringText,
            onChange: function (_a) {
                var filteringText = _a.detail.filteringText;
                actions.setFiltering(filteringText);
            },
        },
        propertyFilterProps: {
            query: propertyFilteringQuery,
            onChange: function (_a) {
                var query = _a.detail;
                actions.setPropertyFiltering(query);
            },
            filteringProperties: ((_f = options.propertyFiltering) === null || _f === void 0 ? void 0 : _f.filteringProperties) || [],
            filteringOptions: filteringOptions,
            freeTextFiltering: (_g = options.propertyFiltering) === null || _g === void 0 ? void 0 : _g.freeTextFiltering,
        },
        paginationProps: {
            currentPageIndex: actualPageIndex !== null && actualPageIndex !== void 0 ? actualPageIndex : currentPageIndex,
            // pagesCount is always calculated when options.pagination is present
            pagesCount: pagesCount,
            onChange: function (_a) {
                var currentPageIndex = _a.detail.currentPageIndex;
                actions.setCurrentPage(currentPageIndex);
            },
        },
    };
}
