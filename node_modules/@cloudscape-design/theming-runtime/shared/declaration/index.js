import { __spreadArray } from "tslib";
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import { mergeInPlace } from '../theme';
import { RuleCreator } from './rule';
import { SingleThemeCreator } from './single';
import { MultiThemeCreator } from './multi';
import { Selector } from './selector';
import { AllPropertyRegistry, UsedPropertyRegistry } from './registry';
import { MinimalTransformer } from './transformer';
import { cloneDeep, values } from '../utils';
function createMinimalTheme(base, override) {
    var minimalTheme = cloneDeep(base);
    var contextTokens = new Set();
    values(minimalTheme.contexts).forEach(function (context) {
        Object.keys(context.tokens).forEach(function (key) {
            var _a, _b, _c;
            if (!(key in override.tokens) && !(key in ((_c = (_b = (_a = override === null || override === void 0 ? void 0 : override.contexts) === null || _a === void 0 ? void 0 : _a[context.id]) === null || _b === void 0 ? void 0 : _b.tokens) !== null && _c !== void 0 ? _c : {}))) {
                delete context.tokens[key];
            }
            else {
                contextTokens.add(key);
            }
        });
    });
    Object.keys(minimalTheme.tokens).forEach(function (key) {
        if (!contextTokens.has(key) && !(key in override.tokens)) {
            delete minimalTheme.tokens[key];
        }
    });
    return mergeInPlace(minimalTheme, override);
}
export function createOverrideDeclarations(base, override, propertiesMap, selectorCustomizer) {
    // create theme containing only modified tokens
    var minimalTheme = createMinimalTheme(base, override);
    var ruleCreator = new RuleCreator(new Selector(selectorCustomizer), new AllPropertyRegistry(propertiesMap));
    var stylesheetCreator = new SingleThemeCreator(minimalTheme, ruleCreator, base);
    var stylesheet = stylesheetCreator.create();
    return stylesheet.toString();
}
export function createBuildDeclarations(primary, secondary, propertiesMap, selectorCustomizer, used) {
    var ruleCreator = new RuleCreator(new Selector(selectorCustomizer), new UsedPropertyRegistry(propertiesMap, used));
    var stylesheetCreator = new MultiThemeCreator(__spreadArray([primary], secondary, true), ruleCreator);
    var stylesheet = stylesheetCreator.create();
    var transformer = new MinimalTransformer();
    var minimal = transformer.transform(stylesheet);
    return minimal.toString();
}
