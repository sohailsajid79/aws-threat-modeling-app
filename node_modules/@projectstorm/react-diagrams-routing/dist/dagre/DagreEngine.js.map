{"version":3,"file":"DagreEngine.js","sourceRoot":"","sources":["../../src/dagre/DagreEngine.ts"],"names":[],"mappings":"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","sourcesContent":["import { DiagramModel, PointModel } from '@projectstorm/react-diagrams-core';\nimport * as dagre from 'dagre';\nimport { GraphLabel } from 'dagre';\nimport _every from 'lodash/every';\nimport _findIndex from 'lodash/findIndex';\nimport _forEach from 'lodash/forEach';\nimport _map from 'lodash/map';\nimport _range from 'lodash/range';\nimport _sortBy from 'lodash/sortBy';\nimport { Point } from '@projectstorm/geometry';\n\nexport interface DagreEngineOptions {\n\tgraph?: GraphLabel;\n\t/**\n\t * Will also re-layout links\n\t */\n\tincludeLinks?: boolean;\n\tnodeMargin?: number;\n}\n\nexport class DagreEngine {\n\toptions: DagreEngineOptions;\n\n\tconstructor(options: DagreEngineOptions = {}) {\n\t\tthis.options = options;\n\t}\n\n\tredistribute(model: DiagramModel) {\n\t\t// Create a new directed graph\n\t\tvar g = new dagre.graphlib.Graph({\n\t\t\tmultigraph: true,\n\t\t\tcompound: true\n\t\t});\n\t\tg.setGraph(this.options.graph || {});\n\t\tg.setDefaultEdgeLabel(function () {\n\t\t\treturn {};\n\t\t});\n\n\t\t// set nodes\n\t\t_forEach(model.getNodes(), (node) => {\n\t\t\tg.setNode(node.getID(), { width: node.width, height: node.height });\n\t\t});\n\n\t\t_forEach(model.getLinks(), (link) => {\n\t\t\t// set edges\n\t\t\tif (link.getSourcePort() && link.getTargetPort()) {\n\t\t\t\tg.setEdge({\n\t\t\t\t\tv: link.getSourcePort().getNode().getID(),\n\t\t\t\t\tw: link.getTargetPort().getNode().getID(),\n\t\t\t\t\tname: link.getID()\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\t// layout the graph\n\t\tdagre.layout(g);\n\n\t\tg.nodes().forEach((v) => {\n\t\t\tconst node = g.node(v);\n\t\t\tmodel.getNode(v).setPosition(node.x - node.width / 2, node.y - node.height / 2);\n\t\t});\n\n\t\t// also include links?\n\t\tif (this.options.includeLinks) {\n\t\t\tg.edges().forEach((e) => {\n\t\t\t\tconst edge = g.edge(e);\n\t\t\t\tconst link = model.getLink(e.name);\n\n\t\t\t\tconst points = [link.getFirstPoint()];\n\t\t\t\tfor (let i = 1; i < edge.points.length - 1; i++) {\n\t\t\t\t\tpoints.push(new PointModel({ link: link, position: new Point(edge.points[i].x, edge.points[i].y) }));\n\t\t\t\t}\n\t\t\t\tlink.setPoints(points.concat(link.getLastPoint()));\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * TODO cleanup this method into smaller methods\n\t */\n\tpublic refreshLinks(diagram: DiagramModel) {\n\t\tconst { nodeMargin } = this.options;\n\t\tconst nodes = diagram.getNodes();\n\t\tconst links = diagram.getLinks();\n\t\tlet maxChunkRowIndex = -1;\n\t\t// build the chunk matrix\n\t\tconst chunks: { [id: number]: { [id: number]: boolean } } = {}; // true: occupied, false: blank\n\t\tconst NodeXColumnIndexDictionary: { [id: number]: number } = {};\n\t\tlet verticalLines: number[] = [];\n\t\t_forEach(nodes, (node) => {\n\t\t\t// find vertical lines. vertical lines go through maximum number of nodes located under each other.\n\t\t\tconst nodeColumnCenter = node.getX() + node.width / 2;\n\t\t\tif (\n\t\t\t\t_every(verticalLines, (vLine) => {\n\t\t\t\t\treturn Math.abs(nodeColumnCenter - vLine) > nodeMargin;\n\t\t\t\t})\n\t\t\t) {\n\t\t\t\tverticalLines.push(nodeColumnCenter);\n\t\t\t}\n\t\t});\n\n\t\t// sort chunk columns\n\t\tverticalLines = verticalLines.sort((a, b) => a - b);\n\t\t_forEach(verticalLines, (line, index) => {\n\t\t\tchunks[index] = {};\n\t\t\tchunks[index + 0.5] = {};\n\t\t});\n\n\t\t// set occupied chunks\n\t\t_forEach(nodes, (node) => {\n\t\t\tconst nodeColumnCenter = node.getX() + node.width / 2;\n\t\t\tconst startChunkIndex = Math.floor(node.getY() / nodeMargin);\n\t\t\tconst endChunkIndex = Math.floor((node.getY() + node.height) / nodeMargin);\n\t\t\t// find max ChunkRowIndex\n\t\t\tif (endChunkIndex > maxChunkRowIndex) maxChunkRowIndex = endChunkIndex;\n\t\t\tconst nodeColumnIndex = _findIndex(verticalLines, (vLine) => {\n\t\t\t\treturn Math.abs(nodeColumnCenter - vLine) <= nodeMargin;\n\t\t\t});\n\t\t\t_forEach(_range(startChunkIndex, endChunkIndex + 1), (chunkIndex) => {\n\t\t\t\tchunks[nodeColumnIndex][chunkIndex] = true;\n\t\t\t});\n\t\t\tNodeXColumnIndexDictionary[node.getX()] = nodeColumnIndex;\n\t\t});\n\n\t\t// sort links based on their distances\n\t\tconst edges = _map(links, (link) => {\n\t\t\tif (link.getSourcePort() && link.getTargetPort()) {\n\t\t\t\tconst source = link.getSourcePort().getNode();\n\t\t\t\tconst target = link.getTargetPort().getNode();\n\t\t\t\tconst sourceIndex = NodeXColumnIndexDictionary[source.getX()];\n\t\t\t\tconst targetIndex = NodeXColumnIndexDictionary[target.getX()];\n\n\t\t\t\treturn sourceIndex > targetIndex\n\t\t\t\t\t? {\n\t\t\t\t\t\t\tlink,\n\t\t\t\t\t\t\tsourceIndex,\n\t\t\t\t\t\t\tsourceY: source.getY() + source.height / 2,\n\t\t\t\t\t\t\tsource,\n\t\t\t\t\t\t\ttargetIndex,\n\t\t\t\t\t\t\ttargetY: target.getY() + source.height / 2,\n\t\t\t\t\t\t\ttarget\n\t\t\t\t\t  }\n\t\t\t\t\t: {\n\t\t\t\t\t\t\tlink,\n\t\t\t\t\t\t\tsourceIndex: targetIndex,\n\t\t\t\t\t\t\tsourceY: target.getY() + target.height / 2,\n\t\t\t\t\t\t\tsource: target,\n\t\t\t\t\t\t\ttargetIndex: sourceIndex,\n\t\t\t\t\t\t\ttargetY: source.getY() + source.height / 2,\n\t\t\t\t\t\t\ttarget: source\n\t\t\t\t\t  };\n\t\t\t}\n\t\t});\n\t\tconst sortedEdges = _sortBy(edges, (link) => {\n\t\t\treturn Math.abs(link.targetIndex - link.sourceIndex);\n\t\t});\n\n\t\t// set link points\n\t\tif (this.options.includeLinks) {\n\t\t\t_forEach(sortedEdges, (edge) => {\n\t\t\t\tconst link = diagram.getLink(edge.link.getID());\n\t\t\t\t// re-draw\n\t\t\t\tif (Math.abs(edge.sourceIndex - edge.targetIndex) > 1) {\n\t\t\t\t\t// get the length of link in column\n\t\t\t\t\tconst columns = _range(edge.sourceIndex - 1, edge.targetIndex);\n\n\t\t\t\t\tconst chunkIndex = Math.floor(edge.sourceY / nodeMargin);\n\t\t\t\t\tconst targetChunkIndex = Math.floor(edge.targetY / nodeMargin);\n\n\t\t\t\t\t// check upper paths\n\t\t\t\t\tlet northCost = 1;\n\t\t\t\t\tlet aboveRowIndex = chunkIndex;\n\t\t\t\t\tfor (; aboveRowIndex >= 0; aboveRowIndex--, northCost++) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t_every(columns, (columnIndex) => {\n\t\t\t\t\t\t\t\treturn !(\n\t\t\t\t\t\t\t\t\tchunks[columnIndex][aboveRowIndex] ||\n\t\t\t\t\t\t\t\t\tchunks[columnIndex + 0.5][aboveRowIndex] ||\n\t\t\t\t\t\t\t\t\tchunks[columnIndex - 0.5][aboveRowIndex]\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// check lower paths\n\t\t\t\t\tlet southCost = 0;\n\t\t\t\t\tlet belowRowIndex = chunkIndex;\n\t\t\t\t\tfor (; belowRowIndex <= maxChunkRowIndex; belowRowIndex++, southCost++) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t_every(columns, (columnIndex) => {\n\t\t\t\t\t\t\t\treturn !(\n\t\t\t\t\t\t\t\t\tchunks[columnIndex][belowRowIndex] ||\n\t\t\t\t\t\t\t\t\tchunks[columnIndex + 0.5][belowRowIndex] ||\n\t\t\t\t\t\t\t\t\tchunks[columnIndex - 0.5][belowRowIndex]\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// pick the cheapest path\n\t\t\t\t\tconst pathRowIndex =\n\t\t\t\t\t\tsouthCost + (belowRowIndex - targetChunkIndex) < northCost + (targetChunkIndex - aboveRowIndex)\n\t\t\t\t\t\t\t? belowRowIndex + 1\n\t\t\t\t\t\t\t: aboveRowIndex - 1;\n\n\t\t\t\t\t// Finally update the link points\n\t\t\t\t\tconst points = [link.getFirstPoint()];\n\t\t\t\t\tpoints.push(\n\t\t\t\t\t\tnew PointModel({\n\t\t\t\t\t\t\tlink: link,\n\t\t\t\t\t\t\tposition: new Point(\n\t\t\t\t\t\t\t\t(verticalLines[columns[0]] + verticalLines[columns[0] + 1]) / 2,\n\t\t\t\t\t\t\t\t(pathRowIndex + 0.5) * nodeMargin\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\n\t\t\t\t\t_forEach(columns, (column) => {\n\t\t\t\t\t\tpoints.push(\n\t\t\t\t\t\t\tnew PointModel({\n\t\t\t\t\t\t\t\tlink: link,\n\t\t\t\t\t\t\t\tposition: new Point(verticalLines[column], (pathRowIndex + 0.5) * nodeMargin)\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t\tpoints.push(\n\t\t\t\t\t\t\tnew PointModel({\n\t\t\t\t\t\t\t\tlink: link,\n\t\t\t\t\t\t\t\tposition: new Point(\n\t\t\t\t\t\t\t\t\t(verticalLines[column] + verticalLines[column - 1]) / 2,\n\t\t\t\t\t\t\t\t\t(pathRowIndex + 0.5) * nodeMargin\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t\tchunks[column][pathRowIndex] = true;\n\t\t\t\t\t\tchunks[column][pathRowIndex + 1] = true;\n\t\t\t\t\t\tchunks[column + 0.5][pathRowIndex] = true;\n\t\t\t\t\t\tchunks[column + 0.5][pathRowIndex + 1] = true;\n\t\t\t\t\t});\n\t\t\t\t\tlink.setPoints(points.concat(link.getLastPoint()));\n\t\t\t\t} else {\n\t\t\t\t\t// refresh\n\t\t\t\t\tlink.setPoints([link.getFirstPoint(), link.getLastPoint()]);\n\t\t\t\t\tconst columnIndex = (edge.sourceIndex + edge.targetIndex) / 2;\n\t\t\t\t\tif (!chunks[columnIndex]) {\n\t\t\t\t\t\tchunks[columnIndex] = {};\n\t\t\t\t\t}\n\t\t\t\t\tconst rowIndex = Math.floor((edge.sourceY + edge.targetY) / 2 / nodeMargin);\n\t\t\t\t\tchunks[columnIndex][rowIndex] = true;\n\t\t\t\t\tchunks[columnIndex][rowIndex + 1] = true;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n}\n"]}