{"version":3,"file":"index.umd.js","mappings":";CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAQ,kCAAoCD,IAE5CD,EAAK,kCAAoCC,IAR3C,CASGK,MAAM,oHCTT,cAIA,SAEA,SAeA,MAAaC,UAAsB,EAAAC,aAQlCC,YAAYC,EAA+B,IAC1CC,MAAMD,GACNE,KAAKC,uBAAyB,IAG9BD,KAAKE,cAAgB,IAAI,EAAAC,YACzBH,KAAKI,cAAgB,IAAI,EAAAD,YACzBH,KAAKK,cAAgB,IAAI,EAAAF,YACzBH,KAAKM,eAAiB,IAAI,EAAAH,YAE1B,MAAMI,EAASlB,IACdA,EAAQmB,iBAAiB,CACxBC,aAAeC,IACdA,EAAMrB,QAAQsB,iBAAiBX,OAEhCY,eAAiBF,IAChBA,EAAMrB,QAAQsB,iBAAiB,UAKlCJ,EAAMP,KAAKE,eACXK,EAAMP,KAAKI,eACXG,EAAMP,KAAKK,eACXE,EAAMP,KAAKM,gBAMZO,gBAAgBH,GACf,IAAII,EAASJ,EAAMI,OACfC,EAAef,KAAKgB,MAGpBC,EAAU,EAAAC,QAAQC,QAAQL,EAAQ,oBACtC,GAAIG,EAAS,CACZ,IAAIG,EAAc,EAAAF,QAAQC,QAAQL,EAAQ,sBAC1C,OAAOC,EAAaM,QAAQD,EAAYE,aAAa,gBAAgBC,QAAQN,EAAQK,aAAa,cAKnG,OADAL,EAAU,EAAAC,QAAQC,QAAQL,EAAQ,oBAE1BC,EAAaS,QAAQP,EAAQK,aAAa,gBAAgBG,cAAcR,EAAQK,aAAa,aAIrGL,EAAU,EAAAC,QAAQC,QAAQL,EAAQ,kBAE1BC,EAAaS,QAAQP,EAAQK,aAAa,iBAIlDL,EAAU,EAAAC,QAAQC,QAAQL,EAAQ,uBAE1BC,EAAaM,QAAQJ,EAAQK,aAAa,gBAG3C,KAKRI,mBACC,OAAO1B,KAAKE,cAGbyB,mBACC,OAAO3B,KAAKI,cAGbwB,oBACC,OAAO5B,KAAKM,eAGbuB,mBACC,OAAO7B,KAAKK,cAGbyB,kBAA4EC,GAC3E,MAAoB,iBAATA,EACH/B,KAAKE,cAAc8B,WAAWD,GAE/B/B,KAAKE,cAAc8B,WAAWD,EAAKE,WAG3CC,kBAA4EC,GAC3E,MAAoB,iBAATA,EACHnC,KAAKI,cAAc4B,WAAcG,GAElCnC,KAAKI,cAAc4B,WAAcG,EAAKF,WAG9CG,mBAA8EC,GAC7E,MAAqB,iBAAVA,EACHrC,KAAKM,eAAe0B,WAAWK,GAEhCrC,KAAKM,eAAe0B,WAAWK,EAAMJ,WAG7CK,kBAA4EC,GAC3E,MAAoB,iBAATA,EACHvC,KAAKK,cAAc2B,WAAcO,GAElCvC,KAAKK,cAAc2B,WAAcO,EAAKN,WAG9CO,sBAAsBL,GACrB,OAAOnC,KAAKkC,kBAAkBC,GAAMM,oBAAoB,CAAEzB,MAAOmB,IAGlEO,sBAAsBX,GACrB,OAAO/B,KAAK8B,kBAAkBC,GAAMU,oBAAoB,CAAEzB,MAAOe,IAGlEY,eAAeZ,GACd,MAAMa,EAAW5C,KAAK6C,OAAOC,cAAc,sBAAsBf,EAAKgB,aACtE,GAAiB,OAAbH,EACH,MAAM,IAAII,MAAM,0CAA4CjB,EAAKgB,QAAU,KAE5E,OAAOH,EAGRK,mBAAmBV,GAClB,IAAIK,EAAW5C,KAAK6C,OAAOC,cAC1B,oBAAoBP,EAAKW,4BAA4BX,EAAKY,YAAYJ,aAEvE,GAAiB,OAAbH,EACH,MAAM,IAAII,MACT,+CACCT,EAAKY,YAAYJ,QACjB,gBACAR,EAAKW,UACL,KAGH,OAAON,EAGRQ,cAAcb,GACb,OAAOvC,KAAKqD,cAAcd,GAAMe,YAMjCD,cAAcd,EAAiBtB,GAC9B,IAAKjB,KAAK6C,OACT,MAAM,IAAIG,MAAM,gCAEZ/B,IACJA,EAAUjB,KAAKiD,mBAAmBV,IAEnC,MAAMgB,EAAatC,EAAQuC,wBACrBC,EAAQzD,KAAK0D,sBAAsB,CACxCC,QAASJ,EAAWK,KACpBC,QAASN,EAAWO,MAEfC,EAAO/D,KAAKgB,MAAMgD,eAAiB,IACzC,OAAO,IAAI,EAAAC,UAAUR,EAAMS,EAAGT,EAAMU,EAAGZ,EAAWa,MAAQL,EAAMR,EAAWc,OAASN,GAOrFO,kBAAkBvC,GACjB,IAAK/B,KAAK6C,OACT,MAAO,CACNuB,MAAO,EACPC,OAAQ,GAIV,MACME,EADcvE,KAAK2C,eAAeZ,GACXyB,wBAE7B,MAAO,CACNY,MAAOG,EAASH,MAChBC,OAAQE,EAASF,QAInBG,qBAAqBC,GACpB,GAAIA,EACH,OAAqB,IAAjBA,EAAMC,OACF,IAAI,EAAAT,UAAU,EAAG,EAAG,EAAG,GAGxB,EAAAU,QAAQC,wBAAwBH,EAAMI,KAAK9C,GAASA,EAAK+C,oBAIlEC,uBAAuBjF,GACtB,MAAM2E,EAAqBzE,KAAKgB,MAC9BgE,sBACAC,QAAQC,GAAWA,aAAkB,EAAAC,YACvCnF,KAAKoF,eAAe,CACnBC,OAAQvF,EAAQuF,OAChBC,QAASxF,EAAQwF,QACjBb,MAAOA,EAAMC,OAAS,EAAID,EAAQ,OASpCW,eAAetF,GACd,IAAIuF,EAASvF,GAAW,EACpB2E,EAAqB,GACrBa,EAAyB,KACvBxF,GAA6B,iBAAXA,IACvBuF,EAASvF,EAAQuF,QAAU,EAC3BZ,EAAQ3E,EAAQ2E,OAAS,GACzBa,EAAUxF,EAAQwF,SAAW,MAIT,IAAjBb,EAAMC,SACTD,EAAQzE,KAAKgB,MAAMuE,YAEpB,MAAMC,EAAYxF,KAAKwE,qBAAqBC,GAC5C,GAAIe,EAAW,CAEd,IAAIC,EAAazF,KAAK6C,OAAOW,wBAE7B,MAAMkC,EAAY,CAACL,EAAiB,KAEnC,MAAMM,EAAU3F,KAAK6C,OAAO+C,aAAeJ,EAAUK,WAAsB,EAATR,GAC5DS,EAAU9F,KAAK6C,OAAOkD,cAAgBP,EAAUQ,YAAuB,EAATX,GAEpE,IAAIY,EAAaN,EAAUG,EAAUH,EAAUG,EAK/C,OAJIR,GAAWW,EAAaX,IAC3BW,EAAaX,GAGP,CACNvB,KAAMkC,EACN/B,EACCuB,EAAWrB,MAAQ,IACjBoB,EAAUK,WAAsB,EAATR,GAAc,EAAIG,EAAUU,aAAahC,GAAK+B,EACvEZ,EACDlB,EACCsB,EAAWpB,OAAS,IAClBmB,EAAUQ,YAAuB,EAATX,GAAc,EAAIG,EAAUU,aAAa/B,GAAK8B,EACxEZ,IAIH,IAAIc,EAAST,EAAU,GACnBL,IACCc,EAAOjC,EAAImB,GAAUc,EAAOhC,EAAIkB,KACnCc,EAAST,EAAUL,IAKrBrF,KAAKgB,MAAMoF,aAA2B,IAAdD,EAAOpC,MAC/B/D,KAAKgB,MAAMqF,UAAUF,EAAOjC,EAAGiC,EAAOhC,GACtCnE,KAAKsG,iBAIPC,4BACC,OAAOvG,KAAKC,uBAGbuG,0BAA0BC,GACzBzG,KAAKC,uBAAyBwG,GAvRhC,sGCnBA,eAYA,MAAaC,UAAsE,EAAAC,UAClF9G,YAAYC,GACXC,MAAM,OAAD,wBACDD,GAAO,CACV8G,QAAS9G,EAAQ8G,SAAW,EAC5BC,QAAS/G,EAAQ+G,SAAW,KAI9BC,YAAYpG,GACXX,MAAM+G,YAAYpG,GAClBV,KAAKF,QAAQ8G,QAAUlG,EAAMqG,KAAKH,QAClC5G,KAAKF,QAAQ+G,QAAUnG,EAAMqG,KAAKF,QAGnCG,YACC,OAAO,OAAP,wBACIjH,MAAMiH,aAAW,CACpBJ,QAAS5G,KAAKF,QAAQ8G,QACtBC,QAAS7G,KAAKF,QAAQ+G,WAnBzB,oGCdA,eAGA,SAQA,IAAUI,GAAV,SAAUA,GACI,EAAAC,MAAQ,UAAOC,GAAG;;;GAKlB,EAAAC,QAAU,UAAOC,aAAa;;;GAN5C,CAAUJ,IAAAA,EAAC,KAYX,MAAaK,UAAoBC,EAAMC,UAGtC3H,YAAY4H,GACX1H,MAAM0H,GAYP,KAAAC,yCAA4CC,IAE3C,MAAMxF,EAAOnC,KAAKyH,MAAMpF,MAAMc,YACxByE,EAAUzF,EAAK0F,kBAAkBhD,KAAKiD,GAASA,EAAKC,mBAG1D,IAAIC,EACHJ,EAAQK,QAAO,CAACC,EAAeC,IAAiBD,EAAgBC,GAAc,IAC7ER,GAASxF,EAAKiG,YAAY1D,OAAS,IAGjC2D,EAAY,EAChB,KAAOA,EAAYlG,EAAK0F,kBAAkBnD,QAAQ,CACjD,GAAIsD,EAAgBJ,EAAQS,GAAa,EACxC,MAAO,CACNP,KAAM3F,EAAK0F,kBAAkBQ,GAC7BC,SAAUN,GAKZA,GAAiBJ,EAAQS,GACzBA,MAIF,KAAAE,uBAAyB,KACxB,MAAMC,EAAQxI,KAAK0H,yCAAyC1H,KAAKyH,MAAME,MAAQ,GAC/E,IAAKa,EACJ,OAGD,MAAM,KAAEV,EAAI,SAAEQ,GAAaE,EAErBC,EACEzI,KAAK0I,IAAIC,QAAQC,YADnBH,EAEGzI,KAAK0I,IAAIC,QAAQE,aAGpBC,EAAahB,EAAKiB,iBAAiBT,GAEnCU,EACFF,EAAW5E,EAAIuE,EAAwB,EAAIzI,KAAKyH,MAAMpF,MAAM4G,aAAarC,QADvEoC,EAEFF,EAAW3E,EAAIsE,EAAyB,EAAIzI,KAAKyH,MAAMpF,MAAM4G,aAAapC,QAG9E7G,KAAK0I,IAAIC,QAAQO,MAAMC,UAAY,aAAaH,QAAyBA,QAzDzEhJ,KAAK0I,IAAMnB,EAAM6B,YAGlBC,qBACCC,OAAOC,sBAAsBvJ,KAAKuI,wBAGnCiB,oBACCF,OAAOC,sBAAsBvJ,KAAKuI,wBAoDnCkB,SACC,MAAM5G,EAAS7C,KAAKyH,MAAMiC,OAAOC,YAEjC,OACC,gBAAC1C,EAAEG,QAAO,CAACwC,IAAK5J,KAAKyH,MAAMpF,MAAMU,QAASqB,MAAOvB,aAAM,EAANA,EAAQ+F,YAAavE,OAAQxB,aAAM,EAANA,EAAQgG,cACrF,gBAAC5B,EAAEC,MAAK,CAACwB,IAAK1I,KAAK0I,KACjB1I,KAAKyH,MAAMiC,OAAOtH,mBAAmBpC,KAAKyH,MAAMpF,OAAOI,oBAAoB,CAAEzB,MAAOhB,KAAKyH,MAAMpF,WAvErG,0GCvBA,eACA,SAEA,SACA,SAEA,MAAawH,UAAyB,EAAAC,qBACrCjK,cACCE,MAAM,iBAGPgK,cAAcrJ,GACb,OAAO,IAAI,EAAAsJ,eAGZvH,oBAAoB/B,GACnB,OAAO,gBAAC,EAAAuJ,gBAAe,CAACC,MAAOxJ,EAAMM,MAAO0I,OAAQ1J,KAAK0J,UAV3D,6GCNA,eACA,SASA,MAAaM,UAAkF,EAAAG,WAC9FtK,cACCE,MAAM,CACLqK,KAAM,gBACNC,OAAO,EACPC,aAAa,IAIfC,SAASvJ,GACR,KAAMA,aAAiB,EAAAwJ,WACtB,MAAM,IAAIxH,MAAM,oCAEjBhC,EAAMR,iBAAiB,CACtBiK,cAAe,KACbzK,KAAKmD,YAA6BuH,WAAW1J,MAGhDjB,MAAMwK,SAASvJ,GAGhB2J,WACC,OAAO3K,KAAK4K,YAGbC,yBAAyBnB,GACxB,OAAOA,EAAO/H,oBA1BhB,4GCVA,eACA,SACA,SACA,SASA,IAAUsF,GAAV,SAAUA,GACI,EAAA6D,UAAY,UAAO3D,GAAG,GADpC,CAAUF,IAAAA,EAAC,KAIX,MAAagD,UAAwB1C,EAAMC,UAC1CiC,SACC,OACC,gCAGEsB,EAAElG,IAAI7E,KAAKyH,MAAMyC,MAAMS,YAAaxI,GAC5B,gBAAC,EAAA6I,WAAU,CAACpB,IAAKzH,EAAKY,QAASZ,KAAMA,EAAM8I,cAAejL,KAAKyH,MAAMiC,aAPlF,uGCfA,cACA,SAIA,SACA,SAoBA,MAAac,UACJ,EAAA7D,UAWR9G,YAAYC,GACXC,MAAMD,GACNE,KAAKkL,OAAS,CACb,IAAI,EAAAC,WAAW,CACdhJ,KAAMnC,OAEP,IAAI,EAAAmL,WAAW,CACdhJ,KAAMnC,QAGRA,KAAKoL,WAAa,KAClBpL,KAAKqL,WAAa,KAClBrL,KAAKsL,cAAgB,GACrBtL,KAAKuL,OAAS,GAGfzG,iBACC,OAAO,EAAAH,QAAQ6G,sBACdT,EAAElG,IAAI7E,KAAKkL,QAASzH,GACZA,EAAMgI,iBAKhBC,uBACC,OAAI1L,KAAK2L,iBAAmB3L,KAAK4L,gBACzB7L,MAAM2L,uBAAuBG,OAAOd,EAAEe,MAAM9L,KAAKkL,OAAQ,EAAGlL,KAAKkL,OAAOxG,OAAS,IAGpF1E,KAAK4L,gBAIL5L,KAAK2L,gBAGH5L,MAAM2L,uBAAuBG,OAAO7L,KAAKkL,QAFxCnL,MAAM2L,uBAAuBG,OAAOd,EAAEe,MAAM9L,KAAKkL,OAAQ,EAAGlL,KAAKkL,OAAOxG,SAJxE3E,MAAM2L,uBAAuBG,OAAOd,EAAEe,MAAM9L,KAAKkL,OAAQ,EAAGlL,KAAKkL,OAAOxG,OAAS,IAS1FoC,YAAYpG,GACXX,MAAM+G,YAAYpG,GAClBV,KAAKkL,OAASH,EAAElG,IAAInE,EAAMqG,KAAKmE,QAAU,IAAKzH,IAC7C,IAAIsI,EAAI,IAAI,EAAAZ,WAAW,CACtBhJ,KAAMnC,KACNsI,SAAU,IAAI,EAAA0D,MAAMvI,EAAMS,EAAGT,EAAMU,KAMpC,OAJA4H,EAAEjF,YAAY,OAAD,wBACTpG,GAAK,CACRqG,KAAMtD,KAEAsI,KAIRhB,EAAEkB,QAAQvL,EAAMqG,KAAKwE,QAAU,IAAKlJ,IACnC,IAAI6J,EAAWxL,EAAMgJ,OAAyBtH,mBAAmBC,EAAM+H,MAAML,cAAc,IAC3FmC,EAAQpF,YAAY,OAAD,wBACfpG,GAAK,CACRqG,KAAM1E,KAEPrC,KAAKmM,SAASD,MAKXxL,EAAMqG,KAAKjG,QACdJ,EAAM0L,SAAS1L,EAAMqG,KAAKsE,YAAYgB,MAAMrL,IAC3ChB,KAAKsM,cAActL,MAGjBN,EAAMqG,KAAKwF,QACd7L,EAAM0L,SAAS1L,EAAMqG,KAAKqE,YAAYiB,MAAMrL,IAC3ChB,KAAKwM,cAAcxL,MAKtB6G,kBACC,OAAO7H,KAAKsL,cAGbmB,iBAAiBC,GAChB1M,KAAKsL,cAAgBoB,EAGtB1F,YACC,OAAO,OAAP,wBACIjH,MAAMiH,aAAW,CACpBuF,OAAQvM,KAAKoL,WAAapL,KAAKoL,WAAWjI,YAAYJ,QAAU,KAChEqI,WAAYpL,KAAKoL,WAAapL,KAAKoL,WAAWrI,QAAU,KACxDjC,OAAQd,KAAKqL,WAAarL,KAAKqL,WAAWlI,YAAYJ,QAAU,KAChEsI,WAAYrL,KAAKqL,WAAarL,KAAKqL,WAAWtI,QAAU,KACxDmI,OAAQH,EAAElG,IAAI7E,KAAKkL,QAASzH,GACpBA,EAAMuD,cAEduE,OAAQR,EAAElG,IAAI7E,KAAKuL,QAASlJ,GACpBA,EAAM2E,gBAKhB2F,QAAQC,EAAc,GAAIC,GACzBA,EAAMC,UACL/B,EAAElG,IAAI7E,KAAK+M,aAActJ,GACjBA,EAAMoJ,MAAMD,MAGjB5M,KAAKoL,YACRyB,EAAML,cAAcxM,KAAKoL,WAAWyB,MAAMD,IAEvC5M,KAAKqL,YACRwB,EAAMP,cAActM,KAAKqL,WAAWwB,MAAMD,IAI5CI,UAAUzK,GACLvC,KAAKoL,aAAe7I,EACvBvC,KAAKwM,cAAc,MACTxM,KAAKqL,aAAe9I,GAC9BvC,KAAKsM,cAAc,MAIrBW,SACKjN,KAAKoL,aACRpL,KAAKoL,WAAWV,WAAW1K,aACpBA,KAAKoL,YAETpL,KAAKqL,aACRrL,KAAKqL,WAAWX,WAAW1K,aACpBA,KAAKqL,YAEbtL,MAAMkN,SAGPC,YAAYzJ,GAEX,OADYzD,KAAKmN,cAAc1J,KACdzD,KAAKkL,OAAOxG,OAAS,EAGvCyI,cAAc1J,GACb,OAAOzD,KAAKkL,OAAOkC,QAAQ3J,GAG5BhC,cAAc4L,GACb,IAAK,IAAIC,EAAI,EAAGA,EAAItN,KAAKkL,OAAOxG,OAAQ4I,IACvC,GAAItN,KAAKkL,OAAOoC,GAAGvK,UAAYsK,EAC9B,OAAOrN,KAAKkL,OAAOoC,GAGrB,OAAO,KAGRC,gBAAgB9J,GACf,OAAwB,OAApBzD,KAAKoL,YAAuBpL,KAAKwN,gBAAgBzK,UAAYU,EAAMV,QAC/D/C,KAAKoL,WAEW,OAApBpL,KAAKqL,YAAuBrL,KAAKyN,eAAe1K,UAAYU,EAAMV,QAC9D/C,KAAKqL,WAEN,KAGRqC,gBAAgBnL,GACf,OAAwB,OAApBvC,KAAKoL,YAAuBpL,KAAKoL,WAAWrI,UAAYR,EAAKQ,QACzD/C,KAAKwN,gBAEW,OAApBxN,KAAKqL,YAAuBrL,KAAKqL,WAAWtI,UAAYR,EAAKQ,QACzD/C,KAAKyN,eAEN,KAGRD,gBACC,OAAOxN,KAAKkL,OAAO,GAGpBuC,eACC,OAAOzN,KAAKkL,OAAOlL,KAAKkL,OAAOxG,OAAS,GAGzC8H,cAAcjK,GACA,OAATA,GACHA,EAAKoL,QAAQ3N,MAEU,OAApBA,KAAKoL,YACRpL,KAAKoL,WAAWV,WAAW1K,MAE5BA,KAAKoL,WAAa7I,EAClBvC,KAAK4N,UAAU,CAAErL,QAAQ,sBACrBA,aAAI,EAAJA,EAAMsL,mBACT7N,KAAK0N,gBAAgBnL,GAAMuL,YAAYvL,EAAKwL,aAI9CnC,gBACC,OAAO5L,KAAKoL,WAGbO,gBACC,OAAO3L,KAAKqL,WAGbiB,cAAc/J,GACA,OAATA,GACHA,EAAKoL,QAAQ3N,MAEU,OAApBA,KAAKqL,YACRrL,KAAKqL,WAAWX,WAAW1K,MAE5BA,KAAKqL,WAAa9I,EAClBvC,KAAK4N,UAAU,CAAErL,QAAQ,sBACrBA,aAAI,EAAJA,EAAMsL,mBACT7N,KAAK0N,gBAAgBnL,GAAMuL,YAAYvL,EAAKwL,aAI9CtK,MAAMS,EAAWC,EAAWwD,EAAgB,GAC3C,OAAO3H,KAAKgO,SAAShO,KAAKiO,cAAc/J,EAAGC,GAAIwD,GAGhDwE,SAAS9J,GACRA,EAAM6L,UAAUlO,MAChBA,KAAKuL,OAAO4C,KAAK9L,GAGlB0K,YACC,OAAO/M,KAAKkL,OAGb9C,YACC,OAAOpI,KAAKuL,OAGbuB,UAAU5B,GACTH,EAAEkB,QAAQf,GAASzH,IAClBA,EAAMyK,UAAUlO,SAEjBA,KAAKkL,OAASA,EAGfkD,YAAYC,GACPrO,KAAKkN,YAAYmB,IAAarO,KAAKiN,SACvCjN,KAAKkL,OAAOoD,OAAOtO,KAAKmN,cAAckB,GAAa,GAGpDE,mBAAmBF,GAClBrO,KAAKkL,OAAOoD,OAAO,EAAGtO,KAAKmN,cAAckB,IAG1CG,kBAAkBH,GACjBrO,KAAKkL,OAAOoD,OAAOtO,KAAKmN,cAAckB,GAAc,GAGrDI,qBACKzO,KAAKkL,OAAOxG,OAAS,GACxB1E,KAAKkL,OAAOoD,OAAO,EAAGtO,KAAKkL,OAAOxG,OAAS,GAI7CsJ,SAA+BK,EAAe1G,EAAQ,GAGrD,OAFA0G,EAAWH,UAAUlO,MACrBA,KAAKkL,OAAOoD,OAAO3G,EAAO,EAAG0G,GACtBA,EAGRJ,cAAc/J,EAAY,EAAGC,EAAY,GACxC,OAAO,IAAI,EAAAgH,WAAW,CACrBhJ,KAAMnC,KACNsI,SAAU,IAAI,EAAA0D,MAAM9H,EAAGC,MAzR1B,kGC3BA,eAIA,SACA,SACA,SAaA,MAAa6G,UAAmBzD,EAAMC,UAIrC3H,YAAY4H,GACX1H,MAAM0H,GACNzH,KAAK0O,MAAQ,CACZtD,WAAY,KACZC,WAAY,MAIdsD,uBACK3O,KAAK4O,gBACR5O,KAAK4O,eAAeC,aAEjB7O,KAAK8O,gBACR9O,KAAK8O,eAAeD,aAItBE,gCAAgCC,EAAsBC,GACrD,MAAO,CACN7D,WAAY4D,EAAU7M,KAAKyJ,gBAC3BP,WAAY2D,EAAU7M,KAAKwJ,iBAI7BuD,gBACClP,KAAK8O,gBAAkB9O,KAAK8O,eAAeD,aAEtC7O,KAAKyH,MAAMtF,KAAKwJ,kBACrB3L,KAAK8O,eAAiB9O,KAAKyH,MAAMtF,KAAKwJ,gBAAgBnL,iBAAiB,CACtE2O,sBAAwBzO,IACvBV,KAAKoP,kBAKRC,gBACCrP,KAAK4O,gBAAkB5O,KAAK4O,eAAeC,aAEtC7O,KAAKyH,MAAMtF,KAAKyJ,kBACrB5L,KAAK4O,eAAiB5O,KAAKyH,MAAMtF,KAAKyJ,gBAAgBpL,iBAAiB,CACtE2O,sBAAwBzO,IACvBV,KAAKoP,kBAKR/F,mBAAmBiG,EAAgCL,EAAgCM,GAC9EN,EAAU7D,aAAepL,KAAK0O,MAAMtD,YACvCpL,KAAKqP,gBAEFJ,EAAU5D,aAAerL,KAAK0O,MAAMrD,YACvCrL,KAAKkP,gBAIAH,wBAAwBS,EAAwBC,GACtD,MAAO,IAAID,EAAWE,UAAUF,EAAWG,YAAYF,EAAUC,UAAUD,EAAUE,SAGtFnG,oBACKxJ,KAAKyH,MAAMtF,KAAKyJ,iBACnB5L,KAAKqP,gBAEFrP,KAAKyH,MAAMtF,KAAKwJ,iBACnB3L,KAAKkP,gBAIPzF,SACC,MAAM,KAAEtH,GAASnC,KAAKyH,MAGtB,OAAItF,EAAKyJ,kBAAoBzJ,EAAKyJ,gBAAgBiC,kBAG9C1L,EAAKwJ,kBAAoBxJ,EAAKwJ,gBAAgBkC,iBAF1C,KAQP,gBAAC,EAAA+B,iBAAgB,CAAC5O,MAAOhB,KAAKyH,MAAMtF,KAAM0N,WAAY7P,KAAKyH,MAAMtF,KAAK6E,cACpE,IAEC,mCAAgBhH,KAAKyH,MAAMtF,KAAKY,SAC9B/C,KAAKyH,MAAMwD,cAAczI,sBAAsBL,GAC/C4I,EAAElG,IAAI7E,KAAKyH,MAAMtF,KAAKiG,aAAa,CAAC0H,EAAYnI,IAE/C,gBAAC,EAAAL,YAAW,CACXsC,IAAKkG,EAAW/M,QAChB2G,OAAQ1J,KAAKyH,MAAMwD,cACnB5I,MAAOyN,EACPnI,MAAOA,UAhGjB,kGClBA,eAiBA,MAAawD,UAAsE,EAAA4E,kBAGlFlQ,YAAYC,GACXC,MAAM,OAAD,wBACDD,GAAO,CACVsK,KAAM,WAEPpK,KAAKgQ,OAASlQ,EAAQqC,KAGvB8N,oBACC,OAA6C,OAAtCjQ,KAAKgQ,OAAOzC,gBAAgBvN,MAGpCwB,UACC,OAAOxB,KAAKmD,YAGb8J,SAEKjN,KAAKgQ,QACRhQ,KAAKgQ,OAAO5B,YAAYpO,MAEzBD,MAAMkN,SAGPiD,WACC,OAAOnQ,MAAMmQ,YAAclQ,KAAKmD,YAAY+M,YA5B9C,yGClBA,eACA,SAEA,SACA,SAEA,MAAaC,UAAyB,EAAArG,qBACrCjK,cACCE,MAAM,iBAGPgK,cAAcrJ,GACb,OAAO,IAAI,EAAA0P,eAGZ3N,oBAAoB/B,GACnB,OAAO,gBAAC,EAAA2P,gBAAe,CAACnG,MAAOxJ,EAAMM,MAAO0I,OAAQ1J,KAAK0J,UAV3D,6GCNA,eACA,QASA,MAAa0G,UAAkF,EAAAjG,WAC9FtK,cACCE,MAAM,CACLqK,KAAM,gBACNC,OAAO,EACPC,aAAa,IAIfC,SAASvJ,GACR,KAAMA,aAAiB,EAAAmE,WACtB,MAAM,IAAInC,MAAM,oCAEjBhC,EAAMR,iBAAiB,CACtBiK,cAAe,KACbzK,KAAKmD,YAA6BmN,WAAWtP,MAGhDjB,MAAMwK,SAASvJ,GAGhB6J,yBAAyBnB,GACxB,OAAOA,EAAOhI,mBAGf6D,WACC,OAAOvF,KAAK4K,aA1Bd,4GCVA,eACA,SACA,SAEA,SASA,IAAU3D,GAAV,SAAUA,GACI,EAAA6D,UAAY,UAAO3D,GAAG,GADpC,CAAUF,IAAAA,EAAC,KAIX,MAAaoJ,UAAwB9I,EAAMC,UAC1CiC,SACC,OACC,gCACEsB,EAAElG,IAAI7E,KAAKyH,MAAMyC,MAAM3E,YAAaxD,GAC7B,gBAAC,EAAAwO,WAAU,CAAC3G,IAAK7H,EAAKgB,QAASkI,cAAejL,KAAKyH,MAAMiC,OAAQ3H,KAAMA,QALnF,sGCjBA,eAIA,SACA,SAkBA,MAAaoD,UAAmE,EAAA4K,kBAO/ElQ,YAAYC,GACXC,MAAMD,GACNE,KAAKwQ,MAAQ,GACbxQ,KAAKoE,MAAQ,EACbpE,KAAKqE,OAAS,EAGfS,iBACC,OAAO,IAAI,EAAAb,UAAUjE,KAAKyL,cAAezL,KAAKoE,MAAOpE,KAAKqE,QAK3DyJ,YAAY5J,EAAmBC,GAC9B,MAAMsM,EAAMzQ,KAAKsI,SAEbpE,aAAa,EAAA8H,MAChBjM,MAAM+N,YAAY5J,GAElBnE,MAAM+N,YAAY5J,EAAGC,GAItB4G,EAAEkB,QAAQjM,KAAKwQ,OAAQjO,IACtBA,EAAKuL,YAAYvL,EAAKmN,OAAS1P,KAAKsI,SAASpE,EAAIuM,EAAIvM,EAAG3B,EAAKoN,OAAS3P,KAAKsI,SAASnE,EAAIsM,EAAItM,MAI9F2C,YAAYpG,GACXX,MAAM+G,YAAYpG,GAGlBqK,EAAEkB,QAAQvL,EAAMqG,KAAKyJ,OAAQjO,IAC5B,IAAImO,EAAUhQ,EAAMgJ,OAAyBpH,kBAAkBC,EAAK6H,MAAML,cAAc,IACxF2G,EAAO5J,YAAY,OAAD,wBACdpG,GAAK,CACRqG,KAAMxE,KAGP7B,EAAMiQ,cAAcD,GACpB1Q,KAAK4Q,QAAQF,MAIf1J,YACC,OAAO,OAAP,wBACIjH,MAAMiH,aAAW,CACpBwJ,MAAOzF,EAAElG,IAAI7E,KAAKwQ,OAAQjO,GAClBA,EAAKyE,gBAKf2F,QAAQC,EAAc,GAAIC,GAEzBA,EAAM2D,MAAQ,GACdzF,EAAEkB,QAAQjM,KAAKwQ,OAAQjO,IACtBsK,EAAM+D,QAAQrO,EAAKsK,MAAMD,OAI3BK,SACClN,MAAMkN,SACNlC,EAAEkB,QAAQjM,KAAKwQ,OAAQjO,IACtBwI,EAAEkB,QAAQ1J,EAAKoI,YAAaxI,IAC3BA,EAAK8K,eAKR4D,cAAcxD,GACb,IAAK,IAAIC,KAAKtN,KAAKwQ,MAClB,GAAIxQ,KAAKwQ,MAAMlD,GAAGvK,UAAYsK,EAC7B,OAAOrN,KAAKwQ,MAAMlD,GAGpB,OAAO,KAGR9L,QAAQ6L,GACP,IAAK,IAAIyD,KAAU9Q,KAAKwQ,MAAO,CAC9B,MAAMO,EAAQ/Q,KAAKwQ,MAAMM,GAAQnG,WACjC,GAAIoG,EAAM1D,GACT,OAAO0D,EAAM1D,IAKhB9L,QAAQyP,GACP,OAAOhR,KAAKwQ,MAAMQ,GAGnBC,WACC,OAAOjR,KAAKwQ,MAGbU,WAAW3O,GAEV,IAAK,IAAIJ,KAAQ4I,EAAEoG,OAAO5O,EAAKoI,YAC9BxI,EAAK6K,UAAUzK,GAGZvC,KAAKwQ,MAAMjO,EAAKW,aACnBlD,KAAKwQ,MAAMjO,EAAKW,WAAWgL,UAAU,aAC9BlO,KAAKwQ,MAAMjO,EAAKW,YAIzB0N,QAAQrO,GAGP,OAFAA,EAAK2L,UAAUlO,MACfA,KAAKwQ,MAAMjO,EAAKW,WAAaX,EACtBA,EAGR6O,kBAAiB,MAAEhN,EAAK,OAAEC,IACzBrE,KAAKoE,MAAQA,EACbpE,KAAKqE,OAASA,GA3HhB,kGCvBA,eACA,SAGA,SACA,SACA,SAQA,IAAU4C,GAAV,SAAUA,GACI,EAAAoK,KAAO,UAAOlK,GAAG;;;;;;;GAD/B,CAAUF,IAAAA,EAAC,KAWX,MAAasJ,UAAmBhJ,EAAMC,UAKrC3H,YAAY4H,GACX1H,MAAM0H,GACNzH,KAAK0I,IAAMnB,EAAM6B,YAGlBuF,6BACC3O,KAAKsR,GAAGC,aACRvR,KAAKsR,GAAK,KAEG,QAAb,EAAAtR,KAAKwR,gBAAQ,SAAE3C,aACf7O,KAAKwR,SAAW,KAGjBnI,mBAAmBiG,EAAgCL,EAA0BM,GACxEvP,KAAKwR,UAAYxR,KAAKyH,MAAM1F,OAASuN,EAAUvN,OAClD/B,KAAKwR,SAAS3C,aACd7O,KAAKyR,4BAIPA,2BACCzR,KAAKwR,SAAWxR,KAAKyH,MAAM1F,KAAKvB,iBAAiB,CAChDkR,iBAAmBhR,IAClBV,KAAKoP,iBAKRuC,WAAWvN,EAAeC,GACzBrE,KAAKyH,MAAM1F,KAAKqP,iBAAiB,CAAEhN,QAAOC,WAG1C,IACC0G,EAAEkB,QAAQjM,KAAKyH,MAAM1F,KAAKkP,YAAa1O,IACtCA,EAAKqP,aAAa5R,KAAKyH,MAAMwD,cAAc5H,cAAcd,OAEzD,MAAOsP,KAGVrI,oBAECxJ,KAAKsR,GAAK,IAAI,WAAgBQ,IAC7B,MAAMC,EAASD,EAAS,GAAGE,YAC3BhS,KAAK2R,WAAWI,EAAO3N,MAAO2N,EAAO1N,WAGtC,MAAM4N,EAAIjS,KAAK0I,IAAIC,QAAQnF,wBAC3BxD,KAAK2R,WAAWM,EAAE7N,MAAO6N,EAAE5N,QAC3BrE,KAAKsR,GAAGY,QAAQlS,KAAK0I,IAAIC,SACzB3I,KAAKyR,2BAGNhI,SACC,OACC,gBAAC,EAAAmG,iBAAgB,CAAC5O,MAAOhB,KAAKyH,MAAM1F,KAAM8N,WAAY7P,KAAKyH,MAAM1F,KAAKiF,cACpE,IAEC,gBAACC,EAAEoK,KAAI,CACNc,UAAU,OACVzJ,IAAK1I,KAAK0I,IAAG,cACA1I,KAAKyH,MAAM1F,KAAKgB,QAC7BmG,MAAO,CACNpF,IAAK9D,KAAKyH,MAAM1F,KAAK4N,OACrB/L,KAAM5D,KAAKyH,MAAM1F,KAAK2N,SAGtB1P,KAAKyH,MAAMwD,cAAcvI,sBAAsB1C,KAAKyH,MAAM1F,UAvElE,uHCvBA,eACA,SACA,UASA,SAAYqQ,GACX,YACA,cACA,kBACA,gBAJD,CAAY,EAAAA,qBAAA,EAAAA,mBAAkB,KA0B9B,MAAaC,UAAmE,EAAAtC,kBAQ/ElQ,YAAYC,GACXC,MAAMD,GACNE,KAAK+Q,MAAQ,GACb/Q,KAAK6N,kBAAmB,EAGzB/G,YAAYpG,GACXX,MAAM+G,YAAYpG,GAClBV,KAAK6N,kBAAmB,EACxB7N,KAAKF,QAAQkR,KAAOtQ,EAAMqG,KAAKiK,KAC/BhR,KAAKF,QAAQwS,UAAY5R,EAAMqG,KAAKuL,UAGrCtL,YACC,OAAO,OAAP,wBACIjH,MAAMiH,aAAW,CACpBgK,KAAMhR,KAAKF,QAAQkR,KACnBsB,UAAWtS,KAAKF,QAAQwS,UACxBC,WAAYvS,KAAKgQ,OAAOjN,QACxBgO,MAAOhG,EAAElG,IAAI7E,KAAK+Q,OAAQ5O,GAClBA,EAAKY,YAOf+K,YAAY5J,EAAGC,GACd,IAAIsM,EAAMzQ,KAAKsI,SACfvI,MAAM+N,YAAY5J,EAAGC,GACrB4G,EAAEkB,QAAQjM,KAAK2K,YAAaxI,IAC3B,IAAIsB,EAAQtB,EAAKuL,gBAAgB1N,MACjCyD,EAAMqK,YAAYrK,EAAMiM,OAASxL,EAAIuM,EAAIvM,EAAGT,EAAMkM,OAASxL,EAAIsM,EAAItM,MAIrEwI,QAAQC,EAAc,GAAIC,GACzBA,EAAMkE,MAAQ,GACdlE,EAAMmD,OAAShQ,KAAKmD,YAAY0J,MAAMD,GAGvCvL,UACC,OAAOrB,KAAKmD,YAGbD,UACC,OAAOlD,KAAKF,QAAQkR,KAGrBwB,kBACC,OAAOxS,KAAKF,QAAQ2S,aAGrBC,gBAAgBD,GACfzS,KAAKF,QAAQ2S,aAAeA,EAG7B/H,WAAWvI,UACHnC,KAAK+Q,MAAM5O,EAAKY,SAGxB4K,QAAQxL,GACPnC,KAAK+Q,MAAM5O,EAAKY,SAAWZ,EAG5BwI,WACC,OAAO3K,KAAK+Q,MAGN4B,kBACN,GAAI5H,EAAE6H,SAAS5S,KAAKF,QAAQ2S,cAAe,CAC1C,IAAII,EAAwB9H,EAAE+H,KAAK9S,KAAK+Q,OACxC,GAAkC,IAA9B/Q,KAAKF,QAAQ2S,cAAsBI,GAAiB,EACvD,OAAO9H,EAAEoG,OAAOnR,KAAK+Q,OAAO,GACtB,GAAI8B,GAAiB7S,KAAKF,QAAQ2S,aACxC,OAAO,KAGT,OAAO,KAGRM,iBACChI,EAAEkB,QAAQjM,KAAK2K,YAAaxI,IAC3BA,EAAKuL,gBAAgB1N,MAAM8N,YAAY9N,KAAK+N,gBAE7C/N,KAAK4N,UACJ,CACC1I,OAAQlF,MAET,yBAIF+N,YACC,OAAO,IAAI,EAAA/B,MAAMhM,KAAK0P,OAAS1P,KAAKoE,MAAQ,EAAGpE,KAAK2P,OAAS3P,KAAKqE,OAAS,GAG5ES,iBACC,OAAO,IAAI,EAAAb,UAAUjE,KAAKsI,SAAUtI,KAAKoE,MAAOpE,KAAKqE,QAGtDuN,aAAaoB,GACZhT,KAAKoE,MAAQ4O,EAAOnN,WACpB7F,KAAKqE,OAAS2O,EAAOhN,YACrBhG,KAAK8N,YAAYkF,EAAO9M,cACxBlG,KAAK6N,kBAAmB,EACxB7N,KAAK+S,iBAGNE,cAAc1Q,GACb,OAAO,EAGR2N,WACC,OAAOnQ,MAAMmQ,YAAclQ,KAAKmD,YAAY+M,YA1H9C,kGCvCA,eACA,SAGA,SASA,MAAagD,UAAmB3L,EAAMC,UAIrC3H,YAAY4H,GACX1H,MAAM0H,GACNzH,KAAK0I,IAAMnB,EAAM6B,YAGlB+J,SACCnT,KAAKyH,MAAMlF,KAAKqP,aAAa5R,KAAKyH,MAAMiC,OAAOrG,cAAcrD,KAAKyH,MAAMlF,KAAMvC,KAAK0I,IAAIC,UAGxFgG,uBACC3O,KAAKoT,sBAAwBpT,KAAKoT,qBAAqBvE,aAGxDxF,mBAAmBiG,EAAgCL,EAAWM,GACxDvP,KAAKyH,MAAMlF,KAAKsL,kBACpB7N,KAAKmT,SAIP3J,oBACCxJ,KAAKoT,qBAAuBpT,KAAKyH,MAAMiC,OAAOlJ,iBAAiB,CAC9D6S,YAAa,KACZrT,KAAKmT,YAGHnT,KAAKyH,MAAMiC,OAAOC,aACrB3J,KAAKmT,SAIPG,gBACC,GAAI,EAAApS,QAAQqS,QAAS,CAEpB,MAAO,CACN,aAFaxI,EAAEyI,KAAKxT,KAAKyH,MAAMlF,KAAKlB,UAAUE,QAAQvB,KAAKyH,MAAMlF,KAAKW,WAAW6N,OAAO0C,KAAK,MAK/F,MAAO,GAGRhK,SACC,OACC,qCACCP,MAAOlJ,KAAKyH,MAAMyB,MAClBR,IAAK1I,KAAK0I,IACVyJ,UAAW,QAAQnS,KAAKyH,MAAM0K,WAAa,KAAI,YACpCnS,KAAKyH,MAAMlF,KAAKW,UAAS,cACvBlD,KAAKyH,MAAMlF,KAAKlB,UAAU0B,SACnC/C,KAAKsT,iBAERtT,KAAKyH,MAAMiM,WAtDhB,ygBCbA,YACA,YAEA,YACA,WACA,YAEA,YACA,YACA,YAEA,YACA,YACA,YAEA,WACA,YACA,YACA,YAEA,YACA,YACA,YAEA,kGCxBA,eACA,SACA,QACA,SASA,SACA,SAYA,MAAaC,UAA4E,EAAAC,YAIxF/T,YAAYC,EAAwB,IACnCC,MAAMD,GACNE,KAAK6T,SAAS,IAAI,EAAA7J,gBAClBhK,KAAK6T,SAAS,IAAI,EAAAzD,gBAGnBtJ,YAAYpG,GACXV,KAAK8T,OAAS,GACd/T,MAAM+G,YAAYpG,GAGnBmT,SAAS3J,GACRnK,MAAM8T,SAAS3J,GACXA,aAAiB,EAAAkG,iBACpBpQ,KAAK+T,gBAAkB7J,GAEpBA,aAAiB,EAAAF,iBACpBhK,KAAKgU,gBAAkB9J,GAIzB+J,gBACC,OAAOlJ,EAAE9F,OAAOjF,KAAK8T,QAAS5J,GACtBA,aAAiB,EAAAF,iBAI1BkK,gBACC,OAAOnJ,EAAE9F,OAAOjF,KAAK8T,QAAS5J,GACtBA,aAAiB,EAAAkG,iBAI1B+D,qBACC,IAAKnU,KAAK+T,gBAAiB,CAC1B,MAAMD,EAAS9T,KAAKkU,gBACE,IAAlBJ,EAAOpP,OACV1E,KAAK6T,SAAS,IAAI,EAAAzD,gBAElBpQ,KAAK+T,gBAAkBD,EAAO,GAGhC,OAAO9T,KAAK+T,gBAGbK,qBACC,IAAKpU,KAAKgU,gBAAiB,CAC1B,MAAMF,EAAS9T,KAAKiU,gBACE,IAAlBH,EAAOpP,OACV1E,KAAK6T,SAAS,IAAI,EAAA7J,gBAElBhK,KAAKgU,gBAAkBF,EAAO,GAGhC,OAAO9T,KAAKgU,gBAGb3S,QAAQU,GACP,IAAK,MAAMmI,KAASlK,KAAKkU,gBAAiB,CACzC,MAAMlT,EAAQkJ,EAAMkC,SAASrK,GAC7B,GAAIf,EACH,OAAOA,GAKVQ,QAAQW,GACP,IAAK,MAAM+H,KAASlK,KAAKiU,gBAAiB,CACzC,MAAMjT,EAAQkJ,EAAMkC,SAASjK,GAC7B,GAAInB,EACH,OAAOA,GAKVqT,UAAUC,GAQT,OAPAvJ,EAAEkB,QAAQqI,GAAStT,IACdA,aAAiB,EAAAwJ,UACpBxK,KAAK2N,QAAQ3M,GACHA,aAAiB,EAAAmE,WAC3BnF,KAAKuU,QAAQvT,MAGRsT,EAGR3G,QAAQxL,GASP,OARAnC,KAAKoU,qBAAqB7J,SAASpI,GACnCnC,KAAK4N,UACJ,CACCzL,OACAqS,WAAW,GAEZ,gBAEMrS,EAGRoS,QAAQxS,GAGP,OAFA/B,KAAKmU,qBAAqB5J,SAASxI,GACnC/B,KAAK4N,UAAU,CAAE7L,OAAMyS,WAAW,GAAQ,gBACnCzS,EAGR2I,WAAWvI,GACM4I,EAAE0J,KAAKzU,KAAKiU,iBAAkB/J,GACtCA,EAAMwK,YAAYvS,MAGzBnC,KAAK4N,UAAU,CAAEzL,OAAMqS,WAAW,GAAS,gBAI7ClE,WAAWvO,GACMgJ,EAAE0J,KAAKzU,KAAKkU,iBAAkBhK,GACtCA,EAAMwK,YAAY3S,MAGzB/B,KAAK4N,UAAU,CAAE7L,OAAMyS,WAAW,GAAS,gBAI7C7J,WACC,OAAOI,EAAE4J,QAAQ3U,KAAKiU,iBAAkB/J,GAChCa,EAAEoG,OAAOjH,EAAMU,eAIxBrF,WACC,OAAOwF,EAAE4J,QAAQ3U,KAAKkU,iBAAkBhK,GAChCa,EAAEoG,OAAOjH,EAAMU,gBAtIzB,8GCxBA,eAQA,SACA,SAEA,SAEA,MAAagK,UAA4B,EAAAC,MAKxChV,cACCE,MAAM,CACLiR,KAAM,qBAEPhR,KAAK8U,YAAc,CAAC,IAAI,EAAAC,gBACxB/U,KAAKgV,WAAa,IAAI,EAAAC,gBACtBjV,KAAKkV,YAAc,IAAI,EAAAC,iBACvBnV,KAAKoV,UAAY,IAAI,EAAAC,sBAGrBrV,KAAKsV,eACJ,IAAI,EAAAC,OAAO,CACVnL,KAAM,EAAAoL,UAAUC,WAChBC,KAAOhV,IACN,MAAMO,EAAUjB,KAAK0J,OAAOiM,oBAAoBC,iBAAiBlV,GAG5DO,EAIIA,aAAmB,EAAAoR,UAC3BrS,KAAK6V,oBAAoB7V,KAAKkV,YAAaxU,GAI3CV,KAAK6V,oBAAoB7V,KAAKoV,UAAW1U,GARzCV,KAAK6V,oBAAoB7V,KAAKgV,WAAYtU,OAe9CV,KAAKsV,eACJ,IAAI,EAAAC,OAAO,CACVnL,KAAM,EAAAoL,UAAUM,YAChBJ,KAAOhV,IACNV,KAAK6V,oBAAoB7V,KAAKgV,WAAYtU,QA1C/C,uHCdA,eACA,SACA,QAEA,SAIA,MAAa2U,UAA8B,EAAAU,eAC1ClW,cACCE,QACAC,KAAKsV,eACJ,IAAI,EAAAC,OAAO,CACVnL,KAAM,EAAAoL,UAAUQ,SAChBN,KAAOhV,IACN,MAAMuV,EAAOjW,KAAK0J,OAAO7I,gBAAgBH,EAAMA,OAC3CuV,aAAgB,EAAA5D,WACnBtH,EAAEkB,QAAQjM,KAAKkW,kBAAmB5N,IACjC,GAAIA,EAAS2N,gBAAgB,EAAA9K,WAAY,CACxC,MAAMhJ,EAAOmG,EAAS2N,KAAK9S,YAG3B,GAAIhB,EAAKsL,iBAAmBnF,EAAS2N,KACpC,OAEG9T,EAAKyJ,gBAAgBqH,cAAcgD,KACtC9T,EAAKmK,cAAc2J,GACnBA,EAAKlD,iBACL/S,KAAK0J,OAAOpD,0BApBrB,oHCRA,eAOA,SAiBA,MAAa6O,UAAyB,EAAAgB,0BAKrCtW,YAAYC,EAAmC,IAC9CC,MAAM,CAAEiR,KAAM,kBAEdhR,KAAKoW,OAAS,OAAH,QACVC,iBAAiB,EACjBC,2BAA2B,GACxBxW,GAGJE,KAAKsV,eACJ,IAAI,EAAAC,OAAO,CACVnL,KAAM,EAAAoL,UAAUC,WAChBC,KAAOhV,IACNV,KAAKuC,KAAOvC,KAAK0J,OAAO7I,gBAAgBH,EAAMA,OACzCV,KAAKoW,OAAOE,4BAA6BtW,KAAKuC,KAAK2N,YAIxDlQ,KAAKmC,KAAOnC,KAAKuC,KAAKoQ,kBAGjB3S,KAAKmC,MAIVnC,KAAKmC,KAAKoU,aAAY,GACtBvW,KAAKmC,KAAKqK,cAAcxM,KAAKuC,MAC7BvC,KAAK0J,OAAO0C,WAAWuB,QAAQ3N,KAAKmC,MACpCnC,KAAKuC,KAAKwQ,kBANT/S,KAAKwW,SAPLxW,KAAKwW,YAkBTxW,KAAKsV,eACJ,IAAI,EAAAC,OAAO,CACVnL,KAAM,EAAAoL,UAAUQ,SAChBN,KAAOhV,IACN,MAAMM,EAAQhB,KAAK0J,OAAO7I,gBAAgBH,EAAMA,OAEhD,GAAIM,aAAiB,EAAAqR,UACpB,OAAIrS,KAAKuC,KAAK0Q,cAAcjS,IAC3BhB,KAAKmC,KAAKmK,cAActL,GACxBA,EAAM+R,sBACN/S,KAAK0J,OAAOpD,kBAGZtG,KAAKmC,KAAK8K,cACVjN,KAAK0J,OAAOpD,iBAKTtG,KAAKoW,OAAOC,kBAChBrW,KAAKmC,KAAK8K,SACVjN,KAAK0J,OAAOpD,qBAYjBmQ,eAAe/V,GACd,MAAMgW,EAAU1W,KAAKuC,KAAKkJ,cACpBkL,EAAsB3W,KAAK0J,OAAO0C,WAAWpI,eAAiB,IAC9D4S,EAAgB5W,KAAK0J,OAAO0C,WAAWyK,aAAeF,EACtDG,EAAgB9W,KAAK0J,OAAO0C,WAAW2K,aAAeJ,EACtDK,EAAmBhX,KAAKgX,iBAAmBL,EAC3CM,EAAmBjX,KAAKiX,iBAAmBN,EAC3CO,EAAYR,EAAQxS,EAAI0S,GAAiBI,EAAmBN,EAAQxS,GAAKxD,EAAMyW,qBAC/EC,EAAYV,EAAQvS,EAAI2S,GAAiBG,EAAmBP,EAAQvS,GAAKzD,EAAM2W,qBAErFrX,KAAKmC,KAAKsL,eAAeK,YAAYoJ,EAAWE,GAChDpX,KAAK0J,OAAOpD,iBAlFd,8BCxBA/G,EAAOD,QAAUgY,QAAQ,4BCAzB/X,EAAOD,QAAUgY,QAAQ,mCCAzB/X,EAAOD,QAAUgY,QAAQ,4CCAzB/X,EAAOD,QAAUgY,QAAQ,mBCAzB/X,EAAOD,QAAUgY,QAAQ,kBCAzB/X,EAAOD,QAAUgY,QAAQ,8BCCrBC,EAA2B,GCE/B,IAAIC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAarY,QAGrB,IAAIC,EAASgY,EAAyBG,GAAY,CAGjDpY,QAAS,IAOV,OAHAuY,EAAoBH,GAAUI,KAAKvY,EAAOD,QAASC,EAAQA,EAAOD,QAASmY,GAGpElY,EAAOD,QClBWmY,CAAoB","sources":["webpack://projectstorm/react-canvas-core/webpack/universalModuleDefinition","webpack://projectstorm/react-canvas-core/./src/DiagramEngine.ts","webpack://projectstorm/react-canvas-core/./src/entities/label/LabelModel.ts","webpack://projectstorm/react-canvas-core/./src/entities/label/LabelWidget.tsx","webpack://projectstorm/react-canvas-core/./src/entities/link-layer/LinkLayerFactory.tsx","webpack://projectstorm/react-canvas-core/./src/entities/link-layer/LinkLayerModel.ts","webpack://projectstorm/react-canvas-core/./src/entities/link-layer/LinkLayerWidget.tsx","webpack://projectstorm/react-canvas-core/./src/entities/link/LinkModel.ts","webpack://projectstorm/react-canvas-core/./src/entities/link/LinkWidget.tsx","webpack://projectstorm/react-canvas-core/./src/entities/link/PointModel.ts","webpack://projectstorm/react-canvas-core/./src/entities/node-layer/NodeLayerFactory.tsx","webpack://projectstorm/react-canvas-core/./src/entities/node-layer/NodeLayerModel.ts","webpack://projectstorm/react-canvas-core/./src/entities/node-layer/NodeLayerWidget.tsx","webpack://projectstorm/react-canvas-core/./src/entities/node/NodeModel.ts","webpack://projectstorm/react-canvas-core/./src/entities/node/NodeWidget.tsx","webpack://projectstorm/react-canvas-core/./src/entities/port/PortModel.ts","webpack://projectstorm/react-canvas-core/./src/entities/port/PortWidget.tsx","webpack://projectstorm/react-canvas-core/./src/index.ts","webpack://projectstorm/react-canvas-core/./src/models/DiagramModel.ts","webpack://projectstorm/react-canvas-core/./src/states/DefaultDiagramState.ts","webpack://projectstorm/react-canvas-core/./src/states/DragDiagramItemsState.ts","webpack://projectstorm/react-canvas-core/./src/states/DragNewLinkState.ts","webpack://projectstorm/react-canvas-core/external commonjs \"@emotion/styled\"","webpack://projectstorm/react-canvas-core/external commonjs \"@projectstorm/geometry\"","webpack://projectstorm/react-canvas-core/external commonjs \"@projectstorm/react-canvas-core\"","webpack://projectstorm/react-canvas-core/external commonjs \"lodash\"","webpack://projectstorm/react-canvas-core/external commonjs \"react\"","webpack://projectstorm/react-canvas-core/external commonjs \"resize-observer-polyfill\"","webpack://projectstorm/react-canvas-core/webpack/bootstrap","webpack://projectstorm/react-canvas-core/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"projectstorm/react-canvas-core\"] = factory();\n\telse\n\t\troot[\"projectstorm/react-canvas-core\"] = factory();\n})(self, () => {\nreturn ","import { NodeModel } from './entities/node/NodeModel';\nimport { PortModel } from './entities/port/PortModel';\nimport { LinkModel } from './entities/link/LinkModel';\nimport { LabelModel } from './entities/label/LabelModel';\nimport { Point, Rectangle, Polygon } from '@projectstorm/geometry';\nimport { MouseEvent } from 'react';\nimport {\n\tAbstractModelFactory,\n\tAbstractReactFactory,\n\tBaseModel,\n\tCanvasEngine,\n\tFactoryBank,\n\tToolkit,\n\tCanvasEngineListener,\n\tCanvasEngineOptions\n} from '@projectstorm/react-canvas-core';\nimport { DiagramModel } from './models/DiagramModel';\n\n/**\n * Passed as a parameter to the DiagramWidget\n */\nexport class DiagramEngine extends CanvasEngine<CanvasEngineListener, DiagramModel> {\n\tprotected nodeFactories: FactoryBank<AbstractReactFactory<NodeModel, DiagramEngine>>;\n\tprotected linkFactories: FactoryBank<AbstractReactFactory<LinkModel, DiagramEngine>>;\n\tprotected portFactories: FactoryBank<AbstractModelFactory<PortModel, DiagramEngine>>;\n\tprotected labelFactories: FactoryBank<AbstractReactFactory<LabelModel, DiagramEngine>>;\n\n\tmaxNumberPointsPerLink: number;\n\n\tconstructor(options: CanvasEngineOptions = {}) {\n\t\tsuper(options);\n\t\tthis.maxNumberPointsPerLink = 1000;\n\n\t\t// create banks for the different factory types\n\t\tthis.nodeFactories = new FactoryBank();\n\t\tthis.linkFactories = new FactoryBank();\n\t\tthis.portFactories = new FactoryBank();\n\t\tthis.labelFactories = new FactoryBank();\n\n\t\tconst setup = (factory: FactoryBank) => {\n\t\t\tfactory.registerListener({\n\t\t\t\tfactoryAdded: (event) => {\n\t\t\t\t\tevent.factory.setDiagramEngine(this);\n\t\t\t\t},\n\t\t\t\tfactoryRemoved: (event) => {\n\t\t\t\t\tevent.factory.setDiagramEngine(null);\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\tsetup(this.nodeFactories);\n\t\tsetup(this.linkFactories);\n\t\tsetup(this.portFactories);\n\t\tsetup(this.labelFactories);\n\t}\n\n\t/**\n\t * Gets a model and element under the mouse cursor\n\t */\n\tgetMouseElement(event: MouseEvent): BaseModel {\n\t\tvar target = event.target as Element;\n\t\tvar diagramModel = this.model;\n\n\t\t//is it a port\n\t\tvar element = Toolkit.closest(target, '.port[data-name]');\n\t\tif (element) {\n\t\t\tvar nodeElement = Toolkit.closest(target, '.node[data-nodeid]') as HTMLElement;\n\t\t\treturn diagramModel.getNode(nodeElement.getAttribute('data-nodeid')).getPort(element.getAttribute('data-name'));\n\t\t}\n\n\t\t//look for a point\n\t\telement = Toolkit.closest(target, '.point[data-id]');\n\t\tif (element) {\n\t\t\treturn diagramModel.getLink(element.getAttribute('data-linkid')).getPointModel(element.getAttribute('data-id'));\n\t\t}\n\n\t\t//look for a link\n\t\telement = Toolkit.closest(target, '[data-linkid]');\n\t\tif (element) {\n\t\t\treturn diagramModel.getLink(element.getAttribute('data-linkid'));\n\t\t}\n\n\t\t//look for a node\n\t\telement = Toolkit.closest(target, '.node[data-nodeid]');\n\t\tif (element) {\n\t\t\treturn diagramModel.getNode(element.getAttribute('data-nodeid'));\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t//!-------------- FACTORIES ------------\n\n\tgetNodeFactories() {\n\t\treturn this.nodeFactories;\n\t}\n\n\tgetLinkFactories() {\n\t\treturn this.linkFactories;\n\t}\n\n\tgetLabelFactories() {\n\t\treturn this.labelFactories;\n\t}\n\n\tgetPortFactories() {\n\t\treturn this.portFactories;\n\t}\n\n\tgetFactoryForNode<F extends AbstractReactFactory<NodeModel, DiagramEngine>>(node: NodeModel | string) {\n\t\tif (typeof node === 'string') {\n\t\t\treturn this.nodeFactories.getFactory(node);\n\t\t}\n\t\treturn this.nodeFactories.getFactory(node.getType());\n\t}\n\n\tgetFactoryForLink<F extends AbstractReactFactory<LinkModel, DiagramEngine>>(link: LinkModel | string) {\n\t\tif (typeof link === 'string') {\n\t\t\treturn this.linkFactories.getFactory<F>(link);\n\t\t}\n\t\treturn this.linkFactories.getFactory<F>(link.getType());\n\t}\n\n\tgetFactoryForLabel<F extends AbstractReactFactory<LabelModel, DiagramEngine>>(label: LabelModel) {\n\t\tif (typeof label === 'string') {\n\t\t\treturn this.labelFactories.getFactory(label);\n\t\t}\n\t\treturn this.labelFactories.getFactory(label.getType());\n\t}\n\n\tgetFactoryForPort<F extends AbstractModelFactory<PortModel, DiagramEngine>>(port: PortModel) {\n\t\tif (typeof port === 'string') {\n\t\t\treturn this.portFactories.getFactory<F>(port);\n\t\t}\n\t\treturn this.portFactories.getFactory<F>(port.getType());\n\t}\n\n\tgenerateWidgetForLink(link: LinkModel): JSX.Element {\n\t\treturn this.getFactoryForLink(link).generateReactWidget({ model: link });\n\t}\n\n\tgenerateWidgetForNode(node: NodeModel): JSX.Element {\n\t\treturn this.getFactoryForNode(node).generateReactWidget({ model: node });\n\t}\n\n\tgetNodeElement(node: NodeModel): Element {\n\t\tconst selector = this.canvas.querySelector(`.node[data-nodeid=\"${node.getID()}\"]`);\n\t\tif (selector === null) {\n\t\t\tthrow new Error('Cannot find Node element with nodeID: [' + node.getID() + ']');\n\t\t}\n\t\treturn selector;\n\t}\n\n\tgetNodePortElement(port: PortModel): any {\n\t\tvar selector = this.canvas.querySelector(\n\t\t\t`.port[data-name=\"${port.getName()}\"][data-nodeid=\"${port.getParent().getID()}\"]`\n\t\t);\n\t\tif (selector === null) {\n\t\t\tthrow new Error(\n\t\t\t\t'Cannot find Node Port element with nodeID: [' +\n\t\t\t\t\tport.getParent().getID() +\n\t\t\t\t\t'] and name: [' +\n\t\t\t\t\tport.getName() +\n\t\t\t\t\t']'\n\t\t\t);\n\t\t}\n\t\treturn selector;\n\t}\n\n\tgetPortCenter(port: PortModel): Point {\n\t\treturn this.getPortCoords(port).getOrigin();\n\t}\n\n\t/**\n\t * Calculate rectangular coordinates of the port passed in.\n\t */\n\tgetPortCoords(port: PortModel, element?: HTMLDivElement): Rectangle {\n\t\tif (!this.canvas) {\n\t\t\tthrow new Error('Canvas needs to be set first');\n\t\t}\n\t\tif (!element) {\n\t\t\telement = this.getNodePortElement(port);\n\t\t}\n\t\tconst sourceRect = element.getBoundingClientRect();\n\t\tconst point = this.getRelativeMousePoint({\n\t\t\tclientX: sourceRect.left,\n\t\t\tclientY: sourceRect.top\n\t\t});\n\t\tconst zoom = this.model.getZoomLevel() / 100.0;\n\t\treturn new Rectangle(point.x, point.y, sourceRect.width / zoom, sourceRect.height / zoom);\n\t}\n\n\t/**\n\t * Determine the width and height of the node passed in.\n\t * It currently assumes nodes have a rectangular shape, can be overriden for customised shapes.\n\t */\n\tgetNodeDimensions(node: NodeModel): { width: number; height: number } {\n\t\tif (!this.canvas) {\n\t\t\treturn {\n\t\t\t\twidth: 0,\n\t\t\t\theight: 0\n\t\t\t};\n\t\t}\n\n\t\tconst nodeElement = this.getNodeElement(node);\n\t\tconst nodeRect = nodeElement.getBoundingClientRect();\n\n\t\treturn {\n\t\t\twidth: nodeRect.width,\n\t\t\theight: nodeRect.height\n\t\t};\n\t}\n\n\tgetBoundingNodesRect(nodes: NodeModel[]): Rectangle {\n\t\tif (nodes) {\n\t\t\tif (nodes.length === 0) {\n\t\t\t\treturn new Rectangle(0, 0, 0, 0);\n\t\t\t}\n\n\t\t\treturn Polygon.boundingBoxFromPolygons(nodes.map((node) => node.getBoundingBox()));\n\t\t}\n\t}\n\n\tzoomToFitSelectedNodes(options: { margin?: number; maxZoom?: number }) {\n\t\tconst nodes: NodeModel[] = this.model\n\t\t\t.getSelectedEntities()\n\t\t\t.filter((entity) => entity instanceof NodeModel) as NodeModel[];\n\t\tthis.zoomToFitNodes({\n\t\t\tmargin: options.margin,\n\t\t\tmaxZoom: options.maxZoom,\n\t\t\tnodes: nodes.length > 0 ? nodes : null\n\t\t});\n\t}\n\n\tzoomToFitNodes(options: { margin?: number; nodes?: NodeModel[]; maxZoom?: number });\n\t/**\n\t * @deprecated\n\t */\n\tzoomToFitNodes(margin: number);\n\tzoomToFitNodes(options) {\n\t\tlet margin = options || 0;\n\t\tlet nodes: NodeModel[] = [];\n\t\tlet maxZoom: number | null = null;\n\t\tif (!!options && typeof options == 'object') {\n\t\t\tmargin = options.margin || 0;\n\t\t\tnodes = options.nodes || [];\n\t\t\tmaxZoom = options.maxZoom || null;\n\t\t}\n\n\t\t// no node selected\n\t\tif (nodes.length === 0) {\n\t\t\tnodes = this.model.getNodes();\n\t\t}\n\t\tconst nodesRect = this.getBoundingNodesRect(nodes);\n\t\tif (nodesRect) {\n\t\t\t// there is something we should zoom on\n\t\t\tlet canvasRect = this.canvas.getBoundingClientRect();\n\n\t\t\tconst calculate = (margin: number = 0) => {\n\t\t\t\t// work out zoom\n\t\t\t\tconst xFactor = this.canvas.clientWidth / (nodesRect.getWidth() + margin * 2);\n\t\t\t\tconst yFactor = this.canvas.clientHeight / (nodesRect.getHeight() + margin * 2);\n\n\t\t\t\tlet zoomFactor = xFactor < yFactor ? xFactor : yFactor;\n\t\t\t\tif (maxZoom && zoomFactor > maxZoom) {\n\t\t\t\t\tzoomFactor = maxZoom;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tzoom: zoomFactor,\n\t\t\t\t\tx:\n\t\t\t\t\t\tcanvasRect.width / 2 -\n\t\t\t\t\t\t((nodesRect.getWidth() + margin * 2) / 2 + nodesRect.getTopLeft().x) * zoomFactor +\n\t\t\t\t\t\tmargin,\n\t\t\t\t\ty:\n\t\t\t\t\t\tcanvasRect.height / 2 -\n\t\t\t\t\t\t((nodesRect.getHeight() + margin * 2) / 2 + nodesRect.getTopLeft().y) * zoomFactor +\n\t\t\t\t\t\tmargin\n\t\t\t\t};\n\t\t\t};\n\n\t\t\tlet params = calculate(0);\n\t\t\tif (margin) {\n\t\t\t\tif (params.x < margin || params.y < margin) {\n\t\t\t\t\tparams = calculate(margin);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// apply\n\t\t\tthis.model.setZoomLevel(params.zoom * 100);\n\t\t\tthis.model.setOffset(params.x, params.y);\n\t\t\tthis.repaintCanvas();\n\t\t}\n\t}\n\n\tgetMaxNumberPointsPerLink(): number {\n\t\treturn this.maxNumberPointsPerLink;\n\t}\n\n\tsetMaxNumberPointsPerLink(max: number) {\n\t\tthis.maxNumberPointsPerLink = max;\n\t}\n}\n","import { DiagramEngine } from '../../DiagramEngine';\nimport { LinkModel } from '../link/LinkModel';\nimport { BaseModel, BaseModelGenerics, BaseModelOptions, DeserializeEvent } from '@projectstorm/react-canvas-core';\n\nexport interface LabelModelOptions extends BaseModelOptions {\n\toffsetX?: number;\n\toffsetY?: number;\n}\n\nexport interface LabelModelGenerics extends BaseModelGenerics {\n\tPARENT: LinkModel;\n\tOPTIONS: LabelModelOptions;\n}\n\nexport class LabelModel<G extends LabelModelGenerics = LabelModelGenerics> extends BaseModel<G> {\n\tconstructor(options: G['OPTIONS']) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\toffsetX: options.offsetX || 0,\n\t\t\toffsetY: options.offsetY || 0\n\t\t});\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tsuper.deserialize(event);\n\t\tthis.options.offsetX = event.data.offsetX;\n\t\tthis.options.offsetY = event.data.offsetY;\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\toffsetX: this.options.offsetX,\n\t\t\toffsetY: this.options.offsetY\n\t\t};\n\t}\n}\n","import * as React from 'react';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { LabelModel } from './LabelModel';\nimport styled from '@emotion/styled';\n\nexport interface LabelWidgetProps {\n\tengine: DiagramEngine;\n\tlabel: LabelModel;\n\tindex: number;\n}\n\nnamespace S {\n\texport const Label = styled.div`\n\t\tdisplay: inline-block;\n\t\tposition: absolute;\n\t`;\n\n\texport const Foreign = styled.foreignObject`\n\t\tpointer-events: none;\n\t\toverflow: visible;\n\t`;\n}\n\nexport class LabelWidget extends React.Component<LabelWidgetProps> {\n\tref: React.RefObject<HTMLDivElement>;\n\n\tconstructor(props: LabelWidgetProps) {\n\t\tsuper(props);\n\t\tthis.ref = React.createRef();\n\t}\n\n\tcomponentDidUpdate() {\n\t\twindow.requestAnimationFrame(this.calculateLabelPosition);\n\t}\n\n\tcomponentDidMount() {\n\t\twindow.requestAnimationFrame(this.calculateLabelPosition);\n\t}\n\n\tfindPathAndRelativePositionToRenderLabel = (index: number): { path: SVGPathElement; position: number } => {\n\t\t// an array to hold all path lengths, making sure we hit the DOM only once to fetch this information\n\t\tconst link = this.props.label.getParent();\n\t\tconst lengths = link.getRenderedPath().map((path) => path.getTotalLength());\n\n\t\t// calculate the point where we want to display the label\n\t\tlet labelPosition =\n\t\t\tlengths.reduce((previousValue, currentValue) => previousValue + currentValue, 0) *\n\t\t\t(index / (link.getLabels().length + 1));\n\n\t\t// find the path where the label will be rendered and calculate the relative position\n\t\tlet pathIndex = 0;\n\t\twhile (pathIndex < link.getRenderedPath().length) {\n\t\t\tif (labelPosition - lengths[pathIndex] < 0) {\n\t\t\t\treturn {\n\t\t\t\t\tpath: link.getRenderedPath()[pathIndex],\n\t\t\t\t\tposition: labelPosition\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// keep searching\n\t\t\tlabelPosition -= lengths[pathIndex];\n\t\t\tpathIndex++;\n\t\t}\n\t};\n\n\tcalculateLabelPosition = () => {\n\t\tconst found = this.findPathAndRelativePositionToRenderLabel(this.props.index + 1);\n\t\tif (!found) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { path, position } = found;\n\n\t\tconst labelDimensions = {\n\t\t\twidth: this.ref.current.offsetWidth,\n\t\t\theight: this.ref.current.offsetHeight\n\t\t};\n\n\t\tconst pathCentre = path.getPointAtLength(position);\n\n\t\tconst labelCoordinates = {\n\t\t\tx: pathCentre.x - labelDimensions.width / 2 + this.props.label.getOptions().offsetX,\n\t\t\ty: pathCentre.y - labelDimensions.height / 2 + this.props.label.getOptions().offsetY\n\t\t};\n\n\t\tthis.ref.current.style.transform = `translate(${labelCoordinates.x}px, ${labelCoordinates.y}px)`;\n\t};\n\n\trender() {\n\t\tconst canvas = this.props.engine.getCanvas();\n\n\t\treturn (\n\t\t\t<S.Foreign key={this.props.label.getID()} width={canvas?.offsetWidth} height={canvas?.offsetHeight}>\n\t\t\t\t<S.Label ref={this.ref}>\n\t\t\t\t\t{this.props.engine.getFactoryForLabel(this.props.label).generateReactWidget({ model: this.props.label })}\n\t\t\t\t</S.Label>\n\t\t\t</S.Foreign>\n\t\t);\n\t}\n}\n","import * as React from 'react';\nimport { AbstractReactFactory, GenerateModelEvent, GenerateWidgetEvent } from '@projectstorm/react-canvas-core';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { LinkLayerModel } from './LinkLayerModel';\nimport { LinkLayerWidget } from './LinkLayerWidget';\n\nexport class LinkLayerFactory extends AbstractReactFactory<LinkLayerModel, DiagramEngine> {\n\tconstructor() {\n\t\tsuper('diagram-links');\n\t}\n\n\tgenerateModel(event: GenerateModelEvent): LinkLayerModel {\n\t\treturn new LinkLayerModel();\n\t}\n\n\tgenerateReactWidget(event: GenerateWidgetEvent<LinkLayerModel>): JSX.Element {\n\t\treturn <LinkLayerWidget layer={event.model} engine={this.engine} />;\n\t}\n}\n","import { LayerModel, LayerModelGenerics } from '@projectstorm/react-canvas-core';\nimport { LinkModel } from '../link/LinkModel';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { DiagramModel } from '../../models/DiagramModel';\n\nexport interface LinkLayerModelGenerics extends LayerModelGenerics {\n\tCHILDREN: LinkModel;\n\tENGINE: DiagramEngine;\n}\n\nexport class LinkLayerModel<G extends LinkLayerModelGenerics = LinkLayerModelGenerics> extends LayerModel<G> {\n\tconstructor() {\n\t\tsuper({\n\t\t\ttype: 'diagram-links',\n\t\t\tisSvg: true,\n\t\t\ttransformed: true\n\t\t});\n\t}\n\n\taddModel(model: G['CHILDREN']): void {\n\t\tif (!(model instanceof LinkModel)) {\n\t\t\tthrow new Error('Can only add links to this layer');\n\t\t}\n\t\tmodel.registerListener({\n\t\t\tentityRemoved: () => {\n\t\t\t\t(this.getParent() as DiagramModel).removeLink(model);\n\t\t\t}\n\t\t});\n\t\tsuper.addModel(model);\n\t}\n\n\tgetLinks() {\n\t\treturn this.getModels();\n\t}\n\n\tgetChildModelFactoryBank(engine: G['ENGINE']) {\n\t\treturn engine.getLinkFactories();\n\t}\n}\n","import * as React from 'react';\nimport styled from '@emotion/styled';\nimport * as _ from 'lodash';\nimport { LinkWidget } from '../link/LinkWidget';\nimport { LinkLayerModel } from './LinkLayerModel';\nimport { DiagramEngine } from '../../DiagramEngine';\n\nexport interface LinkLayerWidgetProps {\n\tlayer: LinkLayerModel;\n\tengine: DiagramEngine;\n}\n\nnamespace S {\n\texport const Container = styled.div``;\n}\n\nexport class LinkLayerWidget extends React.Component<LinkLayerWidgetProps> {\n\trender() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{\n\t\t\t\t\t//only perform these actions when we have a diagram\n\t\t\t\t\t_.map(this.props.layer.getLinks(), (link) => {\n\t\t\t\t\t\treturn <LinkWidget key={link.getID()} link={link} diagramEngine={this.props.engine} />;\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t</>\n\t\t);\n\t}\n}\n","import { PortModel } from '../port/PortModel';\nimport { PointModel } from './PointModel';\nimport * as _ from 'lodash';\nimport { LabelModel } from '../label/LabelModel';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { DiagramModel } from '../../models/DiagramModel';\nimport { Point, Polygon, Rectangle } from '@projectstorm/geometry';\nimport {\n\tBaseEntityEvent,\n\tBaseModel,\n\tBaseModelGenerics,\n\tBaseModelListener,\n\tDeserializeEvent,\n\tModelGeometryInterface\n} from '@projectstorm/react-canvas-core';\n\nexport interface LinkModelListener extends BaseModelListener {\n\tsourcePortChanged?(event: BaseEntityEvent<LinkModel> & { port: null | PortModel }): void;\n\n\ttargetPortChanged?(event: BaseEntityEvent<LinkModel> & { port: null | PortModel }): void;\n}\n\nexport interface LinkModelGenerics extends BaseModelGenerics {\n\tLISTENER: LinkModelListener;\n\tPARENT: DiagramModel;\n}\n\nexport class LinkModel<G extends LinkModelGenerics = LinkModelGenerics>\n\textends BaseModel<G>\n\timplements ModelGeometryInterface\n{\n\tprotected sourcePort: PortModel | null;\n\tprotected targetPort: PortModel | null;\n\n\tprotected labels: LabelModel[];\n\tprotected points: PointModel[];\n\n\tprotected renderedPaths: SVGPathElement[];\n\n\tconstructor(options: G['OPTIONS']) {\n\t\tsuper(options);\n\t\tthis.points = [\n\t\t\tnew PointModel({\n\t\t\t\tlink: this\n\t\t\t}),\n\t\t\tnew PointModel({\n\t\t\t\tlink: this\n\t\t\t})\n\t\t];\n\t\tthis.sourcePort = null;\n\t\tthis.targetPort = null;\n\t\tthis.renderedPaths = [];\n\t\tthis.labels = [];\n\t}\n\n\tgetBoundingBox(): Rectangle {\n\t\treturn Polygon.boundingBoxFromPoints(\n\t\t\t_.map(this.points, (point: PointModel) => {\n\t\t\t\treturn point.getPosition();\n\t\t\t})\n\t\t);\n\t}\n\n\tgetSelectionEntities(): Array<BaseModel> {\n\t\tif (this.getTargetPort() && this.getSourcePort()) {\n\t\t\treturn super.getSelectionEntities().concat(_.slice(this.points, 1, this.points.length - 1));\n\t\t}\n\t\t// allow selection of the first point\n\t\tif (!this.getSourcePort()) {\n\t\t\treturn super.getSelectionEntities().concat(_.slice(this.points, 0, this.points.length - 1));\n\t\t}\n\t\t// allow selection of the last point\n\t\tif (!this.getTargetPort()) {\n\t\t\treturn super.getSelectionEntities().concat(_.slice(this.points, 1, this.points.length));\n\t\t}\n\t\treturn super.getSelectionEntities().concat(this.points);\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tsuper.deserialize(event);\n\t\tthis.points = _.map(event.data.points || [], (point) => {\n\t\t\tvar p = new PointModel({\n\t\t\t\tlink: this,\n\t\t\t\tposition: new Point(point.x, point.y)\n\t\t\t});\n\t\t\tp.deserialize({\n\t\t\t\t...event,\n\t\t\t\tdata: point\n\t\t\t});\n\t\t\treturn p;\n\t\t});\n\n\t\t//deserialize labels\n\t\t_.forEach(event.data.labels || [], (label: any) => {\n\t\t\tlet labelOb = (event.engine as DiagramEngine).getFactoryForLabel(label.type).generateModel({});\n\t\t\tlabelOb.deserialize({\n\t\t\t\t...event,\n\t\t\t\tdata: label\n\t\t\t});\n\t\t\tthis.addLabel(labelOb);\n\t\t});\n\n\t\t// these happen async, so we use the promises for these (they need to be done like this without the async keyword\n\t\t// because we need the deserailize method to finish for other methods while this happen\n\t\tif (event.data.target) {\n\t\t\tevent.getModel(event.data.targetPort).then((model: PortModel) => {\n\t\t\t\tthis.setTargetPort(model);\n\t\t\t});\n\t\t}\n\t\tif (event.data.source) {\n\t\t\tevent.getModel(event.data.sourcePort).then((model: PortModel) => {\n\t\t\t\tthis.setSourcePort(model);\n\t\t\t});\n\t\t}\n\t}\n\n\tgetRenderedPath(): SVGPathElement[] {\n\t\treturn this.renderedPaths;\n\t}\n\n\tsetRenderedPaths(paths: SVGPathElement[]) {\n\t\tthis.renderedPaths = paths;\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\tsource: this.sourcePort ? this.sourcePort.getParent().getID() : null,\n\t\t\tsourcePort: this.sourcePort ? this.sourcePort.getID() : null,\n\t\t\ttarget: this.targetPort ? this.targetPort.getParent().getID() : null,\n\t\t\ttargetPort: this.targetPort ? this.targetPort.getID() : null,\n\t\t\tpoints: _.map(this.points, (point) => {\n\t\t\t\treturn point.serialize();\n\t\t\t}),\n\t\t\tlabels: _.map(this.labels, (label) => {\n\t\t\t\treturn label.serialize();\n\t\t\t})\n\t\t};\n\t}\n\n\tdoClone(lookupTable = {}, clone) {\n\t\tclone.setPoints(\n\t\t\t_.map(this.getPoints(), (point: PointModel) => {\n\t\t\t\treturn point.clone(lookupTable);\n\t\t\t})\n\t\t);\n\t\tif (this.sourcePort) {\n\t\t\tclone.setSourcePort(this.sourcePort.clone(lookupTable));\n\t\t}\n\t\tif (this.targetPort) {\n\t\t\tclone.setTargetPort(this.targetPort.clone(lookupTable));\n\t\t}\n\t}\n\n\tclearPort(port: PortModel) {\n\t\tif (this.sourcePort === port) {\n\t\t\tthis.setSourcePort(null);\n\t\t} else if (this.targetPort === port) {\n\t\t\tthis.setTargetPort(null);\n\t\t}\n\t}\n\n\tremove() {\n\t\tif (this.sourcePort) {\n\t\t\tthis.sourcePort.removeLink(this);\n\t\t\tdelete this.sourcePort;\n\t\t}\n\t\tif (this.targetPort) {\n\t\t\tthis.targetPort.removeLink(this);\n\t\t\tdelete this.targetPort;\n\t\t}\n\t\tsuper.remove();\n\t}\n\n\tisLastPoint(point: PointModel) {\n\t\tvar index = this.getPointIndex(point);\n\t\treturn index === this.points.length - 1;\n\t}\n\n\tgetPointIndex(point: PointModel) {\n\t\treturn this.points.indexOf(point);\n\t}\n\n\tgetPointModel(id: string): PointModel | null {\n\t\tfor (var i = 0; i < this.points.length; i++) {\n\t\t\tif (this.points[i].getID() === id) {\n\t\t\t\treturn this.points[i];\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetPortForPoint(point: PointModel): PortModel {\n\t\tif (this.sourcePort !== null && this.getFirstPoint().getID() === point.getID()) {\n\t\t\treturn this.sourcePort;\n\t\t}\n\t\tif (this.targetPort !== null && this.getLastPoint().getID() === point.getID()) {\n\t\t\treturn this.targetPort;\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetPointForPort(port: PortModel): PointModel {\n\t\tif (this.sourcePort !== null && this.sourcePort.getID() === port.getID()) {\n\t\t\treturn this.getFirstPoint();\n\t\t}\n\t\tif (this.targetPort !== null && this.targetPort.getID() === port.getID()) {\n\t\t\treturn this.getLastPoint();\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetFirstPoint(): PointModel {\n\t\treturn this.points[0];\n\t}\n\n\tgetLastPoint(): PointModel {\n\t\treturn this.points[this.points.length - 1];\n\t}\n\n\tsetSourcePort(port: PortModel | null) {\n\t\tif (port !== null) {\n\t\t\tport.addLink(this);\n\t\t}\n\t\tif (this.sourcePort !== null) {\n\t\t\tthis.sourcePort.removeLink(this);\n\t\t}\n\t\tthis.sourcePort = port;\n\t\tthis.fireEvent({ port }, 'sourcePortChanged');\n\t\tif (port?.reportedPosition) {\n\t\t\tthis.getPointForPort(port).setPosition(port.getCenter());\n\t\t}\n\t}\n\n\tgetSourcePort(): PortModel {\n\t\treturn this.sourcePort;\n\t}\n\n\tgetTargetPort(): PortModel {\n\t\treturn this.targetPort;\n\t}\n\n\tsetTargetPort(port: PortModel | null) {\n\t\tif (port !== null) {\n\t\t\tport.addLink(this);\n\t\t}\n\t\tif (this.targetPort !== null) {\n\t\t\tthis.targetPort.removeLink(this);\n\t\t}\n\t\tthis.targetPort = port;\n\t\tthis.fireEvent({ port }, 'targetPortChanged');\n\t\tif (port?.reportedPosition) {\n\t\t\tthis.getPointForPort(port).setPosition(port.getCenter());\n\t\t}\n\t}\n\n\tpoint(x: number, y: number, index: number = 1): PointModel {\n\t\treturn this.addPoint(this.generatePoint(x, y), index);\n\t}\n\n\taddLabel(label: LabelModel) {\n\t\tlabel.setParent(this);\n\t\tthis.labels.push(label);\n\t}\n\n\tgetPoints(): PointModel[] {\n\t\treturn this.points;\n\t}\n\n\tgetLabels() {\n\t\treturn this.labels;\n\t}\n\n\tsetPoints(points: PointModel[]) {\n\t\t_.forEach(points, (point) => {\n\t\t\tpoint.setParent(this);\n\t\t});\n\t\tthis.points = points;\n\t}\n\n\tremovePoint(pointModel: PointModel) {\n\t\tif (this.isLastPoint(pointModel)) this.remove();\n\t\tthis.points.splice(this.getPointIndex(pointModel), 1);\n\t}\n\n\tremovePointsBefore(pointModel: PointModel) {\n\t\tthis.points.splice(0, this.getPointIndex(pointModel));\n\t}\n\n\tremovePointsAfter(pointModel: PointModel) {\n\t\tthis.points.splice(this.getPointIndex(pointModel) + 1);\n\t}\n\n\tremoveMiddlePoints() {\n\t\tif (this.points.length > 2) {\n\t\t\tthis.points.splice(1, this.points.length - 2);\n\t\t}\n\t}\n\n\taddPoint<P extends PointModel>(pointModel: P, index = 1): P {\n\t\tpointModel.setParent(this);\n\t\tthis.points.splice(index, 0, pointModel);\n\t\treturn pointModel;\n\t}\n\n\tgeneratePoint(x: number = 0, y: number = 0): PointModel {\n\t\treturn new PointModel({\n\t\t\tlink: this,\n\t\t\tposition: new Point(x, y)\n\t\t});\n\t}\n}\n","import * as React from 'react';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { LinkModel } from './LinkModel';\nimport { PointModel } from './PointModel';\nimport * as _ from 'lodash';\nimport { LabelWidget } from '../label/LabelWidget';\nimport { BaseEntityEvent, BasePositionModel, ListenerHandle, PeformanceWidget } from '@projectstorm/react-canvas-core';\nimport { PortModel } from '../port/PortModel';\n\nexport interface LinkProps {\n\tlink: LinkModel;\n\tdiagramEngine: DiagramEngine;\n}\n\nexport interface LinkState {\n\tsourcePort: PortModel;\n\ttargetPort: PortModel;\n}\n\nexport class LinkWidget extends React.Component<LinkProps, LinkState> {\n\tsourceListener: ListenerHandle;\n\ttargetListener: ListenerHandle;\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tsourcePort: null,\n\t\t\ttargetPort: null\n\t\t};\n\t}\n\n\tcomponentWillUnmount(): void {\n\t\tif (this.sourceListener) {\n\t\t\tthis.sourceListener.deregister();\n\t\t}\n\t\tif (this.targetListener) {\n\t\t\tthis.targetListener.deregister();\n\t\t}\n\t}\n\n\tstatic getDerivedStateFromProps(nextProps: LinkProps, prevState: LinkState): LinkState {\n\t\treturn {\n\t\t\tsourcePort: nextProps.link.getSourcePort(),\n\t\t\ttargetPort: nextProps.link.getTargetPort()\n\t\t};\n\t}\n\n\tinstallTarget() {\n\t\tthis.targetListener && this.targetListener.deregister();\n\n\t\tif (!this.props.link.getTargetPort()) return;\n\t\tthis.targetListener = this.props.link.getTargetPort().registerListener({\n\t\t\treportInitialPosition: (event: BaseEntityEvent<BasePositionModel>) => {\n\t\t\t\tthis.forceUpdate();\n\t\t\t}\n\t\t});\n\t}\n\n\tinstallSource() {\n\t\tthis.sourceListener && this.sourceListener.deregister();\n\n\t\tif (!this.props.link.getSourcePort()) return;\n\t\tthis.sourceListener = this.props.link.getSourcePort().registerListener({\n\t\t\treportInitialPosition: (event: BaseEntityEvent<BasePositionModel>) => {\n\t\t\t\tthis.forceUpdate();\n\t\t\t}\n\t\t});\n\t}\n\n\tcomponentDidUpdate(prevProps: Readonly<LinkProps>, prevState: Readonly<LinkState>, snapshot) {\n\t\tif (prevState.sourcePort !== this.state.sourcePort) {\n\t\t\tthis.installSource();\n\t\t}\n\t\tif (prevState.targetPort !== this.state.targetPort) {\n\t\t\tthis.installTarget();\n\t\t}\n\t}\n\n\tpublic static generateLinePath(firstPoint: PointModel, lastPoint: PointModel): string {\n\t\treturn `M${firstPoint.getX()},${firstPoint.getY()} L ${lastPoint.getX()},${lastPoint.getY()}`;\n\t}\n\n\tcomponentDidMount(): void {\n\t\tif (this.props.link.getSourcePort()) {\n\t\t\tthis.installSource();\n\t\t}\n\t\tif (this.props.link.getTargetPort()) {\n\t\t\tthis.installTarget();\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { link } = this.props;\n\n\t\t// only draw the link when we have reported positions\n\t\tif (link.getSourcePort() && !link.getSourcePort().reportedPosition) {\n\t\t\treturn null;\n\t\t}\n\t\tif (link.getTargetPort() && !link.getTargetPort().reportedPosition) {\n\t\t\treturn null;\n\t\t}\n\n\t\t//generate links\n\t\treturn (\n\t\t\t<PeformanceWidget model={this.props.link} serialized={this.props.link.serialize()}>\n\t\t\t\t{() => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<g data-linkid={this.props.link.getID()}>\n\t\t\t\t\t\t\t{this.props.diagramEngine.generateWidgetForLink(link)}\n\t\t\t\t\t\t\t{_.map(this.props.link.getLabels(), (labelModel, index) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<LabelWidget\n\t\t\t\t\t\t\t\t\t\tkey={labelModel.getID()}\n\t\t\t\t\t\t\t\t\t\tengine={this.props.diagramEngine}\n\t\t\t\t\t\t\t\t\t\tlabel={labelModel}\n\t\t\t\t\t\t\t\t\t\tindex={index}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</g>\n\t\t\t\t\t);\n\t\t\t\t}}\n\t\t\t</PeformanceWidget>\n\t\t);\n\t}\n}\n","import { LinkModel } from './LinkModel';\nimport {\n\tBaseModelListener,\n\tBasePositionModel,\n\tBasePositionModelGenerics,\n\tBasePositionModelOptions\n} from '@projectstorm/react-canvas-core';\n\nexport interface PointModelOptions extends Omit<BasePositionModelOptions, 'type'> {\n\tlink: LinkModel;\n}\n\nexport interface PointModelGenerics {\n\tPARENT: LinkModel;\n\tOPTIONS: PointModelOptions;\n\tLISTENER: BaseModelListener;\n}\n\nexport class PointModel<G extends PointModelGenerics = PointModelGenerics> extends BasePositionModel<\n\tG & BasePositionModelGenerics\n> {\n\tconstructor(options: G['OPTIONS']) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\ttype: 'point'\n\t\t});\n\t\tthis.parent = options.link;\n\t}\n\n\tisConnectedToPort(): boolean {\n\t\treturn this.parent.getPortForPoint(this) !== null;\n\t}\n\n\tgetLink(): LinkModel {\n\t\treturn this.getParent();\n\t}\n\n\tremove() {\n\t\t//clear references\n\t\tif (this.parent) {\n\t\t\tthis.parent.removePoint(this);\n\t\t}\n\t\tsuper.remove();\n\t}\n\n\tisLocked() {\n\t\treturn super.isLocked() || this.getParent().isLocked();\n\t}\n}\n","import * as React from 'react';\nimport { AbstractReactFactory, GenerateModelEvent, GenerateWidgetEvent } from '@projectstorm/react-canvas-core';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { NodeLayerModel } from './NodeLayerModel';\nimport { NodeLayerWidget } from './NodeLayerWidget';\n\nexport class NodeLayerFactory extends AbstractReactFactory<NodeLayerModel, DiagramEngine> {\n\tconstructor() {\n\t\tsuper('diagram-nodes');\n\t}\n\n\tgenerateModel(event: GenerateModelEvent): NodeLayerModel {\n\t\treturn new NodeLayerModel();\n\t}\n\n\tgenerateReactWidget(event: GenerateWidgetEvent<NodeLayerModel>): JSX.Element {\n\t\treturn <NodeLayerWidget layer={event.model} engine={this.engine} />;\n\t}\n}\n","import { LayerModel, LayerModelGenerics } from '@projectstorm/react-canvas-core';\nimport { NodeModel } from '../node/NodeModel';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { DiagramModel } from '../../models/DiagramModel';\n\nexport interface NodeLayerModelGenerics extends LayerModelGenerics {\n\tCHILDREN: NodeModel;\n\tENGINE: DiagramEngine;\n}\n\nexport class NodeLayerModel<G extends NodeLayerModelGenerics = NodeLayerModelGenerics> extends LayerModel<G> {\n\tconstructor() {\n\t\tsuper({\n\t\t\ttype: 'diagram-nodes',\n\t\t\tisSvg: false,\n\t\t\ttransformed: true\n\t\t});\n\t}\n\n\taddModel(model: G['CHILDREN']): void {\n\t\tif (!(model instanceof NodeModel)) {\n\t\t\tthrow new Error('Can only add nodes to this layer');\n\t\t}\n\t\tmodel.registerListener({\n\t\t\tentityRemoved: () => {\n\t\t\t\t(this.getParent() as DiagramModel).removeNode(model);\n\t\t\t}\n\t\t});\n\t\tsuper.addModel(model);\n\t}\n\n\tgetChildModelFactoryBank(engine: G['ENGINE']) {\n\t\treturn engine.getNodeFactories();\n\t}\n\n\tgetNodes() {\n\t\treturn this.getModels();\n\t}\n}\n","import * as React from 'react';\nimport styled from '@emotion/styled';\nimport * as _ from 'lodash';\nimport { NodeModel } from '../node/NodeModel';\nimport { NodeWidget } from '../node/NodeWidget';\nimport { NodeLayerModel } from './NodeLayerModel';\nimport { DiagramEngine } from '../../DiagramEngine';\n\nexport interface NodeLayerWidgetProps {\n\tlayer: NodeLayerModel;\n\tengine: DiagramEngine;\n}\n\nnamespace S {\n\texport const Container = styled.div``;\n}\n\nexport class NodeLayerWidget extends React.Component<NodeLayerWidgetProps> {\n\trender() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{_.map(this.props.layer.getNodes(), (node: NodeModel) => {\n\t\t\t\t\treturn <NodeWidget key={node.getID()} diagramEngine={this.props.engine} node={node} />;\n\t\t\t\t})}\n\t\t\t</>\n\t\t);\n\t}\n}\n","import * as _ from 'lodash';\nimport { DiagramModel } from '../../models/DiagramModel';\nimport { PortModel } from '../port/PortModel';\nimport { LinkModel } from '../link/LinkModel';\nimport { Point, Rectangle } from '@projectstorm/geometry';\nimport {\n\tBaseEntityEvent,\n\tBaseModelListener,\n\tBasePositionModel,\n\tBasePositionModelGenerics,\n\tDeserializeEvent\n} from '@projectstorm/react-canvas-core';\nimport { DiagramEngine } from '../../DiagramEngine';\n\nexport interface NodeModelListener extends BaseModelListener {\n\tpositionChanged?(event: BaseEntityEvent<NodeModel>): void;\n}\n\nexport interface NodeModelGenerics extends BasePositionModelGenerics {\n\tLISTENER: NodeModelListener;\n\tPARENT: DiagramModel;\n}\n\nexport class NodeModel<G extends NodeModelGenerics = NodeModelGenerics> extends BasePositionModel<G> {\n\tprotected ports: { [s: string]: PortModel };\n\n\t// calculated post rendering so routing can be done correctly\n\twidth: number;\n\theight: number;\n\n\tconstructor(options: G['OPTIONS']) {\n\t\tsuper(options);\n\t\tthis.ports = {};\n\t\tthis.width = 0;\n\t\tthis.height = 0;\n\t}\n\n\tgetBoundingBox(): Rectangle {\n\t\treturn new Rectangle(this.getPosition(), this.width, this.height);\n\t}\n\n\tsetPosition(point: Point): void;\n\tsetPosition(x: number, y: number): void;\n\tsetPosition(x: number | Point, y?: number): void {\n\t\tconst old = this.position;\n\n\t\tif (x instanceof Point) {\n\t\t\tsuper.setPosition(x);\n\t\t} else {\n\t\t\tsuper.setPosition(x, y);\n\t\t}\n\n\t\t//also update the port co-ordinates (for make glorious speed)\n\t\t_.forEach(this.ports, (port) => {\n\t\t\tport.setPosition(port.getX() + this.position.x - old.x, port.getY() + this.position.y - old.y);\n\t\t});\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tsuper.deserialize(event);\n\n\t\t//deserialize ports\n\t\t_.forEach(event.data.ports, (port: any) => {\n\t\t\tlet portOb = (event.engine as DiagramEngine).getFactoryForPort(port.type).generateModel({});\n\t\t\tportOb.deserialize({\n\t\t\t\t...event,\n\t\t\t\tdata: port\n\t\t\t});\n\t\t\t// the links need these\n\t\t\tevent.registerModel(portOb);\n\t\t\tthis.addPort(portOb);\n\t\t});\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\tports: _.map(this.ports, (port) => {\n\t\t\t\treturn port.serialize();\n\t\t\t})\n\t\t};\n\t}\n\n\tdoClone(lookupTable = {}, clone) {\n\t\t// also clone the ports\n\t\tclone.ports = {};\n\t\t_.forEach(this.ports, (port) => {\n\t\t\tclone.addPort(port.clone(lookupTable));\n\t\t});\n\t}\n\n\tremove() {\n\t\tsuper.remove();\n\t\t_.forEach(this.ports, (port) => {\n\t\t\t_.forEach(port.getLinks(), (link) => {\n\t\t\t\tlink.remove();\n\t\t\t});\n\t\t});\n\t}\n\n\tgetPortFromID(id): PortModel | null {\n\t\tfor (var i in this.ports) {\n\t\t\tif (this.ports[i].getID() === id) {\n\t\t\t\treturn this.ports[i];\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetLink(id: string): LinkModel {\n\t\tfor (let portID in this.ports) {\n\t\t\tconst links = this.ports[portID].getLinks();\n\t\t\tif (links[id]) {\n\t\t\t\treturn links[id];\n\t\t\t}\n\t\t}\n\t}\n\n\tgetPort(name: string): PortModel | null {\n\t\treturn this.ports[name];\n\t}\n\n\tgetPorts(): { [s: string]: PortModel } {\n\t\treturn this.ports;\n\t}\n\n\tremovePort(port: PortModel) {\n\t\t// clear the port from the links\n\t\tfor (let link of _.values(port.getLinks())) {\n\t\t\tlink.clearPort(port);\n\t\t}\n\t\t//clear the parent node reference\n\t\tif (this.ports[port.getName()]) {\n\t\t\tthis.ports[port.getName()].setParent(null);\n\t\t\tdelete this.ports[port.getName()];\n\t\t}\n\t}\n\n\taddPort(port: PortModel): PortModel {\n\t\tport.setParent(this);\n\t\tthis.ports[port.getName()] = port;\n\t\treturn port;\n\t}\n\n\tupdateDimensions({ width, height }: { width: number; height: number }) {\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t}\n}\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { NodeModel } from './NodeModel';\nimport { BaseEntityEvent, BaseModel, ListenerHandle, PeformanceWidget } from '@projectstorm/react-canvas-core';\nimport styled from '@emotion/styled';\nimport ResizeObserver from 'resize-observer-polyfill';\n\nexport interface NodeProps {\n\tnode: NodeModel;\n\tchildren?: any;\n\tdiagramEngine: DiagramEngine;\n}\n\nnamespace S {\n\texport const Node = styled.div`\n\t\tposition: absolute;\n\t\t-webkit-touch-callout: none; /* iOS Safari */\n\t\t-webkit-user-select: none; /* Chrome/Safari/Opera */\n\t\tuser-select: none;\n\t\tcursor: move;\n\t\tpointer-events: all;\n\t`;\n}\n\nexport class NodeWidget extends React.Component<NodeProps> {\n\tob: any;\n\tref: React.RefObject<HTMLDivElement>;\n\tlistener: ListenerHandle;\n\n\tconstructor(props: NodeProps) {\n\t\tsuper(props);\n\t\tthis.ref = React.createRef();\n\t}\n\n\tcomponentWillUnmount(): void {\n\t\tthis.ob.disconnect();\n\t\tthis.ob = null;\n\n\t\tthis.listener?.deregister();\n\t\tthis.listener = null;\n\t}\n\n\tcomponentDidUpdate(prevProps: Readonly<NodeProps>, prevState: Readonly<any>, snapshot?: any): void {\n\t\tif (this.listener && this.props.node !== prevProps.node) {\n\t\t\tthis.listener.deregister();\n\t\t\tthis.installSelectionListener();\n\t\t}\n\t}\n\n\tinstallSelectionListener() {\n\t\tthis.listener = this.props.node.registerListener({\n\t\t\tselectionChanged: (event: BaseEntityEvent<BaseModel> & { isSelected: boolean }) => {\n\t\t\t\tthis.forceUpdate();\n\t\t\t}\n\t\t});\n\t}\n\n\tupdateSize(width: number, height: number) {\n\t\tthis.props.node.updateDimensions({ width, height });\n\n\t\t//now mark the links as dirty\n\t\ttry {\n\t\t\t_.forEach(this.props.node.getPorts(), (port) => {\n\t\t\t\tport.updateCoords(this.props.diagramEngine.getPortCoords(port));\n\t\t\t});\n\t\t} catch (ex) {}\n\t}\n\n\tcomponentDidMount(): void {\n\t\t// @ts-ignore\n\t\tthis.ob = new ResizeObserver((entities) => {\n\t\t\tconst bounds = entities[0].contentRect;\n\t\t\tthis.updateSize(bounds.width, bounds.height);\n\t\t});\n\n\t\tconst b = this.ref.current.getBoundingClientRect();\n\t\tthis.updateSize(b.width, b.height);\n\t\tthis.ob.observe(this.ref.current);\n\t\tthis.installSelectionListener();\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<PeformanceWidget model={this.props.node} serialized={this.props.node.serialize()}>\n\t\t\t\t{() => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<S.Node\n\t\t\t\t\t\t\tclassName=\"node\"\n\t\t\t\t\t\t\tref={this.ref}\n\t\t\t\t\t\t\tdata-nodeid={this.props.node.getID()}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\ttop: this.props.node.getY(),\n\t\t\t\t\t\t\t\tleft: this.props.node.getX()\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{this.props.diagramEngine.generateWidgetForNode(this.props.node)}\n\t\t\t\t\t\t</S.Node>\n\t\t\t\t\t);\n\t\t\t\t}}\n\t\t\t</PeformanceWidget>\n\t\t);\n\t}\n}\n","import { NodeModel } from '../node/NodeModel';\nimport { LinkModel } from '../link/LinkModel';\nimport * as _ from 'lodash';\nimport { Point, Rectangle } from '@projectstorm/geometry';\nimport {\n\tBaseEntityEvent,\n\tBaseModelOptions,\n\tBasePositionModel,\n\tBasePositionModelGenerics,\n\tBasePositionModelListener,\n\tDeserializeEvent\n} from '@projectstorm/react-canvas-core';\n\nexport enum PortModelAlignment {\n\tTOP = 'top',\n\tLEFT = 'left',\n\tBOTTOM = 'bottom',\n\tRIGHT = 'right'\n}\n\nexport interface PortModelListener extends BasePositionModelListener {\n\t/**\n\t * fires when it first receives positional information\n\t */\n\treportInitialPosition?: (event: BaseEntityEvent<PortModel>) => void;\n}\n\nexport interface PortModelOptions extends BaseModelOptions {\n\talignment?: PortModelAlignment;\n\tmaximumLinks?: number;\n\tname: string;\n}\n\nexport interface PortModelGenerics extends BasePositionModelGenerics {\n\tOPTIONS: PortModelOptions;\n\tPARENT: NodeModel;\n\tLISTENER: PortModelListener;\n}\n\nexport class PortModel<G extends PortModelGenerics = PortModelGenerics> extends BasePositionModel<G> {\n\tlinks: { [id: string]: LinkModel };\n\n\t// calculated post rendering so routing can be done correctly\n\twidth: number;\n\theight: number;\n\treportedPosition: boolean;\n\n\tconstructor(options: G['OPTIONS']) {\n\t\tsuper(options);\n\t\tthis.links = {};\n\t\tthis.reportedPosition = false;\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tsuper.deserialize(event);\n\t\tthis.reportedPosition = false;\n\t\tthis.options.name = event.data.name;\n\t\tthis.options.alignment = event.data.alignment;\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\tname: this.options.name,\n\t\t\talignment: this.options.alignment,\n\t\t\tparentNode: this.parent.getID(),\n\t\t\tlinks: _.map(this.links, (link) => {\n\t\t\t\treturn link.getID();\n\t\t\t})\n\t\t};\n\t}\n\n\tsetPosition(point: Point);\n\tsetPosition(x: number, y: number);\n\tsetPosition(x, y?) {\n\t\tlet old = this.position;\n\t\tsuper.setPosition(x, y);\n\t\t_.forEach(this.getLinks(), (link) => {\n\t\t\tlet point = link.getPointForPort(this);\n\t\t\tpoint.setPosition(point.getX() + x - old.x, point.getY() + y - old.y);\n\t\t});\n\t}\n\n\tdoClone(lookupTable = {}, clone: PortModel) {\n\t\tclone.links = {};\n\t\tclone.parent = this.getParent().clone(lookupTable);\n\t}\n\n\tgetNode(): NodeModel {\n\t\treturn this.getParent();\n\t}\n\n\tgetName(): string {\n\t\treturn this.options.name;\n\t}\n\n\tgetMaximumLinks(): number {\n\t\treturn this.options.maximumLinks;\n\t}\n\n\tsetMaximumLinks(maximumLinks: number) {\n\t\tthis.options.maximumLinks = maximumLinks;\n\t}\n\n\tremoveLink(link: LinkModel) {\n\t\tdelete this.links[link.getID()];\n\t}\n\n\taddLink(link: LinkModel) {\n\t\tthis.links[link.getID()] = link;\n\t}\n\n\tgetLinks(): { [id: string]: LinkModel } {\n\t\treturn this.links;\n\t}\n\n\tpublic createLinkModel(): LinkModel | null {\n\t\tif (_.isFinite(this.options.maximumLinks)) {\n\t\t\tvar numberOfLinks: number = _.size(this.links);\n\t\t\tif (this.options.maximumLinks === 1 && numberOfLinks >= 1) {\n\t\t\t\treturn _.values(this.links)[0];\n\t\t\t} else if (numberOfLinks >= this.options.maximumLinks) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\treportPosition() {\n\t\t_.forEach(this.getLinks(), (link) => {\n\t\t\tlink.getPointForPort(this).setPosition(this.getCenter());\n\t\t});\n\t\tthis.fireEvent(\n\t\t\t{\n\t\t\t\tentity: this\n\t\t\t},\n\t\t\t'reportInitialPosition'\n\t\t);\n\t}\n\n\tgetCenter(): Point {\n\t\treturn new Point(this.getX() + this.width / 2, this.getY() + this.height / 2);\n\t}\n\n\tgetBoundingBox(): Rectangle {\n\t\treturn new Rectangle(this.position, this.width, this.height);\n\t}\n\n\tupdateCoords(coords: Rectangle) {\n\t\tthis.width = coords.getWidth();\n\t\tthis.height = coords.getHeight();\n\t\tthis.setPosition(coords.getTopLeft());\n\t\tthis.reportedPosition = true;\n\t\tthis.reportPosition();\n\t}\n\n\tcanLinkToPort(port: PortModel): boolean {\n\t\treturn true;\n\t}\n\n\tisLocked() {\n\t\treturn super.isLocked() || this.getParent().isLocked();\n\t}\n}\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { PortModel } from './PortModel';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { ListenerHandle, Toolkit } from '@projectstorm/react-canvas-core';\n\nexport interface PortProps {\n\tport: PortModel;\n\tengine: DiagramEngine;\n\tclassName?;\n\tstyle?;\n}\n\nexport class PortWidget extends React.Component<React.PropsWithChildren<PortProps>> {\n\tref: React.RefObject<HTMLDivElement>;\n\tengineListenerHandle: ListenerHandle;\n\n\tconstructor(props: PortProps) {\n\t\tsuper(props);\n\t\tthis.ref = React.createRef();\n\t}\n\n\treport() {\n\t\tthis.props.port.updateCoords(this.props.engine.getPortCoords(this.props.port, this.ref.current));\n\t}\n\n\tcomponentWillUnmount(): void {\n\t\tthis.engineListenerHandle && this.engineListenerHandle.deregister();\n\t}\n\n\tcomponentDidUpdate(prevProps: Readonly<PortProps>, prevState, snapshot?: any): void {\n\t\tif (!this.props.port.reportedPosition) {\n\t\t\tthis.report();\n\t\t}\n\t}\n\n\tcomponentDidMount(): void {\n\t\tthis.engineListenerHandle = this.props.engine.registerListener({\n\t\t\tcanvasReady: () => {\n\t\t\t\tthis.report();\n\t\t\t}\n\t\t});\n\t\tif (this.props.engine.getCanvas()) {\n\t\t\tthis.report();\n\t\t}\n\t}\n\n\tgetExtraProps() {\n\t\tif (Toolkit.TESTING) {\n\t\t\tconst links = _.keys(this.props.port.getNode().getPort(this.props.port.getName()).links).join(',');\n\t\t\treturn {\n\t\t\t\t'data-links': links\n\t\t\t};\n\t\t}\n\t\treturn {};\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tstyle={this.props.style}\n\t\t\t\tref={this.ref}\n\t\t\t\tclassName={`port ${this.props.className || ''}`}\n\t\t\t\tdata-name={this.props.port.getName()}\n\t\t\t\tdata-nodeid={this.props.port.getNode().getID()}\n\t\t\t\t{...this.getExtraProps()}\n\t\t\t>\n\t\t\t\t{this.props.children}\n\t\t\t</div>\n\t\t);\n\t}\n}\n","export * from './models/DiagramModel';\nexport * from './entities/label/LabelModel';\n\nexport * from './entities/link/LinkModel';\nexport * from './entities/link/PointModel';\nexport * from './entities/link/LinkWidget';\n\nexport * from './entities/link-layer/LinkLayerModel';\nexport * from './entities/link-layer/LinkLayerWidget';\nexport * from './entities/link-layer/LinkLayerFactory';\n\nexport * from './entities/node-layer/NodeLayerModel';\nexport * from './entities/node-layer/NodeLayerWidget';\nexport * from './entities/node-layer/NodeLayerFactory';\n\nexport * from './entities/node/NodeModel';\nexport * from './entities/node/NodeWidget';\nexport * from './entities/port/PortModel';\nexport * from './entities/port/PortWidget';\n\nexport * from './states/DefaultDiagramState';\nexport * from './states/DragDiagramItemsState';\nexport * from './states/DragNewLinkState';\n\nexport * from './DiagramEngine';\n","import * as _ from 'lodash';\nimport { LinkModel } from '../entities/link/LinkModel';\nimport { NodeModel } from '../entities/node/NodeModel';\nimport {\n\tBaseEntityEvent,\n\tBaseEntityListener,\n\tBaseModel,\n\tCanvasModel,\n\tCanvasModelGenerics,\n\tLayerModel,\n\tDeserializeEvent\n} from '@projectstorm/react-canvas-core';\nimport { NodeLayerModel } from '../entities/node-layer/NodeLayerModel';\nimport { LinkLayerModel } from '../entities/link-layer/LinkLayerModel';\n\nexport interface DiagramListener extends BaseEntityListener {\n\tnodesUpdated?(event: BaseEntityEvent & { node: NodeModel; isCreated: boolean }): void;\n\n\tlinksUpdated?(event: BaseEntityEvent & { link: LinkModel; isCreated: boolean }): void;\n}\n\nexport interface DiagramModelGenerics extends CanvasModelGenerics {\n\tLISTENER: DiagramListener;\n}\n\nexport class DiagramModel<G extends DiagramModelGenerics = DiagramModelGenerics> extends CanvasModel<G> {\n\tprotected activeNodeLayer: NodeLayerModel;\n\tprotected activeLinkLayer: LinkLayerModel;\n\n\tconstructor(options: G['OPTIONS'] = {}) {\n\t\tsuper(options);\n\t\tthis.addLayer(new LinkLayerModel());\n\t\tthis.addLayer(new NodeLayerModel());\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tthis.layers = [];\n\t\tsuper.deserialize(event);\n\t}\n\n\taddLayer(layer: LayerModel): void {\n\t\tsuper.addLayer(layer);\n\t\tif (layer instanceof NodeLayerModel) {\n\t\t\tthis.activeNodeLayer = layer;\n\t\t}\n\t\tif (layer instanceof LinkLayerModel) {\n\t\t\tthis.activeLinkLayer = layer;\n\t\t}\n\t}\n\n\tgetLinkLayers(): LinkLayerModel[] {\n\t\treturn _.filter(this.layers, (layer) => {\n\t\t\treturn layer instanceof LinkLayerModel;\n\t\t}) as LinkLayerModel[];\n\t}\n\n\tgetNodeLayers(): NodeLayerModel[] {\n\t\treturn _.filter(this.layers, (layer) => {\n\t\t\treturn layer instanceof NodeLayerModel;\n\t\t}) as NodeLayerModel[];\n\t}\n\n\tgetActiveNodeLayer(): NodeLayerModel {\n\t\tif (!this.activeNodeLayer) {\n\t\t\tconst layers = this.getNodeLayers();\n\t\t\tif (layers.length === 0) {\n\t\t\t\tthis.addLayer(new NodeLayerModel());\n\t\t\t} else {\n\t\t\t\tthis.activeNodeLayer = layers[0];\n\t\t\t}\n\t\t}\n\t\treturn this.activeNodeLayer;\n\t}\n\n\tgetActiveLinkLayer(): LinkLayerModel {\n\t\tif (!this.activeLinkLayer) {\n\t\t\tconst layers = this.getLinkLayers();\n\t\t\tif (layers.length === 0) {\n\t\t\t\tthis.addLayer(new LinkLayerModel());\n\t\t\t} else {\n\t\t\t\tthis.activeLinkLayer = layers[0];\n\t\t\t}\n\t\t}\n\t\treturn this.activeLinkLayer;\n\t}\n\n\tgetNode(node: string): NodeModel {\n\t\tfor (const layer of this.getNodeLayers()) {\n\t\t\tconst model = layer.getModel(node);\n\t\t\tif (model) {\n\t\t\t\treturn model;\n\t\t\t}\n\t\t}\n\t}\n\n\tgetLink(link: string): LinkModel {\n\t\tfor (const layer of this.getLinkLayers()) {\n\t\t\tconst model = layer.getModel(link);\n\t\t\tif (model) {\n\t\t\t\treturn model;\n\t\t\t}\n\t\t}\n\t}\n\n\taddAll(...models: BaseModel[]): BaseModel[] {\n\t\t_.forEach(models, (model) => {\n\t\t\tif (model instanceof LinkModel) {\n\t\t\t\tthis.addLink(model);\n\t\t\t} else if (model instanceof NodeModel) {\n\t\t\t\tthis.addNode(model);\n\t\t\t}\n\t\t});\n\t\treturn models;\n\t}\n\n\taddLink(link: LinkModel): LinkModel {\n\t\tthis.getActiveLinkLayer().addModel(link);\n\t\tthis.fireEvent(\n\t\t\t{\n\t\t\t\tlink,\n\t\t\t\tisCreated: true\n\t\t\t},\n\t\t\t'linksUpdated'\n\t\t);\n\t\treturn link;\n\t}\n\n\taddNode(node: NodeModel): NodeModel {\n\t\tthis.getActiveNodeLayer().addModel(node);\n\t\tthis.fireEvent({ node, isCreated: true }, 'nodesUpdated');\n\t\treturn node;\n\t}\n\n\tremoveLink(link: LinkModel) {\n\t\tconst removed = _.some(this.getLinkLayers(), (layer) => {\n\t\t\treturn layer.removeModel(link);\n\t\t});\n\t\tif (removed) {\n\t\t\tthis.fireEvent({ link, isCreated: false }, 'linksUpdated');\n\t\t}\n\t}\n\n\tremoveNode(node: NodeModel) {\n\t\tconst removed = _.some(this.getNodeLayers(), (layer) => {\n\t\t\treturn layer.removeModel(node);\n\t\t});\n\t\tif (removed) {\n\t\t\tthis.fireEvent({ node, isCreated: false }, 'nodesUpdated');\n\t\t}\n\t}\n\n\tgetLinks(): LinkModel[] {\n\t\treturn _.flatMap(this.getLinkLayers(), (layer) => {\n\t\t\treturn _.values(layer.getModels());\n\t\t});\n\t}\n\n\tgetNodes(): NodeModel[] {\n\t\treturn _.flatMap(this.getNodeLayers(), (layer) => {\n\t\t\treturn _.values(layer.getModels());\n\t\t});\n\t}\n}\n","import { MouseEvent, TouchEvent } from 'react';\nimport {\n\tSelectingState,\n\tState,\n\tAction,\n\tInputType,\n\tActionEvent,\n\tDragCanvasState\n} from '@projectstorm/react-canvas-core';\nimport { PortModel } from '../entities/port/PortModel';\nimport { DragNewLinkState } from './DragNewLinkState';\nimport { DiagramEngine } from '../DiagramEngine';\nimport { DragDiagramItemsState } from './DragDiagramItemsState';\n\nexport class DefaultDiagramState extends State<DiagramEngine> {\n\tdragCanvas: DragCanvasState;\n\tdragNewLink: DragNewLinkState;\n\tdragItems: DragDiagramItemsState;\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tname: 'default-diagrams'\n\t\t});\n\t\tthis.childStates = [new SelectingState()];\n\t\tthis.dragCanvas = new DragCanvasState();\n\t\tthis.dragNewLink = new DragNewLinkState();\n\t\tthis.dragItems = new DragDiagramItemsState();\n\n\t\t// determine what was clicked on\n\t\tthis.registerAction(\n\t\t\tnew Action({\n\t\t\t\ttype: InputType.MOUSE_DOWN,\n\t\t\t\tfire: (event: ActionEvent<MouseEvent>) => {\n\t\t\t\t\tconst element = this.engine.getActionEventBus().getModelForEvent(event);\n\n\t\t\t\t\t// the canvas was clicked on, transition to the dragging canvas state\n\t\t\t\t\tif (!element) {\n\t\t\t\t\t\tthis.transitionWithEvent(this.dragCanvas, event);\n\t\t\t\t\t}\n\t\t\t\t\t// initiate dragging a new link\n\t\t\t\t\telse if (element instanceof PortModel) {\n\t\t\t\t\t\tthis.transitionWithEvent(this.dragNewLink, event);\n\t\t\t\t\t}\n\t\t\t\t\t// move the items (and potentially link points)\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.transitionWithEvent(this.dragItems, event);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\t// touch drags the canvas\n\t\tthis.registerAction(\n\t\t\tnew Action({\n\t\t\t\ttype: InputType.TOUCH_START,\n\t\t\t\tfire: (event: ActionEvent<TouchEvent>) => {\n\t\t\t\t\tthis.transitionWithEvent(this.dragCanvas, event);\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n}\n","import { Action, ActionEvent, InputType, MoveItemsState } from '@projectstorm/react-canvas-core';\nimport * as _ from 'lodash';\nimport { PointModel } from '../entities/link/PointModel';\nimport { DiagramEngine } from '../DiagramEngine';\nimport { PortModel } from '../entities/port/PortModel';\nimport { MouseEvent } from 'react';\nimport { LinkModel } from '../entities/link/LinkModel';\n\nexport class DragDiagramItemsState extends MoveItemsState<DiagramEngine> {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.registerAction(\n\t\t\tnew Action({\n\t\t\t\ttype: InputType.MOUSE_UP,\n\t\t\t\tfire: (event: ActionEvent<MouseEvent>) => {\n\t\t\t\t\tconst item = this.engine.getMouseElement(event.event);\n\t\t\t\t\tif (item instanceof PortModel) {\n\t\t\t\t\t\t_.forEach(this.initialPositions, (position) => {\n\t\t\t\t\t\t\tif (position.item instanceof PointModel) {\n\t\t\t\t\t\t\t\tconst link = position.item.getParent() as LinkModel;\n\n\t\t\t\t\t\t\t\t// only care about the last links\n\t\t\t\t\t\t\t\tif (link.getLastPoint() !== position.item) {\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (link.getSourcePort().canLinkToPort(item)) {\n\t\t\t\t\t\t\t\t\tlink.setTargetPort(item);\n\t\t\t\t\t\t\t\t\titem.reportPosition();\n\t\t\t\t\t\t\t\t\tthis.engine.repaintCanvas();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n}\n","import {\n\tAbstractDisplacementState,\n\tAbstractDisplacementStateEvent,\n\tAction,\n\tActionEvent,\n\tInputType\n} from '@projectstorm/react-canvas-core';\nimport { PortModel } from '../entities/port/PortModel';\nimport { MouseEvent } from 'react';\nimport { LinkModel } from '../entities/link/LinkModel';\nimport { DiagramEngine } from '../DiagramEngine';\n\nexport interface DragNewLinkStateOptions {\n\t/**\n\t * If enabled, the links will stay on the canvas if they dont connect to a port\n\t * when dragging finishes\n\t */\n\tallowLooseLinks?: boolean;\n\t/**\n\t * If enabled, then a link can still be drawn from the port even if it is locked\n\t */\n\tallowLinksFromLockedPorts?: boolean;\n}\n\nexport class DragNewLinkState extends AbstractDisplacementState<DiagramEngine> {\n\tport: PortModel;\n\tlink: LinkModel;\n\tconfig: DragNewLinkStateOptions;\n\n\tconstructor(options: DragNewLinkStateOptions = {}) {\n\t\tsuper({ name: 'drag-new-link' });\n\n\t\tthis.config = {\n\t\t\tallowLooseLinks: true,\n\t\t\tallowLinksFromLockedPorts: false,\n\t\t\t...options\n\t\t};\n\n\t\tthis.registerAction(\n\t\t\tnew Action({\n\t\t\t\ttype: InputType.MOUSE_DOWN,\n\t\t\t\tfire: (event: ActionEvent<MouseEvent, PortModel>) => {\n\t\t\t\t\tthis.port = this.engine.getMouseElement(event.event) as PortModel;\n\t\t\t\t\tif (!this.config.allowLinksFromLockedPorts && this.port.isLocked()) {\n\t\t\t\t\t\tthis.eject();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tthis.link = this.port.createLinkModel();\n\n\t\t\t\t\t// if no link is given, just eject the state\n\t\t\t\t\tif (!this.link) {\n\t\t\t\t\t\tthis.eject();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tthis.link.setSelected(true);\n\t\t\t\t\tthis.link.setSourcePort(this.port);\n\t\t\t\t\tthis.engine.getModel().addLink(this.link);\n\t\t\t\t\tthis.port.reportPosition();\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\tthis.registerAction(\n\t\t\tnew Action({\n\t\t\t\ttype: InputType.MOUSE_UP,\n\t\t\t\tfire: (event: ActionEvent<MouseEvent>) => {\n\t\t\t\t\tconst model = this.engine.getMouseElement(event.event);\n\t\t\t\t\t// check to see if we connected to a new port\n\t\t\t\t\tif (model instanceof PortModel) {\n\t\t\t\t\t\tif (this.port.canLinkToPort(model)) {\n\t\t\t\t\t\t\tthis.link.setTargetPort(model);\n\t\t\t\t\t\t\tmodel.reportPosition();\n\t\t\t\t\t\t\tthis.engine.repaintCanvas();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.link.remove();\n\t\t\t\t\t\t\tthis.engine.repaintCanvas();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!this.config.allowLooseLinks) {\n\t\t\t\t\t\tthis.link.remove();\n\t\t\t\t\t\tthis.engine.repaintCanvas();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Calculates the link's far-end point position on mouse move.\n\t * In order to be as precise as possible the mouse initialXRelative & initialYRelative are taken into account as well\n\t * as the possible engine offset\n\t */\n\tfireMouseMoved(event: AbstractDisplacementStateEvent): any {\n\t\tconst portPos = this.port.getPosition();\n\t\tconst zoomLevelPercentage = this.engine.getModel().getZoomLevel() / 100;\n\t\tconst engineOffsetX = this.engine.getModel().getOffsetX() / zoomLevelPercentage;\n\t\tconst engineOffsetY = this.engine.getModel().getOffsetY() / zoomLevelPercentage;\n\t\tconst initialXRelative = this.initialXRelative / zoomLevelPercentage;\n\t\tconst initialYRelative = this.initialYRelative / zoomLevelPercentage;\n\t\tconst linkNextX = portPos.x - engineOffsetX + (initialXRelative - portPos.x) + event.virtualDisplacementX;\n\t\tconst linkNextY = portPos.y - engineOffsetY + (initialYRelative - portPos.y) + event.virtualDisplacementY;\n\n\t\tthis.link.getLastPoint().setPosition(linkNextX, linkNextY);\n\t\tthis.engine.repaintCanvas();\n\t}\n}\n","module.exports = require(\"@emotion/styled\");","module.exports = require(\"@projectstorm/geometry\");","module.exports = require(\"@projectstorm/react-canvas-core\");","module.exports = require(\"lodash\");","module.exports = require(\"react\");","module.exports = require(\"resize-observer-polyfill\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(418);\n"],"names":["root","factory","exports","module","define","amd","self","DiagramEngine","CanvasEngine","constructor","options","super","this","maxNumberPointsPerLink","nodeFactories","FactoryBank","linkFactories","portFactories","labelFactories","setup","registerListener","factoryAdded","event","setDiagramEngine","factoryRemoved","getMouseElement","target","diagramModel","model","element","Toolkit","closest","nodeElement","getNode","getAttribute","getPort","getLink","getPointModel","getNodeFactories","getLinkFactories","getLabelFactories","getPortFactories","getFactoryForNode","node","getFactory","getType","getFactoryForLink","link","getFactoryForLabel","label","getFactoryForPort","port","generateWidgetForLink","generateReactWidget","generateWidgetForNode","getNodeElement","selector","canvas","querySelector","getID","Error","getNodePortElement","getName","getParent","getPortCenter","getPortCoords","getOrigin","sourceRect","getBoundingClientRect","point","getRelativeMousePoint","clientX","left","clientY","top","zoom","getZoomLevel","Rectangle","x","y","width","height","getNodeDimensions","nodeRect","getBoundingNodesRect","nodes","length","Polygon","boundingBoxFromPolygons","map","getBoundingBox","zoomToFitSelectedNodes","getSelectedEntities","filter","entity","NodeModel","zoomToFitNodes","margin","maxZoom","getNodes","nodesRect","canvasRect","calculate","xFactor","clientWidth","getWidth","yFactor","clientHeight","getHeight","zoomFactor","getTopLeft","params","setZoomLevel","setOffset","repaintCanvas","getMaxNumberPointsPerLink","setMaxNumberPointsPerLink","max","LabelModel","BaseModel","offsetX","offsetY","deserialize","data","serialize","S","Label","div","Foreign","foreignObject","LabelWidget","React","Component","props","findPathAndRelativePositionToRenderLabel","index","lengths","getRenderedPath","path","getTotalLength","labelPosition","reduce","previousValue","currentValue","getLabels","pathIndex","position","calculateLabelPosition","found","labelDimensions","ref","current","offsetWidth","offsetHeight","pathCentre","getPointAtLength","labelCoordinates","getOptions","style","transform","createRef","componentDidUpdate","window","requestAnimationFrame","componentDidMount","render","engine","getCanvas","key","LinkLayerFactory","AbstractReactFactory","generateModel","LinkLayerModel","LinkLayerWidget","layer","LayerModel","type","isSvg","transformed","addModel","LinkModel","entityRemoved","removeLink","getLinks","getModels","getChildModelFactoryBank","Container","_","LinkWidget","diagramEngine","points","PointModel","sourcePort","targetPort","renderedPaths","labels","boundingBoxFromPoints","getPosition","getSelectionEntities","getTargetPort","getSourcePort","concat","slice","p","Point","forEach","labelOb","addLabel","getModel","then","setTargetPort","source","setSourcePort","setRenderedPaths","paths","doClone","lookupTable","clone","setPoints","getPoints","clearPort","remove","isLastPoint","getPointIndex","indexOf","id","i","getPortForPoint","getFirstPoint","getLastPoint","getPointForPort","addLink","fireEvent","reportedPosition","setPosition","getCenter","addPoint","generatePoint","setParent","push","removePoint","pointModel","splice","removePointsBefore","removePointsAfter","removeMiddlePoints","state","componentWillUnmount","sourceListener","deregister","targetListener","static","nextProps","prevState","installTarget","reportInitialPosition","forceUpdate","installSource","prevProps","snapshot","firstPoint","lastPoint","getX","getY","PeformanceWidget","serialized","labelModel","BasePositionModel","parent","isConnectedToPort","isLocked","NodeLayerFactory","NodeLayerModel","NodeLayerWidget","removeNode","NodeWidget","ports","old","portOb","registerModel","addPort","getPortFromID","portID","links","name","getPorts","removePort","values","updateDimensions","Node","ob","disconnect","listener","installSelectionListener","selectionChanged","updateSize","updateCoords","ex","entities","bounds","contentRect","b","observe","className","PortModelAlignment","PortModel","alignment","parentNode","getMaximumLinks","maximumLinks","setMaximumLinks","createLinkModel","isFinite","numberOfLinks","size","reportPosition","coords","canLinkToPort","PortWidget","report","engineListenerHandle","canvasReady","getExtraProps","TESTING","keys","join","children","DiagramModel","CanvasModel","addLayer","layers","activeNodeLayer","activeLinkLayer","getLinkLayers","getNodeLayers","getActiveNodeLayer","getActiveLinkLayer","addAll","models","addNode","isCreated","some","removeModel","flatMap","DefaultDiagramState","State","childStates","SelectingState","dragCanvas","DragCanvasState","dragNewLink","DragNewLinkState","dragItems","DragDiagramItemsState","registerAction","Action","InputType","MOUSE_DOWN","fire","getActionEventBus","getModelForEvent","transitionWithEvent","TOUCH_START","MoveItemsState","MOUSE_UP","item","initialPositions","AbstractDisplacementState","config","allowLooseLinks","allowLinksFromLockedPorts","setSelected","eject","fireMouseMoved","portPos","zoomLevelPercentage","engineOffsetX","getOffsetX","engineOffsetY","getOffsetY","initialXRelative","initialYRelative","linkNextX","virtualDisplacementX","linkNextY","virtualDisplacementY","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}