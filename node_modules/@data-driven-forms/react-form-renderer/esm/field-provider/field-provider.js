import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["Component", "render"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import useFieldApi from '../use-field-api';

var FieldProvider = function FieldProvider(_ref) {
  var Component = _ref.Component,
      render = _ref.render,
      props = _objectWithoutProperties(_ref, _excluded);

  var fieldProviderProps = useFieldApi(props);

  if (Component) {
    return /*#__PURE__*/React.createElement(Component, fieldProviderProps);
  }

  if (render) {
    return render(_objectSpread({}, fieldProviderProps));
  }

  throw new Error('Field provider is missing either Component or render prop.');
};

FieldProvider.propTypes = {
  Component: PropTypes.oneOfType([PropTypes.node, PropTypes.element, PropTypes.func]),
  render: PropTypes.func
};
export default FieldProvider;