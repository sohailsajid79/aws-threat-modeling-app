import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
var _excluded = ["component"],
    _excluded2 = ["condition", "hideField"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import React, { useContext } from 'react';
import PropTypes from 'prop-types';
import setWith from 'lodash/setWith';
import cloneDeep from 'lodash/cloneDeep';
import { Field } from 'react-final-form';
import RendererContext from '../renderer-context';
import Condition from '../condition';
import getConditionTriggers from '../get-condition-triggers';
import prepareComponentProps from '../prepare-component-props';

var FormFieldHideWrapper = function FormFieldHideWrapper(_ref) {
  var _ref$hideField = _ref.hideField,
      hideField = _ref$hideField === void 0 ? false : _ref$hideField,
      children = _ref.children;
  return hideField ? /*#__PURE__*/React.createElement("div", {
    hidden: true
  }, children) : children;
};

FormFieldHideWrapper.propTypes = {
  hideField: PropTypes.bool,
  children: PropTypes.oneOfType([PropTypes.node, PropTypes.arrayOf(PropTypes.node)]).isRequired
};

var ConditionTriggerWrapper = function ConditionTriggerWrapper(_ref2) {
  var condition = _ref2.condition,
      values = _ref2.values,
      children = _ref2.children,
      field = _ref2.field;
  return /*#__PURE__*/React.createElement(Condition, {
    condition: condition,
    values: values,
    field: field
  }, children);
};

ConditionTriggerWrapper.propTypes = {
  condition: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
  children: PropTypes.node.isRequired,
  field: PropTypes.object,
  values: PropTypes.object.isRequired
};

var ConditionTriggerDetector = function ConditionTriggerDetector(_ref3) {
  var _ref3$values = _ref3.values,
      values = _ref3$values === void 0 ? {} : _ref3$values,
      _ref3$triggers = _ref3.triggers,
      triggers = _ref3$triggers === void 0 ? [] : _ref3$triggers,
      children = _ref3.children,
      condition = _ref3.condition,
      field = _ref3.field;

  var internalTriggers = _toConsumableArray(triggers);

  if (internalTriggers.length === 0) {
    return /*#__PURE__*/React.createElement(ConditionTriggerWrapper, {
      condition: condition,
      values: values,
      field: field
    }, children);
  }

  var name = internalTriggers.shift();
  return /*#__PURE__*/React.createElement(Field, {
    name: name,
    subscription: {
      value: true,
      initial: true
    }
  }, function (_ref4) {
    var value = _ref4.input.value;
    return /*#__PURE__*/React.createElement(ConditionTriggerDetector, {
      triggers: _toConsumableArray(internalTriggers),
      values: setWith(cloneDeep(values), name, value, Object),
      condition: condition,
      field: field
    }, children);
  });
};

ConditionTriggerDetector.propTypes = {
  values: PropTypes.object,
  triggers: PropTypes.arrayOf(PropTypes.string),
  children: PropTypes.node,
  condition: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
  field: PropTypes.object.isRequired
};

var FormConditionWrapper = function FormConditionWrapper(_ref5) {
  var condition = _ref5.condition,
      children = _ref5.children,
      field = _ref5.field,
      conditionMapper = _ref5.conditionMapper;

  if (condition) {
    var triggers = getConditionTriggers(condition, field, conditionMapper);
    return /*#__PURE__*/React.createElement(ConditionTriggerDetector, {
      triggers: triggers,
      condition: condition,
      field: field
    }, children);
  }

  return children;
};

FormConditionWrapper.propTypes = {
  condition: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
  children: PropTypes.node.isRequired,
  field: PropTypes.object,
  conditionMapper: PropTypes.object
};

var SingleField = function SingleField(_ref6) {
  var component = _ref6.component,
      rest = _objectWithoutProperties(_ref6, _excluded);

  var _useContext = useContext(RendererContext),
      actionMapper = _useContext.actionMapper,
      componentMapper = _useContext.componentMapper,
      conditionMapper = _useContext.conditionMapper;

  var _prepareComponentProp = prepareComponentProps({
    component: component,
    rest: rest,
    componentMapper: componentMapper,
    actionMapper: actionMapper
  }),
      componentProps = _prepareComponentProp.componentProps,
      Component = _prepareComponentProp.Component,
      overrideProps = _prepareComponentProp.overrideProps,
      mergedResolveProps = _prepareComponentProp.mergedResolveProps;

  var _componentProps$overr = _objectSpread(_objectSpread(_objectSpread({}, componentProps), overrideProps), mergedResolveProps && {
    resolveProps: mergedResolveProps
  }),
      condition = _componentProps$overr.condition,
      hideField = _componentProps$overr.hideField,
      restProps = _objectWithoutProperties(_componentProps$overr, _excluded2);

  return /*#__PURE__*/React.createElement(FormConditionWrapper, {
    condition: condition,
    field: restProps,
    conditionMapper: conditionMapper
  }, /*#__PURE__*/React.createElement(FormFieldHideWrapper, {
    hideField: hideField
  }, /*#__PURE__*/React.createElement(Component, restProps)));
};

SingleField.propTypes = {
  component: PropTypes.string.isRequired,
  condition: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
  hideField: PropTypes.bool,
  dataType: PropTypes.string,
  validate: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object])),
  initialValue: PropTypes.any,
  actions: PropTypes.shape(_defineProperty({}, PropTypes.string, PropTypes.func)),
  resolveProps: PropTypes.func
};

var renderForm = function renderForm(fields) {
  return fields.map(function (field) {
    return Array.isArray(field) ? renderForm(field) : /*#__PURE__*/React.createElement(SingleField, _extends({
      key: field.name
    }, field));
  });
};

export default renderForm;