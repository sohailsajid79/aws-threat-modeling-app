{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport InternalIcon from '../icon/internal';\nimport InternalSpinner from '../spinner/internal';\nimport styles from './styles.css.js';\nfunction getIconAlign(props) {\n  const standalone = props.variant === 'icon' || props.variant === 'inline-icon';\n  return standalone ? 'left' : props.iconAlign;\n}\nfunction IconWrapper(_a) {\n  var {\n      iconName,\n      iconUrl,\n      iconAlt,\n      iconSvg,\n      iconSize,\n      badge\n    } = _a,\n    props = __rest(_a, [\"iconName\", \"iconUrl\", \"iconAlt\", \"iconSvg\", \"iconSize\", \"badge\"]);\n  if (!iconName && !iconUrl && !iconSvg) {\n    return null;\n  }\n  return React.createElement(InternalIcon, {\n    className: clsx(styles.icon, styles[`icon-${getIconAlign(props)}`], props.iconClass),\n    name: iconName,\n    url: iconUrl,\n    svg: iconSvg,\n    alt: iconAlt,\n    size: iconSize,\n    badge: badge\n  });\n}\nexport function LeftIcon(props) {\n  if (props.loading) {\n    return React.createElement(InternalSpinner, {\n      className: clsx(styles.icon, styles['icon-left'])\n    });\n  } else if (getIconAlign(props) === 'left') {\n    return React.createElement(IconWrapper, Object.assign({}, props));\n  }\n  return null;\n}\nexport function RightIcon(props) {\n  if (getIconAlign(props) === 'right') {\n    return React.createElement(IconWrapper, Object.assign({}, props));\n  }\n  return null;\n}","map":{"version":3,"names":["React","clsx","InternalIcon","InternalSpinner","styles","getIconAlign","props","standalone","variant","iconAlign","IconWrapper","_a","iconName","iconUrl","iconAlt","iconSvg","iconSize","badge","__rest","createElement","className","icon","iconClass","name","url","svg","alt","size","LeftIcon","loading","Object","assign","RightIcon"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/button/icon-helper.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport * as React from 'react';\nimport clsx from 'clsx';\n\nimport { IconProps } from '../icon/interfaces';\nimport InternalIcon from '../icon/internal';\nimport InternalSpinner from '../spinner/internal';\nimport { ButtonProps } from './interfaces';\n\nimport styles from './styles.css.js';\n\nexport interface ButtonIconProps {\n  loading?: boolean;\n  iconName?: ButtonProps['iconName'];\n  iconAlign?: ButtonProps['iconAlign'];\n  iconUrl?: string;\n  iconSvg?: React.ReactNode;\n  iconAlt?: string;\n  iconSize?: IconProps.Size;\n  variant?: string;\n  iconClass?: string;\n  badge?: boolean;\n}\n\nfunction getIconAlign(props: ButtonIconProps) {\n  const standalone = props.variant === 'icon' || props.variant === 'inline-icon';\n\n  return standalone ? 'left' : props.iconAlign;\n}\n\nfunction IconWrapper({ iconName, iconUrl, iconAlt, iconSvg, iconSize, badge, ...props }: ButtonIconProps) {\n  if (!iconName && !iconUrl && !iconSvg) {\n    return null;\n  }\n\n  return (\n    <InternalIcon\n      className={clsx(styles.icon, styles[`icon-${getIconAlign(props)}`], props.iconClass)}\n      name={iconName}\n      url={iconUrl}\n      svg={iconSvg}\n      alt={iconAlt}\n      size={iconSize}\n      badge={badge}\n    />\n  );\n}\n\nexport function LeftIcon(props: ButtonIconProps) {\n  if (props.loading) {\n    return <InternalSpinner className={clsx(styles.icon, styles['icon-left'])} />;\n  } else if (getIconAlign(props) === 'left') {\n    return <IconWrapper {...props} />;\n  }\n  return null;\n}\n\nexport function RightIcon(props: ButtonIconProps) {\n  if (getIconAlign(props) === 'right') {\n    return <IconWrapper {...props} />;\n  }\n  return null;\n}\n"],"mappings":";AAAA;AACA;AACA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,IAAI,MAAM,MAAM;AAGvB,OAAOC,YAAY,MAAM,kBAAkB;AAC3C,OAAOC,eAAe,MAAM,qBAAqB;AAGjD,OAAOC,MAAM,MAAM,iBAAiB;AAepC,SAASC,YAAYA,CAACC,KAAsB;EAC1C,MAAMC,UAAU,GAAGD,KAAK,CAACE,OAAO,KAAK,MAAM,IAAIF,KAAK,CAACE,OAAO,KAAK,aAAa;EAE9E,OAAOD,UAAU,GAAG,MAAM,GAAGD,KAAK,CAACG,SAAS;AAC9C;AAEA,SAASC,WAAWA,CAACC,EAAmF;MAAnF;MAAEC,QAAQ;MAAEC,OAAO;MAAEC,OAAO;MAAEC,OAAO;MAAEC,QAAQ;MAAEC;IAAK,IAAAN,EAA6B;IAAxBL,KAAK,GAAAY,MAAA,CAAAP,EAAA,EAAhE,kEAAkE,CAAF;EACnF,IAAI,CAACC,QAAQ,IAAI,CAACC,OAAO,IAAI,CAACE,OAAO,EAAE;IACrC,OAAO,IAAI;;EAGb,OACEf,KAAA,CAAAmB,aAAA,CAACjB,YAAY;IACXkB,SAAS,EAAEnB,IAAI,CAACG,MAAM,CAACiB,IAAI,EAAEjB,MAAM,CAAC,QAAQC,YAAY,CAACC,KAAK,CAAC,EAAE,CAAC,EAAEA,KAAK,CAACgB,SAAS,CAAC;IACpFC,IAAI,EAAEX,QAAQ;IACdY,GAAG,EAAEX,OAAO;IACZY,GAAG,EAAEV,OAAO;IACZW,GAAG,EAAEZ,OAAO;IACZa,IAAI,EAAEX,QAAQ;IACdC,KAAK,EAAEA;EAAK,EACZ;AAEN;AAEA,OAAM,SAAUW,QAAQA,CAACtB,KAAsB;EAC7C,IAAIA,KAAK,CAACuB,OAAO,EAAE;IACjB,OAAO7B,KAAA,CAAAmB,aAAA,CAAChB,eAAe;MAACiB,SAAS,EAAEnB,IAAI,CAACG,MAAM,CAACiB,IAAI,EAAEjB,MAAM,CAAC,WAAW,CAAC;IAAC,EAAI;GAC9E,MAAM,IAAIC,YAAY,CAACC,KAAK,CAAC,KAAK,MAAM,EAAE;IACzC,OAAON,KAAA,CAAAmB,aAAA,CAACT,WAAW,EAAAoB,MAAA,CAAAC,MAAA,KAAKzB,KAAK,EAAI;;EAEnC,OAAO,IAAI;AACb;AAEA,OAAM,SAAU0B,SAASA,CAAC1B,KAAsB;EAC9C,IAAID,YAAY,CAACC,KAAK,CAAC,KAAK,OAAO,EAAE;IACnC,OAAON,KAAA,CAAAmB,aAAA,CAACT,WAAW,EAAAoB,MAAA,CAAAC,MAAA,KAAKzB,KAAK,EAAI;;EAEnC,OAAO,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}