{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useEffect, useState } from 'react';\nimport { ResizeObserver } from '@juggle/resize-observer';\nimport { getLogicalBoundingClientRect } from '@cloudscape-design/component-toolkit/internal';\nimport globalVars from '../../internal/styles/global-vars';\nimport { browserScrollbarSize } from '../../internal/utils/browser-scrollbar-size';\nimport { getContainingBlock } from '../../internal/utils/dom';\nimport { getOverflowParents } from '../../internal/utils/scrollable-containers';\nimport styles from './styles.css.js';\nexport const updatePosition = (tableEl, wrapperEl, scrollbarEl, scrollbarContentEl, inScrollableContainer) => {\n  if (!tableEl || !scrollbarEl || !wrapperEl) {\n    return;\n  }\n  const {\n    inlineSize: tableInlineSize\n  } = getLogicalBoundingClientRect(tableEl);\n  const {\n    inlineSize: wrapperInlineSize\n  } = getLogicalBoundingClientRect(wrapperEl);\n  // using 15 px as a height of transparent scrollbar on mac\n  const scrollbarHeight = browserScrollbarSize().height;\n  const areaIsScrollable = tableInlineSize > wrapperInlineSize;\n  if (!areaIsScrollable) {\n    scrollbarEl.classList.remove(styles['sticky-scrollbar-visible']);\n  } else {\n    // when scrollbar is not displayed scrollLeft property cannot be set by useScrollSync\n    // that's why syncing it separately\n    if (!scrollbarEl.classList.contains(styles['sticky-scrollbar-visible'])) {\n      requestAnimationFrame(() => {\n        scrollbarEl.scrollLeft = wrapperEl.scrollLeft;\n      });\n    }\n    scrollbarEl.classList.add(styles['sticky-scrollbar-visible']);\n    if (!scrollbarHeight) {\n      /* istanbul ignore next: covered by screenshot tests */\n      scrollbarEl.classList.add(styles['sticky-scrollbar-native-invisible']);\n    }\n  }\n  if (scrollbarHeight && scrollbarEl && scrollbarContentEl) {\n    scrollbarEl.style.blockSize = `${scrollbarHeight}px`;\n    scrollbarContentEl.style.blockSize = `${scrollbarHeight}px`;\n  }\n  if (tableEl && wrapperEl && scrollbarContentEl && scrollbarEl) {\n    const wrapperElRect = getLogicalBoundingClientRect(wrapperEl);\n    const tableElRect = getLogicalBoundingClientRect(tableEl);\n    scrollbarEl.style.inlineSize = `${wrapperElRect.inlineSize}px`;\n    scrollbarContentEl.style.inlineSize = `${tableElRect.inlineSize}px`;\n    // when using sticky scrollbars in containers\n    // we agreed to ignore dynamic bottom calculations for footer overlap\n    scrollbarEl.style.insetBlockEnd = inScrollableContainer ? '0px' : `var(${globalVars.stickyVerticalBottomOffset}, 0px)`;\n  }\n};\nexport function useStickyScrollbar(scrollbarRef, scrollbarContentRef, tableRef, wrapperRef, offsetScrollbar) {\n  const [inScrollableContainer, setInScrollableContainer] = useState(false);\n  const wrapperEl = wrapperRef.current;\n  useEffect(() => {\n    if (wrapperEl) {\n      setInScrollableContainer(!!getContainingBlock(wrapperEl) || !!getOverflowParents(wrapperEl)[0]);\n    }\n  }, [wrapperEl]);\n  // Update scrollbar position wrapper or table size change.\n  useEffect(() => {\n    if (wrapperRef.current && tableRef.current) {\n      const observer = new ResizeObserver(() => {\n        if (scrollbarContentRef.current) {\n          updatePosition(tableRef.current, wrapperRef.current, scrollbarRef.current, scrollbarContentRef.current, inScrollableContainer);\n        }\n      });\n      // Scrollbar width must be in sync with wrapper width.\n      observer.observe(wrapperRef.current);\n      // Scrollbar content width must be in sync with table width.\n      observer.observe(tableRef.current);\n      return () => {\n        observer.disconnect();\n      };\n    }\n  }, [scrollbarContentRef, scrollbarRef, tableRef, wrapperRef, inScrollableContainer, offsetScrollbar]);\n  // Update scrollbar position when window resizes (vertically).\n  useEffect(() => {\n    const resizeHandler = () => {\n      updatePosition(tableRef.current, wrapperRef.current, scrollbarRef.current, scrollbarContentRef.current, inScrollableContainer);\n    };\n    resizeHandler();\n    window.addEventListener('resize', resizeHandler);\n    return () => {\n      window.removeEventListener('resize', resizeHandler);\n    };\n  }, [tableRef, wrapperRef, scrollbarRef, scrollbarContentRef, inScrollableContainer]);\n}","map":{"version":3,"names":["useEffect","useState","ResizeObserver","getLogicalBoundingClientRect","globalVars","browserScrollbarSize","getContainingBlock","getOverflowParents","styles","updatePosition","tableEl","wrapperEl","scrollbarEl","scrollbarContentEl","inScrollableContainer","inlineSize","tableInlineSize","wrapperInlineSize","scrollbarHeight","height","areaIsScrollable","classList","remove","contains","requestAnimationFrame","scrollLeft","add","style","blockSize","wrapperElRect","tableElRect","insetBlockEnd","stickyVerticalBottomOffset","useStickyScrollbar","scrollbarRef","scrollbarContentRef","tableRef","wrapperRef","offsetScrollbar","setInScrollableContainer","current","observer","observe","disconnect","resizeHandler","window","addEventListener","removeEventListener"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/table/sticky-scrollbar/use-sticky-scrollbar.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { RefObject, useEffect, useState } from 'react';\nimport { ResizeObserver } from '@juggle/resize-observer';\n\nimport { getLogicalBoundingClientRect } from '@cloudscape-design/component-toolkit/internal';\n\nimport globalVars from '../../internal/styles/global-vars';\nimport { browserScrollbarSize } from '../../internal/utils/browser-scrollbar-size';\nimport { getContainingBlock } from '../../internal/utils/dom';\nimport { getOverflowParents } from '../../internal/utils/scrollable-containers';\n\nimport styles from './styles.css.js';\n\nexport const updatePosition = (\n  tableEl: HTMLElement | null,\n  wrapperEl: HTMLElement | null,\n  scrollbarEl: HTMLElement | null,\n  scrollbarContentEl: HTMLElement | null,\n  inScrollableContainer: boolean\n) => {\n  if (!tableEl || !scrollbarEl || !wrapperEl) {\n    return;\n  }\n\n  const { inlineSize: tableInlineSize } = getLogicalBoundingClientRect(tableEl);\n  const { inlineSize: wrapperInlineSize } = getLogicalBoundingClientRect(wrapperEl);\n\n  // using 15 px as a height of transparent scrollbar on mac\n  const scrollbarHeight = browserScrollbarSize().height;\n  const areaIsScrollable = tableInlineSize > wrapperInlineSize;\n\n  if (!areaIsScrollable) {\n    scrollbarEl.classList.remove(styles['sticky-scrollbar-visible']);\n  } else {\n    // when scrollbar is not displayed scrollLeft property cannot be set by useScrollSync\n    // that's why syncing it separately\n    if (!scrollbarEl.classList.contains(styles['sticky-scrollbar-visible'])) {\n      requestAnimationFrame(() => {\n        scrollbarEl.scrollLeft = wrapperEl.scrollLeft;\n      });\n    }\n\n    scrollbarEl.classList.add(styles['sticky-scrollbar-visible']);\n    if (!scrollbarHeight) {\n      /* istanbul ignore next: covered by screenshot tests */\n      scrollbarEl.classList.add(styles['sticky-scrollbar-native-invisible']);\n    }\n  }\n\n  if (scrollbarHeight && scrollbarEl && scrollbarContentEl) {\n    scrollbarEl.style.blockSize = `${scrollbarHeight}px`;\n    scrollbarContentEl.style.blockSize = `${scrollbarHeight}px`;\n  }\n\n  if (tableEl && wrapperEl && scrollbarContentEl && scrollbarEl) {\n    const wrapperElRect = getLogicalBoundingClientRect(wrapperEl);\n    const tableElRect = getLogicalBoundingClientRect(tableEl);\n    scrollbarEl.style.inlineSize = `${wrapperElRect.inlineSize}px`;\n    scrollbarContentEl.style.inlineSize = `${tableElRect.inlineSize}px`;\n\n    // when using sticky scrollbars in containers\n    // we agreed to ignore dynamic bottom calculations for footer overlap\n    scrollbarEl.style.insetBlockEnd = inScrollableContainer\n      ? '0px'\n      : `var(${globalVars.stickyVerticalBottomOffset}, 0px)`;\n  }\n};\n\nexport function useStickyScrollbar(\n  scrollbarRef: RefObject<HTMLDivElement>,\n  scrollbarContentRef: RefObject<HTMLDivElement>,\n  tableRef: RefObject<HTMLTableElement>,\n  wrapperRef: RefObject<HTMLDivElement>,\n  offsetScrollbar: boolean\n) {\n  const [inScrollableContainer, setInScrollableContainer] = useState(false);\n\n  const wrapperEl = wrapperRef.current;\n  useEffect(() => {\n    if (wrapperEl) {\n      setInScrollableContainer(!!getContainingBlock(wrapperEl) || !!getOverflowParents(wrapperEl)[0]);\n    }\n  }, [wrapperEl]);\n\n  // Update scrollbar position wrapper or table size change.\n  useEffect(() => {\n    if (wrapperRef.current && tableRef.current) {\n      const observer = new ResizeObserver(() => {\n        if (scrollbarContentRef.current) {\n          updatePosition(\n            tableRef.current,\n            wrapperRef.current,\n            scrollbarRef.current,\n            scrollbarContentRef.current,\n            inScrollableContainer\n          );\n        }\n      });\n      // Scrollbar width must be in sync with wrapper width.\n      observer.observe(wrapperRef.current);\n      // Scrollbar content width must be in sync with table width.\n      observer.observe(tableRef.current);\n      return () => {\n        observer.disconnect();\n      };\n    }\n  }, [scrollbarContentRef, scrollbarRef, tableRef, wrapperRef, inScrollableContainer, offsetScrollbar]);\n\n  // Update scrollbar position when window resizes (vertically).\n  useEffect(() => {\n    const resizeHandler = () => {\n      updatePosition(\n        tableRef.current,\n        wrapperRef.current,\n        scrollbarRef.current,\n        scrollbarContentRef.current,\n        inScrollableContainer\n      );\n    };\n    resizeHandler();\n    window.addEventListener('resize', resizeHandler);\n    return () => {\n      window.removeEventListener('resize', resizeHandler);\n    };\n  }, [tableRef, wrapperRef, scrollbarRef, scrollbarContentRef, inScrollableContainer]);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}