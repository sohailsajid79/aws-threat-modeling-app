{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\n * @typedef {import('micromark-util-types').Handle} Handle\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('./to-matters.js').Options} Options\n */\n\nimport { toMatters } from './to-matters.js';\n\n/**\n * Create an extension for `micromark` to support frontmatter when serializing\n * to HTML.\n *\n * > ðŸ‘‰ **Note**: this makes sure nothing is generated in the output HTML for\n * > frontmatter.\n *\n * @param {Options | null | undefined} [options='yaml']\n *   Configuration (default: `'yaml'`).\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions`, to\n *   support frontmatter when serializing to HTML.\n */\nexport function frontmatterHtml(options) {\n  const matters = toMatters(options);\n  /** @type {HtmlExtension['enter']} */\n  const enter = {};\n  /** @type {HtmlExtension['exit']} */\n  const exit = {};\n  let index = -1;\n  while (++index < matters.length) {\n    const type = /** @type {TokenType} */matters[index].type;\n    enter[type] = start;\n    exit[type] = end;\n  }\n  return {\n    enter,\n    exit\n  };\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function start() {\n    this.buffer();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function end() {\n    this.resume();\n    this.setData('slurpOneLineEnding', true);\n  }\n}","map":{"version":3,"names":["toMatters","frontmatterHtml","options","matters","enter","exit","index","length","type","start","end","buffer","resume","setData"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/remark-frontmatter/node_modules/micromark-extension-frontmatter/lib/html.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\n * @typedef {import('micromark-util-types').Handle} Handle\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('./to-matters.js').Options} Options\n */\n\nimport {toMatters} from './to-matters.js'\n\n/**\n * Create an extension for `micromark` to support frontmatter when serializing\n * to HTML.\n *\n * > ðŸ‘‰ **Note**: this makes sure nothing is generated in the output HTML for\n * > frontmatter.\n *\n * @param {Options | null | undefined} [options='yaml']\n *   Configuration (default: `'yaml'`).\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions`, to\n *   support frontmatter when serializing to HTML.\n */\nexport function frontmatterHtml(options) {\n  const matters = toMatters(options)\n  /** @type {HtmlExtension['enter']} */\n  const enter = {}\n  /** @type {HtmlExtension['exit']} */\n  const exit = {}\n  let index = -1\n  while (++index < matters.length) {\n    const type = /** @type {TokenType} */ matters[index].type\n    enter[type] = start\n    exit[type] = end\n  }\n  return {\n    enter,\n    exit\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function start() {\n    this.buffer()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function end() {\n    this.resume()\n    this.setData('slurpOneLineEnding', true)\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,SAAS,QAAO,iBAAiB;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,eAAeA,CAACC,OAAO,EAAE;EACvC,MAAMC,OAAO,GAAGH,SAAS,CAACE,OAAO,CAAC;EAClC;EACA,MAAME,KAAK,GAAG,CAAC,CAAC;EAChB;EACA,MAAMC,IAAI,GAAG,CAAC,CAAC;EACf,IAAIC,KAAK,GAAG,CAAC,CAAC;EACd,OAAO,EAAEA,KAAK,GAAGH,OAAO,CAACI,MAAM,EAAE;IAC/B,MAAMC,IAAI,GAAG,wBAAyBL,OAAO,CAACG,KAAK,CAAC,CAACE,IAAI;IACzDJ,KAAK,CAACI,IAAI,CAAC,GAAGC,KAAK;IACnBJ,IAAI,CAACG,IAAI,CAAC,GAAGE,GAAG;EAClB;EACA,OAAO;IACLN,KAAK;IACLC;EACF,CAAC;;EAED;AACF;AACA;AACA;EACE,SAASI,KAAKA,CAAA,EAAG;IACf,IAAI,CAACE,MAAM,CAAC,CAAC;EACf;;EAEA;AACF;AACA;AACA;EACE,SAASD,GAAGA,CAAA,EAAG;IACb,IAAI,CAACE,MAAM,CAAC,CAAC;IACb,IAAI,CAACC,OAAO,CAAC,oBAAoB,EAAE,IAAI,CAAC;EAC1C;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}