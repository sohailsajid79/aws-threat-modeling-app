{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { joinDateTime, splitDateTime } from '../internal/utils/date-time';\nimport { normalizeTimeString } from '../internal/utils/date-time/join-date-time';\nimport { setTimeOffset } from './time-offset';\nexport function formatValue(value, _ref) {\n  let {\n    timeOffset,\n    dateOnly\n  } = _ref;\n  if (!value || value.type === 'relative') {\n    return value;\n  }\n  if (dateOnly) {\n    return {\n      type: 'absolute',\n      startDate: value.startDate.split('T')[0],\n      endDate: value.endDate.split('T')[0]\n    };\n  }\n  return setTimeOffset(value, timeOffset);\n}\nexport function getDefaultMode(value, relativeOptions, rangeSelectorMode) {\n  if (value && value.type) {\n    return value.type;\n  }\n  if (rangeSelectorMode === 'relative-only') {\n    return 'relative';\n  }\n  if (rangeSelectorMode === 'absolute-only') {\n    return 'absolute';\n  }\n  return relativeOptions.length > 0 ? 'relative' : 'absolute';\n}\nexport function splitAbsoluteValue(value) {\n  if (!value) {\n    return {\n      start: {\n        date: '',\n        time: ''\n      },\n      end: {\n        date: '',\n        time: ''\n      }\n    };\n  }\n  return {\n    start: splitDateTime(value.startDate),\n    end: splitDateTime(value.endDate)\n  };\n}\nexport function joinAbsoluteValue(value) {\n  const startTime = normalizeTimeString(value.start.time || '00:00:00');\n  const endTime = normalizeTimeString(value.end.time || '23:59:59');\n  return {\n    type: 'absolute',\n    startDate: joinDateTime(value.start.date, startTime),\n    endDate: joinDateTime(value.end.date, endTime)\n  };\n}","map":{"version":3,"names":["joinDateTime","splitDateTime","normalizeTimeString","setTimeOffset","formatValue","value","_ref","timeOffset","dateOnly","type","startDate","split","endDate","getDefaultMode","relativeOptions","rangeSelectorMode","length","splitAbsoluteValue","start","date","time","end","joinAbsoluteValue","startTime","endTime"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/date-range-picker/utils.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { joinDateTime, splitDateTime } from '../internal/utils/date-time';\nimport { normalizeTimeString } from '../internal/utils/date-time/join-date-time';\nimport { DateRangePickerProps } from './interfaces';\nimport { setTimeOffset } from './time-offset';\n\nexport function formatValue(\n  value: null | DateRangePickerProps.Value,\n  { timeOffset, dateOnly }: { timeOffset: { startDate?: number; endDate?: number }; dateOnly: boolean }\n): null | DateRangePickerProps.Value {\n  if (!value || value.type === 'relative') {\n    return value;\n  }\n  if (dateOnly) {\n    return {\n      type: 'absolute',\n      startDate: value.startDate.split('T')[0],\n      endDate: value.endDate.split('T')[0],\n    };\n  }\n  return setTimeOffset(value, timeOffset);\n}\n\nexport function getDefaultMode(\n  value: null | DateRangePickerProps.Value,\n  relativeOptions: readonly DateRangePickerProps.RelativeOption[],\n  rangeSelectorMode: DateRangePickerProps.RangeSelectorMode\n) {\n  if (value && value.type) {\n    return value.type;\n  }\n  if (rangeSelectorMode === 'relative-only') {\n    return 'relative';\n  }\n  if (rangeSelectorMode === 'absolute-only') {\n    return 'absolute';\n  }\n  return relativeOptions.length > 0 ? 'relative' : 'absolute';\n}\n\nexport function splitAbsoluteValue(\n  value: null | DateRangePickerProps.AbsoluteValue\n): DateRangePickerProps.PendingAbsoluteValue {\n  if (!value) {\n    return {\n      start: { date: '', time: '' },\n      end: { date: '', time: '' },\n    };\n  }\n  return { start: splitDateTime(value.startDate), end: splitDateTime(value.endDate) };\n}\n\nexport function joinAbsoluteValue(\n  value: DateRangePickerProps.PendingAbsoluteValue\n): DateRangePickerProps.AbsoluteValue {\n  const startTime = normalizeTimeString(value.start.time || '00:00:00');\n  const endTime = normalizeTimeString(value.end.time || '23:59:59');\n\n  return {\n    type: 'absolute',\n    startDate: joinDateTime(value.start.date, startTime),\n    endDate: joinDateTime(value.end.date, endTime),\n  };\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,YAAY,EAAEC,aAAa,QAAQ,6BAA6B;AACzE,SAASC,mBAAmB,QAAQ,4CAA4C;AAEhF,SAASC,aAAa,QAAQ,eAAe;AAE7C,OAAM,SAAUC,WAAWA,CACzBC,KAAwC,EAAAC,IAAA,EAC6D;EAAA,IAArG;IAAEC,UAAU;IAAEC;EAAQ,CAA+E,GAAAF,IAAA;EAErG,IAAI,CAACD,KAAK,IAAIA,KAAK,CAACI,IAAI,KAAK,UAAU,EAAE;IACvC,OAAOJ,KAAK;;EAEd,IAAIG,QAAQ,EAAE;IACZ,OAAO;MACLC,IAAI,EAAE,UAAU;MAChBC,SAAS,EAAEL,KAAK,CAACK,SAAS,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACxCC,OAAO,EAAEP,KAAK,CAACO,OAAO,CAACD,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;KACpC;;EAEH,OAAOR,aAAa,CAACE,KAAK,EAAEE,UAAU,CAAC;AACzC;AAEA,OAAM,SAAUM,cAAcA,CAC5BR,KAAwC,EACxCS,eAA+D,EAC/DC,iBAAyD;EAEzD,IAAIV,KAAK,IAAIA,KAAK,CAACI,IAAI,EAAE;IACvB,OAAOJ,KAAK,CAACI,IAAI;;EAEnB,IAAIM,iBAAiB,KAAK,eAAe,EAAE;IACzC,OAAO,UAAU;;EAEnB,IAAIA,iBAAiB,KAAK,eAAe,EAAE;IACzC,OAAO,UAAU;;EAEnB,OAAOD,eAAe,CAACE,MAAM,GAAG,CAAC,GAAG,UAAU,GAAG,UAAU;AAC7D;AAEA,OAAM,SAAUC,kBAAkBA,CAChCZ,KAAgD;EAEhD,IAAI,CAACA,KAAK,EAAE;IACV,OAAO;MACLa,KAAK,EAAE;QAAEC,IAAI,EAAE,EAAE;QAAEC,IAAI,EAAE;MAAE,CAAE;MAC7BC,GAAG,EAAE;QAAEF,IAAI,EAAE,EAAE;QAAEC,IAAI,EAAE;MAAE;KAC1B;;EAEH,OAAO;IAAEF,KAAK,EAAEjB,aAAa,CAACI,KAAK,CAACK,SAAS,CAAC;IAAEW,GAAG,EAAEpB,aAAa,CAACI,KAAK,CAACO,OAAO;EAAC,CAAE;AACrF;AAEA,OAAM,SAAUU,iBAAiBA,CAC/BjB,KAAgD;EAEhD,MAAMkB,SAAS,GAAGrB,mBAAmB,CAACG,KAAK,CAACa,KAAK,CAACE,IAAI,IAAI,UAAU,CAAC;EACrE,MAAMI,OAAO,GAAGtB,mBAAmB,CAACG,KAAK,CAACgB,GAAG,CAACD,IAAI,IAAI,UAAU,CAAC;EAEjE,OAAO;IACLX,IAAI,EAAE,UAAU;IAChBC,SAAS,EAAEV,YAAY,CAACK,KAAK,CAACa,KAAK,CAACC,IAAI,EAAEI,SAAS,CAAC;IACpDX,OAAO,EAAEZ,YAAY,CAACK,KAAK,CAACgB,GAAG,CAACF,IAAI,EAAEK,OAAO;GAC9C;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}