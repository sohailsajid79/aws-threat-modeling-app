{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport Icon from '../../../../icon/internal';\nimport Tooltip from '../../../../internal/components/tooltip';\nimport { registerTooltip } from '../../../../internal/components/tooltip/registry';\nimport testutilStyles from '../../../test-classes/styles.css.js';\nimport styles from './styles.css.js';\nfunction TriggerButton({\n  ariaLabel,\n  className,\n  iconName,\n  iconSvg,\n  ariaExpanded,\n  ariaControls,\n  onClick,\n  testId,\n  disabled = false,\n  badge,\n  selected = false,\n  hasTooltip = false,\n  tooltipText,\n  hasOpenDrawer = false,\n  isMobile = false,\n  isForPreviousActiveDrawer = false,\n  isForSplitPanel = false\n}, ref) {\n  const containerRef = useRef(null);\n  const tooltipValue = tooltipText ? tooltipText : ariaLabel ? ariaLabel : '';\n  const [showTooltip, setShowTooltip] = useState(false);\n  const [suppressTooltip, setSupressTooltip] = useState(false);\n  const handleTriggerClick = event => {\n    event.stopPropagation(); // Stop the event from propagating to the badge icon\n    setShowTooltip(false);\n    setSupressTooltip(true);\n    onClick(event);\n  };\n  const handleBlur = (keepSupressed = false) => {\n    setSupressTooltip(keepSupressed);\n    setShowTooltip(false);\n  };\n  const handlePointerEnter = () => {\n    setSupressTooltip(false);\n    setShowTooltip(true);\n  };\n  /**\n   * Takes the drawer being closed and the data-shift-focus value from a close button on that drawer that persists\n   * on the event relatedTarget to determine not to show the tooltip\n   * @param event\n   */\n  const handleOnFocus = useCallback(event => {\n    var _a;\n    let shouldShowTooltip = false;\n    const eventWithRelatedTarget = event;\n    const relatedTarget = eventWithRelatedTarget === null || eventWithRelatedTarget === void 0 ? void 0 : eventWithRelatedTarget.relatedTarget;\n    const isFromAnotherTrigger = ((_a = relatedTarget === null || relatedTarget === void 0 ? void 0 : relatedTarget.dataset) === null || _a === void 0 ? void 0 : _a.shiftFocus) === 'awsui-layout-drawer-trigger';\n    if (isForSplitPanel && !!relatedTarget ||\n    // relatedTarget is null when split panel is closed\n    !isForSplitPanel && (isFromAnotherTrigger ||\n    // for key navigation from another trigger button\n    !isForPreviousActiveDrawer) // for when the drawer was not opened recently\n    ) {\n      shouldShowTooltip = true;\n    }\n    setSupressTooltip(!shouldShowTooltip);\n    setShowTooltip(true);\n  }, [\n  // To assert reference equality check\n  isForPreviousActiveDrawer, isForSplitPanel]);\n  const tooltipVisible = useMemo(() => {\n    return hasTooltip && showTooltip && !suppressTooltip && !!(containerRef === null || containerRef === void 0 ? void 0 : containerRef.current) && tooltipValue && !(isMobile && hasOpenDrawer);\n  }, [hasTooltip, showTooltip, containerRef, tooltipValue, isMobile, hasOpenDrawer, suppressTooltip]);\n  useEffect(() => {\n    if (hasTooltip && tooltipValue) {\n      const close = () => {\n        setShowTooltip(false);\n        setSupressTooltip(false);\n      };\n      const shouldCloseTooltip = event => {\n        var _a;\n        if (event.target && containerRef && ((_a = containerRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.target))) {\n          return false;\n        }\n        return true;\n      };\n      const handlePointerDownEvent = event => {\n        if (shouldCloseTooltip(event)) {\n          close();\n        }\n      };\n      const handleKeyDownEvent = event => {\n        if (event.key === 'Escape') {\n          close();\n        }\n      };\n      const wrapperDiv = containerRef.current;\n      if (wrapperDiv) {\n        wrapperDiv.addEventListener('pointerdown', handlePointerDownEvent);\n        wrapperDiv.addEventListener('keydown', handleKeyDownEvent);\n        return () => {\n          wrapperDiv.removeEventListener('pointerdown', handlePointerDownEvent);\n          wrapperDiv.removeEventListener('keydown', handleKeyDownEvent);\n        };\n      }\n    }\n  }, [containerRef, hasTooltip, tooltipValue]);\n  useEffect(() => {\n    if (tooltipVisible) {\n      return registerTooltip(() => {\n        setShowTooltip(false);\n        setSupressTooltip(false);\n      });\n    }\n  }, [tooltipVisible]);\n  return React.createElement(\"div\", Object.assign({\n    ref: containerRef\n  }, hasTooltip && {\n    onPointerEnter: () => handlePointerEnter(),\n    onPointerLeave: () => handleBlur(true),\n    onFocus: e => handleOnFocus(e),\n    onBlur: () => handleBlur(true)\n  }, {\n    className: styles['trigger-wrapper']\n  }), React.createElement(\"button\", {\n    \"aria-expanded\": ariaExpanded,\n    \"aria-controls\": ariaControls,\n    \"aria-haspopup\": true,\n    \"aria-label\": ariaLabel,\n    \"aria-disabled\": disabled,\n    disabled: disabled,\n    className: clsx(styles.trigger, styles['trigger-button-styles'], {\n      [styles.selected]: selected,\n      [styles.badge]: badge\n    }, className),\n    onClick: handleTriggerClick,\n    ref: ref,\n    type: \"button\",\n    \"data-testid\": testId,\n    \"data-shift-focus\": \"awsui-layout-drawer-trigger\"\n  }, React.createElement(\"span\", {\n    className: clsx(badge && clsx(styles['trigger-badge-wrapper'], styles['trigger-button-styles']))\n  }, (iconName || iconSvg) && React.createElement(Icon, {\n    name: iconName,\n    svg: iconSvg\n  }))), badge && React.createElement(\"div\", {\n    className: styles.dot\n  }), tooltipVisible && React.createElement(Tooltip, {\n    trackRef: containerRef,\n    value: tooltipValue,\n    className: testutilStyles['trigger-tooltip']\n  }));\n}\nexport default React.forwardRef(TriggerButton);","map":{"version":3,"names":["React","useCallback","useEffect","useMemo","useRef","useState","clsx","Icon","Tooltip","registerTooltip","testutilStyles","styles","TriggerButton","ariaLabel","className","iconName","iconSvg","ariaExpanded","ariaControls","onClick","testId","disabled","badge","selected","hasTooltip","tooltipText","hasOpenDrawer","isMobile","isForPreviousActiveDrawer","isForSplitPanel","ref","containerRef","tooltipValue","showTooltip","setShowTooltip","suppressTooltip","setSupressTooltip","handleTriggerClick","event","stopPropagation","handleBlur","keepSupressed","handlePointerEnter","handleOnFocus","shouldShowTooltip","eventWithRelatedTarget","relatedTarget","isFromAnotherTrigger","_a","dataset","shiftFocus","tooltipVisible","current","close","shouldCloseTooltip","target","contains","handlePointerDownEvent","handleKeyDownEvent","key","wrapperDiv","addEventListener","removeEventListener","createElement","Object","assign","onPointerEnter","onPointerLeave","onFocus","e","onBlur","trigger","type","name","svg","dot","trackRef","value","forwardRef"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/app-layout/visual-refresh-toolbar/toolbar/trigger-button/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { Ref, useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport clsx from 'clsx';\n\nimport { ButtonProps } from '../../../../button/interfaces';\nimport { IconProps } from '../../../../icon/interfaces';\nimport Icon from '../../../../icon/internal';\nimport Tooltip from '../../../../internal/components/tooltip';\nimport { registerTooltip } from '../../../../internal/components/tooltip/registry';\n\nimport testutilStyles from '../../../test-classes/styles.css.js';\nimport styles from './styles.css.js';\n\nexport interface TriggerButtonProps {\n  ariaLabel?: string;\n  className?: string;\n  iconName?: IconProps.Name;\n  iconSvg?: React.ReactNode;\n  ariaExpanded: boolean | undefined;\n  ariaControls?: string;\n  disabled?: boolean;\n  /**\n   * Ovewrwrites any internal testIds when provided\n   */\n  testId?: string;\n  /**\n   * If button is selected. Used only for desktop and applies a selected class\n   */\n  selected?: boolean;\n  onClick: React.MouseEventHandler<HTMLButtonElement>;\n\n  badge?: boolean;\n  /**\n   * If the button is expected to have a tooltip. When false it will not set the event listeners\n   *\n   * defaults to false\n   */\n  hasTooltip?: boolean;\n  /**\n   * This text allows for a customized tooltip.\n   *\n   * When falsy, the tooltip will parse the tooltip form the aria-lable\n   */\n  tooltipText?: string;\n  hasOpenDrawer?: boolean;\n  /**\n   * If the AppLayout is in mobile mode\n   * Used to determine if and where to render tooltips\n   */\n  isMobile?: boolean;\n  /**\n   * set to true if the trigger button was used to open the last active drawer\n   * this is also used to hide the tooltip should the focus be set programmatically\n   * on focus from a drawer close using this\n   */\n  isForPreviousActiveDrawer?: boolean;\n  /**\n   * if the trigger button is for the split panel\n   */\n  isForSplitPanel?: boolean;\n  tabIndex?: number | undefined;\n}\n\nfunction TriggerButton(\n  {\n    ariaLabel,\n    className,\n    iconName,\n    iconSvg,\n    ariaExpanded,\n    ariaControls,\n    onClick,\n    testId,\n    disabled = false,\n    badge,\n    selected = false,\n    hasTooltip = false,\n    tooltipText,\n    hasOpenDrawer = false,\n    isMobile = false,\n    isForPreviousActiveDrawer = false,\n    isForSplitPanel = false,\n  }: TriggerButtonProps,\n  ref: React.Ref<ButtonProps.Ref>\n) {\n  const containerRef = useRef<HTMLDivElement | null>(null);\n  const tooltipValue = tooltipText ? tooltipText : ariaLabel ? ariaLabel : '';\n  const [showTooltip, setShowTooltip] = useState<boolean>(false);\n  const [suppressTooltip, setSupressTooltip] = useState<boolean>(false);\n\n  const handleTriggerClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.stopPropagation(); // Stop the event from propagating to the badge icon\n    setShowTooltip(false);\n    setSupressTooltip(true);\n    onClick(event);\n  };\n\n  const handleBlur = (keepSupressed = false) => {\n    setSupressTooltip(keepSupressed);\n    setShowTooltip(false);\n  };\n\n  const handlePointerEnter = () => {\n    setSupressTooltip(false);\n    setShowTooltip(true);\n  };\n\n  /**\n   * Takes the drawer being closed and the data-shift-focus value from a close button on that drawer that persists\n   * on the event relatedTarget to determine not to show the tooltip\n   * @param event\n   */\n  const handleOnFocus = useCallback(\n    (event: FocusEvent) => {\n      let shouldShowTooltip = false;\n      const eventWithRelatedTarget = event as any;\n      const relatedTarget = eventWithRelatedTarget?.relatedTarget;\n      const isFromAnotherTrigger = relatedTarget?.dataset?.shiftFocus === 'awsui-layout-drawer-trigger';\n      if (\n        (isForSplitPanel && !!relatedTarget) || // relatedTarget is null when split panel is closed\n        (!isForSplitPanel &&\n          (isFromAnotherTrigger || // for key navigation from another trigger button\n            !isForPreviousActiveDrawer)) // for when the drawer was not opened recently\n      ) {\n        shouldShowTooltip = true;\n      }\n      setSupressTooltip(!shouldShowTooltip);\n      setShowTooltip(true);\n    },\n    [\n      // To assert reference equality check\n      isForPreviousActiveDrawer,\n      isForSplitPanel,\n    ]\n  );\n\n  const tooltipVisible = useMemo(() => {\n    return (\n      hasTooltip &&\n      showTooltip &&\n      !suppressTooltip &&\n      !!containerRef?.current &&\n      tooltipValue &&\n      !(isMobile && hasOpenDrawer)\n    );\n  }, [hasTooltip, showTooltip, containerRef, tooltipValue, isMobile, hasOpenDrawer, suppressTooltip]);\n\n  useEffect(() => {\n    if (hasTooltip && tooltipValue) {\n      const close = () => {\n        setShowTooltip(false);\n        setSupressTooltip(false);\n      };\n\n      const shouldCloseTooltip = (event: PointerEvent) => {\n        if (event.target && containerRef && (containerRef.current as any)?.contains(event.target as HTMLElement)) {\n          return false;\n        }\n        return true;\n      };\n\n      const handlePointerDownEvent = (event: PointerEvent) => {\n        if (shouldCloseTooltip(event)) {\n          close();\n        }\n      };\n\n      const handleKeyDownEvent = (event: KeyboardEvent) => {\n        if (event.key === 'Escape') {\n          close();\n        }\n      };\n\n      const wrapperDiv = containerRef.current;\n      if (wrapperDiv) {\n        wrapperDiv.addEventListener('pointerdown', handlePointerDownEvent);\n        wrapperDiv.addEventListener('keydown', handleKeyDownEvent);\n\n        return () => {\n          wrapperDiv.removeEventListener('pointerdown', handlePointerDownEvent);\n          wrapperDiv.removeEventListener('keydown', handleKeyDownEvent);\n        };\n      }\n    }\n  }, [containerRef, hasTooltip, tooltipValue]);\n\n  useEffect(() => {\n    if (tooltipVisible) {\n      return registerTooltip(() => {\n        setShowTooltip(false);\n        setSupressTooltip(false);\n      });\n    }\n  }, [tooltipVisible]);\n\n  return (\n    <div\n      ref={containerRef}\n      {...(hasTooltip && {\n        onPointerEnter: () => handlePointerEnter(),\n        onPointerLeave: () => handleBlur(true),\n        onFocus: e => handleOnFocus(e as any),\n        onBlur: () => handleBlur(true),\n      })}\n      className={styles['trigger-wrapper']}\n    >\n      <button\n        aria-expanded={ariaExpanded}\n        aria-controls={ariaControls}\n        aria-haspopup={true}\n        aria-label={ariaLabel}\n        aria-disabled={disabled}\n        disabled={disabled}\n        className={clsx(\n          styles.trigger,\n          styles['trigger-button-styles'],\n          {\n            [styles.selected]: selected,\n            [styles.badge]: badge,\n          },\n          className\n        )}\n        onClick={handleTriggerClick}\n        ref={ref as Ref<HTMLButtonElement>}\n        type=\"button\"\n        data-testid={testId}\n        data-shift-focus=\"awsui-layout-drawer-trigger\"\n      >\n        <span className={clsx(badge && clsx(styles['trigger-badge-wrapper'], styles['trigger-button-styles']))}>\n          {(iconName || iconSvg) && <Icon name={iconName} svg={iconSvg} />}\n        </span>\n      </button>\n      {badge && <div className={styles.dot} />}\n      {tooltipVisible && (\n        <Tooltip trackRef={containerRef} value={tooltipValue} className={testutilStyles['trigger-tooltip']} />\n      )}\n    </div>\n  );\n}\n\nexport default React.forwardRef(TriggerButton);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}