{"ast":null,"code":"const testIndexMap = new WeakMap();\n//retrieves the test indexes of the option for the findOption and findOptionInGroup test-utils\nexport const getTestOptionIndexes = item => testIndexMap.get(item);\nexport const generateTestIndexes = (filteredItems, getParentGroup) => {\n  let throughIndex = 1;\n  let groupIndex = 0;\n  let inGroupIndex = 1;\n  let currentGroup = null;\n  filteredItems.forEach(item => {\n    const isGroup = item.type === 'parent';\n    const group = isGroup ? item : getParentGroup(item);\n    if (group && group !== currentGroup) {\n      currentGroup = group;\n      groupIndex += 1;\n      inGroupIndex = 1;\n    }\n    if (isGroup) {\n      testIndexMap.set(item, {\n        groupIndex\n      });\n    } else if (group && item.type === 'child') {\n      testIndexMap.set(item, {\n        throughIndex: throughIndex++,\n        groupIndex,\n        inGroupIndex: inGroupIndex++\n      });\n    } else if (item.type === 'child' || !item.type) {\n      testIndexMap.set(item, {\n        throughIndex: throughIndex++\n      });\n    }\n  });\n};","map":{"version":3,"names":["testIndexMap","WeakMap","getTestOptionIndexes","item","get","generateTestIndexes","filteredItems","getParentGroup","throughIndex","groupIndex","inGroupIndex","currentGroup","forEach","isGroup","type","group","set"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/internal/components/options-list/utils/test-indexes.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\ninterface ListItem {\n  type?: string;\n}\ninterface TestIndexes {\n  throughIndex?: number;\n  groupIndex?: number;\n  inGroupIndex?: number;\n}\nconst testIndexMap = new WeakMap<ListItem, TestIndexes>();\n//retrieves the test indexes of the option for the findOption and findOptionInGroup test-utils\nexport const getTestOptionIndexes = <T extends ListItem>(item: T) => testIndexMap.get(item);\nexport const generateTestIndexes = <T extends ListItem, Group extends object>(\n  filteredItems: ReadonlyArray<T>,\n  getParentGroup: (item: T) => Group | undefined\n) => {\n  let throughIndex = 1;\n  let groupIndex = 0;\n  let inGroupIndex = 1;\n  let currentGroup: ListItem | null = null;\n  filteredItems.forEach(item => {\n    const isGroup = item.type === 'parent';\n    const group = isGroup ? item : getParentGroup(item);\n    if (group && group !== currentGroup) {\n      currentGroup = group;\n      groupIndex += 1;\n      inGroupIndex = 1;\n    }\n    if (isGroup) {\n      testIndexMap.set(item, { groupIndex });\n    } else if (group && item.type === 'child') {\n      testIndexMap.set(item, {\n        throughIndex: throughIndex++,\n        groupIndex,\n        inGroupIndex: inGroupIndex++,\n      });\n    } else if (item.type === 'child' || !item.type) {\n      testIndexMap.set(item, { throughIndex: throughIndex++ });\n    }\n  });\n};\n"],"mappings":"AAUA,MAAMA,YAAY,GAAG,IAAIC,OAAO,EAAyB;AACzD;AACA,OAAO,MAAMC,oBAAoB,GAAwBC,IAAO,IAAKH,YAAY,CAACI,GAAG,CAACD,IAAI,CAAC;AAC3F,OAAO,MAAME,mBAAmB,GAAGA,CACjCC,aAA+B,EAC/BC,cAA8C,KAC5C;EACF,IAAIC,YAAY,GAAG,CAAC;EACpB,IAAIC,UAAU,GAAG,CAAC;EAClB,IAAIC,YAAY,GAAG,CAAC;EACpB,IAAIC,YAAY,GAAoB,IAAI;EACxCL,aAAa,CAACM,OAAO,CAACT,IAAI,IAAG;IAC3B,MAAMU,OAAO,GAAGV,IAAI,CAACW,IAAI,KAAK,QAAQ;IACtC,MAAMC,KAAK,GAAGF,OAAO,GAAGV,IAAI,GAAGI,cAAc,CAACJ,IAAI,CAAC;IACnD,IAAIY,KAAK,IAAIA,KAAK,KAAKJ,YAAY,EAAE;MACnCA,YAAY,GAAGI,KAAK;MACpBN,UAAU,IAAI,CAAC;MACfC,YAAY,GAAG,CAAC;;IAElB,IAAIG,OAAO,EAAE;MACXb,YAAY,CAACgB,GAAG,CAACb,IAAI,EAAE;QAAEM;MAAU,CAAE,CAAC;KACvC,MAAM,IAAIM,KAAK,IAAIZ,IAAI,CAACW,IAAI,KAAK,OAAO,EAAE;MACzCd,YAAY,CAACgB,GAAG,CAACb,IAAI,EAAE;QACrBK,YAAY,EAAEA,YAAY,EAAE;QAC5BC,UAAU;QACVC,YAAY,EAAEA,YAAY;OAC3B,CAAC;KACH,MAAM,IAAIP,IAAI,CAACW,IAAI,KAAK,OAAO,IAAI,CAACX,IAAI,CAACW,IAAI,EAAE;MAC9Cd,YAAY,CAACgB,GAAG,CAACb,IAAI,EAAE;QAAEK,YAAY,EAAEA,YAAY;MAAE,CAAE,CAAC;;EAE5D,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}