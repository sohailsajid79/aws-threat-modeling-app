{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useState } from 'react';\nimport { SplitPanelContextProvider } from '../../internal/context/split-panel-context';\nimport { getLimitedValue } from '../../split-panel/utils/size-utils';\nimport { SPLIT_PANEL_MIN_HEIGHT, SPLIT_PANEL_MIN_WIDTH } from './constants';\nexport function SplitPanelProvider(_a) {\n  var {\n      children,\n      size,\n      getMaxHeight,\n      maxWidth,\n      reportSize,\n      onResize\n    } = _a,\n    rest = __rest(_a, [\"children\", \"size\", \"getMaxHeight\", \"maxWidth\", \"reportSize\", \"onResize\"]);\n  const {\n    position,\n    isOpen\n  } = rest;\n  const [maxHeight, setMaxHeight] = useState(size);\n  const minSize = position === 'bottom' ? SPLIT_PANEL_MIN_HEIGHT : SPLIT_PANEL_MIN_WIDTH;\n  const maxSize = position === 'bottom' ? maxHeight : maxWidth;\n  const cappedSize = getLimitedValue(minSize, size, maxSize);\n  const relativeSize = (size - minSize) / (maxSize - minSize) * 100;\n  const onResizeWithValidation = newSize => {\n    const maxSize = position === 'side' ? maxWidth : getMaxHeight();\n    const isResizeValid = position === 'side' ? maxSize >= SPLIT_PANEL_MIN_WIDTH : maxSize >= SPLIT_PANEL_MIN_HEIGHT;\n    if (isOpen && isResizeValid) {\n      onResize(getLimitedValue(minSize, newSize, maxSize));\n    }\n  };\n  useEffect(() => {\n    if (position !== 'bottom') {\n      return;\n    }\n    // effects are called inside out in the components tree\n    // wait one frame to allow app-layout to complete its calculations\n    const handle = requestAnimationFrame(() => setMaxHeight(getMaxHeight()));\n    return () => cancelAnimationFrame(handle);\n  }, [size, minSize, position, getMaxHeight]);\n  useEffect(() => {\n    reportSize(cappedSize);\n  }, [reportSize, cappedSize]);\n  useEffect(() => {\n    if (position !== 'bottom') {\n      return;\n    }\n    const handler = () => setMaxHeight(getMaxHeight());\n    window.addEventListener('resize', handler);\n    return () => window.removeEventListener('resize', handler);\n  }, [position, getMaxHeight]);\n  return React.createElement(SplitPanelContextProvider, {\n    value: Object.assign(Object.assign({}, rest), {\n      size: cappedSize,\n      relativeSize,\n      onResize: onResizeWithValidation\n    })\n  }, children);\n}","map":{"version":3,"names":["React","useEffect","useState","SplitPanelContextProvider","getLimitedValue","SPLIT_PANEL_MIN_HEIGHT","SPLIT_PANEL_MIN_WIDTH","SplitPanelProvider","_a","children","size","getMaxHeight","maxWidth","reportSize","onResize","rest","__rest","position","isOpen","maxHeight","setMaxHeight","minSize","maxSize","cappedSize","relativeSize","onResizeWithValidation","newSize","isResizeValid","handle","requestAnimationFrame","cancelAnimationFrame","handler","window","addEventListener","removeEventListener","createElement","value","Object","assign"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/app-layout/split-panel/provider.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useState } from 'react';\n\nimport { SplitPanelContextBaseProps, SplitPanelContextProvider } from '../../internal/context/split-panel-context';\nimport { getLimitedValue } from '../../split-panel/utils/size-utils';\nimport { SPLIT_PANEL_MIN_HEIGHT, SPLIT_PANEL_MIN_WIDTH } from './constants';\n\nexport interface SplitPanelProviderProps extends SplitPanelContextBaseProps {\n  maxWidth: number;\n  reportSize: (size: number) => void;\n  getMaxHeight: () => number;\n  children?: React.ReactNode;\n}\n\nexport function SplitPanelProvider({\n  children,\n  size,\n  getMaxHeight,\n  maxWidth,\n  reportSize,\n  onResize,\n  ...rest\n}: SplitPanelProviderProps) {\n  const { position, isOpen } = rest;\n  const [maxHeight, setMaxHeight] = useState(size);\n  const minSize = position === 'bottom' ? SPLIT_PANEL_MIN_HEIGHT : SPLIT_PANEL_MIN_WIDTH;\n  const maxSize = position === 'bottom' ? maxHeight : maxWidth;\n  const cappedSize = getLimitedValue(minSize, size, maxSize);\n  const relativeSize = ((size - minSize) / (maxSize - minSize)) * 100;\n\n  const onResizeWithValidation = (newSize: number) => {\n    const maxSize = position === 'side' ? maxWidth : getMaxHeight();\n    const isResizeValid = position === 'side' ? maxSize >= SPLIT_PANEL_MIN_WIDTH : maxSize >= SPLIT_PANEL_MIN_HEIGHT;\n    if (isOpen && isResizeValid) {\n      onResize(getLimitedValue(minSize, newSize, maxSize));\n    }\n  };\n\n  useEffect(() => {\n    if (position !== 'bottom') {\n      return;\n    }\n    // effects are called inside out in the components tree\n    // wait one frame to allow app-layout to complete its calculations\n    const handle = requestAnimationFrame(() => setMaxHeight(getMaxHeight()));\n    return () => cancelAnimationFrame(handle);\n  }, [size, minSize, position, getMaxHeight]);\n\n  useEffect(() => {\n    reportSize(cappedSize);\n  }, [reportSize, cappedSize]);\n\n  useEffect(() => {\n    if (position !== 'bottom') {\n      return;\n    }\n    const handler = () => setMaxHeight(getMaxHeight());\n    window.addEventListener('resize', handler);\n    return () => window.removeEventListener('resize', handler);\n  }, [position, getMaxHeight]);\n\n  return (\n    <SplitPanelContextProvider value={{ ...rest, size: cappedSize, relativeSize, onResize: onResizeWithValidation }}>\n      {children}\n    </SplitPanelContextProvider>\n  );\n}\n"],"mappings":";AAAA;AACA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAElD,SAAqCC,yBAAyB,QAAQ,4CAA4C;AAClH,SAASC,eAAe,QAAQ,oCAAoC;AACpE,SAASC,sBAAsB,EAAEC,qBAAqB,QAAQ,aAAa;AAS3E,OAAM,SAAUC,kBAAkBA,CAACC,EAQT;MARS;MACjCC,QAAQ;MACRC,IAAI;MACJC,YAAY;MACZC,QAAQ;MACRC,UAAU;MACVC;IAAQ,IAAAN,EAEgB;IADrBO,IAAI,GAAAC,MAAA,CAAAR,EAAA,EAP0B,0EAQlC,CADQ;EAEP,MAAM;IAAES,QAAQ;IAAEC;EAAM,CAAE,GAAGH,IAAI;EACjC,MAAM,CAACI,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAACQ,IAAI,CAAC;EAChD,MAAMW,OAAO,GAAGJ,QAAQ,KAAK,QAAQ,GAAGZ,sBAAsB,GAAGC,qBAAqB;EACtF,MAAMgB,OAAO,GAAGL,QAAQ,KAAK,QAAQ,GAAGE,SAAS,GAAGP,QAAQ;EAC5D,MAAMW,UAAU,GAAGnB,eAAe,CAACiB,OAAO,EAAEX,IAAI,EAAEY,OAAO,CAAC;EAC1D,MAAME,YAAY,GAAI,CAACd,IAAI,GAAGW,OAAO,KAAKC,OAAO,GAAGD,OAAO,CAAC,GAAI,GAAG;EAEnE,MAAMI,sBAAsB,GAAIC,OAAe,IAAI;IACjD,MAAMJ,OAAO,GAAGL,QAAQ,KAAK,MAAM,GAAGL,QAAQ,GAAGD,YAAY,EAAE;IAC/D,MAAMgB,aAAa,GAAGV,QAAQ,KAAK,MAAM,GAAGK,OAAO,IAAIhB,qBAAqB,GAAGgB,OAAO,IAAIjB,sBAAsB;IAChH,IAAIa,MAAM,IAAIS,aAAa,EAAE;MAC3Bb,QAAQ,CAACV,eAAe,CAACiB,OAAO,EAAEK,OAAO,EAAEJ,OAAO,CAAC,CAAC;;EAExD,CAAC;EAEDrB,SAAS,CAAC,MAAK;IACb,IAAIgB,QAAQ,KAAK,QAAQ,EAAE;MACzB;;IAEF;IACA;IACA,MAAMW,MAAM,GAAGC,qBAAqB,CAAC,MAAMT,YAAY,CAACT,YAAY,EAAE,CAAC,CAAC;IACxE,OAAO,MAAMmB,oBAAoB,CAACF,MAAM,CAAC;EAC3C,CAAC,EAAE,CAAClB,IAAI,EAAEW,OAAO,EAAEJ,QAAQ,EAAEN,YAAY,CAAC,CAAC;EAE3CV,SAAS,CAAC,MAAK;IACbY,UAAU,CAACU,UAAU,CAAC;EACxB,CAAC,EAAE,CAACV,UAAU,EAAEU,UAAU,CAAC,CAAC;EAE5BtB,SAAS,CAAC,MAAK;IACb,IAAIgB,QAAQ,KAAK,QAAQ,EAAE;MACzB;;IAEF,MAAMc,OAAO,GAAGA,CAAA,KAAMX,YAAY,CAACT,YAAY,EAAE,CAAC;IAClDqB,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAEF,OAAO,CAAC;IAC1C,OAAO,MAAMC,MAAM,CAACE,mBAAmB,CAAC,QAAQ,EAAEH,OAAO,CAAC;EAC5D,CAAC,EAAE,CAACd,QAAQ,EAAEN,YAAY,CAAC,CAAC;EAE5B,OACEX,KAAA,CAAAmC,aAAA,CAAChC,yBAAyB;IAACiC,KAAK,EAAAC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAOvB,IAAI;MAAEL,IAAI,EAAEa,UAAU;MAAEC,YAAY;MAAEV,QAAQ,EAAEW;IAAsB;EAAA,GAC1GhB,QAAQ,CACiB;AAEhC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}