{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport ButtonTrigger from '../../internal/components/button-trigger';\nimport Option from '../../internal/components/option';\nimport { useMergeRefs } from '../../internal/hooks/use-merge-refs';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport { useVisualRefresh } from '../../internal/hooks/use-visual-mode';\nimport { joinStrings } from '../../internal/utils/strings';\nimport styles from './styles.css.js';\nconst Trigger = React.forwardRef(({\n  ariaLabelledby,\n  ariaDescribedby,\n  controlId,\n  invalid,\n  inlineLabelText,\n  warning,\n  triggerProps,\n  selectedOption,\n  selectedOptions,\n  triggerVariant,\n  inFilteringToken,\n  isOpen,\n  placeholder,\n  disabled,\n  readOnly\n}, ref) => {\n  const isVisualRefresh = useVisualRefresh();\n  const generatedId = useUniqueId();\n  const id = controlId !== null && controlId !== void 0 ? controlId : generatedId;\n  const triggerContentId = useUniqueId('trigger-content-');\n  let ariaLabelledbyIds = joinStrings(ariaLabelledby, triggerContentId);\n  let triggerContent = null;\n  if (triggerVariant === 'tokens') {\n    if (selectedOptions === null || selectedOptions === void 0 ? void 0 : selectedOptions.length) {\n      triggerContent = React.createElement(\"span\", {\n        className: clsx(styles['inline-token-trigger'], disabled && styles['inline-token-trigger--disabled'], isVisualRefresh && styles['visual-refresh'])\n      }, React.createElement(\"span\", {\n        className: styles['inline-token-list']\n      }, selectedOptions.map(({\n        label\n      }, i) => React.createElement(\"span\", {\n        key: i,\n        className: styles['inline-token']\n      }, label))), React.createElement(\"span\", {\n        className: styles['inline-token-counter'],\n        id: triggerContentId\n      }, React.createElement(\"span\", {\n        className: styles['inline-token-hidden-placeholder']\n      }, placeholder), React.createElement(\"span\", null, \"(\", selectedOptions.length, \")\")));\n      ariaLabelledbyIds = ariaLabelledby;\n    } else {\n      triggerContent = React.createElement(\"span\", {\n        \"aria-disabled\": \"true\",\n        className: clsx(styles.placeholder, styles.trigger),\n        id: triggerContentId\n      }, placeholder);\n    }\n  } else if (!selectedOption) {\n    triggerContent = React.createElement(\"span\", {\n      \"aria-disabled\": \"true\",\n      className: clsx(styles.placeholder, styles.trigger),\n      id: triggerContentId\n    }, placeholder);\n  } else if (triggerVariant === 'option') {\n    triggerContent = React.createElement(Option, {\n      id: triggerContentId,\n      option: Object.assign(Object.assign({}, selectedOption), {\n        disabled\n      }),\n      triggerVariant: true\n    });\n  } else {\n    triggerContent = React.createElement(\"span\", {\n      id: triggerContentId,\n      className: styles.trigger\n    }, selectedOption.label || selectedOption.value);\n  }\n  const mergedRef = useMergeRefs(triggerProps.ref, ref);\n  const triggerButton = React.createElement(ButtonTrigger, Object.assign({}, triggerProps, {\n    id: id,\n    ref: mergedRef,\n    pressed: isOpen,\n    disabled: disabled,\n    readOnly: readOnly,\n    invalid: invalid,\n    warning: warning && !invalid,\n    inFilteringToken: inFilteringToken,\n    inlineTokens: triggerVariant === 'tokens',\n    ariaDescribedby: ariaDescribedby,\n    ariaLabelledby: ariaLabelledbyIds\n  }), triggerContent);\n  return React.createElement(React.Fragment, null, inlineLabelText ? React.createElement(\"div\", {\n    className: styles['inline-label-wrapper']\n  }, React.createElement(\"label\", {\n    htmlFor: controlId,\n    className: clsx(styles['inline-label'], disabled && styles['inline-label-disabled'])\n  }, inlineLabelText), React.createElement(\"div\", {\n    className: styles['inline-label-trigger-wrapper']\n  }, triggerButton)) : React.createElement(React.Fragment, null, triggerButton));\n});\nexport default Trigger;","map":{"version":3,"names":["React","clsx","ButtonTrigger","Option","useMergeRefs","useUniqueId","useVisualRefresh","joinStrings","styles","Trigger","forwardRef","ariaLabelledby","ariaDescribedby","controlId","invalid","inlineLabelText","warning","triggerProps","selectedOption","selectedOptions","triggerVariant","inFilteringToken","isOpen","placeholder","disabled","readOnly","ref","isVisualRefresh","generatedId","id","triggerContentId","ariaLabelledbyIds","triggerContent","length","createElement","className","map","label","i","key","trigger","option","Object","assign","value","mergedRef","triggerButton","pressed","inlineTokens","Fragment","htmlFor"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/select/parts/trigger.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\n\nimport ButtonTrigger from '../../internal/components/button-trigger';\nimport Option from '../../internal/components/option';\nimport { OptionDefinition } from '../../internal/components/option/interfaces';\nimport { FormFieldValidationControlProps } from '../../internal/context/form-field-context';\nimport { useMergeRefs } from '../../internal/hooks/use-merge-refs';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport { useVisualRefresh } from '../../internal/hooks/use-visual-mode';\nimport { joinStrings } from '../../internal/utils/strings';\nimport { MultiselectProps } from '../../multiselect/interfaces';\nimport { SelectProps } from '../interfaces';\nimport { SelectTriggerProps } from '../utils/use-select';\n\nimport styles from './styles.css.js';\n\nexport interface TriggerProps extends FormFieldValidationControlProps {\n  placeholder: string | undefined;\n  disabled: boolean | undefined;\n  readOnly?: boolean;\n  triggerProps: SelectTriggerProps;\n  selectedOption: OptionDefinition | null;\n  inlineLabelText?: string;\n  isOpen?: boolean;\n  triggerVariant?: SelectProps.TriggerVariant | MultiselectProps.TriggerVariant;\n  inFilteringToken?: 'root' | 'nested';\n  selectedOptions?: ReadonlyArray<OptionDefinition>;\n}\n\nconst Trigger = React.forwardRef(\n  (\n    {\n      ariaLabelledby,\n      ariaDescribedby,\n      controlId,\n      invalid,\n      inlineLabelText,\n      warning,\n      triggerProps,\n      selectedOption,\n      selectedOptions,\n      triggerVariant,\n      inFilteringToken,\n      isOpen,\n      placeholder,\n      disabled,\n      readOnly,\n    }: TriggerProps,\n    ref: React.Ref<HTMLButtonElement>\n  ) => {\n    const isVisualRefresh = useVisualRefresh();\n    const generatedId = useUniqueId();\n    const id = controlId ?? generatedId;\n    const triggerContentId = useUniqueId('trigger-content-');\n\n    let ariaLabelledbyIds = joinStrings(ariaLabelledby, triggerContentId);\n\n    let triggerContent = null;\n    if (triggerVariant === 'tokens') {\n      if (selectedOptions?.length) {\n        triggerContent = (\n          <span\n            className={clsx(\n              styles['inline-token-trigger'],\n              disabled && styles['inline-token-trigger--disabled'],\n              isVisualRefresh && styles['visual-refresh']\n            )}\n          >\n            <span className={styles['inline-token-list']}>\n              {selectedOptions.map(({ label }, i) => (\n                <span key={i} className={styles['inline-token']}>\n                  {label}\n                </span>\n              ))}\n            </span>\n            <span className={styles['inline-token-counter']} id={triggerContentId}>\n              <span className={styles['inline-token-hidden-placeholder']}>{placeholder}</span>\n              <span>({selectedOptions.length})</span>\n            </span>\n          </span>\n        );\n        ariaLabelledbyIds = ariaLabelledby;\n      } else {\n        triggerContent = (\n          <span aria-disabled=\"true\" className={clsx(styles.placeholder, styles.trigger)} id={triggerContentId}>\n            {placeholder}\n          </span>\n        );\n      }\n    } else if (!selectedOption) {\n      triggerContent = (\n        <span aria-disabled=\"true\" className={clsx(styles.placeholder, styles.trigger)} id={triggerContentId}>\n          {placeholder}\n        </span>\n      );\n    } else if (triggerVariant === 'option') {\n      triggerContent = <Option id={triggerContentId} option={{ ...selectedOption, disabled }} triggerVariant={true} />;\n    } else {\n      triggerContent = (\n        <span id={triggerContentId} className={styles.trigger}>\n          {selectedOption.label || selectedOption.value}\n        </span>\n      );\n    }\n\n    const mergedRef = useMergeRefs(triggerProps.ref, ref);\n    const triggerButton = (\n      <ButtonTrigger\n        {...triggerProps}\n        id={id}\n        ref={mergedRef}\n        pressed={isOpen}\n        disabled={disabled}\n        readOnly={readOnly}\n        invalid={invalid}\n        warning={warning && !invalid}\n        inFilteringToken={inFilteringToken}\n        inlineTokens={triggerVariant === 'tokens'}\n        ariaDescribedby={ariaDescribedby}\n        ariaLabelledby={ariaLabelledbyIds}\n      >\n        {triggerContent}\n      </ButtonTrigger>\n    );\n    return (\n      <>\n        {inlineLabelText ? (\n          <div className={styles['inline-label-wrapper']}>\n            <label\n              htmlFor={controlId}\n              className={clsx(styles['inline-label'], disabled && styles['inline-label-disabled'])}\n            >\n              {inlineLabelText}\n            </label>\n            <div className={styles['inline-label-trigger-wrapper']}>{triggerButton}</div>\n          </div>\n        ) : (\n          <>{triggerButton}</>\n        )}\n      </>\n    );\n  }\n);\n\nexport default Trigger;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}