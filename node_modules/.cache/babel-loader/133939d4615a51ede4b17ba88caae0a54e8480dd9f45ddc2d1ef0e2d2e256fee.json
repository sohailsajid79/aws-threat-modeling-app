{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { memo } from 'react';\nimport clsx from 'clsx';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport { useSelector } from '../async-store';\nimport AreaSeries from './area-series';\nimport ThresholdSeries from './threshold-series';\nimport styles from '../styles.css.js';\nexport default memo(DataSeries);\nfunction DataSeries({\n  model\n}) {\n  const chartAreaClipPath = useUniqueId('awsui-area-chart__chart-area-');\n  const highlightedX = useSelector(model.interactions, state => state.highlightedX);\n  const highlightedSeries = useSelector(model.interactions, state => state.highlightedSeries);\n  const useHighlightDimmed = !highlightedX;\n  // Iterating series in the reversed order so that SVG paths overlap correctly.\n  const seriesData = [];\n  for (let seriesIndex = model.series.length - 1; seriesIndex >= 0; seriesIndex--) {\n    if (model.computed.plot.sx[seriesIndex]) {\n      seriesData.push([model.series[seriesIndex], model.computed.plot.sx[seriesIndex] || []]);\n    }\n  }\n  return React.createElement(React.Fragment, null, React.createElement(\"defs\", {\n    \"aria-hidden\": \"true\"\n  }, React.createElement(\"clipPath\", {\n    id: chartAreaClipPath\n  }, React.createElement(\"rect\", {\n    x: 0,\n    y: 0,\n    width: model.width,\n    height: model.height\n  }))), React.createElement(\"g\", {\n    role: \"group\"\n  }, seriesData.map(([series, data]) => {\n    const isHighlighted = series === highlightedSeries;\n    const isDimmed = !!highlightedSeries && !isHighlighted;\n    return React.createElement(\"g\", {\n      key: series.title,\n      role: \"group\",\n      \"aria-label\": series.title,\n      className: clsx(styles.series, styles[`series--${series.type}`], {\n        [styles['series--highlighted']]: isHighlighted,\n        [styles['series--dimmed']]: useHighlightDimmed && isDimmed\n      })\n    }, series.type === 'area' ? React.createElement(AreaSeries, {\n      data: data,\n      color: model.getInternalSeries(series).color,\n      chartAreaClipPath: chartAreaClipPath\n    }) : React.createElement(ThresholdSeries, {\n      data: data,\n      xScale: model.computed.xScale,\n      color: model.getInternalSeries(series).color,\n      chartAreaClipPath: chartAreaClipPath\n    }));\n  })));\n}","map":{"version":3,"names":["React","memo","clsx","useUniqueId","useSelector","AreaSeries","ThresholdSeries","styles","DataSeries","model","chartAreaClipPath","highlightedX","interactions","state","highlightedSeries","useHighlightDimmed","seriesData","seriesIndex","series","length","computed","plot","sx","push","createElement","Fragment","id","x","y","width","height","role","map","data","isHighlighted","isDimmed","key","title","className","type","color","getInternalSeries","xScale"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/area-chart/elements/data-series.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { memo } from 'react';\nimport clsx from 'clsx';\n\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport { useSelector } from '../async-store';\nimport { AreaChartProps } from '../interfaces';\nimport { ChartModel } from '../model';\nimport AreaSeries from './area-series';\nimport ThresholdSeries from './threshold-series';\n\nimport styles from '../styles.css.js';\n\nexport default memo(DataSeries) as typeof DataSeries;\n\nfunction DataSeries<T extends AreaChartProps.DataTypes>({ model }: { model: ChartModel<T> }) {\n  const chartAreaClipPath = useUniqueId('awsui-area-chart__chart-area-');\n\n  const highlightedX = useSelector(model.interactions, state => state.highlightedX);\n  const highlightedSeries = useSelector(model.interactions, state => state.highlightedSeries);\n  const useHighlightDimmed = !highlightedX;\n\n  // Iterating series in the reversed order so that SVG paths overlap correctly.\n  const seriesData: [AreaChartProps.Series<T>, ChartModel.PlotPoint<T>[]][] = [];\n  for (let seriesIndex = model.series.length - 1; seriesIndex >= 0; seriesIndex--) {\n    if (model.computed.plot.sx[seriesIndex]) {\n      seriesData.push([model.series[seriesIndex], model.computed.plot.sx[seriesIndex] || []]);\n    }\n  }\n\n  return (\n    <>\n      <defs aria-hidden=\"true\">\n        <clipPath id={chartAreaClipPath}>\n          <rect x={0} y={0} width={model.width} height={model.height} />\n        </clipPath>\n      </defs>\n      <g role=\"group\">\n        {seriesData.map(([series, data]) => {\n          const isHighlighted = series === highlightedSeries;\n          const isDimmed = !!highlightedSeries && !isHighlighted;\n\n          return (\n            <g\n              key={series.title}\n              role=\"group\"\n              aria-label={series.title}\n              className={clsx(styles.series, styles[`series--${series.type}`], {\n                [styles['series--highlighted']]: isHighlighted,\n                [styles['series--dimmed']]: useHighlightDimmed && isDimmed,\n              })}\n            >\n              {series.type === 'area' ? (\n                <AreaSeries\n                  data={data}\n                  color={model.getInternalSeries(series).color}\n                  chartAreaClipPath={chartAreaClipPath}\n                />\n              ) : (\n                <ThresholdSeries\n                  data={data}\n                  xScale={model.computed.xScale}\n                  color={model.getInternalSeries(series).color}\n                  chartAreaClipPath={chartAreaClipPath}\n                />\n              )}\n            </g>\n          );\n        })}\n      </g>\n    </>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}