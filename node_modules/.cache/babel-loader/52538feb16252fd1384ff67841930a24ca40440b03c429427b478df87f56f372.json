{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { getClosestNeighbor } from \"../utils/rects\";\nimport { getNormalizedElementRect } from \"../utils/screen\";\n/**\n * Finds closest droppable to provided draggable element and direction.\n * Returns null if there is no droppable in the given direction.\n */\nexport function getNextDroppable({\n  draggableElement,\n  droppables,\n  direction,\n  isRtl\n}) {\n  var _a;\n  const draggableRect = getNormalizedElementRect(draggableElement);\n  const sources = new Map(droppables.map(([id, d]) => [getNormalizedElementRect(d.element), id]));\n  const closest = getClosestNeighbor({\n    target: draggableRect,\n    sources: [...sources.keys()],\n    direction,\n    isRtl\n  });\n  return (_a = sources.get(closest)) !== null && _a !== void 0 ? _a : null;\n}","map":{"version":3,"names":["getClosestNeighbor","getNormalizedElementRect","getNextDroppable","draggableElement","droppables","direction","isRtl","draggableRect","sources","Map","map","id","d","element","closest","target","keys","_a","get"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/internal/item-container/get-next-droppable.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Droppable } from \"../dnd-controller/controller\";\nimport { Direction, ItemId } from \"../interfaces\";\nimport { getClosestNeighbor } from \"../utils/rects\";\nimport { getNormalizedElementRect } from \"../utils/screen\";\n\n/**\n * Finds closest droppable to provided draggable element and direction.\n * Returns null if there is no droppable in the given direction.\n */\nexport function getNextDroppable({\n  draggableElement,\n  droppables,\n  direction,\n  isRtl,\n}: {\n  draggableElement: HTMLElement;\n  droppables: readonly [ItemId, Droppable][];\n  direction: Direction;\n  isRtl: boolean;\n}): null | ItemId {\n  const draggableRect = getNormalizedElementRect(draggableElement);\n  const sources = new Map(droppables.map(([id, d]) => [getNormalizedElementRect(d.element), id]));\n  const closest = getClosestNeighbor({\n    target: draggableRect,\n    sources: [...sources.keys()],\n    direction,\n    isRtl,\n  });\n  return sources.get(closest as DOMRect) ?? null;\n}\n"],"mappings":"AAAA;AACA;AAIA,SAASA,kBAAkB,QAAQ,gBAAgB;AACnD,SAASC,wBAAwB,QAAQ,iBAAiB;AAE1D;;;;AAIA,OAAM,SAAUC,gBAAgBA,CAAC;EAC/BC,gBAAgB;EAChBC,UAAU;EACVC,SAAS;EACTC;AAAK,CAMN;;EACC,MAAMC,aAAa,GAAGN,wBAAwB,CAACE,gBAAgB,CAAC;EAChE,MAAMK,OAAO,GAAG,IAAIC,GAAG,CAACL,UAAU,CAACM,GAAG,CAAC,CAAC,CAACC,EAAE,EAAEC,CAAC,CAAC,KAAK,CAACX,wBAAwB,CAACW,CAAC,CAACC,OAAO,CAAC,EAAEF,EAAE,CAAC,CAAC,CAAC;EAC/F,MAAMG,OAAO,GAAGd,kBAAkB,CAAC;IACjCe,MAAM,EAAER,aAAa;IACrBC,OAAO,EAAE,CAAC,GAAGA,OAAO,CAACQ,IAAI,EAAE,CAAC;IAC5BX,SAAS;IACTC;GACD,CAAC;EACF,OAAO,CAAAW,EAAA,GAAAT,OAAO,CAACU,GAAG,CAACJ,OAAkB,CAAC,cAAAG,EAAA,cAAAA,EAAA,GAAI,IAAI;AAChD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}