{"ast":null,"code":"/// <reference types=\"remark-parse\" />\n/// <reference types=\"remark-stringify\" />\n\n/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('micromark-extension-frontmatter').Options} Options\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\nimport { frontmatterFromMarkdown, frontmatterToMarkdown } from 'mdast-util-frontmatter';\nimport { frontmatter } from 'micromark-extension-frontmatter';\n\n/** @type {Options} */\nconst emptyOptions = 'yaml';\n\n/**\n * Add support for frontmatter.\n *\n * ###### Notes\n *\n * Doesn’t parse the data inside them: create your own plugin to do that.\n *\n * @param {Options | null | undefined} [options='yaml']\n *   Configuration (default: `'yaml'`).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkFrontmatter(options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor} */this;\n  const settings = options || emptyOptions;\n  const data = self.data();\n  const micromarkExtensions = data.micromarkExtensions || (data.micromarkExtensions = []);\n  const fromMarkdownExtensions = data.fromMarkdownExtensions || (data.fromMarkdownExtensions = []);\n  const toMarkdownExtensions = data.toMarkdownExtensions || (data.toMarkdownExtensions = []);\n  micromarkExtensions.push(frontmatter(settings));\n  fromMarkdownExtensions.push(frontmatterFromMarkdown(settings));\n  toMarkdownExtensions.push(frontmatterToMarkdown(settings));\n}","map":{"version":3,"names":["frontmatterFromMarkdown","frontmatterToMarkdown","frontmatter","emptyOptions","remarkFrontmatter","options","self","settings","data","micromarkExtensions","fromMarkdownExtensions","toMarkdownExtensions","push"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/remark-frontmatter/lib/index.js"],"sourcesContent":["/// <reference types=\"remark-parse\" />\n/// <reference types=\"remark-stringify\" />\n\n/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('micromark-extension-frontmatter').Options} Options\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\nimport {\n  frontmatterFromMarkdown,\n  frontmatterToMarkdown\n} from 'mdast-util-frontmatter'\nimport {frontmatter} from 'micromark-extension-frontmatter'\n\n/** @type {Options} */\nconst emptyOptions = 'yaml'\n\n/**\n * Add support for frontmatter.\n *\n * ###### Notes\n *\n * Doesn’t parse the data inside them: create your own plugin to do that.\n *\n * @param {Options | null | undefined} [options='yaml']\n *   Configuration (default: `'yaml'`).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkFrontmatter(options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor} */ (this)\n  const settings = options || emptyOptions\n  const data = self.data()\n\n  const micromarkExtensions =\n    data.micromarkExtensions || (data.micromarkExtensions = [])\n  const fromMarkdownExtensions =\n    data.fromMarkdownExtensions || (data.fromMarkdownExtensions = [])\n  const toMarkdownExtensions =\n    data.toMarkdownExtensions || (data.toMarkdownExtensions = [])\n\n  micromarkExtensions.push(frontmatter(settings))\n  fromMarkdownExtensions.push(frontmatterFromMarkdown(settings))\n  toMarkdownExtensions.push(frontmatterToMarkdown(settings))\n}\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,SACEA,uBAAuB,EACvBC,qBAAqB,QAChB,wBAAwB;AAC/B,SAAQC,WAAW,QAAO,iCAAiC;;AAE3D;AACA,MAAMC,YAAY,GAAG,MAAM;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,iBAAiBA,CAACC,OAAO,EAAE;EACjD;EACA;EACA,MAAMC,IAAI,GAAG,wBAA0B,IAAK;EAC5C,MAAMC,QAAQ,GAAGF,OAAO,IAAIF,YAAY;EACxC,MAAMK,IAAI,GAAGF,IAAI,CAACE,IAAI,CAAC,CAAC;EAExB,MAAMC,mBAAmB,GACvBD,IAAI,CAACC,mBAAmB,KAAKD,IAAI,CAACC,mBAAmB,GAAG,EAAE,CAAC;EAC7D,MAAMC,sBAAsB,GAC1BF,IAAI,CAACE,sBAAsB,KAAKF,IAAI,CAACE,sBAAsB,GAAG,EAAE,CAAC;EACnE,MAAMC,oBAAoB,GACxBH,IAAI,CAACG,oBAAoB,KAAKH,IAAI,CAACG,oBAAoB,GAAG,EAAE,CAAC;EAE/DF,mBAAmB,CAACG,IAAI,CAACV,WAAW,CAACK,QAAQ,CAAC,CAAC;EAC/CG,sBAAsB,CAACE,IAAI,CAACZ,uBAAuB,CAACO,QAAQ,CAAC,CAAC;EAC9DI,oBAAoB,CAACC,IAAI,CAACX,qBAAqB,CAACM,QAAQ,CAAC,CAAC;AAC5D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}