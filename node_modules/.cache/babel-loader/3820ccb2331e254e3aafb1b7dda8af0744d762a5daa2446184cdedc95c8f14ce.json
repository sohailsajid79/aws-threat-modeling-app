{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useEffect, useRef, useState } from 'react';\nimport { useStableCallback } from '@cloudscape-design/component-toolkit/internal';\nimport { fireNonCancelableEvent } from '../../internal/events';\nimport { useControllable } from '../../internal/hooks/use-controllable';\nimport { awsuiPluginsInternal } from '../../internal/plugins/api';\nimport { sortByPriority } from '../../internal/plugins/helpers/utils';\nimport { convertRuntimeDrawers } from '../runtime-api';\nimport { togglesConfig } from '../toggles';\nexport const TOOLS_DRAWER_ID = 'awsui-internal-tools';\nfunction getToolsDrawerItem(props) {\n  if (props.toolsHide) {\n    return null;\n  }\n  const {\n    iconName,\n    getLabels\n  } = togglesConfig.tools;\n  const {\n    mainLabel,\n    closeLabel,\n    openLabel\n  } = getLabels(props.ariaLabels);\n  return {\n    id: TOOLS_DRAWER_ID,\n    content: props.tools,\n    resizable: false,\n    ariaLabels: {\n      triggerButton: openLabel,\n      closeButton: closeLabel,\n      drawerName: mainLabel !== null && mainLabel !== void 0 ? mainLabel : ''\n    },\n    trigger: {\n      iconName: iconName\n    }\n  };\n}\nconst DRAWERS_LIMIT = 2;\nfunction useRuntimeDrawers(disableRuntimeDrawers, activeDrawerId, onActiveDrawerChange, activeGlobalDrawersIds, onActiveGlobalDrawersChange, drawers) {\n  const [runtimeDrawers, setRuntimeDrawers] = useState({\n    localBefore: [],\n    localAfter: [],\n    global: []\n  });\n  const onLocalDrawerChangeStable = useStableCallback(onActiveDrawerChange);\n  const onGlobalDrawersChangeStable = useStableCallback(onActiveGlobalDrawersChange);\n  const localDrawerWasOpenRef = useRef(false);\n  localDrawerWasOpenRef.current = localDrawerWasOpenRef.current || !!activeDrawerId;\n  const activeGlobalDrawersIdsRef = useRef([]);\n  activeGlobalDrawersIdsRef.current = activeGlobalDrawersIds;\n  useEffect(() => {\n    if (disableRuntimeDrawers) {\n      return;\n    }\n    const unsubscribe = awsuiPluginsInternal.appLayout.onDrawersRegistered(drawers => {\n      const localDrawers = drawers.filter(drawer => drawer.type !== 'global');\n      const globalDrawers = drawers.filter(drawer => drawer.type === 'global');\n      setRuntimeDrawers(convertRuntimeDrawers(localDrawers, globalDrawers));\n      if (!localDrawerWasOpenRef.current) {\n        const defaultActiveLocalDrawer = sortByPriority(localDrawers).find(drawer => drawer.defaultActive);\n        if (defaultActiveLocalDrawer) {\n          onLocalDrawerChangeStable(defaultActiveLocalDrawer.id);\n        }\n      }\n      const drawersNotActiveByDefault = globalDrawers.filter(drawer => !drawer.defaultActive);\n      const hasDrawersOpenByUserAction = drawersNotActiveByDefault.find(drawer => activeGlobalDrawersIdsRef.current.includes(drawer.id));\n      if (hasDrawersOpenByUserAction || activeGlobalDrawersIdsRef.current.length === DRAWERS_LIMIT) {\n        return;\n      }\n      const defaultActiveGlobalDrawers = sortByPriority(globalDrawers).filter(drawer => !activeGlobalDrawersIdsRef.current.includes(drawer.id) && drawer.defaultActive);\n      defaultActiveGlobalDrawers.forEach(drawer => {\n        onGlobalDrawersChangeStable(drawer.id);\n      });\n    });\n    return () => {\n      unsubscribe();\n      setRuntimeDrawers({\n        localBefore: [],\n        localAfter: [],\n        global: []\n      });\n    };\n  }, [disableRuntimeDrawers, onGlobalDrawersChangeStable, onLocalDrawerChangeStable]);\n  useEffect(() => {\n    const unsubscribe = awsuiPluginsInternal.appLayout.onDrawerOpened(drawerId => {\n      var _a, _b;\n      const localDrawer = (_a = [...runtimeDrawers.localBefore, ...drawers, ...runtimeDrawers.localAfter]) === null || _a === void 0 ? void 0 : _a.find(drawer => drawer.id === drawerId);\n      const globalDrawer = (_b = runtimeDrawers.global) === null || _b === void 0 ? void 0 : _b.find(drawer => drawer.id === drawerId);\n      if (localDrawer && activeDrawerId !== drawerId) {\n        onActiveDrawerChange(drawerId);\n      }\n      if (globalDrawer && !activeGlobalDrawersIds.includes(drawerId)) {\n        onActiveGlobalDrawersChange(drawerId);\n      }\n    });\n    return () => {\n      unsubscribe();\n    };\n  }, [activeDrawerId, activeGlobalDrawersIds, drawers, onActiveDrawerChange, runtimeDrawers, onActiveGlobalDrawersChange]);\n  useEffect(() => {\n    const unsubscribe = awsuiPluginsInternal.appLayout.onDrawerClosed(drawerId => {\n      var _a, _b;\n      const localDrawer = (_a = [...runtimeDrawers.localBefore, ...drawers, ...runtimeDrawers.localAfter]) === null || _a === void 0 ? void 0 : _a.find(drawer => drawer.id === drawerId);\n      const globalDrawer = (_b = runtimeDrawers.global) === null || _b === void 0 ? void 0 : _b.find(drawer => drawer.id === drawerId);\n      if (localDrawer && activeDrawerId === drawerId) {\n        onActiveDrawerChange(null);\n      }\n      if (globalDrawer && activeGlobalDrawersIds.includes(drawerId)) {\n        onActiveGlobalDrawersChange(drawerId);\n      }\n    });\n    return () => {\n      unsubscribe();\n    };\n  }, [activeDrawerId, activeGlobalDrawersIds, drawers, onActiveDrawerChange, runtimeDrawers, onActiveGlobalDrawersChange]);\n  return runtimeDrawers;\n}\nfunction applyToolsDrawer(toolsProps, runtimeDrawers) {\n  const drawers = [...runtimeDrawers.localBefore, ...runtimeDrawers.localAfter];\n  if (drawers.length === 0 && toolsProps.disableDrawersMerge) {\n    return null;\n  }\n  const toolsItem = getToolsDrawerItem(toolsProps);\n  if (toolsItem) {\n    drawers.unshift(toolsItem);\n  }\n  return drawers;\n}\nexport const MIN_DRAWER_SIZE = 290;\nexport function useDrawers(_ref, ariaLabels, toolsProps) {\n  let {\n    drawers,\n    activeDrawerId: controlledActiveDrawerId,\n    onDrawerChange,\n    onGlobalDrawerFocus,\n    onAddNewActiveDrawer,\n    __disableRuntimeDrawers: disableRuntimeDrawers\n  } = _ref;\n  var _a, _b, _c, _d;\n  const [activeDrawerId = null, setActiveDrawerId] = useControllable(controlledActiveDrawerId, onDrawerChange, null, {\n    componentName: 'AppLayout',\n    controlledProp: 'activeDrawerId',\n    changeHandler: 'onChange'\n  });\n  const [activeGlobalDrawersIds, setActiveGlobalDrawersIds] = useState([]);\n  const [drawerSizes, setDrawerSizes] = useState({});\n  // FIFO queue that keeps track of open drawers, where the first element is the most recently opened drawer\n  const drawersOpenQueue = useRef([]);\n  function onActiveDrawerResize(_ref2) {\n    let {\n      id,\n      size\n    } = _ref2;\n    setDrawerSizes(oldSizes => Object.assign(Object.assign({}, oldSizes), {\n      [id]: size\n    }));\n    fireNonCancelableEvent(activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.onResize, {\n      id,\n      size\n    });\n    const activeGlobalDrawer = runtimeGlobalDrawers.find(drawer => drawer.id === id);\n    fireNonCancelableEvent(activeGlobalDrawer === null || activeGlobalDrawer === void 0 ? void 0 : activeGlobalDrawer.onResize, {\n      id,\n      size\n    });\n  }\n  function onActiveDrawerChange(newDrawerId) {\n    setActiveDrawerId(newDrawerId);\n    if (newDrawerId) {\n      onAddNewActiveDrawer === null || onAddNewActiveDrawer === void 0 ? void 0 : onAddNewActiveDrawer(newDrawerId);\n    }\n    if (hasOwnDrawers) {\n      fireNonCancelableEvent(onDrawerChange, {\n        activeDrawerId: newDrawerId\n      });\n    } else if (!toolsProps.toolsHide) {\n      toolsProps.onToolsToggle(newDrawerId === TOOLS_DRAWER_ID);\n    }\n    if (newDrawerId) {\n      drawersOpenQueue.current = [newDrawerId, ...drawersOpenQueue.current];\n    }\n    if (activeDrawerId) {\n      drawersOpenQueue.current = drawersOpenQueue.current.filter(id => id !== activeDrawerId);\n    }\n  }\n  function onActiveGlobalDrawersChange(drawerId) {\n    if (activeGlobalDrawersIds.includes(drawerId)) {\n      setActiveGlobalDrawersIds(currentState => currentState.filter(id => id !== drawerId));\n      onGlobalDrawerFocus === null || onGlobalDrawerFocus === void 0 ? void 0 : onGlobalDrawerFocus(drawerId, false);\n      drawersOpenQueue.current = drawersOpenQueue.current.filter(id => id !== drawerId);\n    } else if (drawerId) {\n      onAddNewActiveDrawer === null || onAddNewActiveDrawer === void 0 ? void 0 : onAddNewActiveDrawer(drawerId);\n      setActiveGlobalDrawersIds(currentState => [drawerId, ...currentState].slice(0, DRAWERS_LIMIT));\n      onGlobalDrawerFocus === null || onGlobalDrawerFocus === void 0 ? void 0 : onGlobalDrawerFocus(drawerId, true);\n      drawersOpenQueue.current = [drawerId, ...drawersOpenQueue.current];\n    }\n  }\n  const hasOwnDrawers = !!drawers;\n  const runtimeDrawers = useRuntimeDrawers(disableRuntimeDrawers, activeDrawerId, onActiveDrawerChange, activeGlobalDrawersIds, onActiveGlobalDrawersChange, drawers !== null && drawers !== void 0 ? drawers : []);\n  const {\n    localBefore,\n    localAfter,\n    global: runtimeGlobalDrawers\n  } = runtimeDrawers;\n  const combinedLocalDrawers = drawers ? [...localBefore, ...drawers, ...localAfter] : applyToolsDrawer(toolsProps, runtimeDrawers);\n  // support toolsOpen in runtime-drawers-only mode\n  let activeDrawerIdResolved = (toolsProps === null || toolsProps === void 0 ? void 0 : toolsProps.toolsOpen) && !hasOwnDrawers ? TOOLS_DRAWER_ID : activeDrawerId;\n  const activeDrawer = combinedLocalDrawers === null || combinedLocalDrawers === void 0 ? void 0 : combinedLocalDrawers.find(drawer => drawer.id === activeDrawerIdResolved);\n  // ensure that id is only defined when the drawer exists\n  activeDrawerIdResolved = (_a = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id) !== null && _a !== void 0 ? _a : null;\n  const activeGlobalDrawers = runtimeGlobalDrawers.filter(drawer => activeGlobalDrawersIds.includes(drawer.id));\n  const activeDrawerSize = activeDrawerIdResolved ? (_c = (_b = drawerSizes[activeDrawerIdResolved]) !== null && _b !== void 0 ? _b : activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.defaultSize) !== null && _c !== void 0 ? _c : toolsProps.toolsWidth : toolsProps.toolsWidth;\n  const activeGlobalDrawersSizes = activeGlobalDrawersIds.reduce((acc, currentGlobalDrawerId) => {\n    var _a, _b;\n    const currentGlobalDrawer = runtimeGlobalDrawers.find(drawer => drawer.id === currentGlobalDrawerId);\n    return Object.assign(Object.assign({}, acc), {\n      [currentGlobalDrawerId]: (_b = (_a = drawerSizes[currentGlobalDrawerId]) !== null && _a !== void 0 ? _a : currentGlobalDrawer === null || currentGlobalDrawer === void 0 ? void 0 : currentGlobalDrawer.defaultSize) !== null && _b !== void 0 ? _b : MIN_DRAWER_SIZE\n    });\n  }, {});\n  const minGlobalDrawersSizes = runtimeGlobalDrawers.reduce((acc, globalDrawer) => {\n    var _a;\n    return Object.assign(Object.assign({}, acc), {\n      [globalDrawer.id]: Math.min((_a = globalDrawer.defaultSize) !== null && _a !== void 0 ? _a : MIN_DRAWER_SIZE, MIN_DRAWER_SIZE)\n    });\n  }, {});\n  const minDrawerSize = Math.min((toolsProps === null || toolsProps === void 0 ? void 0 : toolsProps.toolsOpen) ? toolsProps.toolsWidth : (_d = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.defaultSize) !== null && _d !== void 0 ? _d : MIN_DRAWER_SIZE, MIN_DRAWER_SIZE);\n  return {\n    ariaLabelsWithDrawers: ariaLabels,\n    drawers: combinedLocalDrawers || undefined,\n    activeDrawer,\n    activeDrawerId: activeDrawerIdResolved,\n    globalDrawers: runtimeGlobalDrawers,\n    activeGlobalDrawers: activeGlobalDrawers,\n    activeGlobalDrawersIds,\n    activeGlobalDrawersSizes,\n    activeDrawerSize,\n    minDrawerSize,\n    minGlobalDrawersSizes,\n    drawerSizes,\n    drawersOpenQueue: drawersOpenQueue.current,\n    onActiveDrawerChange,\n    onActiveDrawerResize,\n    onActiveGlobalDrawersChange\n  };\n}","map":{"version":3,"names":["useEffect","useRef","useState","useStableCallback","fireNonCancelableEvent","useControllable","awsuiPluginsInternal","sortByPriority","convertRuntimeDrawers","togglesConfig","TOOLS_DRAWER_ID","getToolsDrawerItem","props","toolsHide","iconName","getLabels","tools","mainLabel","closeLabel","openLabel","ariaLabels","id","content","resizable","triggerButton","closeButton","drawerName","trigger","DRAWERS_LIMIT","useRuntimeDrawers","disableRuntimeDrawers","activeDrawerId","onActiveDrawerChange","activeGlobalDrawersIds","onActiveGlobalDrawersChange","drawers","runtimeDrawers","setRuntimeDrawers","localBefore","localAfter","global","onLocalDrawerChangeStable","onGlobalDrawersChangeStable","localDrawerWasOpenRef","current","activeGlobalDrawersIdsRef","unsubscribe","appLayout","onDrawersRegistered","localDrawers","filter","drawer","type","globalDrawers","defaultActiveLocalDrawer","find","defaultActive","drawersNotActiveByDefault","hasDrawersOpenByUserAction","includes","length","defaultActiveGlobalDrawers","forEach","onDrawerOpened","drawerId","localDrawer","_a","globalDrawer","_b","onDrawerClosed","applyToolsDrawer","toolsProps","disableDrawersMerge","toolsItem","unshift","MIN_DRAWER_SIZE","useDrawers","_ref","controlledActiveDrawerId","onDrawerChange","onGlobalDrawerFocus","onAddNewActiveDrawer","__disableRuntimeDrawers","setActiveDrawerId","componentName","controlledProp","changeHandler","setActiveGlobalDrawersIds","drawerSizes","setDrawerSizes","drawersOpenQueue","onActiveDrawerResize","_ref2","size","oldSizes","Object","assign","activeDrawer","onResize","activeGlobalDrawer","runtimeGlobalDrawers","newDrawerId","hasOwnDrawers","onToolsToggle","currentState","slice","combinedLocalDrawers","activeDrawerIdResolved","toolsOpen","activeGlobalDrawers","activeDrawerSize","_c","defaultSize","toolsWidth","activeGlobalDrawersSizes","reduce","acc","currentGlobalDrawerId","currentGlobalDrawer","minGlobalDrawersSizes","Math","min","minDrawerSize","_d","ariaLabelsWithDrawers","undefined"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/app-layout/utils/use-drawers.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef, useState } from 'react';\n\nimport { useStableCallback } from '@cloudscape-design/component-toolkit/internal';\n\nimport { fireNonCancelableEvent } from '../../internal/events';\nimport { useControllable } from '../../internal/hooks/use-controllable';\nimport { awsuiPluginsInternal } from '../../internal/plugins/api';\nimport { sortByPriority } from '../../internal/plugins/helpers/utils';\nimport { AppLayoutProps } from '../interfaces';\nimport { convertRuntimeDrawers, DrawersLayout } from '../runtime-api';\nimport { togglesConfig } from '../toggles';\n\nexport const TOOLS_DRAWER_ID = 'awsui-internal-tools';\n\ninterface ToolsProps {\n  toolsHide: boolean | undefined;\n  toolsOpen: boolean | undefined;\n  toolsWidth: number;\n  tools: React.ReactNode | undefined;\n  onToolsToggle: (newOpen: boolean) => void;\n  ariaLabels: AppLayoutProps.Labels | undefined;\n  disableDrawersMerge?: boolean;\n}\n\nfunction getToolsDrawerItem(props: ToolsProps): AppLayoutProps.Drawer | null {\n  if (props.toolsHide) {\n    return null;\n  }\n  const { iconName, getLabels } = togglesConfig.tools;\n  const { mainLabel, closeLabel, openLabel } = getLabels(props.ariaLabels);\n  return {\n    id: TOOLS_DRAWER_ID,\n    content: props.tools,\n    resizable: false,\n    ariaLabels: {\n      triggerButton: openLabel,\n      closeButton: closeLabel,\n      drawerName: mainLabel ?? '',\n    },\n    trigger: {\n      iconName: iconName,\n    },\n  };\n}\n\nconst DRAWERS_LIMIT = 2;\n\nfunction useRuntimeDrawers(\n  disableRuntimeDrawers: boolean | undefined,\n  activeDrawerId: string | null,\n  onActiveDrawerChange: (newDrawerId: string | null) => void,\n  activeGlobalDrawersIds: Array<string>,\n  onActiveGlobalDrawersChange: (newDrawerId: string) => void,\n  drawers: AppLayoutProps.Drawer[]\n) {\n  const [runtimeDrawers, setRuntimeDrawers] = useState<DrawersLayout>({\n    localBefore: [],\n    localAfter: [],\n    global: [],\n  });\n  const onLocalDrawerChangeStable = useStableCallback(onActiveDrawerChange);\n  const onGlobalDrawersChangeStable = useStableCallback(onActiveGlobalDrawersChange);\n\n  const localDrawerWasOpenRef = useRef(false);\n  localDrawerWasOpenRef.current = localDrawerWasOpenRef.current || !!activeDrawerId;\n  const activeGlobalDrawersIdsRef = useRef<Array<string>>([]);\n  activeGlobalDrawersIdsRef.current = activeGlobalDrawersIds;\n\n  useEffect(() => {\n    if (disableRuntimeDrawers) {\n      return;\n    }\n    const unsubscribe = awsuiPluginsInternal.appLayout.onDrawersRegistered(drawers => {\n      const localDrawers = drawers.filter(drawer => drawer.type !== 'global');\n      const globalDrawers = drawers.filter(drawer => drawer.type === 'global');\n      setRuntimeDrawers(convertRuntimeDrawers(localDrawers, globalDrawers));\n      if (!localDrawerWasOpenRef.current) {\n        const defaultActiveLocalDrawer = sortByPriority(localDrawers).find(drawer => drawer.defaultActive);\n        if (defaultActiveLocalDrawer) {\n          onLocalDrawerChangeStable(defaultActiveLocalDrawer.id);\n        }\n      }\n\n      const drawersNotActiveByDefault = globalDrawers.filter(drawer => !drawer.defaultActive);\n      const hasDrawersOpenByUserAction = drawersNotActiveByDefault.find(drawer =>\n        activeGlobalDrawersIdsRef.current.includes(drawer.id)\n      );\n      if (hasDrawersOpenByUserAction || activeGlobalDrawersIdsRef.current.length === DRAWERS_LIMIT) {\n        return;\n      }\n\n      const defaultActiveGlobalDrawers = sortByPriority(globalDrawers).filter(\n        drawer => !activeGlobalDrawersIdsRef.current.includes(drawer.id) && drawer.defaultActive\n      );\n      defaultActiveGlobalDrawers.forEach(drawer => {\n        onGlobalDrawersChangeStable(drawer.id);\n      });\n    });\n    return () => {\n      unsubscribe();\n      setRuntimeDrawers({ localBefore: [], localAfter: [], global: [] });\n    };\n  }, [disableRuntimeDrawers, onGlobalDrawersChangeStable, onLocalDrawerChangeStable]);\n\n  useEffect(() => {\n    const unsubscribe = awsuiPluginsInternal.appLayout.onDrawerOpened(drawerId => {\n      const localDrawer = [...runtimeDrawers.localBefore, ...drawers, ...runtimeDrawers.localAfter]?.find(\n        drawer => drawer.id === drawerId\n      );\n      const globalDrawer = runtimeDrawers.global?.find(drawer => drawer.id === drawerId);\n      if (localDrawer && activeDrawerId !== drawerId) {\n        onActiveDrawerChange(drawerId);\n      }\n      if (globalDrawer && !activeGlobalDrawersIds.includes(drawerId)) {\n        onActiveGlobalDrawersChange(drawerId);\n      }\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, [\n    activeDrawerId,\n    activeGlobalDrawersIds,\n    drawers,\n    onActiveDrawerChange,\n    runtimeDrawers,\n    onActiveGlobalDrawersChange,\n  ]);\n\n  useEffect(() => {\n    const unsubscribe = awsuiPluginsInternal.appLayout.onDrawerClosed(drawerId => {\n      const localDrawer = [...runtimeDrawers.localBefore, ...drawers, ...runtimeDrawers.localAfter]?.find(\n        drawer => drawer.id === drawerId\n      );\n      const globalDrawer = runtimeDrawers.global?.find(drawer => drawer.id === drawerId);\n      if (localDrawer && activeDrawerId === drawerId) {\n        onActiveDrawerChange(null);\n      }\n      if (globalDrawer && activeGlobalDrawersIds.includes(drawerId)) {\n        onActiveGlobalDrawersChange(drawerId);\n      }\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, [\n    activeDrawerId,\n    activeGlobalDrawersIds,\n    drawers,\n    onActiveDrawerChange,\n    runtimeDrawers,\n    onActiveGlobalDrawersChange,\n  ]);\n\n  return runtimeDrawers;\n}\n\nfunction applyToolsDrawer(toolsProps: ToolsProps, runtimeDrawers: DrawersLayout) {\n  const drawers = [...runtimeDrawers.localBefore, ...runtimeDrawers.localAfter];\n  if (drawers.length === 0 && toolsProps.disableDrawersMerge) {\n    return null;\n  }\n  const toolsItem = getToolsDrawerItem(toolsProps);\n  if (toolsItem) {\n    drawers.unshift(toolsItem);\n  }\n\n  return drawers;\n}\n\nexport const MIN_DRAWER_SIZE = 290;\n\ntype UseDrawersProps = Pick<AppLayoutProps, 'drawers' | 'activeDrawerId' | 'onDrawerChange'> & {\n  __disableRuntimeDrawers?: boolean;\n  onGlobalDrawerFocus?: (drawerId: string, open: boolean) => void;\n  onAddNewActiveDrawer?: (drawerId: string) => void;\n};\n\nexport function useDrawers(\n  {\n    drawers,\n    activeDrawerId: controlledActiveDrawerId,\n    onDrawerChange,\n    onGlobalDrawerFocus,\n    onAddNewActiveDrawer,\n    __disableRuntimeDrawers: disableRuntimeDrawers,\n  }: UseDrawersProps,\n  ariaLabels: AppLayoutProps['ariaLabels'],\n  toolsProps: ToolsProps\n) {\n  const [activeDrawerId = null, setActiveDrawerId] = useControllable(controlledActiveDrawerId, onDrawerChange, null, {\n    componentName: 'AppLayout',\n    controlledProp: 'activeDrawerId',\n    changeHandler: 'onChange',\n  });\n  const [activeGlobalDrawersIds, setActiveGlobalDrawersIds] = useState<Array<string>>([]);\n  const [drawerSizes, setDrawerSizes] = useState<Record<string, number>>({});\n  // FIFO queue that keeps track of open drawers, where the first element is the most recently opened drawer\n  const drawersOpenQueue = useRef<Array<string>>([]);\n\n  function onActiveDrawerResize({ id, size }: { id: string; size: number }) {\n    setDrawerSizes(oldSizes => ({ ...oldSizes, [id]: size }));\n    fireNonCancelableEvent(activeDrawer?.onResize, { id, size });\n    const activeGlobalDrawer = runtimeGlobalDrawers.find(drawer => drawer.id === id);\n    fireNonCancelableEvent(activeGlobalDrawer?.onResize, { id, size });\n  }\n\n  function onActiveDrawerChange(newDrawerId: string | null) {\n    setActiveDrawerId(newDrawerId);\n    if (newDrawerId) {\n      onAddNewActiveDrawer?.(newDrawerId);\n    }\n    if (hasOwnDrawers) {\n      fireNonCancelableEvent(onDrawerChange, { activeDrawerId: newDrawerId });\n    } else if (!toolsProps.toolsHide) {\n      toolsProps.onToolsToggle(newDrawerId === TOOLS_DRAWER_ID);\n    }\n\n    if (newDrawerId) {\n      drawersOpenQueue.current = [newDrawerId, ...drawersOpenQueue.current];\n    }\n\n    if (activeDrawerId) {\n      drawersOpenQueue.current = drawersOpenQueue.current.filter(id => id !== activeDrawerId);\n    }\n  }\n\n  function onActiveGlobalDrawersChange(drawerId: string) {\n    if (activeGlobalDrawersIds.includes(drawerId)) {\n      setActiveGlobalDrawersIds(currentState => currentState.filter(id => id !== drawerId));\n      onGlobalDrawerFocus?.(drawerId, false);\n      drawersOpenQueue.current = drawersOpenQueue.current.filter(id => id !== drawerId);\n    } else if (drawerId) {\n      onAddNewActiveDrawer?.(drawerId);\n      setActiveGlobalDrawersIds(currentState => [drawerId, ...currentState].slice(0, DRAWERS_LIMIT!));\n      onGlobalDrawerFocus?.(drawerId, true);\n      drawersOpenQueue.current = [drawerId, ...drawersOpenQueue.current];\n    }\n  }\n\n  const hasOwnDrawers = !!drawers;\n  const runtimeDrawers = useRuntimeDrawers(\n    disableRuntimeDrawers,\n    activeDrawerId,\n    onActiveDrawerChange,\n    activeGlobalDrawersIds,\n    onActiveGlobalDrawersChange,\n    drawers ?? []\n  );\n  const { localBefore, localAfter, global: runtimeGlobalDrawers } = runtimeDrawers;\n  const combinedLocalDrawers = drawers\n    ? [...localBefore, ...drawers, ...localAfter]\n    : applyToolsDrawer(toolsProps, runtimeDrawers);\n  // support toolsOpen in runtime-drawers-only mode\n  let activeDrawerIdResolved = toolsProps?.toolsOpen && !hasOwnDrawers ? TOOLS_DRAWER_ID : activeDrawerId;\n  const activeDrawer = combinedLocalDrawers?.find(drawer => drawer.id === activeDrawerIdResolved);\n  // ensure that id is only defined when the drawer exists\n  activeDrawerIdResolved = activeDrawer?.id ?? null;\n  const activeGlobalDrawers = runtimeGlobalDrawers.filter(drawer => activeGlobalDrawersIds.includes(drawer.id));\n\n  const activeDrawerSize = activeDrawerIdResolved\n    ? drawerSizes[activeDrawerIdResolved] ?? activeDrawer?.defaultSize ?? toolsProps.toolsWidth\n    : toolsProps.toolsWidth;\n  const activeGlobalDrawersSizes: Record<string, number> = activeGlobalDrawersIds.reduce(\n    (acc, currentGlobalDrawerId) => {\n      const currentGlobalDrawer = runtimeGlobalDrawers.find(drawer => drawer.id === currentGlobalDrawerId);\n      return {\n        ...acc,\n        [currentGlobalDrawerId]:\n          drawerSizes[currentGlobalDrawerId] ?? currentGlobalDrawer?.defaultSize ?? MIN_DRAWER_SIZE,\n      };\n    },\n    {}\n  );\n  const minGlobalDrawersSizes: Record<string, number> = runtimeGlobalDrawers.reduce((acc, globalDrawer) => {\n    return {\n      ...acc,\n      [globalDrawer.id]: Math.min(globalDrawer.defaultSize ?? MIN_DRAWER_SIZE, MIN_DRAWER_SIZE),\n    };\n  }, {});\n  const minDrawerSize = Math.min(\n    toolsProps?.toolsOpen ? toolsProps.toolsWidth : activeDrawer?.defaultSize ?? MIN_DRAWER_SIZE,\n    MIN_DRAWER_SIZE\n  );\n\n  return {\n    ariaLabelsWithDrawers: ariaLabels,\n    drawers: combinedLocalDrawers || undefined,\n    activeDrawer,\n    activeDrawerId: activeDrawerIdResolved,\n    globalDrawers: runtimeGlobalDrawers,\n    activeGlobalDrawers: activeGlobalDrawers,\n    activeGlobalDrawersIds,\n    activeGlobalDrawersSizes,\n    activeDrawerSize,\n    minDrawerSize,\n    minGlobalDrawersSizes,\n    drawerSizes,\n    drawersOpenQueue: drawersOpenQueue.current,\n    onActiveDrawerChange,\n    onActiveDrawerResize,\n    onActiveGlobalDrawersChange,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}