{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useEffect, useRef } from 'react';\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\nimport { isDevelopment } from '../internal/is-development';\n/**\n * Ponyfill for Array.prototype.findIndex.\n */\nexport function findIndex(array, condition) {\n  for (let i = 0; i < array.length; i++) {\n    if (condition(array[i])) {\n      return i;\n    }\n  }\n  return -1;\n}\nfunction makeMemoizedArray(prev, next, isEqual) {\n  for (let i = 0; i < Math.max(prev.length, next.length); i++) {\n    // The next array is shorter, but all the items match.\n    if (i === next.length) {\n      return prev.slice(0, i);\n    }\n    // The prev array is shorter, but all the items so far match.\n    if (i === prev.length) {\n      return [...prev.slice(0, i), ...next.slice(i)];\n    }\n    // The item is not equal. Partition at this point.\n    if (!isEqual(prev[i], next[i])) {\n      return [...prev.slice(0, i), next[i], ...makeMemoizedArray(prev.slice(i + 1), next.slice(i + 1), isEqual)];\n    }\n  }\n  // All the references match. Return the old array.\n  return prev;\n}\nexport function useMemoizedArray(array, isEqual) {\n  const ref = useRef(array);\n  const updated = makeMemoizedArray(ref.current, array, isEqual);\n  useEffect(() => {\n    ref.current = updated;\n  }, [updated]);\n  return updated;\n}\nfunction hasDuplicateKeys(arr) {\n  const keys = arr.map(obj => obj.key);\n  const uniqueKeys = new Set(keys);\n  return uniqueKeys.size !== keys.length;\n}\n/**\n * Compares the initial tags with the current tags passed to the tag editor\n * and returns the differences, identifying which tags have been created or removed.\n *\n * This utility can be used to track tag changes and inform your tagging service about\n * the removed and added tags.\n *\n * @param initialTags - The original tags fetched from the backend or tagging service.\n * @param tags - The current tags provided to the tag editor, including any new or modified tags.\n * @returns An object containing two arrays:\n * - `created`: An record of tags that are new or updated (with modified values).\n *    Each tag is represented by its `key` and `value`.\n * - `removed`: An array of tag keys that were present in the initial tags but marked for removal.\n *\n * Updated tags are treated as both `created` and `removed` tags.\n */\nexport function getTagsDiff(initialTags, tags) {\n  if (isDevelopment) {\n    if (initialTags.some(t => !t.existing)) {\n      warnOnce('getTagsDiff: existing property', 'all initial tags should have `existing` property set to `true`.');\n    }\n    if (hasDuplicateKeys(initialTags) || hasDuplicateKeys(tags)) {\n      warnOnce('getTagsDiff: duplicate keys', 'tags should not have duplicate keys.');\n    }\n  }\n  const updated = tags.filter(tag => initialTags.some(_ref => {\n    let {\n      key,\n      value\n    } = _ref;\n    return !tag.markedForRemoval && tag.key === key && tag.existing && tag.value !== value;\n  }));\n  const created = [...tags.filter(tag => !tag.existing), ...updated].map(_ref2 => {\n    let {\n      key,\n      value\n    } = _ref2;\n    return {\n      key,\n      value\n    };\n  }).reduce((acc, tag) => {\n    acc[tag.key] = tag.value;\n    return acc;\n  }, {});\n  const removed = [...tags.filter(tag => tag.existing && tag.markedForRemoval), ...updated].map(t => t.key);\n  return {\n    created,\n    removed\n  };\n}","map":{"version":3,"names":["useEffect","useRef","warnOnce","isDevelopment","findIndex","array","condition","i","length","makeMemoizedArray","prev","next","isEqual","Math","max","slice","useMemoizedArray","ref","updated","current","hasDuplicateKeys","arr","keys","map","obj","key","uniqueKeys","Set","size","getTagsDiff","initialTags","tags","some","t","existing","filter","tag","_ref","value","markedForRemoval","created","_ref2","reduce","acc","removed"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/tag-editor/utils.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useEffect, useRef } from 'react';\n\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\n\nimport { isDevelopment } from '../internal/is-development';\nimport { TagEditorProps } from './interfaces';\n\n/**\n * Ponyfill for Array.prototype.findIndex.\n */\nexport function findIndex<T>(array: ReadonlyArray<T>, condition: (t: T) => unknown): number {\n  for (let i = 0; i < array.length; i++) {\n    if (condition(array[i])) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nfunction makeMemoizedArray<T>(\n  prev: ReadonlyArray<T>,\n  next: ReadonlyArray<T>,\n  isEqual: (prev: T, next: T) => boolean\n): ReadonlyArray<T> {\n  for (let i = 0; i < Math.max(prev.length, next.length); i++) {\n    // The next array is shorter, but all the items match.\n    if (i === next.length) {\n      return prev.slice(0, i);\n    }\n    // The prev array is shorter, but all the items so far match.\n    if (i === prev.length) {\n      return [...prev.slice(0, i), ...next.slice(i)];\n    }\n    // The item is not equal. Partition at this point.\n    if (!isEqual(prev[i], next[i])) {\n      return [...prev.slice(0, i), next[i], ...makeMemoizedArray(prev.slice(i + 1), next.slice(i + 1), isEqual)];\n    }\n  }\n\n  // All the references match. Return the old array.\n  return prev;\n}\n\nexport function useMemoizedArray<T>(array: ReadonlyArray<T>, isEqual: (prev: T, next: T) => boolean): ReadonlyArray<T> {\n  const ref = useRef<ReadonlyArray<T>>(array);\n  const updated = makeMemoizedArray(ref.current, array, isEqual);\n  useEffect(() => {\n    ref.current = updated;\n  }, [updated]);\n  return updated;\n}\n\ninterface GetTagsDiffResult {\n  created: Record<string, string>;\n  removed: string[];\n}\n\nfunction hasDuplicateKeys(arr: readonly TagEditorProps.Tag[]): boolean {\n  const keys = arr.map(obj => obj.key);\n  const uniqueKeys = new Set(keys);\n  return uniqueKeys.size !== keys.length;\n}\n\n/**\n * Compares the initial tags with the current tags passed to the tag editor\n * and returns the differences, identifying which tags have been created or removed.\n *\n * This utility can be used to track tag changes and inform your tagging service about\n * the removed and added tags.\n *\n * @param initialTags - The original tags fetched from the backend or tagging service.\n * @param tags - The current tags provided to the tag editor, including any new or modified tags.\n * @returns An object containing two arrays:\n * - `created`: An record of tags that are new or updated (with modified values).\n *    Each tag is represented by its `key` and `value`.\n * - `removed`: An array of tag keys that were present in the initial tags but marked for removal.\n *\n * Updated tags are treated as both `created` and `removed` tags.\n */\nexport function getTagsDiff(\n  initialTags: readonly TagEditorProps.Tag[],\n  tags: readonly TagEditorProps.Tag[]\n): GetTagsDiffResult {\n  if (isDevelopment) {\n    if (initialTags.some(t => !t.existing)) {\n      warnOnce('getTagsDiff: existing property', 'all initial tags should have `existing` property set to `true`.');\n    }\n    if (hasDuplicateKeys(initialTags) || hasDuplicateKeys(tags)) {\n      warnOnce('getTagsDiff: duplicate keys', 'tags should not have duplicate keys.');\n    }\n  }\n  const updated = tags.filter(tag =>\n    initialTags.some(({ key, value }) => {\n      return !tag.markedForRemoval && tag.key === key && tag.existing && tag.value !== value;\n    })\n  );\n  const created = [...tags.filter(tag => !tag.existing), ...updated]\n    .map(({ key, value }) => ({ key, value }))\n    .reduce((acc: Record<string, string>, tag) => {\n      acc[tag.key] = tag.value;\n      return acc;\n    }, {});\n  const removed = [...tags.filter(tag => tag.existing && tag.markedForRemoval), ...updated].map(t => t.key);\n\n  return { created, removed };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}