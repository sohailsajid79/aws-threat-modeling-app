{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport { Transition } from '../../internal/components/transition';\nimport customCssProps from '../../internal/generated/custom-css-properties';\nimport { SPLIT_PANEL_MIN_WIDTH, SplitPanelProvider } from '../split-panel';\nimport { useAppLayoutInternals } from './context';\nimport styles from './styles.css.js';\n/**\n * If there is no Split Panel in the AppLayout context then the SplitPanel\n * will pass through the AppLayout children without the context.\n */\nfunction SplitPanel({\n  children\n}) {\n  const {\n    footerHeight,\n    handleSplitPanelClick,\n    handleSplitPanelPreferencesChange,\n    handleSplitPanelResize,\n    headerHeight,\n    isSplitPanelForcedPosition,\n    isSplitPanelOpen,\n    setSplitPanelReportedSize,\n    setSplitPanelReportedHeaderHeight,\n    setSplitPanelToggle,\n    splitPanelPosition,\n    splitPanelRefs,\n    splitPanelSize\n  } = useAppLayoutInternals();\n  const props = {\n    bottomOffset: 0,\n    getMaxHeight: () => {\n      const availableHeight = document.documentElement.clientHeight - headerHeight - footerHeight;\n      // If the page is likely zoomed in at 200%, allow the split panel to fill the content area.\n      return availableHeight < 400 ? availableHeight - 40 : availableHeight - 250;\n    },\n    maxWidth: typeof document !== 'undefined' ? document.documentElement.clientWidth : Number.POSITIVE_INFINITY,\n    isForcedPosition: isSplitPanelForcedPosition,\n    isOpen: isSplitPanelOpen,\n    leftOffset: 0,\n    onPreferencesChange: handleSplitPanelPreferencesChange,\n    onResize: handleSplitPanelResize,\n    onToggle: handleSplitPanelClick,\n    position: splitPanelPosition,\n    reportSize: setSplitPanelReportedSize,\n    reportHeaderHeight: setSplitPanelReportedHeaderHeight,\n    rightOffset: 0,\n    size: splitPanelSize || 0,\n    topOffset: 0,\n    setSplitPanelToggle,\n    refs: splitPanelRefs\n  };\n  return React.createElement(SplitPanelProvider, Object.assign({}, props), children);\n}\n/**\n * This is the render function for the SplitPanel when it is in bottom position.\n * The Split Panel container will be another row entry in the grid definition in\n * the Layout component. The start and finish columns will be variable based\n * on the presence and state of the Navigation and Tools components.\n */\nfunction SplitPanelBottom() {\n  const {\n    disableBodyScroll,\n    hasOpenDrawer,\n    navigationOpen,\n    isSplitPanelOpen,\n    splitPanel,\n    splitPanelPosition,\n    splitPanelReportedSize,\n    splitPanelReportedHeaderHeight\n  } = useAppLayoutInternals();\n  if (!splitPanel) {\n    return null;\n  }\n  return React.createElement(Transition, {\n    in: isSplitPanelOpen !== null && isSplitPanelOpen !== void 0 ? isSplitPanelOpen : false,\n    exit: false\n  }, (state, transitionEventsRef) => React.createElement(\"section\", {\n    className: clsx(styles['split-panel-bottom'], styles[`position-${splitPanelPosition}`], {\n      [styles.animating]: state === 'entering',\n      [styles['disable-body-scroll']]: disableBodyScroll,\n      [styles['has-open-drawer']]: hasOpenDrawer,\n      [styles['is-navigation-open']]: navigationOpen,\n      [styles['is-split-panel-open']]: isSplitPanelOpen\n    }),\n    ref: transitionEventsRef,\n    style: {\n      [customCssProps.splitPanelReportedSize]: `${splitPanelReportedSize}px`,\n      [customCssProps.splitPanelReportedHeaderSize]: `${splitPanelReportedHeaderHeight}px`\n    }\n  }, splitPanelPosition === 'bottom' && splitPanel));\n}\n/**\n * This is the render function for the SplitPanel when it is side position.\n * The Split Panel will not be within the grid defined in the Layout component\n * but instead a direct child of the Tools component. The width constraints\n * for this position are computed in the Tools component.\n */\n/**\n * This component has no opening animations because it causes lots of rerenders that makes the component lag. *\n */\nfunction SplitPanelSide() {\n  const {\n    isSplitPanelOpen,\n    splitPanel,\n    splitPanelPosition,\n    splitPanelMaxWidth,\n    splitPanelControlId,\n    isToolsOpen,\n    activeDrawerId\n  } = useAppLayoutInternals();\n  if (!splitPanel) {\n    return null;\n  }\n  return React.createElement(\"section\", {\n    id: splitPanelControlId,\n    \"aria-hidden\": !isSplitPanelOpen || splitPanelPosition === 'bottom' ? true : false,\n    className: clsx(styles['split-panel-side'], styles[`position-${splitPanelPosition}`], {\n      [styles['is-split-panel-open']]: isSplitPanelOpen,\n      [styles['has-open-drawer']]: !!activeDrawerId || isToolsOpen\n    }),\n    style: {\n      [customCssProps.splitPanelMaxWidth]: `${splitPanelMaxWidth}px`,\n      [customCssProps.splitPanelMinWidth]: `${SPLIT_PANEL_MIN_WIDTH}px`\n    }\n  }, splitPanelPosition === 'side' && splitPanel);\n}\n/**\n * This logic will determine what the Split Panel position should be. It reconciles the possibility\n * of being in forced position with the current selected position in the settings.\n */\nexport function getSplitPanelPosition(isSplitPanelForcedPosition, splitPanelPreferences) {\n  let splitPanelPosition = 'bottom';\n  if (!isSplitPanelForcedPosition && (splitPanelPreferences === null || splitPanelPreferences === void 0 ? void 0 : splitPanelPreferences.position) === 'side') {\n    splitPanelPosition = 'side';\n  }\n  return splitPanelPosition;\n}\nSplitPanel.Bottom = SplitPanelBottom;\nSplitPanel.Side = SplitPanelSide;\nexport default SplitPanel;","map":{"version":3,"names":["React","clsx","Transition","customCssProps","SPLIT_PANEL_MIN_WIDTH","SplitPanelProvider","useAppLayoutInternals","styles","SplitPanel","children","footerHeight","handleSplitPanelClick","handleSplitPanelPreferencesChange","handleSplitPanelResize","headerHeight","isSplitPanelForcedPosition","isSplitPanelOpen","setSplitPanelReportedSize","setSplitPanelReportedHeaderHeight","setSplitPanelToggle","splitPanelPosition","splitPanelRefs","splitPanelSize","props","bottomOffset","getMaxHeight","availableHeight","document","documentElement","clientHeight","maxWidth","clientWidth","Number","POSITIVE_INFINITY","isForcedPosition","isOpen","leftOffset","onPreferencesChange","onResize","onToggle","position","reportSize","reportHeaderHeight","rightOffset","size","topOffset","refs","createElement","Object","assign","SplitPanelBottom","disableBodyScroll","hasOpenDrawer","navigationOpen","splitPanel","splitPanelReportedSize","splitPanelReportedHeaderHeight","in","exit","state","transitionEventsRef","className","animating","ref","style","splitPanelReportedHeaderSize","SplitPanelSide","splitPanelMaxWidth","splitPanelControlId","isToolsOpen","activeDrawerId","id","splitPanelMinWidth","getSplitPanelPosition","splitPanelPreferences","Bottom","Side"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/app-layout/visual-refresh/split-panel.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\n\nimport { Transition } from '../../internal/components/transition';\nimport customCssProps from '../../internal/generated/custom-css-properties';\nimport { AppLayoutProps } from '../interfaces';\nimport { SPLIT_PANEL_MIN_WIDTH, SplitPanelProvider, SplitPanelProviderProps } from '../split-panel';\nimport { useAppLayoutInternals } from './context';\n\nimport styles from './styles.css.js';\n\n/**\n * If there is no Split Panel in the AppLayout context then the SplitPanel\n * will pass through the AppLayout children without the context.\n */\nfunction SplitPanel({ children }: React.PropsWithChildren<unknown>) {\n  const {\n    footerHeight,\n    handleSplitPanelClick,\n    handleSplitPanelPreferencesChange,\n    handleSplitPanelResize,\n    headerHeight,\n    isSplitPanelForcedPosition,\n    isSplitPanelOpen,\n    setSplitPanelReportedSize,\n    setSplitPanelReportedHeaderHeight,\n    setSplitPanelToggle,\n    splitPanelPosition,\n    splitPanelRefs,\n    splitPanelSize,\n  } = useAppLayoutInternals();\n\n  const props: SplitPanelProviderProps = {\n    bottomOffset: 0,\n    getMaxHeight: () => {\n      const availableHeight = document.documentElement.clientHeight - headerHeight - footerHeight;\n      // If the page is likely zoomed in at 200%, allow the split panel to fill the content area.\n      return availableHeight < 400 ? availableHeight - 40 : availableHeight - 250;\n    },\n    maxWidth: typeof document !== 'undefined' ? document.documentElement.clientWidth : Number.POSITIVE_INFINITY,\n    isForcedPosition: isSplitPanelForcedPosition,\n    isOpen: isSplitPanelOpen,\n    leftOffset: 0,\n    onPreferencesChange: handleSplitPanelPreferencesChange,\n    onResize: handleSplitPanelResize,\n    onToggle: handleSplitPanelClick,\n    position: splitPanelPosition,\n    reportSize: setSplitPanelReportedSize,\n    reportHeaderHeight: setSplitPanelReportedHeaderHeight,\n    rightOffset: 0,\n    size: splitPanelSize || 0,\n    topOffset: 0,\n    setSplitPanelToggle,\n    refs: splitPanelRefs,\n  };\n\n  return <SplitPanelProvider {...props}>{children}</SplitPanelProvider>;\n}\n\n/**\n * This is the render function for the SplitPanel when it is in bottom position.\n * The Split Panel container will be another row entry in the grid definition in\n * the Layout component. The start and finish columns will be variable based\n * on the presence and state of the Navigation and Tools components.\n */\nfunction SplitPanelBottom() {\n  const {\n    disableBodyScroll,\n    hasOpenDrawer,\n    navigationOpen,\n    isSplitPanelOpen,\n    splitPanel,\n    splitPanelPosition,\n    splitPanelReportedSize,\n    splitPanelReportedHeaderHeight,\n  } = useAppLayoutInternals();\n\n  if (!splitPanel) {\n    return null;\n  }\n\n  return (\n    <Transition in={isSplitPanelOpen ?? false} exit={false}>\n      {(state, transitionEventsRef) => (\n        <section\n          className={clsx(styles['split-panel-bottom'], styles[`position-${splitPanelPosition}`], {\n            [styles.animating]: state === 'entering',\n            [styles['disable-body-scroll']]: disableBodyScroll,\n            [styles['has-open-drawer']]: hasOpenDrawer,\n            [styles['is-navigation-open']]: navigationOpen,\n            [styles['is-split-panel-open']]: isSplitPanelOpen,\n          })}\n          ref={transitionEventsRef}\n          style={{\n            [customCssProps.splitPanelReportedSize]: `${splitPanelReportedSize}px`,\n            [customCssProps.splitPanelReportedHeaderSize]: `${splitPanelReportedHeaderHeight}px`,\n          }}\n        >\n          {splitPanelPosition === 'bottom' && splitPanel}\n        </section>\n      )}\n    </Transition>\n  );\n}\n\n/**\n * This is the render function for the SplitPanel when it is side position.\n * The Split Panel will not be within the grid defined in the Layout component\n * but instead a direct child of the Tools component. The width constraints\n * for this position are computed in the Tools component.\n */\n\n/**\n * This component has no opening animations because it causes lots of rerenders that makes the component lag. *\n */\n\nfunction SplitPanelSide() {\n  const {\n    isSplitPanelOpen,\n    splitPanel,\n    splitPanelPosition,\n    splitPanelMaxWidth,\n    splitPanelControlId,\n    isToolsOpen,\n    activeDrawerId,\n  } = useAppLayoutInternals();\n\n  if (!splitPanel) {\n    return null;\n  }\n\n  return (\n    <section\n      id={splitPanelControlId}\n      aria-hidden={!isSplitPanelOpen || splitPanelPosition === 'bottom' ? true : false}\n      className={clsx(styles['split-panel-side'], styles[`position-${splitPanelPosition}`], {\n        [styles['is-split-panel-open']]: isSplitPanelOpen,\n        [styles['has-open-drawer']]: !!activeDrawerId || isToolsOpen,\n      })}\n      style={{\n        [customCssProps.splitPanelMaxWidth]: `${splitPanelMaxWidth}px`,\n        [customCssProps.splitPanelMinWidth]: `${SPLIT_PANEL_MIN_WIDTH}px`,\n      }}\n    >\n      {splitPanelPosition === 'side' && splitPanel}\n    </section>\n  );\n}\n\n/**\n * This logic will determine what the Split Panel position should be. It reconciles the possibility\n * of being in forced position with the current selected position in the settings.\n */\nexport function getSplitPanelPosition(\n  isSplitPanelForcedPosition: boolean,\n  splitPanelPreferences: AppLayoutProps.SplitPanelPreferences | undefined\n) {\n  let splitPanelPosition: AppLayoutProps.SplitPanelPosition = 'bottom';\n\n  if (!isSplitPanelForcedPosition && splitPanelPreferences?.position === 'side') {\n    splitPanelPosition = 'side';\n  }\n\n  return splitPanelPosition;\n}\nSplitPanel.Bottom = SplitPanelBottom;\nSplitPanel.Side = SplitPanelSide;\n\nexport default SplitPanel;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}