{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\nimport { useContainerBreakpoints } from '../internal/hooks/container-queries';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport styles from './styles.css.js';\n// A small buffer to make calculations more lenient against browser lag or padding adjustments.\nconst RESPONSIVENESS_BUFFER = 20;\nexport function useTopNavigation(_ref) {\n  let {\n    identity,\n    search,\n    utilities\n  } = _ref;\n  // Refs and breakpoints\n  const mainRef = useRef(null);\n  const virtualRef = useRef(null);\n  const [breakpoint, breakpointRef] = useContainerBreakpoints(['xxs', 's']);\n  // Responsiveness state\n  // The component works by calculating the possible resize states that it can\n  // be in, and having a state variable to track which state we're currently in.\n  const hasSearch = !!search;\n  const hasTitleWithLogo = identity && !!identity.logo && !!identity.title;\n  const responsiveStates = useMemo(() => {\n    return generateResponsiveStateKeys(utilities, hasSearch, hasTitleWithLogo);\n  }, [utilities, hasSearch, hasTitleWithLogo]);\n  // To hide/show elements dynamically, we need to know how much space they take up,\n  // even if they're not being rendered. The top navigation elements are hidden/resized\n  // based on the available size or if a search bar is open, and they need to be available\n  // for calculations so we know where to toggle them. So we render a second, more stable\n  // top-nav off screen to do these calculations against.\n  //\n  // We can't \"affix\" these values to pixels because they can depend on spacing tokens.\n  // It's easier to render all of these utilities separately rather than figuring out\n  // spacing token values, icon sizes, text widths, etc.\n  const [responsiveState, setResponsiveState] = useState();\n  const recalculateFit = useCallback(() => {\n    var _a, _b, _c, _d;\n    if (!(mainRef === null || mainRef === void 0 ? void 0 : mainRef.current) || !virtualRef.current) {\n      setResponsiveState(responsiveStates[0]);\n      return;\n    }\n    // Get available width from the visible top navigation.\n    const availableWidth = getContentBoxWidth(mainRef.current.querySelector(`.${styles['padding-box']}`));\n    if (availableWidth === 0) {\n      // Likely in an SSR or Jest situation.\n      setResponsiveState(responsiveStates[0]);\n      return;\n    }\n    const sizeConfiguration = {\n      hasSearch,\n      availableWidth,\n      // Get widths from the hidden top navigation\n      fullIdentityWidth: virtualRef.current.querySelector(`.${styles.identity}`).getBoundingClientRect().width,\n      titleWidth: (_b = (_a = virtualRef.current.querySelector(`.${styles.title}`)) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect().width) !== null && _b !== void 0 ? _b : 0,\n      searchSlotWidth: (_d = (_c = virtualRef.current.querySelector(`.${styles.search}`)) === null || _c === void 0 ? void 0 : _c.getBoundingClientRect().width) !== null && _d !== void 0 ? _d : 0,\n      searchUtilityWidth: virtualRef.current.querySelector('[data-utility-special=\"search\"]').getBoundingClientRect().width,\n      utilitiesLeftPadding: parseFloat(getComputedStyle(virtualRef.current.querySelector(`.${styles.utilities}`)).paddingLeft || '0px'),\n      utilityWithLabelWidths: Array.prototype.slice.call(virtualRef.current.querySelectorAll(`[data-utility-hide=\"false\"]`)).map(element => element.getBoundingClientRect().width),\n      utilityWithoutLabelWidths: Array.prototype.slice.call(virtualRef.current.querySelectorAll(`[data-utility-hide=\"true\"]`)).map(element => element.getBoundingClientRect().width),\n      menuTriggerUtilityWidth: virtualRef.current.querySelector('[data-utility-special=\"menu-trigger\"]').getBoundingClientRect().width\n    };\n    setResponsiveState(determineBestResponsiveState(responsiveStates, sizeConfiguration));\n  }, [responsiveStates, hasSearch]);\n  const [, containerQueryRef] = useContainerQuery(() => {\n    recalculateFit();\n  }, [recalculateFit]);\n  // Due to being rendered in a portal, the virtual navigation isn't rendered\n  // at the same time as the main one.\n  const onVirtualMount = useCallback(element => {\n    virtualRef.current = element;\n    recalculateFit();\n  }, [recalculateFit]);\n  // Search slot expansion on small screens\n  const [isSearchMinimized, setSearchMinimized] = useState(true);\n  const isSearchExpanded = !isSearchMinimized && hasSearch && (responsiveState === null || responsiveState === void 0 ? void 0 : responsiveState.hideSearch);\n  // If the search was expanded, and then the screen resized so that the\n  // expansion is no longer necessary. So we implicitly minimize it.\n  useEffect(() => {\n    if (!(responsiveState === null || responsiveState === void 0 ? void 0 : responsiveState.hideSearch)) {\n      setSearchMinimized(true);\n    }\n  }, [responsiveState]);\n  // If the search is expanded after clicking on the search utility, move\n  // the focus to the input. Since this is a user-controlled slot, we're just\n  // assuming that it contains an input, though it's a pretty safe guess.\n  useEffect(() => {\n    var _a, _b;\n    if (isSearchExpanded) {\n      (_b = (_a = mainRef === null || mainRef === void 0 ? void 0 : mainRef.current) === null || _a === void 0 ? void 0 : _a.querySelector(`.${styles.search} input`)) === null || _b === void 0 ? void 0 : _b.focus();\n    }\n  }, [isSearchExpanded, mainRef]);\n  const mergedMainRef = useMergeRefs(mainRef, containerQueryRef, breakpointRef);\n  return {\n    mainRef: mergedMainRef,\n    virtualRef: onVirtualMount,\n    responsiveState: responsiveState !== null && responsiveState !== void 0 ? responsiveState : responsiveStates[0],\n    breakpoint: breakpoint !== null && breakpoint !== void 0 ? breakpoint : 'default',\n    isSearchExpanded: !!isSearchExpanded,\n    onSearchUtilityClick: () => setSearchMinimized(isSearchMinimized => !isSearchMinimized)\n  };\n}\n/**\n * Get the width of the content box (assuming the element's box-sizing is border-box).\n */\nfunction getContentBoxWidth(element) {\n  const style = getComputedStyle(element);\n  return parseFloat(style.width || '0px') - parseFloat(style.paddingLeft || '0px') - parseFloat(style.paddingRight || '0px');\n}\n/**\n * Generates the series of responsive steps that can be performed on the header in order.\n */\nexport function generateResponsiveStateKeys(utilities, canHideSearch, canHideTitle) {\n  const states = [{}];\n  if (utilities.some(utility => utility.text)) {\n    states.push({\n      hideUtilityText: true\n    });\n  }\n  if (canHideSearch) {\n    states.push({\n      hideUtilityText: true,\n      hideSearch: true\n    });\n  }\n  const hiddenUtilties = [];\n  for (let i = 0; i < utilities.length; i++) {\n    if (!utilities[i].disableUtilityCollapse) {\n      hiddenUtilties.push(i);\n      states.push({\n        hideUtilityText: true,\n        hideSearch: canHideSearch || undefined,\n        hideUtilities: hiddenUtilties.length > 0 ? hiddenUtilties.slice() : undefined\n      });\n    }\n  }\n  if (canHideTitle) {\n    states.push({\n      hideUtilityText: true,\n      hideSearch: canHideSearch || undefined,\n      hideUtilities: hiddenUtilties.length > 0 ? hiddenUtilties.slice() : undefined,\n      hideTitle: true\n    });\n  }\n  return states;\n}\n/**\n * Determines the best responsive state configuration of the top navigation, based on the given list of possible responsive states\n * and the current sizes of all elements inside the navigation bar.\n */\nexport function determineBestResponsiveState(possibleStates, sizes) {\n  const {\n    hasSearch,\n    availableWidth,\n    utilitiesLeftPadding,\n    fullIdentityWidth,\n    titleWidth,\n    searchSlotWidth,\n    searchUtilityWidth,\n    utilityWithLabelWidths,\n    utilityWithoutLabelWidths,\n    menuTriggerUtilityWidth\n  } = sizes;\n  // Iterate through each state and calculate its expected required width.\n  for (const state of possibleStates) {\n    const searchWidth = hasSearch ? state.hideSearch ? searchUtilityWidth : searchSlotWidth : 0;\n    const utilitiesWidth = (state.hideUtilityText ? utilityWithoutLabelWidths : utilityWithLabelWidths).filter((_width, i) => !state.hideUtilities || state.hideUtilities.indexOf(i) === -1).reduce((sum, width) => sum + width, 0);\n    const menuTriggerWidth = state.hideUtilities ? menuTriggerUtilityWidth : 0;\n    const identityWidth = state.hideTitle ? fullIdentityWidth - titleWidth : fullIdentityWidth;\n    const expectedInnerWidth = identityWidth + searchWidth + utilitiesLeftPadding + utilitiesWidth + menuTriggerWidth;\n    if (expectedInnerWidth <= availableWidth - RESPONSIVENESS_BUFFER) {\n      return state;\n    }\n  }\n  // If nothing matches, pick the smallest possible state.\n  return possibleStates[possibleStates.length - 1];\n}","map":{"version":3,"names":["useCallback","useEffect","useMemo","useRef","useState","useContainerQuery","useContainerBreakpoints","useMergeRefs","styles","RESPONSIVENESS_BUFFER","useTopNavigation","_ref","identity","search","utilities","mainRef","virtualRef","breakpoint","breakpointRef","hasSearch","hasTitleWithLogo","logo","title","responsiveStates","generateResponsiveStateKeys","responsiveState","setResponsiveState","recalculateFit","current","availableWidth","getContentBoxWidth","querySelector","sizeConfiguration","fullIdentityWidth","getBoundingClientRect","width","titleWidth","_b","_a","searchSlotWidth","_d","_c","searchUtilityWidth","utilitiesLeftPadding","parseFloat","getComputedStyle","paddingLeft","utilityWithLabelWidths","Array","prototype","slice","call","querySelectorAll","map","element","utilityWithoutLabelWidths","menuTriggerUtilityWidth","determineBestResponsiveState","containerQueryRef","onVirtualMount","isSearchMinimized","setSearchMinimized","isSearchExpanded","hideSearch","focus","mergedMainRef","onSearchUtilityClick","style","paddingRight","canHideSearch","canHideTitle","states","some","utility","text","push","hideUtilityText","hiddenUtilties","i","length","disableUtilityCollapse","undefined","hideUtilities","hideTitle","possibleStates","sizes","state","searchWidth","utilitiesWidth","filter","_width","indexOf","reduce","sum","menuTriggerWidth","identityWidth","expectedInnerWidth"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/top-navigation/use-top-navigation.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\n\nimport { useContainerBreakpoints } from '../internal/hooks/container-queries';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { TopNavigationProps } from './interfaces';\n\nimport styles from './styles.css.js';\n\nexport interface UseTopNavigationParams {\n  identity: TopNavigationProps['identity'];\n  search: TopNavigationProps['search'];\n  utilities: NonNullable<TopNavigationProps['utilities']>;\n}\n\nexport interface ResponsiveState {\n  hideUtilityText?: boolean;\n  hideSearch?: boolean;\n  hideUtilities?: number[];\n  hideTitle?: boolean;\n}\n\nexport interface TopNavigationSizeConfiguration {\n  hasSearch: boolean;\n  availableWidth: number;\n  utilitiesLeftPadding: number;\n  fullIdentityWidth: number;\n  titleWidth: number;\n  searchSlotWidth: number;\n  searchUtilityWidth: number;\n  utilityWithLabelWidths: number[];\n  utilityWithoutLabelWidths: number[];\n  menuTriggerUtilityWidth: number;\n}\n\nexport interface UseTopNavigation {\n  mainRef: React.Ref<HTMLDivElement>;\n  virtualRef: React.Ref<HTMLDivElement>;\n\n  responsiveState: ResponsiveState;\n  breakpoint: 'default' | 'xxs' | 's';\n  isSearchExpanded: boolean;\n  onSearchUtilityClick: () => void;\n}\n\n// A small buffer to make calculations more lenient against browser lag or padding adjustments.\nconst RESPONSIVENESS_BUFFER = 20;\n\nexport function useTopNavigation({ identity, search, utilities }: UseTopNavigationParams): UseTopNavigation {\n  // Refs and breakpoints\n  const mainRef = useRef<HTMLElement | null>(null);\n  const virtualRef = useRef<HTMLDivElement | null>(null);\n  const [breakpoint, breakpointRef] = useContainerBreakpoints(['xxs', 's']);\n\n  // Responsiveness state\n  // The component works by calculating the possible resize states that it can\n  // be in, and having a state variable to track which state we're currently in.\n  const hasSearch = !!search;\n  const hasTitleWithLogo = identity && !!identity.logo && !!identity.title;\n  const responsiveStates = useMemo<ReadonlyArray<ResponsiveState>>(() => {\n    return generateResponsiveStateKeys(utilities, hasSearch, hasTitleWithLogo);\n  }, [utilities, hasSearch, hasTitleWithLogo]);\n\n  // To hide/show elements dynamically, we need to know how much space they take up,\n  // even if they're not being rendered. The top navigation elements are hidden/resized\n  // based on the available size or if a search bar is open, and they need to be available\n  // for calculations so we know where to toggle them. So we render a second, more stable\n  // top-nav off screen to do these calculations against.\n  //\n  // We can't \"affix\" these values to pixels because they can depend on spacing tokens.\n  // It's easier to render all of these utilities separately rather than figuring out\n  // spacing token values, icon sizes, text widths, etc.\n  const [responsiveState, setResponsiveState] = useState<ResponsiveState | undefined>();\n  const recalculateFit = useCallback(() => {\n    if (!mainRef?.current || !virtualRef.current) {\n      setResponsiveState(responsiveStates[0]);\n      return;\n    }\n\n    // Get available width from the visible top navigation.\n    const availableWidth = getContentBoxWidth(mainRef.current.querySelector(`.${styles['padding-box']}`)!);\n    if (availableWidth === 0) {\n      // Likely in an SSR or Jest situation.\n      setResponsiveState(responsiveStates[0]);\n      return;\n    }\n\n    const sizeConfiguration = {\n      hasSearch,\n      availableWidth,\n\n      // Get widths from the hidden top navigation\n      fullIdentityWidth: virtualRef.current.querySelector(`.${styles.identity}`)!.getBoundingClientRect().width,\n      titleWidth: virtualRef.current.querySelector(`.${styles.title}`)?.getBoundingClientRect().width ?? 0,\n      searchSlotWidth: virtualRef.current.querySelector(`.${styles.search}`)?.getBoundingClientRect().width ?? 0,\n      searchUtilityWidth: virtualRef.current.querySelector('[data-utility-special=\"search\"]')!.getBoundingClientRect()\n        .width,\n      utilitiesLeftPadding: parseFloat(\n        getComputedStyle(virtualRef.current.querySelector(`.${styles.utilities}`)!).paddingLeft || '0px'\n      ),\n      utilityWithLabelWidths: Array.prototype.slice\n        .call(virtualRef.current.querySelectorAll(`[data-utility-hide=\"false\"]`))\n        .map((element: Element) => element.getBoundingClientRect().width),\n      utilityWithoutLabelWidths: Array.prototype.slice\n        .call(virtualRef.current.querySelectorAll(`[data-utility-hide=\"true\"]`))\n        .map((element: Element) => element.getBoundingClientRect().width),\n      menuTriggerUtilityWidth: virtualRef.current\n        .querySelector('[data-utility-special=\"menu-trigger\"]')!\n        .getBoundingClientRect().width,\n    };\n    setResponsiveState(determineBestResponsiveState(responsiveStates, sizeConfiguration));\n  }, [responsiveStates, hasSearch]);\n\n  const [, containerQueryRef] = useContainerQuery(() => {\n    recalculateFit();\n  }, [recalculateFit]);\n\n  // Due to being rendered in a portal, the virtual navigation isn't rendered\n  // at the same time as the main one.\n  const onVirtualMount = useCallback(\n    (element: HTMLDivElement | null) => {\n      virtualRef.current = element;\n      recalculateFit();\n    },\n    [recalculateFit]\n  );\n\n  // Search slot expansion on small screens\n  const [isSearchMinimized, setSearchMinimized] = useState(true);\n  const isSearchExpanded = !isSearchMinimized && hasSearch && responsiveState?.hideSearch;\n\n  // If the search was expanded, and then the screen resized so that the\n  // expansion is no longer necessary. So we implicitly minimize it.\n  useEffect(() => {\n    if (!responsiveState?.hideSearch) {\n      setSearchMinimized(true);\n    }\n  }, [responsiveState]);\n\n  // If the search is expanded after clicking on the search utility, move\n  // the focus to the input. Since this is a user-controlled slot, we're just\n  // assuming that it contains an input, though it's a pretty safe guess.\n  useEffect(() => {\n    if (isSearchExpanded) {\n      mainRef?.current?.querySelector<HTMLInputElement>(`.${styles.search} input`)?.focus();\n    }\n  }, [isSearchExpanded, mainRef]);\n\n  const mergedMainRef = useMergeRefs(mainRef, containerQueryRef, breakpointRef);\n\n  return {\n    mainRef: mergedMainRef,\n    virtualRef: onVirtualMount,\n    responsiveState: responsiveState ?? responsiveStates[0],\n    breakpoint: breakpoint ?? 'default',\n    isSearchExpanded: !!isSearchExpanded,\n    onSearchUtilityClick: () => setSearchMinimized(isSearchMinimized => !isSearchMinimized),\n  };\n}\n\n/**\n * Get the width of the content box (assuming the element's box-sizing is border-box).\n */\nfunction getContentBoxWidth(element: Element): number {\n  const style = getComputedStyle(element);\n  return (\n    parseFloat(style.width || '0px') - parseFloat(style.paddingLeft || '0px') - parseFloat(style.paddingRight || '0px')\n  );\n}\n\n/**\n * Generates the series of responsive steps that can be performed on the header in order.\n */\nexport function generateResponsiveStateKeys(\n  utilities: ReadonlyArray<TopNavigationProps.Utility>,\n  canHideSearch: boolean,\n  canHideTitle: boolean\n): ReadonlyArray<ResponsiveState> {\n  const states: ResponsiveState[] = [{}];\n  if (utilities.some(utility => utility.text)) {\n    states.push({ hideUtilityText: true });\n  }\n  if (canHideSearch) {\n    states.push({\n      hideUtilityText: true,\n      hideSearch: true,\n    });\n  }\n  const hiddenUtilties = [];\n  for (let i = 0; i < utilities.length; i++) {\n    if (!utilities[i].disableUtilityCollapse) {\n      hiddenUtilties.push(i);\n      states.push({\n        hideUtilityText: true,\n        hideSearch: canHideSearch || undefined,\n        hideUtilities: hiddenUtilties.length > 0 ? hiddenUtilties.slice() : undefined,\n      });\n    }\n  }\n  if (canHideTitle) {\n    states.push({\n      hideUtilityText: true,\n      hideSearch: canHideSearch || undefined,\n      hideUtilities: hiddenUtilties.length > 0 ? hiddenUtilties.slice() : undefined,\n      hideTitle: true,\n    });\n  }\n  return states;\n}\n\n/**\n * Determines the best responsive state configuration of the top navigation, based on the given list of possible responsive states\n * and the current sizes of all elements inside the navigation bar.\n */\nexport function determineBestResponsiveState(\n  possibleStates: ReadonlyArray<ResponsiveState>,\n  sizes: TopNavigationSizeConfiguration\n): ResponsiveState {\n  const {\n    hasSearch,\n    availableWidth,\n    utilitiesLeftPadding,\n    fullIdentityWidth,\n    titleWidth,\n    searchSlotWidth,\n    searchUtilityWidth,\n    utilityWithLabelWidths,\n    utilityWithoutLabelWidths,\n    menuTriggerUtilityWidth,\n  } = sizes;\n  // Iterate through each state and calculate its expected required width.\n  for (const state of possibleStates) {\n    const searchWidth = hasSearch ? (state.hideSearch ? searchUtilityWidth : searchSlotWidth) : 0;\n    const utilitiesWidth: number = (state.hideUtilityText ? utilityWithoutLabelWidths : utilityWithLabelWidths)\n      .filter((_width, i) => !state.hideUtilities || state.hideUtilities.indexOf(i) === -1)\n      .reduce((sum, width) => sum + width, 0);\n    const menuTriggerWidth = state.hideUtilities ? menuTriggerUtilityWidth : 0;\n    const identityWidth = state.hideTitle ? fullIdentityWidth - titleWidth : fullIdentityWidth;\n    const expectedInnerWidth = identityWidth + searchWidth + utilitiesLeftPadding + utilitiesWidth + menuTriggerWidth;\n    if (expectedInnerWidth <= availableWidth - RESPONSIVENESS_BUFFER) {\n      return state;\n    }\n  }\n\n  // If nothing matches, pick the smallest possible state.\n  return possibleStates[possibleStates.length - 1];\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}