{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useCallback, useMemo, useState } from 'react';\nimport createItemsTree from './create-items-tree';\nimport moveHighlightOneStep from './move-highlight';\nimport { indexEquals, indexIncludes } from './utils';\nexport default function useHighlightedMenu({\n  items,\n  hasExpandableGroups,\n  isInRestrictedView = false\n}) {\n  const [targetIndex, setTargetIndex] = useState([]);\n  const [expandedIndex, setExpandedIndex] = useState([]);\n  const [isUsingMouse, setIsUsingMouse] = useState(true);\n  const {\n    getItem,\n    getItemIndex,\n    getSequentialIndex,\n    getParentIndex\n  } = useMemo(() => createItemsTree(items), [items]);\n  const targetItem = useMemo(() => getItem(targetIndex), [targetIndex, getItem]);\n  const isHighlighted = useCallback(item => {\n    const index = getItemIndex(item);\n    return indexIncludes(index, targetIndex);\n  }, [targetIndex, getItemIndex]);\n  // check if keyboard focus is on the element\n  const isKeyboardHighlight = useCallback(item => {\n    const index = getItemIndex(item);\n    return !isUsingMouse && indexEquals(index, targetIndex);\n  }, [targetIndex, getItemIndex, isUsingMouse]);\n  const isExpanded = useCallback(group => {\n    const index = getItemIndex(group);\n    return indexIncludes(index, expandedIndex);\n  }, [expandedIndex, getItemIndex]);\n  const moveHighlight = useCallback(direction => {\n    const getNext = index => {\n      const nextIndex = getSequentialIndex(index, direction);\n      const item = getItem(nextIndex || [-1]);\n      if (!nextIndex || !item) {\n        return null;\n      }\n      const parentIndex = getParentIndex(item);\n      const parentItem = parentIndex && getItem(parentIndex);\n      return {\n        index: nextIndex,\n        item,\n        parent: parentItem || undefined\n      };\n    };\n    const nextIndex = moveHighlightOneStep({\n      startIndex: targetIndex,\n      expandedIndex,\n      getNext,\n      hasExpandableGroups,\n      isInRestrictedView\n    });\n    if (nextIndex) {\n      setTargetIndex(nextIndex);\n    }\n  }, [targetIndex, expandedIndex, getItem, getSequentialIndex, getParentIndex, hasExpandableGroups, isInRestrictedView]);\n  const highlightItem = useCallback(item => {\n    setTargetIndex(getItemIndex(item));\n  }, [getItemIndex]);\n  const expandGroup = useCallback(group => {\n    const groupIndex = group ? getItemIndex(group) : targetIndex;\n    const firstChildIndex = [...groupIndex, 0];\n    // move to the first child item unless in restricted mode\n    setTargetIndex(isInRestrictedView ? groupIndex : firstChildIndex);\n    setExpandedIndex(groupIndex);\n  }, [targetIndex, getItemIndex, isInRestrictedView]);\n  const collapseGroup = useCallback(() => {\n    if (expandedIndex.length > 0) {\n      setTargetIndex(expandedIndex);\n      setExpandedIndex(expandedIndex.slice(0, -1));\n    }\n  }, [expandedIndex]);\n  const reset = useCallback(() => {\n    setTargetIndex([]);\n    setExpandedIndex([]);\n  }, []);\n  return {\n    targetItem,\n    isHighlighted,\n    isKeyboardHighlight,\n    isExpanded,\n    moveHighlight,\n    highlightItem,\n    expandGroup,\n    collapseGroup,\n    reset,\n    setIsUsingMouse\n  };\n}","map":{"version":3,"names":["useCallback","useMemo","useState","createItemsTree","moveHighlightOneStep","indexEquals","indexIncludes","useHighlightedMenu","items","hasExpandableGroups","isInRestrictedView","targetIndex","setTargetIndex","expandedIndex","setExpandedIndex","isUsingMouse","setIsUsingMouse","getItem","getItemIndex","getSequentialIndex","getParentIndex","targetItem","isHighlighted","item","index","isKeyboardHighlight","isExpanded","group","moveHighlight","direction","getNext","nextIndex","parentIndex","parentItem","parent","undefined","startIndex","highlightItem","expandGroup","groupIndex","firstChildIndex","collapseGroup","length","slice","reset"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/button-dropdown/utils/use-highlighted-menu.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useCallback, useMemo, useState } from 'react';\n\nimport { ButtonDropdownProps, HighlightProps } from '../interfaces';\nimport createItemsTree, { TreeIndex } from './create-items-tree';\nimport moveHighlightOneStep from './move-highlight';\nimport { indexEquals, indexIncludes } from './utils';\n\ninterface UseHighlightedMenuOptions {\n  items: ButtonDropdownProps.Items;\n  hasExpandableGroups: boolean;\n  isInRestrictedView?: boolean;\n}\n\ninterface UseHighlightedMenuApi extends HighlightProps {\n  moveHighlight: (direction: -1 | 1) => void;\n  expandGroup: (group?: ButtonDropdownProps.ItemGroup) => void;\n  collapseGroup: () => void;\n  reset: () => void;\n  setIsUsingMouse: (isUsingMouse: boolean) => void;\n}\n\nexport default function useHighlightedMenu({\n  items,\n  hasExpandableGroups,\n  isInRestrictedView = false,\n}: UseHighlightedMenuOptions): UseHighlightedMenuApi {\n  const [targetIndex, setTargetIndex] = useState<TreeIndex>([]);\n  const [expandedIndex, setExpandedIndex] = useState<TreeIndex>([]);\n  const [isUsingMouse, setIsUsingMouse] = useState<boolean>(true);\n\n  const { getItem, getItemIndex, getSequentialIndex, getParentIndex } = useMemo(() => createItemsTree(items), [items]);\n\n  const targetItem = useMemo(() => getItem(targetIndex), [targetIndex, getItem]);\n\n  const isHighlighted = useCallback(\n    (item: ButtonDropdownProps.ItemOrGroup) => {\n      const index = getItemIndex(item);\n      return indexIncludes(index, targetIndex);\n    },\n    [targetIndex, getItemIndex]\n  );\n\n  // check if keyboard focus is on the element\n  const isKeyboardHighlight = useCallback(\n    (item: ButtonDropdownProps.ItemOrGroup) => {\n      const index = getItemIndex(item);\n      return !isUsingMouse && indexEquals(index, targetIndex);\n    },\n    [targetIndex, getItemIndex, isUsingMouse]\n  );\n\n  const isExpanded = useCallback(\n    (group: ButtonDropdownProps.ItemGroup) => {\n      const index = getItemIndex(group);\n\n      return indexIncludes(index, expandedIndex);\n    },\n    [expandedIndex, getItemIndex]\n  );\n\n  const moveHighlight = useCallback(\n    (direction: -1 | 1) => {\n      const getNext = (index: TreeIndex) => {\n        const nextIndex = getSequentialIndex(index, direction);\n        const item = getItem(nextIndex || [-1]);\n\n        if (!nextIndex || !item) {\n          return null;\n        }\n\n        const parentIndex = getParentIndex(item);\n        const parentItem = parentIndex && getItem(parentIndex);\n\n        return { index: nextIndex, item, parent: parentItem || undefined };\n      };\n\n      const nextIndex = moveHighlightOneStep({\n        startIndex: targetIndex,\n        expandedIndex,\n        getNext,\n        hasExpandableGroups,\n        isInRestrictedView,\n      });\n\n      if (nextIndex) {\n        setTargetIndex(nextIndex);\n      }\n    },\n    [targetIndex, expandedIndex, getItem, getSequentialIndex, getParentIndex, hasExpandableGroups, isInRestrictedView]\n  );\n\n  const highlightItem = useCallback(\n    (item: ButtonDropdownProps.ItemOrGroup) => {\n      setTargetIndex(getItemIndex(item));\n    },\n    [getItemIndex]\n  );\n\n  const expandGroup = useCallback(\n    (group?: ButtonDropdownProps.ItemGroup) => {\n      const groupIndex = group ? getItemIndex(group) : targetIndex;\n      const firstChildIndex = [...groupIndex, 0];\n\n      // move to the first child item unless in restricted mode\n      setTargetIndex(isInRestrictedView ? groupIndex : firstChildIndex);\n      setExpandedIndex(groupIndex);\n    },\n    [targetIndex, getItemIndex, isInRestrictedView]\n  );\n\n  const collapseGroup = useCallback(() => {\n    if (expandedIndex.length > 0) {\n      setTargetIndex(expandedIndex);\n      setExpandedIndex(expandedIndex.slice(0, -1));\n    }\n  }, [expandedIndex]);\n\n  const reset = useCallback(() => {\n    setTargetIndex([]);\n    setExpandedIndex([]);\n  }, []);\n\n  return {\n    targetItem,\n    isHighlighted,\n    isKeyboardHighlight,\n    isExpanded,\n    moveHighlight,\n    highlightItem,\n    expandGroup,\n    collapseGroup,\n    reset,\n    setIsUsingMouse,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}