{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef } from 'react';\nimport clsx from 'clsx';\nimport { copyAnalyticsMetadataAttribute } from '@cloudscape-design/component-toolkit/internal/analytics-metadata';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport RadioButton from '../radio-group/radio-button';\nimport analyticsSelectors from './analytics-metadata/styles.css.js';\nimport styles from './styles.css.js';\nexport const Tile = React.forwardRef((_a, forwardedRef) => {\n  var {\n      item,\n      selected,\n      name,\n      breakpoint,\n      onChange,\n      readOnly\n    } = _a,\n    rest = __rest(_a, [\"item\", \"selected\", \"name\", \"breakpoint\", \"onChange\", \"readOnly\"]);\n  const internalRef = useRef(null);\n  const isVisualRefresh = useVisualRefresh();\n  const mergedRef = useMergeRefs(internalRef, forwardedRef);\n  return React.createElement(\"div\", Object.assign({\n    className: clsx(styles['tile-container'], {\n      [styles['has-metadata']]: item.description || item.image\n    }, {\n      [styles.selected]: selected\n    }, {\n      [styles.disabled]: !!item.disabled\n    }, {\n      [styles.readonly]: readOnly\n    }, {\n      [styles.refresh]: isVisualRefresh\n    }, styles[`breakpoint-${breakpoint}`]),\n    \"data-value\": item.value,\n    onClick: () => {\n      var _a;\n      if (item.disabled || readOnly) {\n        return;\n      }\n      (_a = internalRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n      if (!selected) {\n        fireNonCancelableEvent(onChange, {\n          value: item.value\n        });\n      }\n    }\n  }, copyAnalyticsMetadataAttribute(rest)), React.createElement(\"div\", {\n    className: clsx(styles.control, {\n      [styles['no-image']]: !item.image\n    })\n  }, React.createElement(RadioButton, {\n    checked: selected,\n    ref: mergedRef,\n    name: name,\n    value: item.value,\n    label: item.label,\n    description: item.description,\n    disabled: item.disabled,\n    controlId: item.controlId,\n    readOnly: readOnly,\n    className: analyticsSelectors['radio-button']\n  })), item.image && React.createElement(\"div\", {\n    className: clsx(styles.image, {\n      [styles.disabled]: !!item.disabled\n    })\n  }, item.image));\n});","map":{"version":3,"names":["React","useRef","clsx","copyAnalyticsMetadataAttribute","fireNonCancelableEvent","useMergeRefs","useVisualRefresh","RadioButton","analyticsSelectors","styles","Tile","forwardRef","_a","forwardedRef","item","selected","name","breakpoint","onChange","readOnly","rest","__rest","internalRef","isVisualRefresh","mergedRef","createElement","Object","assign","className","description","image","disabled","readonly","refresh","value","onClick","current","focus","control","checked","ref","label","controlId"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/tiles/tile.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef } from 'react';\nimport clsx from 'clsx';\n\nimport { copyAnalyticsMetadataAttribute } from '@cloudscape-design/component-toolkit/internal/analytics-metadata';\n\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { useContainerBreakpoints } from '../internal/hooks/container-queries';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport RadioButton from '../radio-group/radio-button';\nimport { TilesProps } from './interfaces';\n\nimport analyticsSelectors from './analytics-metadata/styles.css.js';\nimport styles from './styles.css.js';\n\ninterface TileProps {\n  item: TilesProps.TilesDefinition;\n  selected: boolean;\n  name: string;\n  breakpoint: ReturnType<typeof useContainerBreakpoints>[0];\n  onChange: TilesProps['onChange'];\n  readOnly?: boolean;\n}\n\nexport const Tile = React.forwardRef(\n  (\n    { item, selected, name, breakpoint, onChange, readOnly, ...rest }: TileProps,\n    forwardedRef: React.Ref<HTMLInputElement>\n  ) => {\n    const internalRef = useRef<HTMLInputElement>(null);\n    const isVisualRefresh = useVisualRefresh();\n\n    const mergedRef = useMergeRefs(internalRef, forwardedRef);\n\n    return (\n      <div\n        className={clsx(\n          styles['tile-container'],\n          { [styles['has-metadata']]: item.description || item.image },\n          { [styles.selected]: selected },\n          { [styles.disabled]: !!item.disabled },\n          { [styles.readonly]: readOnly },\n          { [styles.refresh]: isVisualRefresh },\n          styles[`breakpoint-${breakpoint}`]\n        )}\n        data-value={item.value}\n        onClick={() => {\n          if (item.disabled || readOnly) {\n            return;\n          }\n          internalRef.current?.focus();\n          if (!selected) {\n            fireNonCancelableEvent(onChange, { value: item.value });\n          }\n        }}\n        {...copyAnalyticsMetadataAttribute(rest)}\n      >\n        <div className={clsx(styles.control, { [styles['no-image']]: !item.image })}>\n          <RadioButton\n            checked={selected}\n            ref={mergedRef}\n            name={name}\n            value={item.value}\n            label={item.label}\n            description={item.description}\n            disabled={item.disabled}\n            controlId={item.controlId}\n            readOnly={readOnly}\n            className={analyticsSelectors['radio-button']}\n          />\n        </div>\n        {item.image && <div className={clsx(styles.image, { [styles.disabled]: !!item.disabled })}>{item.image}</div>}\n      </div>\n    );\n  }\n);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}