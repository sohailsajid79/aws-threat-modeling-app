{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { SPLIT_PANEL_MIN_WIDTH, SPLIT_PANEL_SCROLLBAR_MARGIN } from './constants';\n/**\n * The Split Panel will be in forced (bottom) position if the defined minimum width is\n * greater than the maximum width. In other words, the maximum width is the currently\n * available horizontal space based on all other components that are rendered. If the\n * minimum width exceeds this value then there is not enough horizontal space and we must\n * force it to the bottom position.\n */\nexport function checkSplitPanelForcedPosition(_ref) {\n  let {\n    isMobile,\n    splitPanelMaxWidth\n  } = _ref;\n  if (isMobile) {\n    return true;\n  }\n  return splitPanelMaxWidth < getSplitPanelMinWidth();\n}\n// Returns split panel min width with a margin for document scrollbar.\n// The margin prevents a possible infinite bouncing between bottom and side positions\n// caused by the presence of page's vertical scrollbar when on side position only.\nfunction getSplitPanelMinWidth() {\n  if (typeof document === 'undefined') {\n    return SPLIT_PANEL_MIN_WIDTH;\n  }\n  const margin = SPLIT_PANEL_SCROLLBAR_MARGIN / 2;\n  const hasScrollbar = window.document.documentElement.scrollHeight > window.document.documentElement.clientHeight;\n  return hasScrollbar ? SPLIT_PANEL_MIN_WIDTH - margin : SPLIT_PANEL_MIN_WIDTH + margin;\n}","map":{"version":3,"names":["SPLIT_PANEL_MIN_WIDTH","SPLIT_PANEL_SCROLLBAR_MARGIN","checkSplitPanelForcedPosition","_ref","isMobile","splitPanelMaxWidth","getSplitPanelMinWidth","document","margin","hasScrollbar","window","documentElement","scrollHeight","clientHeight"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/app-layout/split-panel/split-panel-utils.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { SPLIT_PANEL_MIN_WIDTH, SPLIT_PANEL_SCROLLBAR_MARGIN } from './constants';\n\n/**\n * The Split Panel will be in forced (bottom) position if the defined minimum width is\n * greater than the maximum width. In other words, the maximum width is the currently\n * available horizontal space based on all other components that are rendered. If the\n * minimum width exceeds this value then there is not enough horizontal space and we must\n * force it to the bottom position.\n */\nexport function checkSplitPanelForcedPosition({\n  isMobile,\n  splitPanelMaxWidth,\n}: {\n  isMobile: boolean;\n  splitPanelMaxWidth: number;\n}) {\n  if (isMobile) {\n    return true;\n  }\n  return splitPanelMaxWidth < getSplitPanelMinWidth();\n}\n\n// Returns split panel min width with a margin for document scrollbar.\n// The margin prevents a possible infinite bouncing between bottom and side positions\n// caused by the presence of page's vertical scrollbar when on side position only.\nfunction getSplitPanelMinWidth() {\n  if (typeof document === 'undefined') {\n    return SPLIT_PANEL_MIN_WIDTH;\n  }\n  const margin = SPLIT_PANEL_SCROLLBAR_MARGIN / 2;\n  const hasScrollbar = window.document.documentElement.scrollHeight > window.document.documentElement.clientHeight;\n  return hasScrollbar ? SPLIT_PANEL_MIN_WIDTH - margin : SPLIT_PANEL_MIN_WIDTH + margin;\n}\n"],"mappings":"AAAA;AACA;AAEA,SAASA,qBAAqB,EAAEC,4BAA4B,QAAQ,aAAa;AAEjF;;;;;;;AAOA,OAAM,SAAUC,6BAA6BA,CAAAC,IAAA,EAM5C;EAAA,IAN6C;IAC5CC,QAAQ;IACRC;EAAkB,CAInB,GAAAF,IAAA;EACC,IAAIC,QAAQ,EAAE;IACZ,OAAO,IAAI;;EAEb,OAAOC,kBAAkB,GAAGC,qBAAqB,EAAE;AACrD;AAEA;AACA;AACA;AACA,SAASA,qBAAqBA,CAAA;EAC5B,IAAI,OAAOC,QAAQ,KAAK,WAAW,EAAE;IACnC,OAAOP,qBAAqB;;EAE9B,MAAMQ,MAAM,GAAGP,4BAA4B,GAAG,CAAC;EAC/C,MAAMQ,YAAY,GAAGC,MAAM,CAACH,QAAQ,CAACI,eAAe,CAACC,YAAY,GAAGF,MAAM,CAACH,QAAQ,CAACI,eAAe,CAACE,YAAY;EAChH,OAAOJ,YAAY,GAAGT,qBAAqB,GAAGQ,MAAM,GAAGR,qBAAqB,GAAGQ,MAAM;AACvF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}