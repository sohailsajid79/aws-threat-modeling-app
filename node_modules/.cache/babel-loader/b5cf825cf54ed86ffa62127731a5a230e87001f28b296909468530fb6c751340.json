{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect } from 'react';\nimport clsx from 'clsx';\nimport { getAnalyticsMetadataAttribute } from '@cloudscape-design/component-toolkit/internal/analytics-metadata';\nimport InternalIcon from '../../icon/internal';\nimport useHiddenDescription from '../../internal/hooks/use-hidden-description';\nimport ItemsList from '../items-list';\nimport MobileExpandableGroup from '../mobile-expandable-group/mobile-expandable-group';\nimport Tooltip from '../tooltip.js';\nimport { getMenuItemProps } from '../utils/menu-item.js';\nimport styles from './styles.css.js';\nconst MobileExpandableCategoryElement = ({\n  item,\n  onItemActivate,\n  onGroupToggle,\n  targetItem,\n  isHighlighted,\n  isKeyboardHighlight,\n  isExpanded,\n  lastInDropdown,\n  highlightItem,\n  disabled,\n  variant,\n  position\n}) => {\n  const highlighted = isHighlighted(item);\n  const expanded = isExpanded(item);\n  const isKeyboardHighlighted = isKeyboardHighlight(item);\n  const triggerRef = React.useRef(null);\n  useEffect(() => {\n    if (triggerRef.current && highlighted && !expanded) {\n      triggerRef.current.focus();\n    }\n  }, [expanded, highlighted]);\n  const onClick = e => {\n    if (!disabled) {\n      e.preventDefault();\n      onGroupToggle(item, e);\n    }\n  };\n  const onHover = () => {\n    highlightItem(item);\n  };\n  const isDisabledWithReason = !!item.disabledReason && item.disabled;\n  const {\n    targetProps,\n    descriptionEl\n  } = useHiddenDescription(item.disabledReason);\n  const trigger = item.text && React.createElement(\"span\", Object.assign({\n    className: clsx(styles.header, styles['expandable-header'], styles[`variant-${variant}`], {\n      [styles.highlighted]: highlighted,\n      [styles['rolled-down']]: expanded,\n      [styles.disabled]: disabled,\n      [styles['is-focused']]: isKeyboardHighlighted\n    }),\n    // We are using the roving tabindex technique to manage the focus state of the dropdown.\n    // The current element will always have tabindex=0 which means that it can be tabbed to,\n    // while all other items have tabindex=-1 so we can focus them when necessary.\n    tabIndex: highlighted ? 0 : -1,\n    ref: triggerRef\n  }, getMenuItemProps({\n    parent: true,\n    disabled,\n    expanded\n  }), isDisabledWithReason ? targetProps : {}, getAnalyticsMetadataAttribute(disabled ? {} : {\n    action: 'expand',\n    detail: {\n      position: position || '0',\n      label: {\n        root: 'self'\n      },\n      id: item.id || '',\n      expanded: `${!expanded}`\n    }\n  })), item.text, React.createElement(\"span\", {\n    className: clsx(styles['expand-icon'], {\n      [styles['expand-icon-up']]: expanded\n    })\n  }, React.createElement(InternalIcon, {\n    name: \"caret-down-filled\"\n  })));\n  let content;\n  if (isDisabledWithReason) {\n    content = React.createElement(React.Fragment, null, descriptionEl, React.createElement(Tooltip, {\n      content: item.disabledReason\n    }, trigger));\n  } else if (disabled) {\n    content = trigger;\n  } else {\n    content = React.createElement(MobileExpandableGroup, {\n      open: expanded,\n      trigger: trigger\n    }, item.items && expanded && React.createElement(\"ul\", {\n      role: \"menu\",\n      \"aria-label\": item.text,\n      className: styles['items-list-container']\n    }, React.createElement(ItemsList, {\n      items: item.items,\n      onItemActivate: onItemActivate,\n      onGroupToggle: onGroupToggle,\n      targetItem: targetItem,\n      isHighlighted: isHighlighted,\n      isKeyboardHighlight: isKeyboardHighlight,\n      isExpanded: isExpanded,\n      lastInDropdown: lastInDropdown,\n      highlightItem: highlightItem,\n      hasCategoryHeader: true,\n      variant: variant,\n      position: position\n    })));\n  }\n  return React.createElement(\"li\", {\n    className: clsx(styles.category, styles[`variant-${variant}`], styles.expandable, {\n      [styles.expanded]: expanded,\n      [styles.disabled]: disabled,\n      [styles.highlighted]: highlighted || expanded,\n      [styles.expandable]: true\n    }),\n    role: \"presentation\",\n    onClick: onClick,\n    onMouseEnter: onHover,\n    onTouchStart: onHover,\n    \"data-testid\": item.id\n  }, content);\n};\nexport default MobileExpandableCategoryElement;","map":{"version":3,"names":["React","useEffect","clsx","getAnalyticsMetadataAttribute","InternalIcon","useHiddenDescription","ItemsList","MobileExpandableGroup","Tooltip","getMenuItemProps","styles","MobileExpandableCategoryElement","item","onItemActivate","onGroupToggle","targetItem","isHighlighted","isKeyboardHighlight","isExpanded","lastInDropdown","highlightItem","disabled","variant","position","highlighted","expanded","isKeyboardHighlighted","triggerRef","useRef","current","focus","onClick","e","preventDefault","onHover","isDisabledWithReason","disabledReason","targetProps","descriptionEl","trigger","text","createElement","Object","assign","className","header","tabIndex","ref","parent","action","detail","label","root","id","name","content","Fragment","open","items","role","hasCategoryHeader","category","expandable","onMouseEnter","onTouchStart"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/button-dropdown/category-elements/mobile-expandable-category-element.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect } from 'react';\nimport clsx from 'clsx';\n\nimport { getAnalyticsMetadataAttribute } from '@cloudscape-design/component-toolkit/internal/analytics-metadata';\n\nimport InternalIcon from '../../icon/internal';\nimport useHiddenDescription from '../../internal/hooks/use-hidden-description';\nimport { GeneratedAnalyticsMetadataButtonDropdownExpand } from '../analytics-metadata/interfaces.js';\nimport { CategoryProps } from '../interfaces';\nimport ItemsList from '../items-list';\nimport MobileExpandableGroup from '../mobile-expandable-group/mobile-expandable-group';\nimport Tooltip from '../tooltip.js';\nimport { getMenuItemProps } from '../utils/menu-item.js';\n\nimport styles from './styles.css.js';\n\nconst MobileExpandableCategoryElement = ({\n  item,\n  onItemActivate,\n  onGroupToggle,\n  targetItem,\n  isHighlighted,\n  isKeyboardHighlight,\n  isExpanded,\n  lastInDropdown,\n  highlightItem,\n  disabled,\n  variant,\n  position,\n}: CategoryProps) => {\n  const highlighted = isHighlighted(item);\n  const expanded = isExpanded(item);\n  const isKeyboardHighlighted = isKeyboardHighlight(item);\n  const triggerRef = React.useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    if (triggerRef.current && highlighted && !expanded) {\n      triggerRef.current.focus();\n    }\n  }, [expanded, highlighted]);\n\n  const onClick = (e: React.MouseEvent) => {\n    if (!disabled) {\n      e.preventDefault();\n      onGroupToggle(item, e);\n    }\n  };\n\n  const onHover = () => {\n    highlightItem(item);\n  };\n\n  const isDisabledWithReason = !!item.disabledReason && item.disabled;\n  const { targetProps, descriptionEl } = useHiddenDescription(item.disabledReason);\n  const trigger = item.text && (\n    <span\n      className={clsx(styles.header, styles['expandable-header'], styles[`variant-${variant}`], {\n        [styles.highlighted]: highlighted,\n        [styles['rolled-down']]: expanded,\n        [styles.disabled]: disabled,\n        [styles['is-focused']]: isKeyboardHighlighted,\n      })}\n      // We are using the roving tabindex technique to manage the focus state of the dropdown.\n      // The current element will always have tabindex=0 which means that it can be tabbed to,\n      // while all other items have tabindex=-1 so we can focus them when necessary.\n      tabIndex={highlighted ? 0 : -1}\n      ref={triggerRef}\n      {...getMenuItemProps({ parent: true, disabled, expanded })}\n      {...(isDisabledWithReason ? targetProps : {})}\n      {...getAnalyticsMetadataAttribute(\n        disabled\n          ? {}\n          : ({\n              action: 'expand',\n              detail: {\n                position: position || '0',\n                label: { root: 'self' },\n                id: item.id || '',\n                expanded: `${!expanded}`,\n              },\n            } as GeneratedAnalyticsMetadataButtonDropdownExpand)\n      )}\n    >\n      {item.text}\n      <span\n        className={clsx(styles['expand-icon'], {\n          [styles['expand-icon-up']]: expanded,\n        })}\n      >\n        <InternalIcon name=\"caret-down-filled\" />\n      </span>\n    </span>\n  );\n\n  let content: React.ReactNode;\n\n  if (isDisabledWithReason) {\n    content = (\n      <>\n        {descriptionEl}\n        <Tooltip content={item.disabledReason}>{trigger}</Tooltip>\n      </>\n    );\n  } else if (disabled) {\n    content = trigger;\n  } else {\n    content = (\n      <MobileExpandableGroup open={expanded} trigger={trigger}>\n        {item.items && expanded && (\n          <ul role=\"menu\" aria-label={item.text} className={styles['items-list-container']}>\n            <ItemsList\n              items={item.items}\n              onItemActivate={onItemActivate}\n              onGroupToggle={onGroupToggle}\n              targetItem={targetItem}\n              isHighlighted={isHighlighted}\n              isKeyboardHighlight={isKeyboardHighlight}\n              isExpanded={isExpanded}\n              lastInDropdown={lastInDropdown}\n              highlightItem={highlightItem}\n              hasCategoryHeader={true}\n              variant={variant}\n              position={position}\n            />\n          </ul>\n        )}\n      </MobileExpandableGroup>\n    );\n  }\n\n  return (\n    <li\n      className={clsx(styles.category, styles[`variant-${variant}`], styles.expandable, {\n        [styles.expanded]: expanded,\n        [styles.disabled]: disabled,\n        [styles.highlighted]: highlighted || expanded,\n        [styles.expandable]: true,\n      })}\n      role=\"presentation\"\n      onClick={onClick}\n      onMouseEnter={onHover}\n      onTouchStart={onHover}\n      data-testid={item.id}\n    >\n      {content}\n    </li>\n  );\n};\n\nexport default MobileExpandableCategoryElement;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}