{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport Icon from '../../icon/internal';\nimport Portal from '../../internal/components/portal';\nimport { useSingleTabStopNavigation } from '../../internal/context/single-tab-stop-navigation-context';\nimport useHiddenDescription from '../../internal/hooks/use-hidden-description';\nimport { usePortalModeClasses } from '../../internal/hooks/use-portal-mode-classes';\nimport Arrow from '../../popover/arrow';\nimport PopoverBody from '../../popover/body';\nimport PopoverContainer from '../../popover/container';\nimport { useClickAway } from './click-away';\nimport { TableTdElement } from './td-element';\nimport styles from './styles.css.js';\nexport function DisabledInlineEditor(_a) {\n  var _b;\n  var {\n      className,\n      item,\n      column,\n      ariaLabels,\n      isEditing,\n      onEditStart,\n      onEditEnd,\n      editDisabledReason,\n      isVisualRefresh,\n      interactiveCell = true,\n      resizableColumns = false\n    } = _a,\n    rest = __rest(_a, [\"className\", \"item\", \"column\", \"ariaLabels\", \"isEditing\", \"onEditStart\", \"onEditEnd\", \"editDisabledReason\", \"isVisualRefresh\", \"interactiveCell\", \"resizableColumns\"]);\n  const clickAwayRef = useClickAway(() => {\n    if (isEditing) {\n      onEditEnd(true);\n    }\n  });\n  const [hasHover, setHasHover] = useState(false);\n  const [hasFocus, setHasFocus] = useState(false);\n  // When a cell is both expandable and editable the icon is always shown.\n  const showIcon = hasHover || hasFocus || isEditing || !interactiveCell;\n  const iconRef = useRef(null);\n  const buttonRef = useRef(null);\n  const portalRef = useRef(null);\n  function handleEscape(event) {\n    if (event.key === 'Escape') {\n      onEditEnd(true);\n    }\n  }\n  const onClick = () => {\n    var _a;\n    onEditStart();\n    (_a = buttonRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n  };\n  const {\n    targetProps,\n    descriptionEl\n  } = useHiddenDescription(editDisabledReason);\n  const portalClasses = usePortalModeClasses(portalRef);\n  const {\n    tabIndex\n  } = useSingleTabStopNavigation(buttonRef);\n  return React.createElement(TableTdElement, Object.assign({}, rest, {\n    nativeAttributes: {\n      'data-inline-editing-active': isEditing.toString()\n    },\n    className: clsx(className, styles['body-cell-editable'], interactiveCell && styles['body-cell-interactive'], resizableColumns && styles['resizable-columns'], isEditing && styles['body-cell-edit-disabled-popover'], isVisualRefresh && styles['is-visual-refresh']),\n    onClick: interactiveCell && !isEditing ? onClick : undefined,\n    onMouseEnter: () => setHasHover(true),\n    onMouseLeave: () => setHasHover(false),\n    ref: clickAwayRef\n  }), column.cell(item), React.createElement(\"div\", {\n    className: styles['body-cell-editor-wrapper']\n  }, React.createElement(\"button\", Object.assign({\n    ref: buttonRef,\n    tabIndex: tabIndex,\n    className: clsx(styles['body-cell-editor'], styles['body-cell-editor-disabled']),\n    \"aria-label\": (_b = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.activateEditLabel) === null || _b === void 0 ? void 0 : _b.call(ariaLabels, column, item),\n    \"aria-haspopup\": \"dialog\",\n    \"aria-disabled\": \"true\",\n    onClick: !interactiveCell && !isEditing ? onClick : undefined,\n    onFocus: () => setHasFocus(true),\n    onBlur: () => setHasFocus(false),\n    onKeyDown: handleEscape\n  }, targetProps), showIcon && React.createElement(Icon, {\n    name: \"lock-private\",\n    variant: \"normal\",\n    __internalRootRef: iconRef\n  }), descriptionEl)), isEditing && React.createElement(\"span\", {\n    ref: portalRef\n  }, React.createElement(Portal, null, React.createElement(\"span\", {\n    className: portalClasses\n  }, React.createElement(PopoverContainer, {\n    size: \"medium\",\n    fixedWidth: false,\n    position: \"top\",\n    trackRef: iconRef,\n    arrow: position => React.createElement(Arrow, {\n      position: position\n    }),\n    renderWithPortal: true,\n    zIndex: 2000\n  }, React.createElement(PopoverBody, {\n    dismissButton: false,\n    dismissAriaLabel: undefined,\n    header: null,\n    onDismiss: () => {},\n    overflowVisible: \"both\"\n  }, React.createElement(\"span\", {\n    \"aria-live\": \"polite\"\n  }, editDisabledReason)))))));\n}","map":{"version":3,"names":["React","useRef","useState","clsx","Icon","Portal","useSingleTabStopNavigation","useHiddenDescription","usePortalModeClasses","Arrow","PopoverBody","PopoverContainer","useClickAway","TableTdElement","styles","DisabledInlineEditor","_a","className","item","column","ariaLabels","isEditing","onEditStart","onEditEnd","editDisabledReason","isVisualRefresh","interactiveCell","resizableColumns","rest","__rest","clickAwayRef","hasHover","setHasHover","hasFocus","setHasFocus","showIcon","iconRef","buttonRef","portalRef","handleEscape","event","key","onClick","current","focus","targetProps","descriptionEl","portalClasses","tabIndex","createElement","Object","assign","nativeAttributes","toString","undefined","onMouseEnter","onMouseLeave","ref","cell","_b","activateEditLabel","call","onFocus","onBlur","onKeyDown","name","variant","__internalRootRef","size","fixedWidth","position","trackRef","arrow","renderWithPortal","zIndex","dismissButton","dismissAriaLabel","header","onDismiss","overflowVisible"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/table/body-cell/disabled-inline-editor.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef, useState } from 'react';\nimport clsx from 'clsx';\n\nimport Icon from '../../icon/internal';\nimport Portal from '../../internal/components/portal';\nimport { useSingleTabStopNavigation } from '../../internal/context/single-tab-stop-navigation-context';\nimport useHiddenDescription from '../../internal/hooks/use-hidden-description';\nimport { usePortalModeClasses } from '../../internal/hooks/use-portal-mode-classes';\nimport Arrow from '../../popover/arrow';\nimport PopoverBody from '../../popover/body';\nimport PopoverContainer from '../../popover/container';\nimport { useClickAway } from './click-away';\nimport { TableBodyCellProps } from './index';\nimport { TableTdElement, TableTdElementProps } from './td-element';\n\nimport styles from './styles.css.js';\n\ninterface DisabledInlineEditorProps<ItemType> extends TableBodyCellProps<ItemType> {\n  editDisabledReason: string;\n}\n\nexport function DisabledInlineEditor<ItemType>({\n  className,\n  item,\n  column,\n  ariaLabels,\n  isEditing,\n  onEditStart,\n  onEditEnd,\n  editDisabledReason,\n  isVisualRefresh,\n  interactiveCell = true,\n  resizableColumns = false,\n  ...rest\n}: DisabledInlineEditorProps<ItemType>) {\n  const clickAwayRef = useClickAway(() => {\n    if (isEditing) {\n      onEditEnd(true);\n    }\n  });\n\n  const [hasHover, setHasHover] = useState(false);\n  const [hasFocus, setHasFocus] = useState(false);\n  // When a cell is both expandable and editable the icon is always shown.\n  const showIcon = hasHover || hasFocus || isEditing || !interactiveCell;\n\n  const iconRef = useRef(null);\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const portalRef = useRef<HTMLSpanElement>(null);\n\n  function handleEscape(event: React.KeyboardEvent): void {\n    if (event.key === 'Escape') {\n      onEditEnd(true);\n    }\n  }\n\n  const onClick = () => {\n    onEditStart();\n    buttonRef.current?.focus();\n  };\n\n  const { targetProps, descriptionEl } = useHiddenDescription(editDisabledReason);\n  const portalClasses = usePortalModeClasses(portalRef);\n\n  const { tabIndex } = useSingleTabStopNavigation(buttonRef);\n\n  return (\n    <TableTdElement\n      {...rest}\n      nativeAttributes={\n        { 'data-inline-editing-active': isEditing.toString() } as TableTdElementProps['nativeAttributes']\n      }\n      className={clsx(\n        className,\n        styles['body-cell-editable'],\n        interactiveCell && styles['body-cell-interactive'],\n        resizableColumns && styles['resizable-columns'],\n        isEditing && styles['body-cell-edit-disabled-popover'],\n        isVisualRefresh && styles['is-visual-refresh']\n      )}\n      onClick={interactiveCell && !isEditing ? onClick : undefined}\n      onMouseEnter={() => setHasHover(true)}\n      onMouseLeave={() => setHasHover(false)}\n      ref={clickAwayRef}\n    >\n      {column.cell(item)}\n\n      <div className={styles['body-cell-editor-wrapper']}>\n        <button\n          ref={buttonRef}\n          tabIndex={tabIndex}\n          className={clsx(styles['body-cell-editor'], styles['body-cell-editor-disabled'])}\n          aria-label={ariaLabels?.activateEditLabel?.(column, item)}\n          aria-haspopup=\"dialog\"\n          aria-disabled=\"true\"\n          onClick={!interactiveCell && !isEditing ? onClick : undefined}\n          onFocus={() => setHasFocus(true)}\n          onBlur={() => setHasFocus(false)}\n          onKeyDown={handleEscape}\n          {...targetProps}\n        >\n          {showIcon && <Icon name=\"lock-private\" variant=\"normal\" __internalRootRef={iconRef} />}\n          {descriptionEl}\n        </button>\n      </div>\n\n      {isEditing && (\n        <span ref={portalRef}>\n          <Portal>\n            <span className={portalClasses}>\n              <PopoverContainer\n                size=\"medium\"\n                fixedWidth={false}\n                position=\"top\"\n                trackRef={iconRef}\n                arrow={position => <Arrow position={position} />}\n                renderWithPortal={true}\n                zIndex={2000}\n              >\n                <PopoverBody\n                  dismissButton={false}\n                  dismissAriaLabel={undefined}\n                  header={null}\n                  onDismiss={() => {}}\n                  overflowVisible=\"both\"\n                >\n                  <span aria-live=\"polite\">{editDisabledReason}</span>\n                </PopoverBody>\n              </PopoverContainer>\n            </span>\n          </Portal>\n        </span>\n      )}\n    </TableTdElement>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}