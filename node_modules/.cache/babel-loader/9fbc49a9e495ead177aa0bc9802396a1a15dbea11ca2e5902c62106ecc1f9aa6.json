{"ast":null,"code":"var _s = $RefreshSig$();\n/** *******************************************************************************************************************\n  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\").\n  You may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n ******************************************************************************************************************** */\n\nimport { useCallback } from 'react';\nimport { useWorkspacesContext } from '../../contexts';\nimport { useApplicationInfoContext } from '../../contexts/ApplicationContext/context';\nimport { useArchitectureInfoContext } from '../../contexts/ArchitectureContext/context';\nimport { useAssumptionLinksContext } from '../../contexts/AssumptionLinksContext/context';\nimport { useAssumptionsContext } from '../../contexts/AssumptionsContext/context';\nimport { useDataflowInfoContext } from '../../contexts/DataflowContext/context';\nimport { useGlobalSetupContext } from '../../contexts/GlobalSetupContext/context';\nimport { useMitigationLinksContext } from '../../contexts/MitigationLinksContext/context';\nimport { useMitigationsContext } from '../../contexts/MitigationsContext/context';\nimport { useControlLinksContext } from '../../contexts/ControlLinksContext/context';\nimport { useControlsContext } from '../../contexts/ControlsContext/context';\nimport { useThreatsContext } from '../../contexts/ThreatsContext/context';\nimport downloadObjectAsJson from '../../utils/downloadObjectAsJson';\nimport getExportFileName from '../../utils/getExportFileName';\nimport sanitizeHtml from '../../utils/sanitizeHtml';\nimport validateData from '../../utils/validateData';\nconst SCHEMA_VERSION = 1.0;\nconst useImportExport = () => {\n  _s();\n  const {\n    composerMode\n  } = useGlobalSetupContext();\n  const {\n    currentWorkspace\n  } = useWorkspacesContext();\n  const {\n    applicationInfo\n  } = useApplicationInfoContext();\n  const {\n    architectureInfo\n  } = useArchitectureInfoContext();\n  const {\n    dataflowInfo\n  } = useDataflowInfoContext();\n  const {\n    assumptionList\n  } = useAssumptionsContext();\n  const {\n    mitigationList\n  } = useMitigationsContext();\n  const {\n    controlList\n  } = useControlsContext();\n  const {\n    statementList,\n    setStatementList\n  } = useThreatsContext();\n  const {\n    assumptionLinkList\n  } = useAssumptionLinksContext();\n  const {\n    mitigationLinkList\n  } = useMitigationLinksContext();\n  const {\n    controlLinkList\n  } = useControlLinksContext();\n  const getWorkspaceData = useCallback(() => {\n    if (composerMode === 'Full') {\n      return {\n        schema: SCHEMA_VERSION,\n        applicationInfo,\n        architecture: architectureInfo,\n        dataflow: dataflowInfo,\n        assumptions: assumptionList,\n        mitigations: mitigationList,\n        controls: controlList,\n        assumptionLinks: assumptionLinkList,\n        mitigationLinks: mitigationLinkList,\n        controlLinks: controlLinkList,\n        threats: statementList\n      };\n    }\n    return {\n      schema: SCHEMA_VERSION,\n      threats: statementList\n    };\n  }, [composerMode, applicationInfo, architectureInfo, dataflowInfo, assumptionList, mitigationList, controlList, assumptionLinkList, mitigationLinkList, controlLinkList, statementList]);\n  const exportAll = useCallback(() => {\n    const exportFileName = getExportFileName(composerMode, false, currentWorkspace);\n    const exportObject = getWorkspaceData();\n    downloadObjectAsJson(exportObject, exportFileName);\n  }, [getWorkspaceData, currentWorkspace, composerMode]);\n  const exportSelectedThreats = useCallback(selectedStatementList => {\n    const exportFileName = getExportFileName(composerMode, true, currentWorkspace);\n    downloadObjectAsJson({\n      schema: SCHEMA_VERSION,\n      workspace: currentWorkspace,\n      threats: selectedStatementList\n    }, exportFileName);\n  }, [currentWorkspace, composerMode]);\n  const parseImportedData = useCallback(data => {\n    const parsedData = sanitizeHtml(data);\n    if (Array.isArray(parsedData)) {\n      // This is before schema version support\n      return {\n        schema: -1,\n        threats: data\n      };\n    }\n    const validatedData = validateData(parsedData);\n    if (validatedData.success === false) {\n      throw new Error(validatedData.error.issues.map(i => `${i.path}: ${i.message}`).join('\\n'));\n    }\n    const importedData = validatedData.data;\n    if (!parsedData.schema || parsedData.schema !== SCHEMA_VERSION) {\n      throw new Error('Unsupported Schema version');\n    }\n    return importedData;\n  }, []);\n  const importData = useCallback(data => {\n    if (data.schema > 0) {\n      //setApplicationInfo(data.applicationInfo || {});\n      //setArchitectureInfo(data.architecture || {});\n      //setDataflowInfo(data.dataflow || {});\n      //setAssumptionList(data.assumptions || []);\n      //setMitigationList(data.mitigations || []);\n      //setControlList(data.controls || []);\n      setStatementList(data.threats || []);\n      //setAssumptionLinkList(data.assumptionLinks || []);\n      //setMitigationLinkList(data.mitigationLinks || []);\n      //setControlLinkList(data.controlLinks || []);\n    } else {\n      // Support ListOnly mode\n      setStatementList(data.threats || []);\n    }\n  }, [\n  //setApplicationInfo,\n  //setArchitectureInfo,\n  //setDataflowInfo,\n  //setAssumptionList,\n  //setMitigationList,\n  //setControlList,\n  setStatementList\n  //setAssumptionLinkList,\n  //setMitigationLinkList,\n  //setControlLinkList,\n  ]);\n  return {\n    getWorkspaceData,\n    exportAll,\n    exportSelectedThreats,\n    parseImportedData,\n    importData\n  };\n};\n_s(useImportExport, \"1DPXDS2b4X3ihI0rzRhz6nbukzc=\", false, function () {\n  return [useGlobalSetupContext, useWorkspacesContext, useApplicationInfoContext, useArchitectureInfoContext, useDataflowInfoContext, useAssumptionsContext, useMitigationsContext, useControlsContext, useThreatsContext, useAssumptionLinksContext, useMitigationLinksContext, useControlLinksContext];\n});\nexport default useImportExport;","map":{"version":3,"names":["useCallback","useWorkspacesContext","useApplicationInfoContext","useArchitectureInfoContext","useAssumptionLinksContext","useAssumptionsContext","useDataflowInfoContext","useGlobalSetupContext","useMitigationLinksContext","useMitigationsContext","useControlLinksContext","useControlsContext","useThreatsContext","downloadObjectAsJson","getExportFileName","sanitizeHtml","validateData","SCHEMA_VERSION","useImportExport","_s","composerMode","currentWorkspace","applicationInfo","architectureInfo","dataflowInfo","assumptionList","mitigationList","controlList","statementList","setStatementList","assumptionLinkList","mitigationLinkList","controlLinkList","getWorkspaceData","schema","architecture","dataflow","assumptions","mitigations","controls","assumptionLinks","mitigationLinks","controlLinks","threats","exportAll","exportFileName","exportObject","exportSelectedThreats","selectedStatementList","workspace","parseImportedData","data","parsedData","Array","isArray","validatedData","success","Error","error","issues","map","i","path","message","join","importedData","importData"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/src/hooks/useExportImport/index.ts"],"sourcesContent":["/** *******************************************************************************************************************\n  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\").\n  You may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n ******************************************************************************************************************** */\n\nimport { useCallback } from 'react';\nimport { useWorkspacesContext } from '../../contexts';\nimport { useApplicationInfoContext } from '../../contexts/ApplicationContext/context';\nimport { useArchitectureInfoContext } from '../../contexts/ArchitectureContext/context';\nimport { useAssumptionLinksContext } from '../../contexts/AssumptionLinksContext/context';\nimport { useAssumptionsContext } from '../../contexts/AssumptionsContext/context';\nimport { useDataflowInfoContext } from '../../contexts/DataflowContext/context';\nimport { useGlobalSetupContext } from '../../contexts/GlobalSetupContext/context';\nimport { useMitigationLinksContext } from '../../contexts/MitigationLinksContext/context';\nimport { useMitigationsContext } from '../../contexts/MitigationsContext/context';\nimport { useControlLinksContext } from '../../contexts/ControlLinksContext/context';\nimport { useControlsContext } from '../../contexts/ControlsContext/context';\nimport { useThreatsContext } from '../../contexts/ThreatsContext/context';\nimport { DataExchangeFormat, TemplateThreatStatement } from '../../customTypes';\nimport downloadObjectAsJson from '../../utils/downloadObjectAsJson';\nimport getExportFileName from '../../utils/getExportFileName';\nimport sanitizeHtml from '../../utils/sanitizeHtml';\nimport validateData from '../../utils/validateData';\n\nconst SCHEMA_VERSION = 1.0;\n\nconst useImportExport = () => {\n  const { composerMode } = useGlobalSetupContext();\n  const { currentWorkspace } = useWorkspacesContext();\n  const { applicationInfo } = useApplicationInfoContext();\n  const { architectureInfo } = useArchitectureInfoContext();\n  const { dataflowInfo } = useDataflowInfoContext();\n  const { assumptionList } = useAssumptionsContext();\n  const { mitigationList } = useMitigationsContext();\n  const { controlList } = useControlsContext();\n  const { statementList, setStatementList } = useThreatsContext();\n  const { assumptionLinkList } = useAssumptionLinksContext();\n  const { mitigationLinkList } = useMitigationLinksContext();\n  const { controlLinkList } = useControlLinksContext();\n\n  const getWorkspaceData = useCallback((): DataExchangeFormat => {\n    if (composerMode === 'Full') {\n      return {\n        schema: SCHEMA_VERSION,\n        applicationInfo,\n        architecture: architectureInfo,\n        dataflow: dataflowInfo,\n        assumptions: assumptionList,\n        mitigations: mitigationList,\n        controls: controlList,\n        assumptionLinks: assumptionLinkList,\n        mitigationLinks: mitigationLinkList,\n        controlLinks: controlLinkList,\n        threats: statementList,\n      };\n    }\n\n    return {\n      schema: SCHEMA_VERSION,\n      threats: statementList,\n    };\n  }, [composerMode, applicationInfo,\n    architectureInfo, dataflowInfo,\n    assumptionList, mitigationList, controlList,\n    assumptionLinkList, mitigationLinkList, controlLinkList,\n    statementList]);\n\n  const exportAll = useCallback(() => {\n    const exportFileName = getExportFileName(composerMode, false, currentWorkspace);\n    const exportObject = getWorkspaceData();\n    downloadObjectAsJson(exportObject, exportFileName);\n  }, [getWorkspaceData, currentWorkspace, composerMode]);\n\n  const exportSelectedThreats = useCallback((selectedStatementList: TemplateThreatStatement[]) => {\n    const exportFileName = getExportFileName(composerMode, true, currentWorkspace);\n    downloadObjectAsJson({\n      schema: SCHEMA_VERSION,\n      workspace: currentWorkspace,\n      threats: selectedStatementList,\n    }, exportFileName);\n  }, [currentWorkspace, composerMode]);\n\n  const parseImportedData = useCallback((data: any): DataExchangeFormat => {\n    const parsedData = sanitizeHtml(data);\n\n    if (Array.isArray(parsedData)) {\n      // This is before schema version support\n      return {\n        schema: -1,\n        threats: data as TemplateThreatStatement[],\n      };\n    }\n\n    const validatedData = validateData(parsedData);\n\n    if (validatedData.success === false) {\n      throw new Error(validatedData.error.issues.map(i => `${i.path}: ${i.message}`).join('\\n'));\n    }\n\n    const importedData = validatedData.data as DataExchangeFormat;\n\n    if (!parsedData.schema || parsedData.schema !== SCHEMA_VERSION) {\n      throw new Error('Unsupported Schema version');\n    }\n\n    return importedData;\n  }, []);\n\n  const importData = useCallback((data: DataExchangeFormat) => {\n    if (data.schema > 0) {\n      //setApplicationInfo(data.applicationInfo || {});\n      //setArchitectureInfo(data.architecture || {});\n      //setDataflowInfo(data.dataflow || {});\n      //setAssumptionList(data.assumptions || []);\n      //setMitigationList(data.mitigations || []);\n      //setControlList(data.controls || []);\n      setStatementList(data.threats || []);\n      //setAssumptionLinkList(data.assumptionLinks || []);\n      //setMitigationLinkList(data.mitigationLinks || []);\n      //setControlLinkList(data.controlLinks || []);\n    } else {\n      // Support ListOnly mode\n      setStatementList(data.threats || []);\n    }\n  }, [\n    //setApplicationInfo,\n    //setArchitectureInfo,\n    //setDataflowInfo,\n    //setAssumptionList,\n    //setMitigationList,\n    //setControlList,\n    setStatementList,\n    //setAssumptionLinkList,\n    //setMitigationLinkList,\n    //setControlLinkList,\n  ]);\n\n  return {\n    getWorkspaceData,\n    exportAll,\n    exportSelectedThreats,\n    parseImportedData,\n    importData,\n  };\n};\n\nexport default useImportExport;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}