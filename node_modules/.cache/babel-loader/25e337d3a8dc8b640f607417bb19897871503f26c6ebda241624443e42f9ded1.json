{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiAlpha, asciiAlphanumeric, asciiControl, markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n};\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n};\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n};\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n};\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n};\nconst wwwAutolink = {\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n};\nconst protocolAutolink = {\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n};\nconst emailAutolink = {\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n};\n\n/** @type {ConstructRecord} */\nconst text = {};\n\n// To do: next major: expose functions that yields extension.\n\n/**\n * Extension for `micromark` that can be passed in `extensions` to enable GFM\n * autolink literal syntax.\n *\n * @type {Extension}\n */\nexport const gfmAutolinkLiteral = {\n  text\n};\n\n/** @type {Code} */\nlet code = 48;\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink;\n  code++;\n  if (code === 58) code = 65;else if (code === 91) code = 97;\n}\ntext[43] = emailAutolink;\ntext[45] = emailAutolink;\ntext[46] = emailAutolink;\ntext[95] = emailAutolink;\ntext[72] = [emailAutolink, protocolAutolink];\ntext[104] = [emailAutolink, protocolAutolink];\ntext[87] = [emailAutolink, wwwAutolink];\ntext[119] = [emailAutolink, wwwAutolink];\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this;\n  /** @type {boolean | undefined} */\n  let dot;\n  /** @type {boolean} */\n  let data;\n  return start;\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (!gfmAtext(code) || !previousEmail.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkEmail');\n    return atext(code);\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code);\n      return atext;\n    }\n    if (code === 64) {\n      effects.consume(code);\n      return emailDomain;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(emailDomainDotTrail, emailDomainAfter, emailDomainDot)(code);\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true;\n      effects.consume(code);\n      return emailDomain;\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code);\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code);\n    dot = true;\n    return emailDomain;\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail');\n      effects.exit('literalAutolink');\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this;\n  return wwwStart;\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (code !== 87 && code !== 119 || !previousWww.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkWww');\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(wwwPrefix, effects.attempt(domain, effects.attempt(path, wwwAfter), nok), nok)(code);\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this;\n  let buffer = '';\n  let seen = false;\n  return protocolStart;\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if ((code === 72 || code === 104) && previousProtocol.call(self, self.previous) && !previousUnbalanced(self.events)) {\n      effects.enter('literalAutolink');\n      effects.enter('literalAutolinkHttp');\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      // @ts-expect-error: definitely number.\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase();\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code);\n        return protocolSlashesInside;\n      }\n    }\n    return nok(code);\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code);\n      if (seen) {\n        return afterProtocol;\n      }\n      seen = true;\n      return protocolSlashesInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null || asciiControl(code) || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || unicodePunctuation(code) ? nok(code) : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code);\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0;\n  return wwwPrefixInside;\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++;\n      effects.consume(code);\n      return wwwPrefixInside;\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code);\n      return wwwPrefixAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code);\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment;\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment;\n  /** @type {boolean | undefined} */\n  let seen;\n  return domainInside;\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code);\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || code !== 45 && unicodePunctuation(code)) {\n      return domainAfter(code);\n    }\n    seen = true;\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true;\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment;\n      underscoreInLastSegment = undefined;\n    }\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code);\n    }\n    return ok(code);\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0;\n  let sizeClose = 0;\n  return pathInside;\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++;\n      effects.consume(code);\n      return pathInside;\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code);\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (code === 33 || code === 34 || code === 38 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 60 || code === 63 || code === 93 || code === 95 || code === 126) {\n      return effects.check(trail, ok, pathAtPunctuation)(code);\n    }\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++;\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail;\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (code === 33 || code === 34 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 63 || code === 95 || code === 126) {\n      effects.consume(code);\n      return trail;\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code);\n      return trailCharRefStart;\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code);\n      return trailBracketAfter;\n    }\n    if (\n    // `<` is an end.\n    code === 60 ||\n    // So is whitespace.\n    code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (code === null || code === 40 || code === 91 || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return trail(code);\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharRefStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharRefInside(code) : nok(code);\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharRefInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code);\n      return trail;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return trailCharRefInside;\n    }\n\n    // It’s not a trail.\n    return nok(code);\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start;\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code);\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return code === null || code === 40 || code === 42 || code === 95 || code === 91 || code === 93 || code === 126 || markdownLineEndingOrSpace(code);\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code);\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code));\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return code === 43 || code === 45 || code === 46 || code === 95 || asciiAlphanumeric(code);\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length;\n  let result = false;\n  while (index--) {\n    const token = events[index][1];\n    if ((token.type === 'labelLink' || token.type === 'labelImage') && !token._balanced) {\n      result = true;\n      break;\n    }\n\n    // If we’ve seen this token, and it was marked as not having any unbalanced\n    // bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false;\n      break;\n    }\n  }\n  if (events.length > 0 && !result) {\n    // Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true;\n  }\n  return result;\n}","map":{"version":3,"names":["asciiAlpha","asciiAlphanumeric","asciiControl","markdownLineEndingOrSpace","unicodePunctuation","unicodeWhitespace","wwwPrefix","tokenize","tokenizeWwwPrefix","partial","domain","tokenizeDomain","path","tokenizePath","trail","tokenizeTrail","emailDomainDotTrail","tokenizeEmailDomainDotTrail","wwwAutolink","tokenizeWwwAutolink","previous","previousWww","protocolAutolink","tokenizeProtocolAutolink","previousProtocol","emailAutolink","tokenizeEmailAutolink","previousEmail","text","gfmAutolinkLiteral","code","effects","ok","nok","self","dot","data","start","gfmAtext","call","previousUnbalanced","events","enter","atext","consume","emailDomain","check","emailDomainAfter","emailDomainDot","exit","wwwStart","attempt","wwwAfter","buffer","seen","protocolStart","String","fromCodePoint","protocolPrefixInside","length","protocol","toLowerCase","protocolSlashesInside","afterProtocol","protocolAfter","size","wwwPrefixInside","wwwPrefixAfter","underscoreInLastSegment","underscoreInLastLastSegment","domainInside","domainAfter","domainAtPunctuation","undefined","sizeOpen","sizeClose","pathInside","pathAtPunctuation","trailCharRefStart","trailBracketAfter","trailCharRefInside","after","index","result","token","type","_balanced","_gfmAutolinkLiteralWalkedInto"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/@aws-northstar/ui/node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiControl,\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n}\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n}\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n}\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n}\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n}\nconst wwwAutolink = {\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n}\nconst protocolAutolink = {\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n}\nconst emailAutolink = {\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n}\n\n/** @type {ConstructRecord} */\nconst text = {}\n\n// To do: next major: expose functions that yields extension.\n\n/**\n * Extension for `micromark` that can be passed in `extensions` to enable GFM\n * autolink literal syntax.\n *\n * @type {Extension}\n */\nexport const gfmAutolinkLiteral = {\n  text\n}\n\n/** @type {Code} */\nlet code = 48\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink\n  code++\n  if (code === 58) code = 65\n  else if (code === 91) code = 97\n}\ntext[43] = emailAutolink\ntext[45] = emailAutolink\ntext[46] = emailAutolink\ntext[95] = emailAutolink\ntext[72] = [emailAutolink, protocolAutolink]\ntext[104] = [emailAutolink, protocolAutolink]\ntext[87] = [emailAutolink, wwwAutolink]\ntext[119] = [emailAutolink, wwwAutolink]\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this\n  /** @type {boolean | undefined} */\n  let dot\n  /** @type {boolean} */\n  let data\n  return start\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (\n      !gfmAtext(code) ||\n      !previousEmail.call(self, self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkEmail')\n    return atext(code)\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code)\n      return atext\n    }\n    if (code === 64) {\n      effects.consume(code)\n      return emailDomain\n    }\n    return nok(code)\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(\n        emailDomainDotTrail,\n        emailDomainAfter,\n        emailDomainDot\n      )(code)\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true\n      effects.consume(code)\n      return emailDomain\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code)\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code)\n    dot = true\n    return emailDomain\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail')\n      effects.exit('literalAutolink')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this\n  return wwwStart\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (\n      (code !== 87 && code !== 119) ||\n      !previousWww.call(self, self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkWww')\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(\n      wwwPrefix,\n      effects.attempt(domain, effects.attempt(path, wwwAfter), nok),\n      nok\n    )(code)\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this\n  let buffer = ''\n  let seen = false\n  return protocolStart\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if (\n      (code === 72 || code === 104) &&\n      previousProtocol.call(self, self.previous) &&\n      !previousUnbalanced(self.events)\n    ) {\n      effects.enter('literalAutolink')\n      effects.enter('literalAutolinkHttp')\n      buffer += String.fromCodePoint(code)\n      effects.consume(code)\n      return protocolPrefixInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      // @ts-expect-error: definitely number.\n      buffer += String.fromCodePoint(code)\n      effects.consume(code)\n      return protocolPrefixInside\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase()\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code)\n        return protocolSlashesInside\n      }\n    }\n    return nok(code)\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code)\n      if (seen) {\n        return afterProtocol\n      }\n      seen = true\n      return protocolSlashesInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null ||\n      asciiControl(code) ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)\n      ? nok(code)\n      : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code)\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0\n  return wwwPrefixInside\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++\n      effects.consume(code)\n      return wwwPrefixInside\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code)\n      return wwwPrefixAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code)\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment\n  /** @type {boolean | undefined} */\n  let seen\n  return domainInside\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code)\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code) ||\n      (code !== 45 && unicodePunctuation(code))\n    ) {\n      return domainAfter(code)\n    }\n    seen = true\n    effects.consume(code)\n    return domainInside\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment\n      underscoreInLastSegment = undefined\n    }\n    effects.consume(code)\n    return domainInside\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code)\n    }\n    return ok(code)\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0\n  let sizeClose = 0\n  return pathInside\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++\n      effects.consume(code)\n      return pathInside\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code)\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (\n      code === 33 ||\n      code === 34 ||\n      code === 38 ||\n      code === 39 ||\n      code === 41 ||\n      code === 42 ||\n      code === 44 ||\n      code === 46 ||\n      code === 58 ||\n      code === 59 ||\n      code === 60 ||\n      code === 63 ||\n      code === 93 ||\n      code === 95 ||\n      code === 126\n    ) {\n      return effects.check(trail, ok, pathAtPunctuation)(code)\n    }\n    if (\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    effects.consume(code)\n    return pathInside\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++\n    }\n    effects.consume(code)\n    return pathInside\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (\n      code === 33 ||\n      code === 34 ||\n      code === 39 ||\n      code === 41 ||\n      code === 42 ||\n      code === 44 ||\n      code === 46 ||\n      code === 58 ||\n      code === 59 ||\n      code === 63 ||\n      code === 95 ||\n      code === 126\n    ) {\n      effects.consume(code)\n      return trail\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code)\n      return trailCharRefStart\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code)\n      return trailBracketAfter\n    }\n    if (\n      // `<` is an end.\n      code === 60 ||\n      // So is whitespace.\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (\n      code === null ||\n      code === 40 ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    return trail(code)\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharRefStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharRefInside(code) : nok(code)\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharRefInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code)\n      return trail\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return trailCharRefInside\n    }\n\n    // It’s not a trail.\n    return nok(code)\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code)\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return (\n    code === null ||\n    code === 40 ||\n    code === 42 ||\n    code === 95 ||\n    code === 91 ||\n    code === 93 ||\n    code === 126 ||\n    markdownLineEndingOrSpace(code)\n  )\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code)\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code))\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return (\n    code === 43 ||\n    code === 45 ||\n    code === 46 ||\n    code === 95 ||\n    asciiAlphanumeric(code)\n  )\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length\n  let result = false\n  while (index--) {\n    const token = events[index][1]\n    if (\n      (token.type === 'labelLink' || token.type === 'labelImage') &&\n      !token._balanced\n    ) {\n      result = true\n      break\n    }\n\n    // If we’ve seen this token, and it was marked as not having any unbalanced\n    // bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false\n      break\n    }\n  }\n  if (events.length > 0 && !result) {\n    // Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true\n  }\n  return result\n}\n"],"mappings":"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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASiD,iBAAiBA,CAACjD,IAAI,EAAE;IAC/B;IACA;IACA,IACEA,IAAI,KAAK,IAAI,IACbA,IAAI,KAAK,EAAE,IACXA,IAAI,KAAK,EAAE,IACX3B,yBAAyB,CAAC2B,IAAI,CAAC,IAC/BzB,iBAAiB,CAACyB,IAAI,CAAC,EACvB;MACA,OAAOE,EAAE,CAACF,IAAI,CAAC;IACjB;IACA,OAAOhB,KAAK,CAACgB,IAAI,CAAC;EACpB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASgD,iBAAiBA,CAAChD,IAAI,EAAE;IAC/B;IACA,OAAO9B,UAAU,CAAC8B,IAAI,CAAC,GAAGkD,kBAAkB,CAAClD,IAAI,CAAC,GAAGG,GAAG,CAACH,IAAI,CAAC;EAChE;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASkD,kBAAkBA,CAAClD,IAAI,EAAE;IAChC;IACA,IAAIA,IAAI,KAAK,EAAE,EAAE;MACfC,OAAO,CAACa,OAAO,CAACd,IAAI,CAAC;MACrB,OAAOhB,KAAK;IACd;IACA,IAAId,UAAU,CAAC8B,IAAI,CAAC,EAAE;MACpBC,OAAO,CAACa,OAAO,CAACd,IAAI,CAAC;MACrB,OAAOkD,kBAAkB;IAC3B;;IAEA;IACA,OAAO/C,GAAG,CAACH,IAAI,CAAC;EAClB;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASb,2BAA2BA,CAACc,OAAO,EAAEC,EAAE,EAAEC,GAAG,EAAE;EACrD,OAAOI,KAAK;;EAEZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASA,KAAKA,CAACP,IAAI,EAAE;IACnB;IACAC,OAAO,CAACa,OAAO,CAACd,IAAI,CAAC;IACrB,OAAOmD,KAAK;EACd;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASA,KAAKA,CAACnD,IAAI,EAAE;IACnB;IACA,OAAO7B,iBAAiB,CAAC6B,IAAI,CAAC,GAAGG,GAAG,CAACH,IAAI,CAAC,GAAGE,EAAE,CAACF,IAAI,CAAC;EACvD;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAST,WAAWA,CAACS,IAAI,EAAE;EACzB,OACEA,IAAI,KAAK,IAAI,IACbA,IAAI,KAAK,EAAE,IACXA,IAAI,KAAK,EAAE,IACXA,IAAI,KAAK,EAAE,IACXA,IAAI,KAAK,EAAE,IACXA,IAAI,KAAK,EAAE,IACXA,IAAI,KAAK,GAAG,IACZ3B,yBAAyB,CAAC2B,IAAI,CAAC;AAEnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASN,gBAAgBA,CAACM,IAAI,EAAE;EAC9B,OAAO,CAAC9B,UAAU,CAAC8B,IAAI,CAAC;AAC1B;;AAEA;AACA;AACA;AACA;AACA,SAASH,aAAaA,CAACG,IAAI,EAAE;EAC3B;EACA;EACA;EACA;EACA,OAAO,EAAEA,IAAI,KAAK,EAAE,IAAIQ,QAAQ,CAACR,IAAI,CAAC,CAAC;AACzC;;AAEA;AACA;AACA;AACA;AACA,SAASQ,QAAQA,CAACR,IAAI,EAAE;EACtB,OACEA,IAAI,KAAK,EAAE,IACXA,IAAI,KAAK,EAAE,IACXA,IAAI,KAAK,EAAE,IACXA,IAAI,KAAK,EAAE,IACX7B,iBAAiB,CAAC6B,IAAI,CAAC;AAE3B;;AAEA;AACA;AACA;AACA;AACA,SAASU,kBAAkBA,CAACC,MAAM,EAAE;EAClC,IAAIyC,KAAK,GAAGzC,MAAM,CAACkB,MAAM;EACzB,IAAIwB,MAAM,GAAG,KAAK;EAClB,OAAOD,KAAK,EAAE,EAAE;IACd,MAAME,KAAK,GAAG3C,MAAM,CAACyC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC9B,IACE,CAACE,KAAK,CAACC,IAAI,KAAK,WAAW,IAAID,KAAK,CAACC,IAAI,KAAK,YAAY,KAC1D,CAACD,KAAK,CAACE,SAAS,EAChB;MACAH,MAAM,GAAG,IAAI;MACb;IACF;;IAEA;IACA;IACA,IAAIC,KAAK,CAACG,6BAA6B,EAAE;MACvCJ,MAAM,GAAG,KAAK;MACd;IACF;EACF;EACA,IAAI1C,MAAM,CAACkB,MAAM,GAAG,CAAC,IAAI,CAACwB,MAAM,EAAE;IAChC;IACA;IACA1C,MAAM,CAACA,MAAM,CAACkB,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC4B,6BAA6B,GAAG,IAAI;EACnE;EACA,OAAOJ,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}