{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\nimport { getBaseProps } from '../internal/base-component';\nimport Filter from '../internal/components/chart-filter';\nimport ChartStatusContainer, { getChartStatus } from '../internal/components/chart-status-container';\nimport { ChartWrapper } from '../internal/components/chart-wrapper';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { useControllable } from '../internal/hooks/use-controllable';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { usePrevious } from '../internal/hooks/use-previous';\nimport { isDevelopment } from '../internal/is-development';\nimport createCategoryColorScale from '../internal/utils/create-category-color-scale';\nimport { nodeBelongs } from '../internal/utils/node-belongs';\nimport ChartContainer from './chart-container';\nimport InternalChartLegend from './chart-legend';\nimport { chartLegendMap, isXThreshold, isYThreshold } from './utils';\nimport styles from './styles.css.js';\nexport default function InternalMixedLineBarChart(_a) {\n  var {\n      fitHeight,\n      height,\n      xScaleType,\n      yScaleType,\n      xDomain,\n      yDomain,\n      xTickFormatter,\n      yTickFormatter,\n      highlightedSeries: controlledHighlightedSeries,\n      visibleSeries: controlledVisibleSeries,\n      series: externalSeries,\n      onFilterChange,\n      onHighlightChange: controlledOnHighlightChange,\n      i18nStrings,\n      ariaLabel,\n      ariaLabelledby,\n      ariaDescription,\n      xTitle,\n      yTitle,\n      stackedBars,\n      horizontalBars,\n      hideFilter,\n      additionalFilters,\n      hideLegend,\n      legendTitle,\n      statusType,\n      detailPopoverSize,\n      detailPopoverFooter,\n      detailPopoverSeriesContent,\n      emphasizeBaselineAxis,\n      empty,\n      noMatch,\n      errorText,\n      loadingText,\n      recoveryText,\n      onRecoveryClick,\n      __internalRootRef = null\n    } = _a,\n    props = __rest(_a, [\"fitHeight\", \"height\", \"xScaleType\", \"yScaleType\", \"xDomain\", \"yDomain\", \"xTickFormatter\", \"yTickFormatter\", \"highlightedSeries\", \"visibleSeries\", \"series\", \"onFilterChange\", \"onHighlightChange\", \"i18nStrings\", \"ariaLabel\", \"ariaLabelledby\", \"ariaDescription\", \"xTitle\", \"yTitle\", \"stackedBars\", \"horizontalBars\", \"hideFilter\", \"additionalFilters\", \"hideLegend\", \"legendTitle\", \"statusType\", \"detailPopoverSize\", \"detailPopoverFooter\", \"detailPopoverSeriesContent\", \"emphasizeBaselineAxis\", \"empty\", \"noMatch\", \"errorText\", \"loadingText\", \"recoveryText\", \"onRecoveryClick\", \"__internalRootRef\"]);\n  const baseProps = getBaseProps(props);\n  const containerRef = useRef(null);\n  useEffect(() => {\n    const gotBarSeries = externalSeries.some(s => s.type === 'bar');\n    const gotLineSeries = externalSeries.some(s => s.type === 'line');\n    if (xScaleType !== 'categorical' && gotBarSeries) {\n      warnOnce('MixedLineBarChart', `Bar series cannot be used with a ${xScaleType} scale. Use a categorical x axis instead.`);\n    }\n    if (horizontalBars && gotLineSeries) {\n      warnOnce('MixedLineBarChart', `Property horizontalBars can only be used with charts that contain only bar or threshold series.`);\n    }\n    for (const s of externalSeries) {\n      if (s.type === 'threshold' && s.x !== undefined && s.y !== undefined) {\n        warnOnce('MixedLineBarChart', `Series of type \"threshold\" must contain either x or y property.`);\n      }\n      if (s.type === 'threshold' && s.x === undefined && s.y === undefined) {\n        warnOnce('MixedLineBarChart', `Series of type \"threshold\" must contain either x or y property.`);\n      }\n    }\n  }, [xScaleType, horizontalBars, externalSeries]);\n  const series = useMemo(() => {\n    // Generate series colors if not explicitly provided.\n    // The thresholds use a dedicated colour scale.\n    const colors = createCategoryColorScale(externalSeries, it => isYThreshold(it) || isXThreshold(it), it => it.color || null);\n    return externalSeries.map((s, i) => ({\n      index: i,\n      color: colors[i],\n      series: s\n    }));\n  }, [externalSeries]);\n  const [highlightedPoint, setHighlightedPoint] = useState(null);\n  const [highlightedGroupIndex, setHighlightedGroupIndex] = useState(null);\n  const [highlightedSeries = null, setHighlightedSeries] = useControllable(controlledHighlightedSeries, controlledOnHighlightChange, null, {\n    componentName: 'MixedLineBarChart',\n    controlledProp: 'highlightedSeries',\n    changeHandler: 'onHighlightChange'\n  });\n  const [legendSeries, setLegendSeries] = useState(highlightedSeries);\n  useEffect(() => {\n    setLegendSeries(controlledHighlightedSeries || null);\n  }, [controlledHighlightedSeries]);\n  const [externalVisibleSeries, setExternalVisibleSeries] = useControllable(controlledVisibleSeries, onFilterChange, externalSeries, {\n    componentName: 'MixedLineBarChart',\n    controlledProp: 'visibleSeries',\n    changeHandler: 'onFilterChange'\n  });\n  if (isDevelopment) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const previousSeries = usePrevious(externalSeries);\n    const hasPrevious = !!(previousSeries && previousSeries.length);\n    const hasCurrent = !!externalSeries.length;\n    if (hasPrevious && hasCurrent && externalSeries !== previousSeries && !controlledVisibleSeries && !hideFilter) {\n      warnOnce('MixedLineBarChart', 'The `series` value passed into the component changed. ' + 'This may cause problems with filtering - we recommend that you make the `series` value constant, ' + 'or provide a `visibleSeries` value that derives from the current `series` value.');\n    }\n  }\n  const visibleSeries = useMemo(() => series.filter(s => (externalVisibleSeries === null || externalVisibleSeries === void 0 ? void 0 : externalVisibleSeries.indexOf(s.series)) !== -1), [series, externalVisibleSeries]);\n  const filterChange = selectedSeries => {\n    setExternalVisibleSeries(selectedSeries);\n    fireNonCancelableEvent(onFilterChange, {\n      visibleSeries: selectedSeries\n    });\n  };\n  const onHighlightChange = series => {\n    setHighlightedSeries(series);\n    fireNonCancelableEvent(controlledOnHighlightChange, {\n      highlightedSeries: series\n    });\n    setLegendSeries(series);\n  };\n  const onBlur = event => {\n    if (event.relatedTarget && !nodeBelongs(containerRef.current, event.relatedTarget)) {\n      highlightedSeries && onHighlightChange(highlightedSeries);\n      setHighlightedPoint(null);\n      setHighlightedGroupIndex(null);\n      setLegendSeries(null);\n    }\n  };\n  const {\n    isEmpty,\n    isNoMatch,\n    showChart\n  } = getChartStatus({\n    externalData: externalSeries,\n    visibleData: visibleSeries || [],\n    statusType\n  });\n  const showFilters = statusType === 'finished' && (!isEmpty || isNoMatch) && (additionalFilters || !hideFilter);\n  const showLegend = !hideLegend && !isEmpty && statusType === 'finished';\n  const reserveLegendSpace = !showChart && !hideLegend;\n  const reserveFilterSpace = !showChart && !isNoMatch && (!hideFilter || additionalFilters);\n  const mergedRef = useMergeRefs(containerRef, __internalRootRef);\n  const filterItems = series.map(_ref => {\n    let {\n      series,\n      color\n    } = _ref;\n    return {\n      label: series.title,\n      type: chartLegendMap[series.type],\n      color,\n      datum: series\n    };\n  });\n  return React.createElement(ChartWrapper, Object.assign({\n    ref: mergedRef\n  }, baseProps, {\n    className: clsx(baseProps.className, styles.root),\n    fitHeight: !!fitHeight,\n    contentMinHeight: height,\n    defaultFilter: showFilters && !hideFilter ? React.createElement(Filter, {\n      series: filterItems,\n      onChange: filterChange,\n      selectedSeries: externalVisibleSeries || [],\n      i18nStrings: i18nStrings\n    }) : null,\n    additionalFilters: showFilters ? additionalFilters : null,\n    reserveFilterSpace: !!reserveFilterSpace,\n    reserveLegendSpace: !!reserveLegendSpace,\n    chartStatus: React.createElement(ChartStatusContainer, {\n      isEmpty: isEmpty,\n      isNoMatch: isNoMatch,\n      showChart: showChart,\n      statusType: statusType,\n      empty: empty,\n      noMatch: noMatch,\n      loadingText: loadingText,\n      errorText: errorText,\n      recoveryText: recoveryText,\n      onRecoveryClick: onRecoveryClick\n    }),\n    chart: showChart ? React.createElement(ChartContainer, {\n      fitHeight: fitHeight,\n      hasFilters: !!showFilters,\n      height: height,\n      xScaleType: xScaleType,\n      yScaleType: yScaleType,\n      xDomain: xDomain,\n      yDomain: yDomain,\n      xTickFormatter: xTickFormatter !== null && xTickFormatter !== void 0 ? xTickFormatter : i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.xTickFormatter,\n      yTickFormatter: yTickFormatter !== null && yTickFormatter !== void 0 ? yTickFormatter : i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.yTickFormatter,\n      emphasizeBaselineAxis: emphasizeBaselineAxis,\n      stackedBars: stackedBars,\n      horizontalBars: horizontalBars,\n      series: series,\n      visibleSeries: visibleSeries,\n      highlightedSeries: highlightedSeries,\n      onHighlightChange: onHighlightChange,\n      highlightedPoint: highlightedPoint,\n      setHighlightedPoint: setHighlightedPoint,\n      highlightedGroupIndex: highlightedGroupIndex,\n      setHighlightedGroupIndex: setHighlightedGroupIndex,\n      detailPopoverSize: detailPopoverSize,\n      detailPopoverFooter: detailPopoverFooter,\n      detailPopoverSeriesContent: detailPopoverSeriesContent,\n      xTitle: xTitle,\n      yTitle: yTitle,\n      ariaLabel: ariaLabel,\n      ariaLabelledby: ariaLabelledby,\n      ariaDescription: ariaDescription,\n      i18nStrings: i18nStrings\n    }) : null,\n    legend: showLegend ? React.createElement(InternalChartLegend, {\n      series: series,\n      visibleSeries: externalVisibleSeries || [],\n      highlightedSeries: legendSeries,\n      onHighlightChange: onHighlightChange,\n      legendTitle: legendTitle,\n      ariaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.legendAriaLabel,\n      plotContainerRef: containerRef\n    }) : null,\n    onBlur: onBlur\n  }));\n}","map":{"version":3,"names":["React","useEffect","useMemo","useRef","useState","clsx","warnOnce","getBaseProps","Filter","ChartStatusContainer","getChartStatus","ChartWrapper","fireNonCancelableEvent","useControllable","useMergeRefs","usePrevious","isDevelopment","createCategoryColorScale","nodeBelongs","ChartContainer","InternalChartLegend","chartLegendMap","isXThreshold","isYThreshold","styles","InternalMixedLineBarChart","_a","fitHeight","height","xScaleType","yScaleType","xDomain","yDomain","xTickFormatter","yTickFormatter","highlightedSeries","controlledHighlightedSeries","visibleSeries","controlledVisibleSeries","series","externalSeries","onFilterChange","onHighlightChange","controlledOnHighlightChange","i18nStrings","ariaLabel","ariaLabelledby","ariaDescription","xTitle","yTitle","stackedBars","horizontalBars","hideFilter","additionalFilters","hideLegend","legendTitle","statusType","detailPopoverSize","detailPopoverFooter","detailPopoverSeriesContent","emphasizeBaselineAxis","empty","noMatch","errorText","loadingText","recoveryText","onRecoveryClick","__internalRootRef","props","__rest","baseProps","containerRef","gotBarSeries","some","s","type","gotLineSeries","x","undefined","y","colors","it","color","map","i","index","highlightedPoint","setHighlightedPoint","highlightedGroupIndex","setHighlightedGroupIndex","setHighlightedSeries","componentName","controlledProp","changeHandler","legendSeries","setLegendSeries","externalVisibleSeries","setExternalVisibleSeries","previousSeries","hasPrevious","length","hasCurrent","filter","indexOf","filterChange","selectedSeries","onBlur","event","relatedTarget","current","isEmpty","isNoMatch","showChart","externalData","visibleData","showFilters","showLegend","reserveLegendSpace","reserveFilterSpace","mergedRef","filterItems","_ref","label","title","datum","createElement","Object","assign","ref","className","root","contentMinHeight","defaultFilter","onChange","chartStatus","chart","hasFilters","legend","legendAriaLabel","plotContainerRef"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/mixed-line-bar-chart/internal.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport clsx from 'clsx';\n\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\n\nimport { getBaseProps } from '../internal/base-component';\nimport Filter from '../internal/components/chart-filter';\nimport ChartStatusContainer, { getChartStatus } from '../internal/components/chart-status-container';\nimport { ChartWrapper } from '../internal/components/chart-wrapper';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { InternalBaseComponentProps } from '../internal/hooks/use-base-component';\nimport { useControllable } from '../internal/hooks/use-controllable';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { usePrevious } from '../internal/hooks/use-previous';\nimport { isDevelopment } from '../internal/is-development';\nimport { SomeRequired } from '../internal/types';\nimport createCategoryColorScale from '../internal/utils/create-category-color-scale';\nimport { nodeBelongs } from '../internal/utils/node-belongs';\nimport ChartContainer from './chart-container';\nimport InternalChartLegend from './chart-legend';\nimport { ChartDataTypes, MixedLineBarChartProps } from './interfaces';\nimport { ScaledPoint } from './make-scaled-series';\nimport { chartLegendMap, isXThreshold, isYThreshold } from './utils';\n\nimport styles from './styles.css.js';\n\ntype InternalMixedLineBarChartProps<T extends ChartDataTypes> = SomeRequired<\n  MixedLineBarChartProps<T>,\n  | 'series'\n  | 'height'\n  | 'xScaleType'\n  | 'yScaleType'\n  | 'stackedBars'\n  | 'horizontalBars'\n  | 'statusType'\n  | 'detailPopoverSize'\n  | 'emphasizeBaselineAxis'\n> &\n  InternalBaseComponentProps;\n\nexport default function InternalMixedLineBarChart<T extends number | string | Date>({\n  fitHeight,\n  height,\n  xScaleType,\n  yScaleType,\n  xDomain,\n  yDomain,\n  xTickFormatter,\n  yTickFormatter,\n  highlightedSeries: controlledHighlightedSeries,\n  visibleSeries: controlledVisibleSeries,\n  series: externalSeries,\n  onFilterChange,\n  onHighlightChange: controlledOnHighlightChange,\n  i18nStrings,\n  ariaLabel,\n  ariaLabelledby,\n  ariaDescription,\n  xTitle,\n  yTitle,\n  stackedBars,\n  horizontalBars,\n  hideFilter,\n  additionalFilters,\n  hideLegend,\n  legendTitle,\n  statusType,\n  detailPopoverSize,\n  detailPopoverFooter,\n  detailPopoverSeriesContent,\n  emphasizeBaselineAxis,\n  empty,\n  noMatch,\n  errorText,\n  loadingText,\n  recoveryText,\n  onRecoveryClick,\n  __internalRootRef = null,\n  ...props\n}: InternalMixedLineBarChartProps<T>) {\n  const baseProps = getBaseProps(props);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const gotBarSeries = externalSeries.some(s => s.type === 'bar');\n    const gotLineSeries = externalSeries.some(s => s.type === 'line');\n\n    if (xScaleType !== 'categorical' && gotBarSeries) {\n      warnOnce(\n        'MixedLineBarChart',\n        `Bar series cannot be used with a ${xScaleType} scale. Use a categorical x axis instead.`\n      );\n    }\n\n    if (horizontalBars && gotLineSeries) {\n      warnOnce(\n        'MixedLineBarChart',\n        `Property horizontalBars can only be used with charts that contain only bar or threshold series.`\n      );\n    }\n\n    for (const s of externalSeries) {\n      if (s.type === 'threshold' && s.x !== undefined && s.y !== undefined) {\n        warnOnce('MixedLineBarChart', `Series of type \"threshold\" must contain either x or y property.`);\n      }\n      if (s.type === 'threshold' && s.x === undefined && s.y === undefined) {\n        warnOnce('MixedLineBarChart', `Series of type \"threshold\" must contain either x or y property.`);\n      }\n    }\n  }, [xScaleType, horizontalBars, externalSeries]);\n\n  const series = useMemo(() => {\n    // Generate series colors if not explicitly provided.\n    // The thresholds use a dedicated colour scale.\n    const colors = createCategoryColorScale(\n      externalSeries,\n      it => isYThreshold(it) || isXThreshold(it),\n      it => it.color || null\n    );\n\n    return externalSeries.map((s, i) => ({ index: i, color: colors[i], series: s }));\n  }, [externalSeries]);\n\n  const [highlightedPoint, setHighlightedPoint] = useState<ScaledPoint<T> | null>(null);\n  const [highlightedGroupIndex, setHighlightedGroupIndex] = useState<number | null>(null);\n  const [highlightedSeries = null, setHighlightedSeries] = useControllable(\n    controlledHighlightedSeries,\n    controlledOnHighlightChange,\n    null,\n    {\n      componentName: 'MixedLineBarChart',\n      controlledProp: 'highlightedSeries',\n      changeHandler: 'onHighlightChange',\n    }\n  );\n  const [legendSeries, setLegendSeries] = useState<MixedLineBarChartProps.ChartSeries<T> | null>(highlightedSeries);\n  useEffect(() => {\n    setLegendSeries(controlledHighlightedSeries || null);\n  }, [controlledHighlightedSeries]);\n\n  const [externalVisibleSeries, setExternalVisibleSeries] = useControllable(\n    controlledVisibleSeries,\n    onFilterChange,\n    externalSeries,\n    {\n      componentName: 'MixedLineBarChart',\n      controlledProp: 'visibleSeries',\n      changeHandler: 'onFilterChange',\n    }\n  );\n\n  if (isDevelopment) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const previousSeries = usePrevious(externalSeries);\n\n    const hasPrevious = !!(previousSeries && previousSeries.length);\n    const hasCurrent = !!externalSeries.length;\n\n    if (hasPrevious && hasCurrent && externalSeries !== previousSeries && !controlledVisibleSeries && !hideFilter) {\n      warnOnce(\n        'MixedLineBarChart',\n        'The `series` value passed into the component changed. ' +\n          'This may cause problems with filtering - we recommend that you make the `series` value constant, ' +\n          'or provide a `visibleSeries` value that derives from the current `series` value.'\n      );\n    }\n  }\n\n  const visibleSeries = useMemo(\n    () => series.filter(s => externalVisibleSeries?.indexOf(s.series) !== -1),\n    [series, externalVisibleSeries]\n  );\n\n  const filterChange = (selectedSeries: ReadonlyArray<MixedLineBarChartProps.ChartSeries<T>>) => {\n    setExternalVisibleSeries(selectedSeries);\n    fireNonCancelableEvent(onFilterChange, {\n      visibleSeries: selectedSeries,\n    });\n  };\n\n  const onHighlightChange = (series: MixedLineBarChartProps.ChartSeries<T> | null) => {\n    setHighlightedSeries(series);\n    fireNonCancelableEvent(controlledOnHighlightChange, {\n      highlightedSeries: series,\n    });\n    setLegendSeries(series);\n  };\n\n  const onBlur = (event: React.FocusEvent) => {\n    if (event.relatedTarget && !nodeBelongs(containerRef.current, event.relatedTarget)) {\n      highlightedSeries && onHighlightChange(highlightedSeries);\n      setHighlightedPoint(null);\n      setHighlightedGroupIndex(null);\n      setLegendSeries(null);\n    }\n  };\n\n  const { isEmpty, isNoMatch, showChart } = getChartStatus({\n    externalData: externalSeries,\n    visibleData: visibleSeries || [],\n    statusType,\n  });\n  const showFilters = statusType === 'finished' && (!isEmpty || isNoMatch) && (additionalFilters || !hideFilter);\n  const showLegend = !hideLegend && !isEmpty && statusType === 'finished';\n  const reserveLegendSpace = !showChart && !hideLegend;\n  const reserveFilterSpace = !showChart && !isNoMatch && (!hideFilter || additionalFilters);\n  const mergedRef = useMergeRefs(containerRef, __internalRootRef);\n\n  const filterItems = series.map(({ series, color }) => ({\n    label: series.title,\n    type: chartLegendMap[series.type],\n    color,\n    datum: series,\n  }));\n\n  return (\n    <ChartWrapper\n      ref={mergedRef}\n      {...baseProps}\n      className={clsx(baseProps.className, styles.root)}\n      fitHeight={!!fitHeight}\n      contentMinHeight={height}\n      defaultFilter={\n        showFilters && !hideFilter ? (\n          <Filter\n            series={filterItems}\n            onChange={filterChange}\n            selectedSeries={externalVisibleSeries || []}\n            i18nStrings={i18nStrings}\n          />\n        ) : null\n      }\n      additionalFilters={showFilters ? additionalFilters : null}\n      reserveFilterSpace={!!reserveFilterSpace}\n      reserveLegendSpace={!!reserveLegendSpace}\n      chartStatus={\n        <ChartStatusContainer\n          isEmpty={isEmpty}\n          isNoMatch={isNoMatch}\n          showChart={showChart}\n          statusType={statusType}\n          empty={empty}\n          noMatch={noMatch}\n          loadingText={loadingText}\n          errorText={errorText}\n          recoveryText={recoveryText}\n          onRecoveryClick={onRecoveryClick}\n        />\n      }\n      chart={\n        showChart ? (\n          <ChartContainer\n            fitHeight={fitHeight}\n            hasFilters={!!showFilters}\n            height={height}\n            xScaleType={xScaleType}\n            yScaleType={yScaleType}\n            xDomain={xDomain}\n            yDomain={yDomain}\n            xTickFormatter={xTickFormatter ?? i18nStrings?.xTickFormatter}\n            yTickFormatter={yTickFormatter ?? i18nStrings?.yTickFormatter}\n            emphasizeBaselineAxis={emphasizeBaselineAxis}\n            stackedBars={stackedBars}\n            horizontalBars={horizontalBars}\n            series={series}\n            visibleSeries={visibleSeries}\n            highlightedSeries={highlightedSeries}\n            onHighlightChange={onHighlightChange}\n            highlightedPoint={highlightedPoint}\n            setHighlightedPoint={setHighlightedPoint}\n            highlightedGroupIndex={highlightedGroupIndex}\n            setHighlightedGroupIndex={setHighlightedGroupIndex}\n            detailPopoverSize={detailPopoverSize}\n            detailPopoverFooter={detailPopoverFooter}\n            detailPopoverSeriesContent={detailPopoverSeriesContent}\n            xTitle={xTitle}\n            yTitle={yTitle}\n            ariaLabel={ariaLabel}\n            ariaLabelledby={ariaLabelledby}\n            ariaDescription={ariaDescription}\n            i18nStrings={i18nStrings}\n          />\n        ) : null\n      }\n      legend={\n        showLegend ? (\n          <InternalChartLegend\n            series={series}\n            visibleSeries={externalVisibleSeries || []}\n            highlightedSeries={legendSeries}\n            onHighlightChange={onHighlightChange}\n            legendTitle={legendTitle}\n            ariaLabel={i18nStrings?.legendAriaLabel}\n            plotContainerRef={containerRef}\n          />\n        ) : null\n      }\n      onBlur={onBlur}\n    />\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}