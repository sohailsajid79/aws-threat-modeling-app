{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { useInternalI18n } from '../../i18n/context';\nimport Icon from '../../icon/internal';\nimport LiveRegion from '../../internal/components/live-region/index.js';\nimport { useSingleTabStopNavigation } from '../../internal/context/single-tab-stop-navigation-context.js';\nimport { usePrevious } from '../../internal/hooks/use-previous';\nimport { DisabledInlineEditor } from './disabled-inline-editor';\nimport { InlineEditor } from './inline-editor';\nimport { TableTdElement } from './td-element';\nimport styles from './styles.css.js';\nconst submitHandlerFallback = () => {\n  throw new Error('The function `handleSubmit` is required for editable columns');\n};\nfunction TableCellEditable(_a) {\n  var _b, _c, _d;\n  var {\n      className,\n      item,\n      column,\n      isEditing,\n      onEditStart,\n      onEditEnd,\n      submitEdit,\n      ariaLabels,\n      isVisualRefresh,\n      resizableColumns = false,\n      successfulEdit = false,\n      interactiveCell = true\n    } = _a,\n    rest = __rest(_a, [\"className\", \"item\", \"column\", \"isEditing\", \"onEditStart\", \"onEditEnd\", \"submitEdit\", \"ariaLabels\", \"isVisualRefresh\", \"resizableColumns\", \"successfulEdit\", \"interactiveCell\"]);\n  const i18n = useInternalI18n('table');\n  const editActivateRef = useRef(null);\n  const tdNativeAttributes = {\n    'data-inline-editing-active': isEditing.toString()\n  };\n  const isFocusMoveNeededRef = useRef(false);\n  useEffect(() => {\n    if (!isEditing && editActivateRef.current && isFocusMoveNeededRef.current) {\n      isFocusMoveNeededRef.current = false;\n      editActivateRef.current.focus();\n    }\n  }, [isEditing]);\n  // To improve the initial page render performance we only show the edit icon when necessary.\n  const [hasHover, setHasHover] = useState(false);\n  const [hasFocus, setHasFocus] = useState(false);\n  // When a cell is both expandable and editable the icon is always shown.\n  const showIcon = hasHover || hasFocus || !interactiveCell;\n  const prevSuccessfulEdit = usePrevious(successfulEdit);\n  const prevHasFocus = usePrevious(hasFocus);\n  const [showSuccessIcon, setShowSuccessIcon] = useState(false);\n  useEffect(() => {\n    // Hide the success icon after a successful edit, when cell loses focus.\n    if (successfulEdit && prevSuccessfulEdit && !hasFocus && prevHasFocus) {\n      setShowSuccessIcon(false);\n    }\n    // Show success icon right after a successful edit, when `successfulEdit` switches to true.\n    if (successfulEdit && !prevSuccessfulEdit) {\n      setShowSuccessIcon(true);\n    }\n  }, [hasFocus, successfulEdit, prevHasFocus, prevSuccessfulEdit]);\n  const {\n    tabIndex: editActivateTabIndex\n  } = useSingleTabStopNavigation(editActivateRef);\n  return React.createElement(TableTdElement, Object.assign({}, rest, {\n    nativeAttributes: tdNativeAttributes,\n    className: clsx(className, styles['body-cell-editable'], interactiveCell && styles['body-cell-interactive'], resizableColumns && styles['resizable-columns'], isEditing && styles['body-cell-edit-active'], showSuccessIcon && showIcon && styles['body-cell-has-success'], isVisualRefresh && styles['is-visual-refresh']),\n    onClick: interactiveCell && !isEditing ? onEditStart : undefined,\n    onMouseEnter: () => setHasHover(true),\n    onMouseLeave: () => setHasHover(false)\n  }), isEditing ? React.createElement(InlineEditor, {\n    ariaLabels: ariaLabels,\n    column: column,\n    item: item,\n    onEditEnd: options => {\n      setShowSuccessIcon(false);\n      isFocusMoveNeededRef.current = options.refocusCell;\n      onEditEnd(options.cancelled);\n    },\n    submitEdit: submitEdit !== null && submitEdit !== void 0 ? submitEdit : submitHandlerFallback\n  }) : React.createElement(React.Fragment, null, column.cell(item), showSuccessIcon && showIcon && React.createElement(React.Fragment, null, React.createElement(\"span\", {\n    className: styles['body-cell-success'],\n    \"aria-label\": (_b = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.successfulEditLabel) === null || _b === void 0 ? void 0 : _b.call(ariaLabels, column),\n    role: \"img\",\n    onMouseDown: e => {\n      // Prevent the editor's Button blur event to be fired when clicking the success icon.\n      // This prevents unfocusing the button and triggers the `TableTdElement` onClick event which initiates the edit mode.\n      e.preventDefault();\n    }\n  }, React.createElement(Icon, {\n    name: \"status-positive\",\n    variant: \"success\"\n  })), React.createElement(LiveRegion, null, i18n('ariaLabels.successfulEditLabel', (_c = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.successfulEditLabel) === null || _c === void 0 ? void 0 : _c.call(ariaLabels, column)))), React.createElement(\"div\", {\n    className: styles['body-cell-editor-wrapper']\n  }, React.createElement(\"button\", {\n    className: styles['body-cell-editor'],\n    \"aria-label\": (_d = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.activateEditLabel) === null || _d === void 0 ? void 0 : _d.call(ariaLabels, column, item),\n    ref: editActivateRef,\n    onClick: !interactiveCell && !isEditing ? onEditStart : undefined,\n    onFocus: () => setHasFocus(true),\n    onBlur: () => setHasFocus(false),\n    tabIndex: editActivateTabIndex\n  }, showIcon && React.createElement(Icon, {\n    name: \"edit\"\n  })))));\n}\nexport function TableBodyCell(_a) {\n  var _b, _c;\n  var {\n      isEditable\n    } = _a,\n    rest = __rest(_a, [\"isEditable\"]);\n  const isExpandableColumnCell = rest.level !== undefined;\n  const editDisabledReason = (_c = (_b = rest.column.editConfig) === null || _b === void 0 ? void 0 : _b.disabledReason) === null || _c === void 0 ? void 0 : _c.call(_b, rest.item);\n  // Inline editing is deactivated for expandable column because editable cells are interactive\n  // and cannot include interactive content such as expand toggles.\n  if (editDisabledReason && !isExpandableColumnCell) {\n    return React.createElement(DisabledInlineEditor, Object.assign({\n      editDisabledReason: editDisabledReason\n    }, rest));\n  }\n  if ((isEditable || rest.isEditing) && !isExpandableColumnCell) {\n    return React.createElement(TableCellEditable, Object.assign({}, rest));\n  }\n  const {\n    column,\n    item\n  } = rest;\n  return React.createElement(TableTdElement, Object.assign({}, rest), column.cell(item));\n}","map":{"version":3,"names":["React","useEffect","useRef","useState","clsx","useInternalI18n","Icon","LiveRegion","useSingleTabStopNavigation","usePrevious","DisabledInlineEditor","InlineEditor","TableTdElement","styles","submitHandlerFallback","Error","TableCellEditable","_a","className","item","column","isEditing","onEditStart","onEditEnd","submitEdit","ariaLabels","isVisualRefresh","resizableColumns","successfulEdit","interactiveCell","rest","__rest","i18n","editActivateRef","tdNativeAttributes","toString","isFocusMoveNeededRef","current","focus","hasHover","setHasHover","hasFocus","setHasFocus","showIcon","prevSuccessfulEdit","prevHasFocus","showSuccessIcon","setShowSuccessIcon","tabIndex","editActivateTabIndex","createElement","Object","assign","nativeAttributes","onClick","undefined","onMouseEnter","onMouseLeave","options","refocusCell","cancelled","Fragment","cell","_b","successfulEditLabel","call","role","onMouseDown","e","preventDefault","name","variant","_c","_d","activateEditLabel","ref","onFocus","onBlur","TableBodyCell","isEditable","isExpandableColumnCell","level","editDisabledReason","editConfig","disabledReason"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/table/body-cell/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef, useState } from 'react';\nimport clsx from 'clsx';\n\nimport { useInternalI18n } from '../../i18n/context';\nimport Icon from '../../icon/internal';\nimport LiveRegion from '../../internal/components/live-region/index.js';\nimport { useSingleTabStopNavigation } from '../../internal/context/single-tab-stop-navigation-context.js';\nimport { usePrevious } from '../../internal/hooks/use-previous';\nimport { TableProps } from '../interfaces';\nimport { DisabledInlineEditor } from './disabled-inline-editor';\nimport { InlineEditor } from './inline-editor';\nimport { TableTdElement, TableTdElementProps } from './td-element';\n\nimport styles from './styles.css.js';\n\nconst submitHandlerFallback = () => {\n  throw new Error('The function `handleSubmit` is required for editable columns');\n};\n\nexport interface TableBodyCellProps<ItemType> extends TableTdElementProps {\n  column: TableProps.ColumnDefinition<ItemType>;\n  item: ItemType;\n  isEditing: boolean;\n  resizableColumns?: boolean;\n  successfulEdit?: boolean;\n  onEditStart: () => void;\n  onEditEnd: (cancelled: boolean) => void;\n  submitEdit?: TableProps.SubmitEditFunction<ItemType>;\n  ariaLabels: TableProps['ariaLabels'];\n  interactiveCell?: boolean;\n}\n\nfunction TableCellEditable<ItemType>({\n  className,\n  item,\n  column,\n  isEditing,\n  onEditStart,\n  onEditEnd,\n  submitEdit,\n  ariaLabels,\n  isVisualRefresh,\n  resizableColumns = false,\n  successfulEdit = false,\n  interactiveCell = true,\n  ...rest\n}: TableBodyCellProps<ItemType>) {\n  const i18n = useInternalI18n('table');\n  const editActivateRef = useRef<HTMLButtonElement>(null);\n  const tdNativeAttributes = {\n    'data-inline-editing-active': isEditing.toString(),\n  };\n  const isFocusMoveNeededRef = useRef(false);\n\n  useEffect(() => {\n    if (!isEditing && editActivateRef.current && isFocusMoveNeededRef.current) {\n      isFocusMoveNeededRef.current = false;\n      editActivateRef.current.focus();\n    }\n  }, [isEditing]);\n  // To improve the initial page render performance we only show the edit icon when necessary.\n  const [hasHover, setHasHover] = useState(false);\n  const [hasFocus, setHasFocus] = useState(false);\n  // When a cell is both expandable and editable the icon is always shown.\n  const showIcon = hasHover || hasFocus || !interactiveCell;\n\n  const prevSuccessfulEdit = usePrevious(successfulEdit);\n  const prevHasFocus = usePrevious(hasFocus);\n  const [showSuccessIcon, setShowSuccessIcon] = useState(false);\n\n  useEffect(() => {\n    // Hide the success icon after a successful edit, when cell loses focus.\n    if (successfulEdit && prevSuccessfulEdit && !hasFocus && prevHasFocus) {\n      setShowSuccessIcon(false);\n    }\n    // Show success icon right after a successful edit, when `successfulEdit` switches to true.\n    if (successfulEdit && !prevSuccessfulEdit) {\n      setShowSuccessIcon(true);\n    }\n  }, [hasFocus, successfulEdit, prevHasFocus, prevSuccessfulEdit]);\n\n  const { tabIndex: editActivateTabIndex } = useSingleTabStopNavigation(editActivateRef);\n\n  return (\n    <TableTdElement\n      {...rest}\n      nativeAttributes={tdNativeAttributes as TableTdElementProps['nativeAttributes']}\n      className={clsx(\n        className,\n        styles['body-cell-editable'],\n        interactiveCell && styles['body-cell-interactive'],\n        resizableColumns && styles['resizable-columns'],\n        isEditing && styles['body-cell-edit-active'],\n        showSuccessIcon && showIcon && styles['body-cell-has-success'],\n        isVisualRefresh && styles['is-visual-refresh']\n      )}\n      onClick={interactiveCell && !isEditing ? onEditStart : undefined}\n      onMouseEnter={() => setHasHover(true)}\n      onMouseLeave={() => setHasHover(false)}\n    >\n      {isEditing ? (\n        <InlineEditor\n          ariaLabels={ariaLabels}\n          column={column}\n          item={item}\n          onEditEnd={options => {\n            setShowSuccessIcon(false);\n            isFocusMoveNeededRef.current = options.refocusCell;\n            onEditEnd(options.cancelled);\n          }}\n          submitEdit={submitEdit ?? submitHandlerFallback}\n        />\n      ) : (\n        <>\n          {column.cell(item)}\n\n          {showSuccessIcon && showIcon && (\n            <>\n              <span\n                className={styles['body-cell-success']}\n                aria-label={ariaLabels?.successfulEditLabel?.(column)}\n                role=\"img\"\n                onMouseDown={e => {\n                  // Prevent the editor's Button blur event to be fired when clicking the success icon.\n                  // This prevents unfocusing the button and triggers the `TableTdElement` onClick event which initiates the edit mode.\n                  e.preventDefault();\n                }}\n              >\n                <Icon name=\"status-positive\" variant=\"success\" />\n              </span>\n              <LiveRegion>\n                {i18n('ariaLabels.successfulEditLabel', ariaLabels?.successfulEditLabel?.(column))}\n              </LiveRegion>\n            </>\n          )}\n\n          <div className={styles['body-cell-editor-wrapper']}>\n            <button\n              className={styles['body-cell-editor']}\n              aria-label={ariaLabels?.activateEditLabel?.(column, item)}\n              ref={editActivateRef}\n              onClick={!interactiveCell && !isEditing ? onEditStart : undefined}\n              onFocus={() => setHasFocus(true)}\n              onBlur={() => setHasFocus(false)}\n              tabIndex={editActivateTabIndex}\n            >\n              {showIcon && <Icon name=\"edit\" />}\n            </button>\n          </div>\n        </>\n      )}\n    </TableTdElement>\n  );\n}\n\nexport function TableBodyCell<ItemType>({\n  isEditable,\n  ...rest\n}: TableBodyCellProps<ItemType> & { isEditable: boolean }) {\n  const isExpandableColumnCell = rest.level !== undefined;\n  const editDisabledReason = rest.column.editConfig?.disabledReason?.(rest.item);\n\n  // Inline editing is deactivated for expandable column because editable cells are interactive\n  // and cannot include interactive content such as expand toggles.\n  if (editDisabledReason && !isExpandableColumnCell) {\n    return <DisabledInlineEditor editDisabledReason={editDisabledReason} {...rest} />;\n  }\n  if ((isEditable || rest.isEditing) && !isExpandableColumnCell) {\n    return <TableCellEditable {...rest} />;\n  }\n\n  const { column, item } = rest;\n  return <TableTdElement {...rest}>{column.cell(item)}</TableTdElement>;\n}\n"],"mappings":";AAAA;AACA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,IAAI,MAAM,MAAM;AAEvB,SAASC,eAAe,QAAQ,oBAAoB;AACpD,OAAOC,IAAI,MAAM,qBAAqB;AACtC,OAAOC,UAAU,MAAM,gDAAgD;AACvE,SAASC,0BAA0B,QAAQ,8DAA8D;AACzG,SAASC,WAAW,QAAQ,mCAAmC;AAE/D,SAASC,oBAAoB,QAAQ,0BAA0B;AAC/D,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,cAAc,QAA6B,cAAc;AAElE,OAAOC,MAAM,MAAM,iBAAiB;AAEpC,MAAMC,qBAAqB,GAAGA,CAAA,KAAK;EACjC,MAAM,IAAIC,KAAK,CAAC,8DAA8D,CAAC;AACjF,CAAC;AAeD,SAASC,iBAAiBA,CAAWC,EAcN;;MAdM;MACnCC,SAAS;MACTC,IAAI;MACJC,MAAM;MACNC,SAAS;MACTC,WAAW;MACXC,SAAS;MACTC,UAAU;MACVC,UAAU;MACVC,eAAe;MACfC,gBAAgB,GAAG,KAAK;MACxBC,cAAc,GAAG,KAAK;MACtBC,eAAe,GAAG;IAAI,IAAAZ,EAEO;IAD1Ba,IAAI,GAAAC,MAAA,CAAAd,EAAA,EAb4B,gLAcpC,CADQ;EAEP,MAAMe,IAAI,GAAG3B,eAAe,CAAC,OAAO,CAAC;EACrC,MAAM4B,eAAe,GAAG/B,MAAM,CAAoB,IAAI,CAAC;EACvD,MAAMgC,kBAAkB,GAAG;IACzB,4BAA4B,EAAEb,SAAS,CAACc,QAAQ;GACjD;EACD,MAAMC,oBAAoB,GAAGlC,MAAM,CAAC,KAAK,CAAC;EAE1CD,SAAS,CAAC,MAAK;IACb,IAAI,CAACoB,SAAS,IAAIY,eAAe,CAACI,OAAO,IAAID,oBAAoB,CAACC,OAAO,EAAE;MACzED,oBAAoB,CAACC,OAAO,GAAG,KAAK;MACpCJ,eAAe,CAACI,OAAO,CAACC,KAAK,EAAE;;EAEnC,CAAC,EAAE,CAACjB,SAAS,CAAC,CAAC;EACf;EACA,MAAM,CAACkB,QAAQ,EAAEC,WAAW,CAAC,GAAGrC,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACsC,QAAQ,EAAEC,WAAW,CAAC,GAAGvC,QAAQ,CAAC,KAAK,CAAC;EAC/C;EACA,MAAMwC,QAAQ,GAAGJ,QAAQ,IAAIE,QAAQ,IAAI,CAACZ,eAAe;EAEzD,MAAMe,kBAAkB,GAAGnC,WAAW,CAACmB,cAAc,CAAC;EACtD,MAAMiB,YAAY,GAAGpC,WAAW,CAACgC,QAAQ,CAAC;EAC1C,MAAM,CAACK,eAAe,EAAEC,kBAAkB,CAAC,GAAG5C,QAAQ,CAAC,KAAK,CAAC;EAE7DF,SAAS,CAAC,MAAK;IACb;IACA,IAAI2B,cAAc,IAAIgB,kBAAkB,IAAI,CAACH,QAAQ,IAAII,YAAY,EAAE;MACrEE,kBAAkB,CAAC,KAAK,CAAC;;IAE3B;IACA,IAAInB,cAAc,IAAI,CAACgB,kBAAkB,EAAE;MACzCG,kBAAkB,CAAC,IAAI,CAAC;;EAE5B,CAAC,EAAE,CAACN,QAAQ,EAAEb,cAAc,EAAEiB,YAAY,EAAED,kBAAkB,CAAC,CAAC;EAEhE,MAAM;IAAEI,QAAQ,EAAEC;EAAoB,CAAE,GAAGzC,0BAA0B,CAACyB,eAAe,CAAC;EAEtF,OACEjC,KAAA,CAAAkD,aAAA,CAACtC,cAAc,EAAAuC,MAAA,CAAAC,MAAA,KACTtB,IAAI;IACRuB,gBAAgB,EAAEnB,kBAA6D;IAC/EhB,SAAS,EAAEd,IAAI,CACbc,SAAS,EACTL,MAAM,CAAC,oBAAoB,CAAC,EAC5BgB,eAAe,IAAIhB,MAAM,CAAC,uBAAuB,CAAC,EAClDc,gBAAgB,IAAId,MAAM,CAAC,mBAAmB,CAAC,EAC/CQ,SAAS,IAAIR,MAAM,CAAC,uBAAuB,CAAC,EAC5CiC,eAAe,IAAIH,QAAQ,IAAI9B,MAAM,CAAC,uBAAuB,CAAC,EAC9Da,eAAe,IAAIb,MAAM,CAAC,mBAAmB,CAAC,CAC/C;IACDyC,OAAO,EAAEzB,eAAe,IAAI,CAACR,SAAS,GAAGC,WAAW,GAAGiC,SAAS;IAChEC,YAAY,EAAEA,CAAA,KAAMhB,WAAW,CAAC,IAAI,CAAC;IACrCiB,YAAY,EAAEA,CAAA,KAAMjB,WAAW,CAAC,KAAK;EAAC,IAErCnB,SAAS,GACRrB,KAAA,CAAAkD,aAAA,CAACvC,YAAY;IACXc,UAAU,EAAEA,UAAU;IACtBL,MAAM,EAAEA,MAAM;IACdD,IAAI,EAAEA,IAAI;IACVI,SAAS,EAAEmC,OAAO,IAAG;MACnBX,kBAAkB,CAAC,KAAK,CAAC;MACzBX,oBAAoB,CAACC,OAAO,GAAGqB,OAAO,CAACC,WAAW;MAClDpC,SAAS,CAACmC,OAAO,CAACE,SAAS,CAAC;IAC9B,CAAC;IACDpC,UAAU,EAAEA,UAAU,aAAVA,UAAU,cAAVA,UAAU,GAAIV;EAAqB,EAC/C,GAEFd,KAAA,CAAAkD,aAAA,CAAAlD,KAAA,CAAA6D,QAAA,QACGzC,MAAM,CAAC0C,IAAI,CAAC3C,IAAI,CAAC,EAEjB2B,eAAe,IAAIH,QAAQ,IAC1B3C,KAAA,CAAAkD,aAAA,CAAAlD,KAAA,CAAA6D,QAAA,QACE7D,KAAA,CAAAkD,aAAA;IACEhC,SAAS,EAAEL,MAAM,CAAC,mBAAmB,CAAC;IAAA,cAC1B,CAAAkD,EAAA,GAAAtC,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEuC,mBAAmB,cAAAD,EAAA,uBAAAA,EAAA,CAAAE,IAAA,CAAAxC,UAAA,EAAGL,MAAM,CAAC;IACrD8C,IAAI,EAAC,KAAK;IACVC,WAAW,EAAEC,CAAC,IAAG;MACf;MACA;MACAA,CAAC,CAACC,cAAc,EAAE;IACpB;EAAC,GAEDrE,KAAA,CAAAkD,aAAA,CAAC5C,IAAI;IAACgE,IAAI,EAAC,iBAAiB;IAACC,OAAO,EAAC;EAAS,EAAG,CAC5C,EACPvE,KAAA,CAAAkD,aAAA,CAAC3C,UAAU,QACRyB,IAAI,CAAC,gCAAgC,EAAE,CAAAwC,EAAA,GAAA/C,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEuC,mBAAmB,cAAAQ,EAAA,uBAAAA,EAAA,CAAAP,IAAA,CAAAxC,UAAA,EAAGL,MAAM,CAAC,CAAC,CACvE,CAEhB,EAEDpB,KAAA,CAAAkD,aAAA;IAAKhC,SAAS,EAAEL,MAAM,CAAC,0BAA0B;EAAC,GAChDb,KAAA,CAAAkD,aAAA;IACEhC,SAAS,EAAEL,MAAM,CAAC,kBAAkB,CAAC;IAAA,cACzB,CAAA4D,EAAA,GAAAhD,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEiD,iBAAiB,cAAAD,EAAA,uBAAAA,EAAA,CAAAR,IAAA,CAAAxC,UAAA,EAAGL,MAAM,EAAED,IAAI,CAAC;IACzDwD,GAAG,EAAE1C,eAAe;IACpBqB,OAAO,EAAE,CAACzB,eAAe,IAAI,CAACR,SAAS,GAAGC,WAAW,GAAGiC,SAAS;IACjEqB,OAAO,EAAEA,CAAA,KAAMlC,WAAW,CAAC,IAAI,CAAC;IAChCmC,MAAM,EAAEA,CAAA,KAAMnC,WAAW,CAAC,KAAK,CAAC;IAChCM,QAAQ,EAAEC;EAAoB,GAE7BN,QAAQ,IAAI3C,KAAA,CAAAkD,aAAA,CAAC5C,IAAI;IAACgE,IAAI,EAAC;EAAM,EAAG,CAC1B,CACL,CAET,CACc;AAErB;AAEA,OAAM,SAAUQ,aAAaA,CAAW7D,EAGiB;;MAHjB;MACtC8D;IAAU,IAAA9D,EAE6C;IADpDa,IAAI,GAAAC,MAAA,CAAAd,EAAA,EAF+B,cAGvC,CADQ;EAEP,MAAM+D,sBAAsB,GAAGlD,IAAI,CAACmD,KAAK,KAAK1B,SAAS;EACvD,MAAM2B,kBAAkB,GAAG,CAAAV,EAAA,IAAAT,EAAA,GAAAjC,IAAI,CAACV,MAAM,CAAC+D,UAAU,cAAApB,EAAA,uBAAAA,EAAA,CAAEqB,cAAc,cAAAZ,EAAA,uBAAAA,EAAA,CAAAP,IAAA,CAAAF,EAAA,EAAGjC,IAAI,CAACX,IAAI,CAAC;EAE9E;EACA;EACA,IAAI+D,kBAAkB,IAAI,CAACF,sBAAsB,EAAE;IACjD,OAAOhF,KAAA,CAAAkD,aAAA,CAACxC,oBAAoB,EAAAyC,MAAA,CAAAC,MAAA;MAAC8B,kBAAkB,EAAEA;IAAkB,GAAMpD,IAAI,EAAI;;EAEnF,IAAI,CAACiD,UAAU,IAAIjD,IAAI,CAACT,SAAS,KAAK,CAAC2D,sBAAsB,EAAE;IAC7D,OAAOhF,KAAA,CAAAkD,aAAA,CAAClC,iBAAiB,EAAAmC,MAAA,CAAAC,MAAA,KAAKtB,IAAI,EAAI;;EAGxC,MAAM;IAAEV,MAAM;IAAED;EAAI,CAAE,GAAGW,IAAI;EAC7B,OAAO9B,KAAA,CAAAkD,aAAA,CAACtC,cAAc,EAAAuC,MAAA,CAAAC,MAAA,KAAKtB,IAAI,GAAGV,MAAM,CAAC0C,IAAI,CAAC3C,IAAI,CAAC,CAAkB;AACvE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}