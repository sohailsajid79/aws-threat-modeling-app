{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport { InternalButton } from '../../button/internal';\nimport { Transition } from '../../internal/components/transition';\nimport customCssProps from '../../internal/generated/custom-css-properties';\nimport { useAppLayoutInternals } from './context';\nimport TriggerButton from './trigger-button';\nimport splitPanelTestUtilStyles from '../../split-panel/test-classes/styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nimport styles from './styles.css.js';\n/**\n * The Tools component consists of the following elements:\n * the container, or root element, that sits as a direct child to the Layout grid definition;\n * the split panel, which exists only if there is a split panel in side position;\n * the tools, or drawer, that contains the hide tools form and the children passed through the API;\n * the show tools form that contains the triggers for both the drawer and the\n * split panel in large viewports;\n */\nexport default function Tools(_ref) {\n  let {\n    children\n  } = _ref;\n  const {\n    ariaLabels,\n    disableBodyScroll,\n    drawers,\n    handleSplitPanelClick,\n    handleToolsClick,\n    hasDrawerViewportOverlay,\n    isMobile,\n    isSplitPanelOpen,\n    isToolsOpen,\n    loseToolsFocus,\n    splitPanel,\n    splitPanelControlId,\n    splitPanelDisplayed,\n    splitPanelPosition,\n    splitPanelRefs,\n    splitPanelToggle,\n    tools,\n    toolsControlId,\n    toolsHide,\n    toolsRefs,\n    toolsWidth,\n    headerVariant\n  } = useAppLayoutInternals();\n  const hasSplitPanel = !!splitPanel && splitPanelPosition === 'side';\n  const hasToolsForm = getToolsFormStatus(hasSplitPanel && splitPanelDisplayed, isMobile, isSplitPanelOpen, isToolsOpen, toolsHide);\n  const hasToolsFormPersistence = getToolsFormPersistence(hasSplitPanel, isSplitPanelOpen, isToolsOpen, toolsHide);\n  const isUnfocusable = hasDrawerViewportOverlay && !isToolsOpen;\n  /**\n   * If the drawers property is defined the SplitPanel will be mounted and rendered\n   * by the Drawers component.\n   */\n  if (toolsHide && !hasSplitPanel || drawers) {\n    return null;\n  }\n  return React.createElement(Transition, {\n    in: isToolsOpen !== null && isToolsOpen !== void 0 ? isToolsOpen : false\n  }, (state, transitionEventsRef) => {\n    var _a, _b, _c;\n    return React.createElement(\"div\", {\n      className: clsx(styles['tools-container'], {\n        [styles['disable-body-scroll']]: disableBodyScroll,\n        [styles.unfocusable]: isUnfocusable,\n        [testutilStyles['drawer-closed']]: !isToolsOpen\n      }),\n      style: {\n        [customCssProps.toolsAnimationStartingOpacity]: `${hasSplitPanel && isSplitPanelOpen ? 1 : 0}`,\n        [customCssProps.toolsWidth]: `${toolsWidth}px`\n      },\n      onBlur: e => {\n        if (!e.relatedTarget || !e.currentTarget.contains(e.relatedTarget)) {\n          loseToolsFocus();\n        }\n      }\n    }, children, !toolsHide && React.createElement(\"aside\", {\n      id: toolsControlId,\n      \"aria-hidden\": !isToolsOpen ? true : false,\n      \"aria-label\": (_a = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools) !== null && _a !== void 0 ? _a : undefined,\n      className: clsx(styles.tools, {\n        [styles.animating]: state === 'entering',\n        [styles['has-tools-form-persistence']]: hasToolsFormPersistence,\n        [styles['is-tools-open']]: isToolsOpen\n      }, testutilStyles.tools),\n      ref: state !== 'exiting' ? transitionEventsRef : undefined\n    }, React.createElement(\"div\", {\n      className: styles['animated-content']\n    }, React.createElement(\"div\", {\n      className: styles['hide-tools']\n    }, React.createElement(InternalButton, {\n      ariaLabel: (_b = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsClose) !== null && _b !== void 0 ? _b : undefined,\n      iconName: isMobile ? 'close' : 'angle-right',\n      onClick: () => handleToolsClick(false),\n      variant: \"icon\",\n      formAction: \"none\",\n      className: testutilStyles['tools-close'],\n      ref: toolsRefs.close\n    })), tools)), !isMobile && React.createElement(\"aside\", {\n      \"aria-hidden\": !hasToolsForm ? true : false,\n      \"aria-label\": (_c = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools) !== null && _c !== void 0 ? _c : undefined,\n      className: clsx(styles['show-tools'], {\n        [styles.animating]: state === 'exiting',\n        [styles['has-tools-form']]: hasToolsForm,\n        [styles['has-tools-form-persistence']]: hasToolsFormPersistence\n      }),\n      ref: state === 'exiting' ? transitionEventsRef : undefined,\n      \"data-testid\": \"side-split-panel-drawer\"\n    }, !toolsHide && React.createElement(TriggerButton, {\n      ariaLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsToggle,\n      ariaControls: toolsControlId,\n      ariaExpanded: isToolsOpen,\n      iconName: \"status-info\",\n      onClick: () => handleToolsClick(!isToolsOpen),\n      selected: hasSplitPanel && isToolsOpen,\n      className: testutilStyles['tools-toggle'],\n      ref: toolsRefs.toggle,\n      highContrastHeader: headerVariant === 'high-contrast'\n    }), hasSplitPanel && splitPanelToggle.displayed && React.createElement(TriggerButton, {\n      ariaLabel: splitPanelToggle.ariaLabel,\n      ariaControls: splitPanelControlId,\n      ariaExpanded: !!isSplitPanelOpen,\n      iconName: \"view-vertical\",\n      onClick: () => handleSplitPanelClick(),\n      selected: hasSplitPanel && isSplitPanelOpen,\n      className: splitPanelTestUtilStyles['open-button'],\n      ref: splitPanelRefs.toggle,\n      highContrastHeader: headerVariant === 'high-contrast'\n    })));\n  });\n}\n/**\n * By default the Tools form is styled as display: none; This behavior should\n * be unchanged in mobile viewports where the Tools form is always suppressed.\n * In large viewports, however the Tools form and its corresponding buttons\n * should be present in the UI under the below circumstances.\n */\nfunction getToolsFormStatus(hasSplitPanel, isMobile, isSplitPanelOpen, isToolsOpen, toolsHide) {\n  let hasToolsForm = false;\n  if (!isMobile) {\n    // Both the Split Panel and Tools button are needed\n    if (hasSplitPanel && !toolsHide) {\n      hasToolsForm = true;\n    }\n    // The Split Panel button is needed\n    if (hasSplitPanel && !isSplitPanelOpen && toolsHide) {\n      hasToolsForm = true;\n    }\n    // The Tools button is needed\n    if (!hasSplitPanel && !toolsHide && !isToolsOpen) {\n      hasToolsForm = true;\n    }\n  }\n  return hasToolsForm;\n}\n/**\n * Under two scenarios the Tools form that contains the triggers\n * for the Tools content and the Split Panel may be persistent\n * in the UI (as opposed to disappearing when one of the drawers\n * is open). This will also add a white background as opposed to the\n * default transparent background. The buttons will present and in a\n * selected / not selected state.\n */\nfunction getToolsFormPersistence(hasSplitPanel, isSplitPanelOpen, isToolsOpen, toolsHide) {\n  let hasToolsFormPersistence = false;\n  // Both Tools and Split Panel exist and one or both is open\n  if (hasSplitPanel && !toolsHide && (isSplitPanelOpen || isToolsOpen)) {\n    hasToolsFormPersistence = true;\n  }\n  return hasToolsFormPersistence;\n}","map":{"version":3,"names":["React","clsx","InternalButton","Transition","customCssProps","useAppLayoutInternals","TriggerButton","splitPanelTestUtilStyles","testutilStyles","styles","Tools","_ref","children","ariaLabels","disableBodyScroll","drawers","handleSplitPanelClick","handleToolsClick","hasDrawerViewportOverlay","isMobile","isSplitPanelOpen","isToolsOpen","loseToolsFocus","splitPanel","splitPanelControlId","splitPanelDisplayed","splitPanelPosition","splitPanelRefs","splitPanelToggle","tools","toolsControlId","toolsHide","toolsRefs","toolsWidth","headerVariant","hasSplitPanel","hasToolsForm","getToolsFormStatus","hasToolsFormPersistence","getToolsFormPersistence","isUnfocusable","createElement","in","state","transitionEventsRef","className","unfocusable","style","toolsAnimationStartingOpacity","onBlur","e","relatedTarget","currentTarget","contains","id","_a","undefined","animating","ref","ariaLabel","_b","toolsClose","iconName","onClick","variant","formAction","close","_c","toolsToggle","ariaControls","ariaExpanded","selected","toggle","highContrastHeader","displayed"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/app-layout/visual-refresh/tools.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\n\nimport { InternalButton } from '../../button/internal';\nimport { Transition } from '../../internal/components/transition';\nimport customCssProps from '../../internal/generated/custom-css-properties';\nimport { useAppLayoutInternals } from './context';\nimport TriggerButton from './trigger-button';\n\nimport splitPanelTestUtilStyles from '../../split-panel/test-classes/styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nimport styles from './styles.css.js';\n\ninterface ToolsProps {\n  children: React.ReactNode;\n}\n\n/**\n * The Tools component consists of the following elements:\n * the container, or root element, that sits as a direct child to the Layout grid definition;\n * the split panel, which exists only if there is a split panel in side position;\n * the tools, or drawer, that contains the hide tools form and the children passed through the API;\n * the show tools form that contains the triggers for both the drawer and the\n * split panel in large viewports;\n */\nexport default function Tools({ children }: ToolsProps) {\n  const {\n    ariaLabels,\n    disableBodyScroll,\n    drawers,\n    handleSplitPanelClick,\n    handleToolsClick,\n    hasDrawerViewportOverlay,\n    isMobile,\n    isSplitPanelOpen,\n    isToolsOpen,\n    loseToolsFocus,\n    splitPanel,\n    splitPanelControlId,\n    splitPanelDisplayed,\n    splitPanelPosition,\n    splitPanelRefs,\n    splitPanelToggle,\n    tools,\n    toolsControlId,\n    toolsHide,\n    toolsRefs,\n    toolsWidth,\n    headerVariant,\n  } = useAppLayoutInternals();\n\n  const hasSplitPanel = !!splitPanel && splitPanelPosition === 'side';\n  const hasToolsForm = getToolsFormStatus(\n    hasSplitPanel && splitPanelDisplayed,\n    isMobile,\n    isSplitPanelOpen,\n    isToolsOpen,\n    toolsHide\n  );\n  const hasToolsFormPersistence = getToolsFormPersistence(hasSplitPanel, isSplitPanelOpen, isToolsOpen, toolsHide);\n  const isUnfocusable = hasDrawerViewportOverlay && !isToolsOpen;\n\n  /**\n   * If the drawers property is defined the SplitPanel will be mounted and rendered\n   * by the Drawers component.\n   */\n  if ((toolsHide && !hasSplitPanel) || drawers) {\n    return null;\n  }\n\n  return (\n    <Transition in={isToolsOpen ?? false}>\n      {(state, transitionEventsRef) => (\n        <div\n          className={clsx(styles['tools-container'], {\n            [styles['disable-body-scroll']]: disableBodyScroll,\n            [styles.unfocusable]: isUnfocusable,\n            [testutilStyles['drawer-closed']]: !isToolsOpen,\n          })}\n          style={{\n            [customCssProps.toolsAnimationStartingOpacity]: `${hasSplitPanel && isSplitPanelOpen ? 1 : 0}`,\n            [customCssProps.toolsWidth]: `${toolsWidth}px`,\n          }}\n          onBlur={e => {\n            if (!e.relatedTarget || !e.currentTarget.contains(e.relatedTarget)) {\n              loseToolsFocus();\n            }\n          }}\n        >\n          {children}\n\n          {!toolsHide && (\n            <aside\n              id={toolsControlId}\n              aria-hidden={!isToolsOpen ? true : false}\n              aria-label={ariaLabels?.tools ?? undefined}\n              className={clsx(\n                styles.tools,\n                {\n                  [styles.animating]: state === 'entering',\n                  [styles['has-tools-form-persistence']]: hasToolsFormPersistence,\n                  [styles['is-tools-open']]: isToolsOpen,\n                },\n                testutilStyles.tools\n              )}\n              ref={state !== 'exiting' ? transitionEventsRef : undefined}\n            >\n              <div className={styles['animated-content']}>\n                <div className={styles['hide-tools']}>\n                  <InternalButton\n                    ariaLabel={ariaLabels?.toolsClose ?? undefined}\n                    iconName={isMobile ? 'close' : 'angle-right'}\n                    onClick={() => handleToolsClick(false)}\n                    variant=\"icon\"\n                    formAction=\"none\"\n                    className={testutilStyles['tools-close']}\n                    ref={toolsRefs.close}\n                  />\n                </div>\n\n                {tools}\n              </div>\n            </aside>\n          )}\n\n          {!isMobile && (\n            <aside\n              aria-hidden={!hasToolsForm ? true : false}\n              aria-label={ariaLabels?.tools ?? undefined}\n              className={clsx(styles['show-tools'], {\n                [styles.animating]: state === 'exiting',\n                [styles['has-tools-form']]: hasToolsForm,\n                [styles['has-tools-form-persistence']]: hasToolsFormPersistence,\n              })}\n              ref={state === 'exiting' ? transitionEventsRef : undefined}\n              data-testid=\"side-split-panel-drawer\"\n            >\n              {!toolsHide && (\n                <TriggerButton\n                  ariaLabel={ariaLabels?.toolsToggle}\n                  ariaControls={toolsControlId}\n                  ariaExpanded={isToolsOpen}\n                  iconName=\"status-info\"\n                  onClick={() => handleToolsClick(!isToolsOpen)}\n                  selected={hasSplitPanel && isToolsOpen}\n                  className={testutilStyles['tools-toggle']}\n                  ref={toolsRefs.toggle}\n                  highContrastHeader={headerVariant === 'high-contrast'}\n                />\n              )}\n\n              {hasSplitPanel && splitPanelToggle.displayed && (\n                <TriggerButton\n                  ariaLabel={splitPanelToggle.ariaLabel}\n                  ariaControls={splitPanelControlId}\n                  ariaExpanded={!!isSplitPanelOpen}\n                  iconName=\"view-vertical\"\n                  onClick={() => handleSplitPanelClick()}\n                  selected={hasSplitPanel && isSplitPanelOpen}\n                  className={splitPanelTestUtilStyles['open-button']}\n                  ref={splitPanelRefs.toggle}\n                  highContrastHeader={headerVariant === 'high-contrast'}\n                />\n              )}\n            </aside>\n          )}\n        </div>\n      )}\n    </Transition>\n  );\n}\n\n/**\n * By default the Tools form is styled as display: none; This behavior should\n * be unchanged in mobile viewports where the Tools form is always suppressed.\n * In large viewports, however the Tools form and its corresponding buttons\n * should be present in the UI under the below circumstances.\n */\nfunction getToolsFormStatus(\n  hasSplitPanel: boolean,\n  isMobile: boolean,\n  isSplitPanelOpen?: boolean,\n  isToolsOpen?: boolean,\n  toolsHide?: boolean\n) {\n  let hasToolsForm = false;\n\n  if (!isMobile) {\n    // Both the Split Panel and Tools button are needed\n    if (hasSplitPanel && !toolsHide) {\n      hasToolsForm = true;\n    }\n\n    // The Split Panel button is needed\n    if (hasSplitPanel && !isSplitPanelOpen && toolsHide) {\n      hasToolsForm = true;\n    }\n\n    // The Tools button is needed\n    if (!hasSplitPanel && !toolsHide && !isToolsOpen) {\n      hasToolsForm = true;\n    }\n  }\n\n  return hasToolsForm;\n}\n\n/**\n * Under two scenarios the Tools form that contains the triggers\n * for the Tools content and the Split Panel may be persistent\n * in the UI (as opposed to disappearing when one of the drawers\n * is open). This will also add a white background as opposed to the\n * default transparent background. The buttons will present and in a\n * selected / not selected state.\n */\nfunction getToolsFormPersistence(\n  hasSplitPanel: boolean,\n  isSplitPanelOpen?: boolean,\n  isToolsOpen?: boolean,\n  toolsHide?: boolean\n) {\n  let hasToolsFormPersistence = false;\n\n  // Both Tools and Split Panel exist and one or both is open\n  if (hasSplitPanel && !toolsHide && (isSplitPanelOpen || isToolsOpen)) {\n    hasToolsFormPersistence = true;\n  }\n\n  return hasToolsFormPersistence;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}