{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Children, useRef } from \"react\";\nimport clsx from \"clsx\";\nimport { useContainerQuery } from \"@cloudscape-design/component-toolkit\";\nimport { useDensityMode } from \"@cloudscape-design/component-toolkit/internal\";\nimport { useMergeRefs } from \"../utils/use-merge-refs\";\nimport { zipTwoArrays } from \"../utils/zip-arrays\";\nimport GridItem from \"./item\";\nimport styles from \"./styles.css.js\";\n/* Matches grid gap in CSS. */\nconst GRID_GAP = {\n  comfortable: 20,\n  compact: 16\n};\n/* Matches grid-auto-rows in CSS. */\nconst ROWSPAN_HEIGHT = {\n  comfortable: 96,\n  compact: 76\n};\nexport default function Grid(_ref) {\n  let {\n    layout,\n    children: render,\n    columns,\n    isRtl\n  } = _ref;\n  const gridRef = useRef(null);\n  const [gridWidth, containerQueryRef] = useContainerQuery(entry => entry.contentBoxWidth, []);\n  const densityMode = useDensityMode(gridRef);\n  const gridGap = GRID_GAP[densityMode];\n  const rowspanHeight = ROWSPAN_HEIGHT[densityMode];\n  // The below getters translate relative grid units into size/offset values in pixels.\n  const getWidth = colspan => {\n    colspan = Math.min(columns, colspan);\n    const cellWidth = ((gridWidth || 0) - (columns - 1) * gridGap) / columns;\n    return colspan * cellWidth + (colspan - 1) * gridGap;\n  };\n  const getHeight = rowspan => rowspan * rowspanHeight + (rowspan - 1) * gridGap;\n  const getColOffset = x => {\n    const offset = getWidth(x) + gridGap;\n    return !(isRtl === null || isRtl === void 0 ? void 0 : isRtl()) ? offset : -offset;\n  };\n  const getRowOffset = y => getHeight(y) + gridGap;\n  const gridContext = {\n    getWidth,\n    getHeight,\n    getColOffset,\n    getRowOffset\n  };\n  const children = render === null || render === void 0 ? void 0 : render(gridContext);\n  const zipped = zipTwoArrays(layout, Children.toArray(children));\n  const ref = useMergeRefs(gridRef, containerQueryRef);\n  return _jsx(\"div\", {\n    ref: ref,\n    className: clsx(styles.grid, styles[`grid-${densityMode}`], styles[`columns-${columns}`]),\n    children: zipped.map(_ref2 => {\n      let [item, children] = _ref2;\n      return _jsx(GridItem, {\n        item: item,\n        children: children\n      }, item.id);\n    })\n  });\n}","map":{"version":3,"names":["Children","useRef","clsx","useContainerQuery","useDensityMode","useMergeRefs","zipTwoArrays","GridItem","styles","GRID_GAP","comfortable","compact","ROWSPAN_HEIGHT","Grid","_ref","layout","children","render","columns","isRtl","gridRef","gridWidth","containerQueryRef","entry","contentBoxWidth","densityMode","gridGap","rowspanHeight","getWidth","colspan","Math","min","cellWidth","getHeight","rowspan","getColOffset","x","offset","getRowOffset","y","gridContext","zipped","toArray","ref","_jsx","className","grid","map","_ref2","item","id"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/internal/grid/grid.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Children, useRef } from \"react\";\nimport clsx from \"clsx\";\n\nimport { useContainerQuery } from \"@cloudscape-design/component-toolkit\";\nimport { useDensityMode } from \"@cloudscape-design/component-toolkit/internal\";\n\nimport { useMergeRefs } from \"../utils/use-merge-refs\";\nimport { zipTwoArrays } from \"../utils/zip-arrays\";\nimport { GridProps } from \"./interfaces\";\nimport GridItem from \"./item\";\n\nimport styles from \"./styles.css.js\";\n\n/* Matches grid gap in CSS. */\nconst GRID_GAP = {\n  comfortable: 20,\n  compact: 16,\n};\n\n/* Matches grid-auto-rows in CSS. */\nconst ROWSPAN_HEIGHT = {\n  comfortable: 96,\n  compact: 76,\n};\n\nexport default function Grid({ layout, children: render, columns, isRtl }: GridProps) {\n  const gridRef = useRef<HTMLDivElement>(null);\n  const [gridWidth, containerQueryRef] = useContainerQuery((entry) => entry.contentBoxWidth, []);\n  const densityMode = useDensityMode(gridRef);\n  const gridGap = GRID_GAP[densityMode];\n  const rowspanHeight = ROWSPAN_HEIGHT[densityMode];\n\n  // The below getters translate relative grid units into size/offset values in pixels.\n  const getWidth = (colspan: number) => {\n    colspan = Math.min(columns, colspan);\n    const cellWidth = ((gridWidth || 0) - (columns - 1) * gridGap) / columns;\n    return colspan * cellWidth + (colspan - 1) * gridGap;\n  };\n  const getHeight = (rowspan: number) => rowspan * rowspanHeight + (rowspan - 1) * gridGap;\n  const getColOffset = (x: number) => {\n    const offset = getWidth(x) + gridGap;\n    return !isRtl?.() ? offset : -offset;\n  };\n  const getRowOffset = (y: number) => getHeight(y) + gridGap;\n\n  const gridContext = { getWidth, getHeight, getColOffset, getRowOffset };\n  const children = render?.(gridContext);\n\n  const zipped = zipTwoArrays(layout, Children.toArray(children));\n\n  const ref = useMergeRefs(gridRef, containerQueryRef);\n  return (\n    <div ref={ref} className={clsx(styles.grid, styles[`grid-${densityMode}`], styles[`columns-${columns}`])}>\n      {zipped.map(([item, children]) => (\n        <GridItem key={item.id} item={item}>\n          {children}\n        </GridItem>\n      ))}\n    </div>\n  );\n}\n"],"mappings":";AAAA;AACA;AAEA,SAASA,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AACxC,OAAOC,IAAI,MAAM,MAAM;AAEvB,SAASC,iBAAiB,QAAQ,sCAAsC;AACxE,SAASC,cAAc,QAAQ,+CAA+C;AAE9E,SAASC,YAAY,QAAQ,yBAAyB;AACtD,SAASC,YAAY,QAAQ,qBAAqB;AAElD,OAAOC,QAAQ,MAAM,QAAQ;AAE7B,OAAOC,MAAM,MAAM,iBAAiB;AAEpC;AACA,MAAMC,QAAQ,GAAG;EACfC,WAAW,EAAE,EAAE;EACfC,OAAO,EAAE;CACV;AAED;AACA,MAAMC,cAAc,GAAG;EACrBF,WAAW,EAAE,EAAE;EACfC,OAAO,EAAE;CACV;AAED,eAAc,SAAUE,IAAIA,CAAAC,IAAA,EAAwD;EAAA,IAAvD;IAAEC,MAAM;IAAEC,QAAQ,EAAEC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAa,GAAAL,IAAA;EAClF,MAAMM,OAAO,GAAGnB,MAAM,CAAiB,IAAI,CAAC;EAC5C,MAAM,CAACoB,SAAS,EAAEC,iBAAiB,CAAC,GAAGnB,iBAAiB,CAAEoB,KAAK,IAAKA,KAAK,CAACC,eAAe,EAAE,EAAE,CAAC;EAC9F,MAAMC,WAAW,GAAGrB,cAAc,CAACgB,OAAO,CAAC;EAC3C,MAAMM,OAAO,GAAGjB,QAAQ,CAACgB,WAAW,CAAC;EACrC,MAAME,aAAa,GAAGf,cAAc,CAACa,WAAW,CAAC;EAEjD;EACA,MAAMG,QAAQ,GAAIC,OAAe,IAAI;IACnCA,OAAO,GAAGC,IAAI,CAACC,GAAG,CAACb,OAAO,EAAEW,OAAO,CAAC;IACpC,MAAMG,SAAS,GAAG,CAAC,CAACX,SAAS,IAAI,CAAC,IAAI,CAACH,OAAO,GAAG,CAAC,IAAIQ,OAAO,IAAIR,OAAO;IACxE,OAAOW,OAAO,GAAGG,SAAS,GAAG,CAACH,OAAO,GAAG,CAAC,IAAIH,OAAO;EACtD,CAAC;EACD,MAAMO,SAAS,GAAIC,OAAe,IAAKA,OAAO,GAAGP,aAAa,GAAG,CAACO,OAAO,GAAG,CAAC,IAAIR,OAAO;EACxF,MAAMS,YAAY,GAAIC,CAAS,IAAI;IACjC,MAAMC,MAAM,GAAGT,QAAQ,CAACQ,CAAC,CAAC,GAAGV,OAAO;IACpC,OAAO,EAACP,KAAK,aAALA,KAAK,uBAALA,KAAK,EAAI,IAAGkB,MAAM,GAAG,CAACA,MAAM;EACtC,CAAC;EACD,MAAMC,YAAY,GAAIC,CAAS,IAAKN,SAAS,CAACM,CAAC,CAAC,GAAGb,OAAO;EAE1D,MAAMc,WAAW,GAAG;IAAEZ,QAAQ;IAAEK,SAAS;IAAEE,YAAY;IAAEG;EAAY,CAAE;EACvE,MAAMtB,QAAQ,GAAGC,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAGuB,WAAW,CAAC;EAEtC,MAAMC,MAAM,GAAGnC,YAAY,CAACS,MAAM,EAAEf,QAAQ,CAAC0C,OAAO,CAAC1B,QAAQ,CAAC,CAAC;EAE/D,MAAM2B,GAAG,GAAGtC,YAAY,CAACe,OAAO,EAAEE,iBAAiB,CAAC;EACpD,OACEsB,IAAA;IAAKD,GAAG,EAAEA,GAAG;IAAEE,SAAS,EAAE3C,IAAI,CAACM,MAAM,CAACsC,IAAI,EAAEtC,MAAM,CAAC,QAAQiB,WAAW,EAAE,CAAC,EAAEjB,MAAM,CAAC,WAAWU,OAAO,EAAE,CAAC,CAAC;IAAAF,QAAA,EACrGyB,MAAM,CAACM,GAAG,CAACC,KAAA;MAAA,IAAC,CAACC,IAAI,EAAEjC,QAAQ,CAAC,GAAAgC,KAAA;MAAA,OAC3BJ,IAAA,CAACrC,QAAQ;QAAe0C,IAAI,EAAEA,IAAI;QAAAjC,QAAA,EAC/BA;MAAQ,GADIiC,IAAI,CAACC,EAAE,CAEX;IAAA,CACZ;EAAC,EACE;AAEV","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}