{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport InternalButtonDropdown from '../../button-dropdown/internal';\nimport testutilStyles from '../test-classes/styles.css.js';\nconst mapDrawerToItem = drawer => ({\n  id: drawer.id,\n  text: drawer.ariaLabels.drawerName,\n  iconName: drawer.trigger.iconName,\n  iconSvg: drawer.trigger.iconSvg,\n  badge: drawer.badge,\n  itemType: 'checkbox',\n  checked: drawer.active\n});\nexport default function OverflowMenu({\n  items: drawers,\n  onItemClick,\n  customTriggerBuilder,\n  ariaLabel,\n  globalDrawersStartIndex\n}) {\n  const itemsFlatList = drawers.map(mapDrawerToItem);\n  let items;\n  if (globalDrawersStartIndex !== undefined && globalDrawersStartIndex > 0) {\n    items = [{\n      items: itemsFlatList.slice(0, globalDrawersStartIndex)\n    }, {\n      items: itemsFlatList.slice(globalDrawersStartIndex)\n    }];\n  } else {\n    items = itemsFlatList;\n  }\n  return React.createElement(InternalButtonDropdown, {\n    items: items,\n    className: testutilStyles['overflow-menu'],\n    onItemClick: onItemClick,\n    ariaLabel: ariaLabel,\n    variant: \"icon\",\n    customTriggerBuilder: customTriggerBuilder,\n    expandToViewport: true\n  });\n}","map":{"version":3,"names":["React","InternalButtonDropdown","testutilStyles","mapDrawerToItem","drawer","id","text","ariaLabels","drawerName","iconName","trigger","iconSvg","badge","itemType","checked","active","OverflowMenu","items","drawers","onItemClick","customTriggerBuilder","ariaLabel","globalDrawersStartIndex","itemsFlatList","map","undefined","slice","createElement","className","variant","expandToViewport"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/app-layout/drawer/overflow-menu.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\n\nimport {\n  ButtonDropdownProps,\n  InternalButtonDropdownProps,\n  InternalItemOrGroup,\n} from '../../button-dropdown/interfaces';\nimport InternalButtonDropdown from '../../button-dropdown/internal';\nimport { CancelableEventHandler } from '../../internal/events';\nimport { AppLayoutProps } from '../interfaces';\n\nimport testutilStyles from '../test-classes/styles.css.js';\n\ntype Drawer = AppLayoutProps.Drawer & { active?: boolean };\n\ninterface OverflowMenuProps {\n  items: Array<Drawer>;\n  onItemClick: CancelableEventHandler<ButtonDropdownProps.ItemClickDetails>;\n  customTriggerBuilder?: InternalButtonDropdownProps['customTriggerBuilder'];\n  ariaLabel?: string;\n  globalDrawersStartIndex?: number;\n}\n\nconst mapDrawerToItem = (drawer: Drawer) => ({\n  id: drawer.id,\n  text: drawer.ariaLabels.drawerName,\n  iconName: drawer.trigger!.iconName,\n  iconSvg: drawer.trigger!.iconSvg,\n  badge: drawer.badge,\n  itemType: 'checkbox' as ButtonDropdownProps.ItemType,\n  checked: drawer.active,\n});\n\nexport default function OverflowMenu({\n  items: drawers,\n  onItemClick,\n  customTriggerBuilder,\n  ariaLabel,\n  globalDrawersStartIndex,\n}: OverflowMenuProps) {\n  const itemsFlatList = drawers.map(mapDrawerToItem);\n  let items: ReadonlyArray<InternalItemOrGroup>;\n  if (globalDrawersStartIndex !== undefined && globalDrawersStartIndex > 0) {\n    items = [\n      { items: itemsFlatList.slice(0, globalDrawersStartIndex) },\n      { items: itemsFlatList.slice(globalDrawersStartIndex) },\n    ];\n  } else {\n    items = itemsFlatList;\n  }\n\n  return (\n    <InternalButtonDropdown\n      items={items}\n      className={testutilStyles['overflow-menu']}\n      onItemClick={onItemClick}\n      ariaLabel={ariaLabel}\n      variant=\"icon\"\n      customTriggerBuilder={customTriggerBuilder}\n      expandToViewport={true}\n    />\n  );\n}\n"],"mappings":"AAAA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AAOzB,OAAOC,sBAAsB,MAAM,gCAAgC;AAInE,OAAOC,cAAc,MAAM,+BAA+B;AAY1D,MAAMC,eAAe,GAAIC,MAAc,KAAM;EAC3CC,EAAE,EAAED,MAAM,CAACC,EAAE;EACbC,IAAI,EAAEF,MAAM,CAACG,UAAU,CAACC,UAAU;EAClCC,QAAQ,EAAEL,MAAM,CAACM,OAAQ,CAACD,QAAQ;EAClCE,OAAO,EAAEP,MAAM,CAACM,OAAQ,CAACC,OAAO;EAChCC,KAAK,EAAER,MAAM,CAACQ,KAAK;EACnBC,QAAQ,EAAE,UAA0C;EACpDC,OAAO,EAAEV,MAAM,CAACW;CACjB,CAAC;AAEF,eAAc,SAAUC,YAAYA,CAAC;EACnCC,KAAK,EAAEC,OAAO;EACdC,WAAW;EACXC,oBAAoB;EACpBC,SAAS;EACTC;AAAuB,CACL;EAClB,MAAMC,aAAa,GAAGL,OAAO,CAACM,GAAG,CAACrB,eAAe,CAAC;EAClD,IAAIc,KAAyC;EAC7C,IAAIK,uBAAuB,KAAKG,SAAS,IAAIH,uBAAuB,GAAG,CAAC,EAAE;IACxEL,KAAK,GAAG,CACN;MAAEA,KAAK,EAAEM,aAAa,CAACG,KAAK,CAAC,CAAC,EAAEJ,uBAAuB;IAAC,CAAE,EAC1D;MAAEL,KAAK,EAAEM,aAAa,CAACG,KAAK,CAACJ,uBAAuB;IAAC,CAAE,CACxD;GACF,MAAM;IACLL,KAAK,GAAGM,aAAa;;EAGvB,OACEvB,KAAA,CAAA2B,aAAA,CAAC1B,sBAAsB;IACrBgB,KAAK,EAAEA,KAAK;IACZW,SAAS,EAAE1B,cAAc,CAAC,eAAe,CAAC;IAC1CiB,WAAW,EAAEA,WAAW;IACxBE,SAAS,EAAEA,SAAS;IACpBQ,OAAO,EAAC,MAAM;IACdT,oBAAoB,EAAEA,oBAAoB;IAC1CU,gBAAgB,EAAE;EAAI,EACtB;AAEN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}