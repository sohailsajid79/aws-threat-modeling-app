{"ast":null,"code":"/** *******************************************************************************************************************\n  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\").\n  You may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n ******************************************************************************************************************** */import SpaceBetween from'@cloudscape-design/components/space-between';import{useState,useCallback}from'react';import{useAssumptionsContext}from'../../../contexts/AssumptionsContext/context';import{useControlsContext}from'../../../contexts/ControlsContext/context';import{useThreatsContext}from'../../../contexts/ThreatsContext/context';import AssumptionLinkView from'../../assumptions/AssumptionLinkView';import GenericEntityCreationCard,{DEFAULT_ENTITY}from'../../generic/GenericEntityCreationCard';import ThreatLinkView from'../../threats/ThreatLinkView';import ControlLinkView from'../../controls/ControlLinkView';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const MitigationCreationCard=_ref=>{let{onSave}=_ref;const[editingEntity,setEditingEntity]=useState(DEFAULT_ENTITY);const[linkedAssumptionIds,setLinkedAssumptionIds]=useState([]);const[linkedControlIds,setLinkedControlIds]=useState([]);const[linkedThreatIds,setLinkedThreatIds]=useState([]);const{assumptionList,saveAssumption}=useAssumptionsContext();const{controlList,saveControl}=useControlsContext();const{statementList}=useThreatsContext();const handleSave=useCallback(()=>{onSave===null||onSave===void 0?void 0:onSave(editingEntity,linkedControlIds,linkedAssumptionIds,linkedThreatIds);setEditingEntity(DEFAULT_ENTITY);setLinkedControlIds([]);setLinkedAssumptionIds([]);setLinkedThreatIds([]);},[editingEntity,linkedControlIds,linkedAssumptionIds,linkedThreatIds,onSave]);const handleReset=useCallback(()=>{setEditingEntity(DEFAULT_ENTITY);setLinkedAssumptionIds([]);setLinkedControlIds([]);setLinkedThreatIds([]);},[]);const handleAddAssumptionLink=useCallback(assumptionIdOrNewAssumption=>{if(assumptionList.find(a=>a.id===assumptionIdOrNewAssumption)){setLinkedAssumptionIds(prev=>[...prev,assumptionIdOrNewAssumption]);}else{const newAssumption=saveAssumption({numericId:-1,content:assumptionIdOrNewAssumption,id:'new'});setLinkedAssumptionIds(prev=>[...prev,newAssumption.id]);}},[assumptionList,saveAssumption,setLinkedAssumptionIds]);const handleAddControlLink=useCallback(controlIdOrNewControl=>{if(controlList.find(a=>a.id===controlIdOrNewControl)){setLinkedControlIds(prev=>[...prev,controlIdOrNewControl]);}else{const newControl=saveControl({numericId:-1,content:controlIdOrNewControl,id:'new'});setLinkedControlIds(prev=>[...prev,newControl.id]);}},[controlList,saveControl,setLinkedControlIds]);return/*#__PURE__*/_jsx(GenericEntityCreationCard,{editingEntity:editingEntity,setEditingEntity:setEditingEntity,header:\"Add new mitigation\",onSave:handleSave,onReset:handleReset,customEditors:/*#__PURE__*/_jsxs(SpaceBetween,{direction:\"vertical\",size:\"s\",children:[/*#__PURE__*/_jsx(ThreatLinkView,{linkedThreatIds:linkedThreatIds,threatList:statementList,onAddThreatLink:id=>setLinkedThreatIds(prev=>[...prev,id]),onRemoveThreatLink:id=>setLinkedThreatIds(prev=>prev.filter(p=>p!==id))}),/*#__PURE__*/_jsx(ControlLinkView,{linkedControlIds:linkedControlIds,controlList:controlList,onAddControlLink:handleAddControlLink,onRemoveControlLink:id=>setLinkedControlIds(prev=>prev.filter(p=>p!==id))}),/*#__PURE__*/_jsx(AssumptionLinkView,{linkedAssumptionIds:linkedAssumptionIds,assumptionList:assumptionList,onAddAssumptionLink:handleAddAssumptionLink,onRemoveAssumptionLink:id=>setLinkedAssumptionIds(prev=>prev.filter(p=>p!==id))})]})});};export default MitigationCreationCard;","map":{"version":3,"names":["SpaceBetween","useState","useCallback","useAssumptionsContext","useControlsContext","useThreatsContext","AssumptionLinkView","GenericEntityCreationCard","DEFAULT_ENTITY","ThreatLinkView","ControlLinkView","jsx","_jsx","jsxs","_jsxs","MitigationCreationCard","_ref","onSave","editingEntity","setEditingEntity","linkedAssumptionIds","setLinkedAssumptionIds","linkedControlIds","setLinkedControlIds","linkedThreatIds","setLinkedThreatIds","assumptionList","saveAssumption","controlList","saveControl","statementList","handleSave","handleReset","handleAddAssumptionLink","assumptionIdOrNewAssumption","find","a","id","prev","newAssumption","numericId","content","handleAddControlLink","controlIdOrNewControl","newControl","header","onReset","customEditors","direction","size","children","threatList","onAddThreatLink","onRemoveThreatLink","filter","p","onAddControlLink","onRemoveControlLink","onAddAssumptionLink","onRemoveAssumptionLink"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/src/components/mitigations/MitigationCreationCard/index.tsx"],"sourcesContent":["/** *******************************************************************************************************************\n  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\").\n  You may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n ******************************************************************************************************************** */\n\nimport SpaceBetween from '@cloudscape-design/components/space-between';\nimport { FC, useState, useCallback } from 'react';\nimport { useAssumptionsContext } from '../../../contexts/AssumptionsContext/context';\nimport { useControlsContext } from '../../../contexts/ControlsContext/context';\nimport { useThreatsContext } from '../../../contexts/ThreatsContext/context';\nimport { Mitigation } from '../../../customTypes';\nimport AssumptionLinkView from '../../assumptions/AssumptionLinkView';\nimport GenericEntityCreationCard, { DEFAULT_ENTITY } from '../../generic/GenericEntityCreationCard';\nimport ThreatLinkView from '../../threats/ThreatLinkView';\nimport ControlLinkView from '../../controls/ControlLinkView';\n\nexport interface MitigationCreationCardProps {\n  onSave?: (entity: Mitigation, linkedControlIds: string[], linkedAssumptionIds: string[], linkedThreatIds: string[]) => void;\n}\n\nconst MitigationCreationCard: FC<MitigationCreationCardProps> = ({ onSave }) => {\n  const [editingEntity, setEditingEntity] = useState<Mitigation>(DEFAULT_ENTITY);\n  const [linkedAssumptionIds, setLinkedAssumptionIds] = useState<string[]>([]);\n  const [linkedControlIds, setLinkedControlIds] = useState<string[]>([]);\n  const [linkedThreatIds, setLinkedThreatIds] = useState<string[]>([]);\n\n  const { assumptionList, saveAssumption } = useAssumptionsContext();\n  const { controlList, saveControl } = useControlsContext();\n  const { statementList } = useThreatsContext();\n\n  const handleSave = useCallback(() => {\n    onSave?.(editingEntity, linkedControlIds, linkedAssumptionIds, linkedThreatIds);\n    setEditingEntity(DEFAULT_ENTITY);\n    setLinkedControlIds([]);\n    setLinkedAssumptionIds([]);\n    setLinkedThreatIds([]);\n  }, [editingEntity, linkedControlIds, linkedAssumptionIds, linkedThreatIds, onSave]);\n\n  const handleReset = useCallback(() => {\n    setEditingEntity(DEFAULT_ENTITY);\n    setLinkedAssumptionIds([]);\n    setLinkedControlIds([]);\n    setLinkedThreatIds([]);\n  }, []);\n\n  const handleAddAssumptionLink = useCallback((assumptionIdOrNewAssumption: string) => {\n    if (assumptionList.find(a => a.id === assumptionIdOrNewAssumption)) {\n      setLinkedAssumptionIds(prev => [...prev, assumptionIdOrNewAssumption]);\n    } else {\n      const newAssumption = saveAssumption({\n        numericId: -1,\n        content: assumptionIdOrNewAssumption,\n        id: 'new',\n      });\n      setLinkedAssumptionIds(prev => [...prev, newAssumption.id]);\n    }\n  }, [assumptionList, saveAssumption, setLinkedAssumptionIds]);\n\n  const handleAddControlLink = useCallback((controlIdOrNewControl: string) => {\n    if (controlList.find(a => a.id === controlIdOrNewControl)) {\n      setLinkedControlIds(prev => [...prev, controlIdOrNewControl]);\n    } else {\n      const newControl = saveControl({\n        numericId: -1,\n        content: controlIdOrNewControl,\n        id: 'new',\n      });\n      setLinkedControlIds(prev => [...prev, newControl.id]);\n    }\n  }, [controlList, saveControl, setLinkedControlIds]);\n\n  return (<GenericEntityCreationCard\n    editingEntity={editingEntity}\n    setEditingEntity={setEditingEntity}\n    header='Add new mitigation'\n    onSave={handleSave}\n    onReset={handleReset}\n    customEditors={<SpaceBetween direction='vertical' size='s'>\n      <ThreatLinkView\n        linkedThreatIds={linkedThreatIds}\n        threatList={statementList}\n        onAddThreatLink={(id) => setLinkedThreatIds(prev => [...prev, id])}\n        onRemoveThreatLink={(id) => setLinkedThreatIds(prev => prev.filter(p => p !== id))}\n      />\n      <ControlLinkView\n        linkedControlIds={linkedControlIds}\n        controlList={controlList}\n        onAddControlLink={handleAddControlLink}\n        onRemoveControlLink={(id) => setLinkedControlIds(prev => prev.filter(p => p !== id))}\n      />\n      <AssumptionLinkView\n        linkedAssumptionIds={linkedAssumptionIds}\n        assumptionList={assumptionList}\n        onAddAssumptionLink={handleAddAssumptionLink}\n        onRemoveAssumptionLink={(id) => setLinkedAssumptionIds(prev => prev.filter(p => p !== id))}\n      />\n    </SpaceBetween>}\n  />);\n};\n\nexport default MitigationCreationCard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}