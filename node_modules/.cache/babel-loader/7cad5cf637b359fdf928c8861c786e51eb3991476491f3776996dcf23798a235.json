{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useRef } from 'react';\n/**\n * useScrollSync returns scroll event handler to be attached to synchronized scroll elements.\n *\n * For example\n *    const handleScroll = useScrollSync([ref1, ref2]);\n *    <div ref={ref1} onScroll={handleScroll}/>\n *    <div ref={ref2} onScroll={handleScroll}/>\n */\nexport function useScrollSync(refs) {\n  const activeElement = useRef(null);\n  return event => {\n    const targetElement = event.currentTarget;\n    // remembers the first element that fires onscroll to align with other elements against it\n    if (targetElement && (activeElement.current === null || activeElement.current === targetElement)) {\n      requestAnimationFrame(() => {\n        activeElement.current = targetElement;\n        refs.forEach(ref => {\n          const element = ref.current;\n          if (element && element !== targetElement) {\n            element.scrollLeft = targetElement.scrollLeft;\n          }\n        });\n        // unblock the ability to scroll the synced elements\n        requestAnimationFrame(() => {\n          activeElement.current = null;\n        });\n      });\n    }\n  };\n}","map":{"version":3,"names":["useRef","useScrollSync","refs","activeElement","event","targetElement","currentTarget","current","requestAnimationFrame","forEach","ref","element","scrollLeft"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/internal/hooks/use-scroll-sync/index.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { RefObject, useRef } from 'react';\n\n/**\n * useScrollSync returns scroll event handler to be attached to synchronized scroll elements.\n *\n * For example\n *    const handleScroll = useScrollSync([ref1, ref2]);\n *    <div ref={ref1} onScroll={handleScroll}/>\n *    <div ref={ref2} onScroll={handleScroll}/>\n */\nexport function useScrollSync(refs: Array<RefObject<any>>) {\n  const activeElement = useRef<HTMLElement | null>(null);\n\n  return (event: React.UIEvent) => {\n    const targetElement = event.currentTarget as HTMLElement;\n    // remembers the first element that fires onscroll to align with other elements against it\n    if (targetElement && (activeElement.current === null || activeElement.current === targetElement)) {\n      requestAnimationFrame(() => {\n        activeElement.current = targetElement;\n        refs.forEach(ref => {\n          const element = ref.current;\n          if (element && element !== targetElement) {\n            element.scrollLeft = targetElement.scrollLeft;\n          }\n        });\n        // unblock the ability to scroll the synced elements\n        requestAnimationFrame(() => {\n          activeElement.current = null;\n        });\n      });\n    }\n  };\n}\n"],"mappings":"AAAA;AACA;AACA,SAA2BA,MAAM,QAAQ,OAAO;AAEhD;;;;;;;;AAQA,OAAM,SAAUC,aAAaA,CAACC,IAA2B;EACvD,MAAMC,aAAa,GAAGH,MAAM,CAAqB,IAAI,CAAC;EAEtD,OAAQI,KAAoB,IAAI;IAC9B,MAAMC,aAAa,GAAGD,KAAK,CAACE,aAA4B;IACxD;IACA,IAAID,aAAa,KAAKF,aAAa,CAACI,OAAO,KAAK,IAAI,IAAIJ,aAAa,CAACI,OAAO,KAAKF,aAAa,CAAC,EAAE;MAChGG,qBAAqB,CAAC,MAAK;QACzBL,aAAa,CAACI,OAAO,GAAGF,aAAa;QACrCH,IAAI,CAACO,OAAO,CAACC,GAAG,IAAG;UACjB,MAAMC,OAAO,GAAGD,GAAG,CAACH,OAAO;UAC3B,IAAII,OAAO,IAAIA,OAAO,KAAKN,aAAa,EAAE;YACxCM,OAAO,CAACC,UAAU,GAAGP,aAAa,CAACO,UAAU;;QAEjD,CAAC,CAAC;QACF;QACAJ,qBAAqB,CAAC,MAAK;UACzBL,aAAa,CAACI,OAAO,GAAG,IAAI;QAC9B,CAAC,CAAC;MACJ,CAAC,CAAC;;EAEN,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}