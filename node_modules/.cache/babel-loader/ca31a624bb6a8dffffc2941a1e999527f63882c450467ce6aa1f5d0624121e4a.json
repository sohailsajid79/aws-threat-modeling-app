{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport { getBaseProps } from '../internal/base-component';\nimport OptionComponent from '../internal/components/option';\nimport { getTestOptionIndexes } from '../internal/components/options-list/utils/test-indexes';\nimport SelectableItem from '../internal/components/selectable-item';\nimport styles from './styles.css.js';\nconst AutosuggestOption = (_a, ref) => {\n  var {\n      nativeAttributes = {},\n      highlightText,\n      option,\n      highlighted,\n      highlightType,\n      current,\n      virtualPosition,\n      padBottom,\n      screenReaderContent,\n      ariaSetsize,\n      ariaPosinset\n    } = _a,\n    rest = __rest(_a, [\"nativeAttributes\", \"highlightText\", \"option\", \"highlighted\", \"highlightType\", \"current\", \"virtualPosition\", \"padBottom\", \"screenReaderContent\", \"ariaSetsize\", \"ariaPosinset\"]);\n  const baseProps = getBaseProps(rest);\n  const useEntered = 'type' in option && option.type === 'use-entered';\n  const isParent = 'type' in option && option.type === 'parent';\n  const isChild = 'type' in option && option.type === 'child';\n  const {\n    throughIndex,\n    inGroupIndex,\n    groupIndex\n  } = getTestOptionIndexes(option) || {};\n  let optionContent;\n  if (useEntered) {\n    optionContent = option.label;\n    // we don't want fancy generated content for screenreader for the \"Use...\" option,\n    // just the visible text is fine\n    screenReaderContent = undefined;\n  } else if (isParent) {\n    optionContent = option.label;\n  } else {\n    const a11yProperties = {};\n    if (nativeAttributes['aria-label']) {\n      a11yProperties['aria-label'] = nativeAttributes['aria-label'];\n    }\n    optionContent = React.createElement(\"div\", Object.assign({}, a11yProperties), React.createElement(OptionComponent, {\n      option: option,\n      highlightedOption: highlighted,\n      highlightText: highlightText\n    }));\n  }\n  return React.createElement(SelectableItem, Object.assign({}, baseProps, {\n    className: styles.option,\n    ariaSelected: current,\n    highlighted: highlighted,\n    disabled: option.disabled,\n    hasBackground: useEntered,\n    isParent: isParent,\n    isChild: isChild,\n    virtualPosition: virtualPosition,\n    \"data-test-index\": throughIndex,\n    \"data-in-group-index\": inGroupIndex,\n    \"data-group-index\": groupIndex,\n    ref: ref,\n    padBottom: padBottom,\n    screenReaderContent: screenReaderContent,\n    ariaSetsize: ariaSetsize,\n    ariaPosinset: ariaPosinset,\n    highlightType: highlightType.type,\n    value: option.value\n  }), optionContent);\n};\nexport default React.memo(React.forwardRef(AutosuggestOption));","map":{"version":3,"names":["React","getBaseProps","OptionComponent","getTestOptionIndexes","SelectableItem","styles","AutosuggestOption","_a","ref","nativeAttributes","highlightText","option","highlighted","highlightType","current","virtualPosition","padBottom","screenReaderContent","ariaSetsize","ariaPosinset","rest","__rest","baseProps","useEntered","type","isParent","isChild","throughIndex","inGroupIndex","groupIndex","optionContent","label","undefined","a11yProperties","createElement","Object","assign","highlightedOption","className","ariaSelected","disabled","hasBackground","value","memo","forwardRef"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/autosuggest/autosuggest-option.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\n\nimport { BaseComponentProps, getBaseProps } from '../internal/base-component';\nimport OptionComponent from '../internal/components/option';\nimport { getTestOptionIndexes } from '../internal/components/options-list/utils/test-indexes';\nimport { HighlightType } from '../internal/components/options-list/utils/use-highlight-option';\nimport SelectableItem from '../internal/components/selectable-item';\nimport { AutosuggestItem } from './interfaces';\n\nimport styles from './styles.css.js';\n\nexport interface AutosuggestOptionProps extends BaseComponentProps {\n  nativeAttributes?: React.HTMLAttributes<HTMLDivElement>;\n  highlightText: string;\n  option: AutosuggestItem;\n  highlighted: boolean;\n  highlightType: HighlightType;\n  current: boolean;\n  virtualPosition?: number;\n  padBottom?: boolean;\n  screenReaderContent?: string;\n  ariaSetsize?: number;\n  ariaPosinset?: number;\n}\n\nconst AutosuggestOption = (\n  {\n    nativeAttributes = {},\n    highlightText,\n    option,\n    highlighted,\n    highlightType,\n    current,\n    virtualPosition,\n    padBottom,\n    screenReaderContent,\n    ariaSetsize,\n    ariaPosinset,\n    ...rest\n  }: AutosuggestOptionProps,\n  ref: React.Ref<HTMLDivElement>\n) => {\n  const baseProps = getBaseProps(rest);\n  const useEntered = 'type' in option && option.type === 'use-entered';\n  const isParent = 'type' in option && option.type === 'parent';\n  const isChild = 'type' in option && option.type === 'child';\n  const { throughIndex, inGroupIndex, groupIndex } = getTestOptionIndexes(option) || {};\n\n  let optionContent;\n  if (useEntered) {\n    optionContent = option.label;\n    // we don't want fancy generated content for screenreader for the \"Use...\" option,\n    // just the visible text is fine\n    screenReaderContent = undefined;\n  } else if (isParent) {\n    optionContent = option.label;\n  } else {\n    const a11yProperties: AutosuggestOptionProps['nativeAttributes'] = {};\n    if (nativeAttributes['aria-label']) {\n      a11yProperties['aria-label'] = nativeAttributes['aria-label'];\n    }\n\n    optionContent = (\n      <div {...a11yProperties}>\n        <OptionComponent option={option} highlightedOption={highlighted} highlightText={highlightText} />\n      </div>\n    );\n  }\n\n  return (\n    <SelectableItem\n      {...baseProps}\n      className={styles.option}\n      ariaSelected={current}\n      highlighted={highlighted}\n      disabled={option.disabled}\n      hasBackground={useEntered}\n      isParent={isParent}\n      isChild={isChild}\n      virtualPosition={virtualPosition}\n      data-test-index={throughIndex}\n      data-in-group-index={inGroupIndex}\n      data-group-index={groupIndex}\n      ref={ref}\n      padBottom={padBottom}\n      screenReaderContent={screenReaderContent}\n      ariaSetsize={ariaSetsize}\n      ariaPosinset={ariaPosinset}\n      highlightType={highlightType.type}\n      value={option.value}\n    >\n      {optionContent}\n    </SelectableItem>\n  );\n};\n\nexport default React.memo(React.forwardRef(AutosuggestOption));\n"],"mappings":";AAAA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAA6BC,YAAY,QAAQ,4BAA4B;AAC7E,OAAOC,eAAe,MAAM,+BAA+B;AAC3D,SAASC,oBAAoB,QAAQ,wDAAwD;AAE7F,OAAOC,cAAc,MAAM,wCAAwC;AAGnE,OAAOC,MAAM,MAAM,iBAAiB;AAgBpC,MAAMC,iBAAiB,GAAGA,CACxBC,EAayB,EACzBC,GAA8B,KAC5B;MAfF;MACEC,gBAAgB,GAAG,EAAE;MACrBC,aAAa;MACbC,MAAM;MACNC,WAAW;MACXC,aAAa;MACbC,OAAO;MACPC,eAAe;MACfC,SAAS;MACTC,mBAAmB;MACnBC,WAAW;MACXC;IAAY,IAAAZ,EAEW;IADpBa,IAAI,GAAAC,MAAA,CAAAd,EAAA,EAZT,gLAaC,CADQ;EAIT,MAAMe,SAAS,GAAGrB,YAAY,CAACmB,IAAI,CAAC;EACpC,MAAMG,UAAU,GAAG,MAAM,IAAIZ,MAAM,IAAIA,MAAM,CAACa,IAAI,KAAK,aAAa;EACpE,MAAMC,QAAQ,GAAG,MAAM,IAAId,MAAM,IAAIA,MAAM,CAACa,IAAI,KAAK,QAAQ;EAC7D,MAAME,OAAO,GAAG,MAAM,IAAIf,MAAM,IAAIA,MAAM,CAACa,IAAI,KAAK,OAAO;EAC3D,MAAM;IAAEG,YAAY;IAAEC,YAAY;IAAEC;EAAU,CAAE,GAAG1B,oBAAoB,CAACQ,MAAM,CAAC,IAAI,EAAE;EAErF,IAAImB,aAAa;EACjB,IAAIP,UAAU,EAAE;IACdO,aAAa,GAAGnB,MAAM,CAACoB,KAAK;IAC5B;IACA;IACAd,mBAAmB,GAAGe,SAAS;GAChC,MAAM,IAAIP,QAAQ,EAAE;IACnBK,aAAa,GAAGnB,MAAM,CAACoB,KAAK;GAC7B,MAAM;IACL,MAAME,cAAc,GAA+C,EAAE;IACrE,IAAIxB,gBAAgB,CAAC,YAAY,CAAC,EAAE;MAClCwB,cAAc,CAAC,YAAY,CAAC,GAAGxB,gBAAgB,CAAC,YAAY,CAAC;;IAG/DqB,aAAa,GACX9B,KAAA,CAAAkC,aAAA,QAAAC,MAAA,CAAAC,MAAA,KAASH,cAAc,GACrBjC,KAAA,CAAAkC,aAAA,CAAChC,eAAe;MAACS,MAAM,EAAEA,MAAM;MAAE0B,iBAAiB,EAAEzB,WAAW;MAAEF,aAAa,EAAEA;IAAa,EAAI,CAEpG;;EAGH,OACEV,KAAA,CAAAkC,aAAA,CAAC9B,cAAc,EAAA+B,MAAA,CAAAC,MAAA,KACTd,SAAS;IACbgB,SAAS,EAAEjC,MAAM,CAACM,MAAM;IACxB4B,YAAY,EAAEzB,OAAO;IACrBF,WAAW,EAAEA,WAAW;IACxB4B,QAAQ,EAAE7B,MAAM,CAAC6B,QAAQ;IACzBC,aAAa,EAAElB,UAAU;IACzBE,QAAQ,EAAEA,QAAQ;IAClBC,OAAO,EAAEA,OAAO;IAChBX,eAAe,EAAEA,eAAe;IAAA,mBACfY,YAAY;IAAA,uBACRC,YAAY;IAAA,oBACfC,UAAU;IAC5BrB,GAAG,EAAEA,GAAG;IACRQ,SAAS,EAAEA,SAAS;IACpBC,mBAAmB,EAAEA,mBAAmB;IACxCC,WAAW,EAAEA,WAAW;IACxBC,YAAY,EAAEA,YAAY;IAC1BN,aAAa,EAAEA,aAAa,CAACW,IAAI;IACjCkB,KAAK,EAAE/B,MAAM,CAAC+B;EAAK,IAElBZ,aAAa,CACC;AAErB,CAAC;AAED,eAAe9B,KAAK,CAAC2C,IAAI,CAAC3C,KAAK,CAAC4C,UAAU,CAACtC,iBAAiB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}