{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef, useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\nimport { getBaseProps } from '../internal/base-component';\nimport { getAllFocusables } from '../internal/components/focus-lock/utils';\nimport { SingleTabStopNavigationProvider } from '../internal/context/single-tab-stop-navigation-context';\nimport { hasModifierKeys } from '../internal/events';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { KeyCode } from '../internal/keycode';\nimport { circleIndex } from '../internal/utils/circle-index';\nimport handleKey from '../internal/utils/handle-key';\nimport ItemElement from './item-element.js';\nimport styles from './styles.css.js';\nimport testUtilStyles from './test-classes/styles.css.js';\nconst InternalButtonGroup = forwardRef((_a, ref) => {\n  var {\n      items = [],\n      onItemClick,\n      ariaLabel,\n      dropdownExpandToViewport,\n      __internalRootRef = null\n    } = _a,\n    props = __rest(_a, [\"items\", \"onItemClick\", \"ariaLabel\", \"dropdownExpandToViewport\", \"__internalRootRef\"]);\n  const baseProps = getBaseProps(props);\n  const focusedIdRef = useRef(null);\n  const navigationAPI = useRef(null);\n  const containerObjectRef = useRef(null);\n  const containerRef = useMergeRefs(containerObjectRef, __internalRootRef);\n  const itemsRef = useRef({});\n  const [tooltip, setTooltip] = useState(null);\n  useImperativeHandle(ref, () => ({\n    focus: id => {\n      var _a;\n      (_a = itemsRef.current[id]) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n  }));\n  function getNextFocusTarget() {\n    var _a, _b;\n    if (containerObjectRef.current) {\n      const buttons = Array.from(containerObjectRef.current.querySelectorAll(`.${testUtilStyles.item}`));\n      const activeButtons = buttons.filter(button => !button.disabled);\n      return (_b = (_a = activeButtons.find(button => button.dataset.itemid === focusedIdRef.current)) !== null && _a !== void 0 ? _a : activeButtons[0]) !== null && _b !== void 0 ? _b : null;\n    }\n    return null;\n  }\n  function onUnregisterActive(focusableElement) {\n    var _a;\n    // Only refocus when the node is actually removed (no such ID anymore).\n    const target = (_a = navigationAPI.current) === null || _a === void 0 ? void 0 : _a.getFocusTarget();\n    if (target && target.dataset.itemid !== focusableElement.dataset.itemid) {\n      target.focus();\n    }\n  }\n  useEffect(() => {\n    var _a;\n    (_a = navigationAPI.current) === null || _a === void 0 ? void 0 : _a.updateFocusTarget();\n  });\n  function onFocus(event) {\n    var _a;\n    if (event.target instanceof HTMLElement && event.target.dataset.itemid) {\n      focusedIdRef.current = event.target.dataset.itemid;\n    }\n    (_a = navigationAPI.current) === null || _a === void 0 ? void 0 : _a.updateFocusTarget();\n  }\n  function onBlur() {\n    var _a;\n    (_a = navigationAPI.current) === null || _a === void 0 ? void 0 : _a.updateFocusTarget();\n  }\n  function onKeyDown(event) {\n    var _a;\n    const focusTarget = (_a = navigationAPI.current) === null || _a === void 0 ? void 0 : _a.getFocusTarget();\n    const specialKeys = [KeyCode.right, KeyCode.left, KeyCode.end, KeyCode.home, KeyCode.pageUp, KeyCode.pageDown];\n    if (hasModifierKeys(event) || specialKeys.indexOf(event.keyCode) === -1) {\n      return;\n    }\n    if (!containerObjectRef.current || !focusTarget) {\n      return;\n    }\n    // Ignore navigation when the focused element is not an item.\n    if (document.activeElement && !document.activeElement.matches(`.${testUtilStyles.item}`)) {\n      return;\n    }\n    event.preventDefault();\n    const focusables = getFocusablesFrom(containerObjectRef.current);\n    const activeIndex = focusables.indexOf(focusTarget);\n    handleKey(event, {\n      onHome: () => focusElement(focusables[0]),\n      onEnd: () => focusElement(focusables[focusables.length - 1]),\n      onInlineStart: () => focusElement(focusables[circleIndex(activeIndex - 1, [0, focusables.length - 1])]),\n      onInlineEnd: () => focusElement(focusables[circleIndex(activeIndex + 1, [0, focusables.length - 1])])\n    });\n  }\n  function focusElement(element) {\n    element.focus();\n  }\n  // List all non-disabled and registered focusables: those are eligible for keyboard navigation.\n  function getFocusablesFrom(target) {\n    function isElementRegistered(element) {\n      var _a, _b;\n      return (_b = (_a = navigationAPI.current) === null || _a === void 0 ? void 0 : _a.isRegistered(element)) !== null && _b !== void 0 ? _b : false;\n    }\n    function isElementDisabled(element) {\n      if (element instanceof HTMLButtonElement) {\n        return element.disabled;\n      }\n      return false;\n    }\n    return getAllFocusables(target).filter(el => isElementRegistered(el) && !isElementDisabled(el));\n  }\n  return React.createElement(\"div\", Object.assign({}, baseProps, {\n    className: clsx(styles.root, testUtilStyles['button-group'], baseProps.className),\n    ref: containerRef,\n    role: \"toolbar\",\n    \"aria-label\": ariaLabel,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    onKeyDown: onKeyDown\n  }), React.createElement(SingleTabStopNavigationProvider, {\n    ref: navigationAPI,\n    navigationActive: true,\n    getNextFocusTarget: getNextFocusTarget,\n    onUnregisterActive: onUnregisterActive\n  }, items.map((itemOrGroup, index) => {\n    var _a;\n    const itemContent = item => React.createElement(ItemElement, {\n      key: item.id,\n      item: item,\n      dropdownExpandToViewport: dropdownExpandToViewport,\n      tooltip: tooltip,\n      setTooltip: setTooltip,\n      onItemClick: onItemClick,\n      ref: element => itemsRef.current[item.id] = element\n    });\n    const isGroupBefore = ((_a = items[index - 1]) === null || _a === void 0 ? void 0 : _a.type) === 'group';\n    const currentItem = items[index];\n    const isGroupNow = (currentItem === null || currentItem === void 0 ? void 0 : currentItem.type) === 'group';\n    const shouldAddDivider = isGroupBefore || !isGroupBefore && isGroupNow && index !== 0;\n    if (isGroupNow && currentItem.items.length === 0) {\n      warnOnce('ButtonGroup', 'Empty group detected. Empty groups are not allowed.');\n    }\n    return React.createElement(React.Fragment, {\n      key: itemOrGroup.type === 'group' ? index : itemOrGroup.id\n    }, shouldAddDivider && React.createElement(\"div\", {\n      className: styles.divider\n    }), itemOrGroup.type === 'group' ? React.createElement(\"div\", {\n      key: index,\n      role: \"group\",\n      \"aria-label\": itemOrGroup.text,\n      className: styles.group\n    }, itemOrGroup.items.map(item => itemContent(item))) : itemContent(itemOrGroup));\n  })));\n});\nexport default InternalButtonGroup;","map":{"version":3,"names":["React","forwardRef","useEffect","useImperativeHandle","useRef","useState","clsx","warnOnce","getBaseProps","getAllFocusables","SingleTabStopNavigationProvider","hasModifierKeys","useMergeRefs","KeyCode","circleIndex","handleKey","ItemElement","styles","testUtilStyles","InternalButtonGroup","_a","ref","items","onItemClick","ariaLabel","dropdownExpandToViewport","__internalRootRef","props","__rest","baseProps","focusedIdRef","navigationAPI","containerObjectRef","containerRef","itemsRef","tooltip","setTooltip","focus","id","current","getNextFocusTarget","buttons","Array","from","querySelectorAll","item","activeButtons","filter","button","disabled","_b","find","dataset","itemid","onUnregisterActive","focusableElement","target","getFocusTarget","updateFocusTarget","onFocus","event","HTMLElement","onBlur","onKeyDown","focusTarget","specialKeys","right","left","end","home","pageUp","pageDown","indexOf","keyCode","document","activeElement","matches","preventDefault","focusables","getFocusablesFrom","activeIndex","onHome","focusElement","onEnd","length","onInlineStart","onInlineEnd","element","isElementRegistered","isRegistered","isElementDisabled","HTMLButtonElement","el","createElement","Object","assign","className","root","role","navigationActive","map","itemOrGroup","index","itemContent","key","isGroupBefore","type","currentItem","isGroupNow","shouldAddDivider","Fragment","divider","text","group"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/button-group/internal.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef, useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport clsx from 'clsx';\n\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\n\nimport { ButtonProps } from '../button/interfaces';\nimport { getBaseProps } from '../internal/base-component';\nimport { getAllFocusables } from '../internal/components/focus-lock/utils';\nimport {\n  SingleTabStopNavigationAPI,\n  SingleTabStopNavigationProvider,\n} from '../internal/context/single-tab-stop-navigation-context';\nimport { hasModifierKeys } from '../internal/events';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { KeyCode } from '../internal/keycode';\nimport { circleIndex } from '../internal/utils/circle-index';\nimport handleKey from '../internal/utils/handle-key';\nimport { ButtonGroupProps, InternalButtonGroupProps } from './interfaces';\nimport ItemElement from './item-element.js';\n\nimport styles from './styles.css.js';\nimport testUtilStyles from './test-classes/styles.css.js';\n\nconst InternalButtonGroup = forwardRef(\n  (\n    {\n      items = [],\n      onItemClick,\n      ariaLabel,\n      dropdownExpandToViewport,\n      __internalRootRef = null,\n      ...props\n    }: InternalButtonGroupProps,\n    ref: React.Ref<ButtonGroupProps.Ref>\n  ) => {\n    const baseProps = getBaseProps(props);\n    const focusedIdRef = useRef<null | string>(null);\n    const navigationAPI = useRef<SingleTabStopNavigationAPI>(null);\n    const containerObjectRef = useRef<HTMLDivElement>(null);\n    const containerRef = useMergeRefs(containerObjectRef, __internalRootRef);\n    const itemsRef = useRef<Record<string, ButtonProps.Ref | null>>({});\n    const [tooltip, setTooltip] = useState<null | { item: string; feedback: boolean }>(null);\n\n    useImperativeHandle(ref, () => ({\n      focus: id => {\n        itemsRef.current[id]?.focus();\n      },\n    }));\n\n    function getNextFocusTarget(): null | HTMLElement {\n      if (containerObjectRef.current) {\n        const buttons: HTMLButtonElement[] = Array.from(\n          containerObjectRef.current.querySelectorAll(`.${testUtilStyles.item}`)\n        );\n        const activeButtons = buttons.filter(button => !button.disabled);\n        return activeButtons.find(button => button.dataset.itemid === focusedIdRef.current) ?? activeButtons[0] ?? null;\n      }\n      return null;\n    }\n\n    function onUnregisterActive(focusableElement: HTMLElement) {\n      // Only refocus when the node is actually removed (no such ID anymore).\n      const target = navigationAPI.current?.getFocusTarget();\n\n      if (target && target.dataset.itemid !== focusableElement.dataset.itemid) {\n        target.focus();\n      }\n    }\n\n    useEffect(() => {\n      navigationAPI.current?.updateFocusTarget();\n    });\n\n    function onFocus(event: React.FocusEvent) {\n      if (event.target instanceof HTMLElement && event.target.dataset.itemid) {\n        focusedIdRef.current = event.target.dataset.itemid;\n      }\n\n      navigationAPI.current?.updateFocusTarget();\n    }\n\n    function onBlur() {\n      navigationAPI.current?.updateFocusTarget();\n    }\n\n    function onKeyDown(event: React.KeyboardEvent) {\n      const focusTarget = navigationAPI.current?.getFocusTarget();\n      const specialKeys = [KeyCode.right, KeyCode.left, KeyCode.end, KeyCode.home, KeyCode.pageUp, KeyCode.pageDown];\n      if (hasModifierKeys(event) || specialKeys.indexOf(event.keyCode) === -1) {\n        return;\n      }\n      if (!containerObjectRef.current || !focusTarget) {\n        return;\n      }\n      // Ignore navigation when the focused element is not an item.\n      if (document.activeElement && !document.activeElement.matches(`.${testUtilStyles.item}`)) {\n        return;\n      }\n      event.preventDefault();\n\n      const focusables = getFocusablesFrom(containerObjectRef.current);\n      const activeIndex = focusables.indexOf(focusTarget);\n      handleKey(event as any, {\n        onHome: () => focusElement(focusables[0]),\n        onEnd: () => focusElement(focusables[focusables.length - 1]),\n        onInlineStart: () => focusElement(focusables[circleIndex(activeIndex - 1, [0, focusables.length - 1])]),\n        onInlineEnd: () => focusElement(focusables[circleIndex(activeIndex + 1, [0, focusables.length - 1])]),\n      });\n    }\n\n    function focusElement(element: HTMLElement) {\n      element.focus();\n    }\n\n    // List all non-disabled and registered focusables: those are eligible for keyboard navigation.\n    function getFocusablesFrom(target: HTMLElement) {\n      function isElementRegistered(element: HTMLElement) {\n        return navigationAPI.current?.isRegistered(element) ?? false;\n      }\n\n      function isElementDisabled(element: HTMLElement) {\n        if (element instanceof HTMLButtonElement) {\n          return element.disabled;\n        }\n\n        return false;\n      }\n\n      return getAllFocusables(target).filter(el => isElementRegistered(el) && !isElementDisabled(el));\n    }\n\n    return (\n      <div\n        {...baseProps}\n        className={clsx(styles.root, testUtilStyles['button-group'], baseProps.className)}\n        ref={containerRef}\n        role=\"toolbar\"\n        aria-label={ariaLabel}\n        onFocus={onFocus}\n        onBlur={onBlur}\n        onKeyDown={onKeyDown}\n      >\n        <SingleTabStopNavigationProvider\n          ref={navigationAPI}\n          navigationActive={true}\n          getNextFocusTarget={getNextFocusTarget}\n          onUnregisterActive={onUnregisterActive}\n        >\n          {items.map((itemOrGroup, index) => {\n            const itemContent = (item: ButtonGroupProps.Item) => (\n              <ItemElement\n                key={item.id}\n                item={item}\n                dropdownExpandToViewport={dropdownExpandToViewport}\n                tooltip={tooltip}\n                setTooltip={setTooltip}\n                onItemClick={onItemClick}\n                ref={element => (itemsRef.current[item.id] = element)}\n              />\n            );\n\n            const isGroupBefore = items[index - 1]?.type === 'group';\n            const currentItem = items[index];\n            const isGroupNow = currentItem?.type === 'group';\n            const shouldAddDivider = isGroupBefore || (!isGroupBefore && isGroupNow && index !== 0);\n\n            if (isGroupNow && currentItem.items.length === 0) {\n              warnOnce('ButtonGroup', 'Empty group detected. Empty groups are not allowed.');\n            }\n\n            return (\n              <React.Fragment key={itemOrGroup.type === 'group' ? index : itemOrGroup.id}>\n                {shouldAddDivider && <div className={styles.divider} />}\n                {itemOrGroup.type === 'group' ? (\n                  <div key={index} role=\"group\" aria-label={itemOrGroup.text} className={styles.group}>\n                    {itemOrGroup.items.map(item => itemContent(item))}\n                  </div>\n                ) : (\n                  itemContent(itemOrGroup)\n                )}\n              </React.Fragment>\n            );\n          })}\n        </SingleTabStopNavigationProvider>\n      </div>\n    );\n  }\n);\n\nexport default InternalButtonGroup;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}