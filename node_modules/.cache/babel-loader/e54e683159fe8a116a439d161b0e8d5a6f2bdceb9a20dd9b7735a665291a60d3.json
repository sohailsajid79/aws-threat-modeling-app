{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexport function getClosestCell(element) {\n  return element.closest('td,th');\n}\nexport function isElementDisabled(element) {\n  if (element instanceof HTMLInputElement || element instanceof HTMLButtonElement) {\n    return element.disabled;\n  }\n  return false;\n}\n/**\n * Returns true if the target element or one of its parents is a dialog or is marked with data-awsui-table-suppress-navigation attribute.\n * This is used to suppress navigation for interactive content without a need to use a custom suppression check.\n */\nexport function defaultIsSuppressed(target) {\n  let current = target;\n  while (current) {\n    // Stop checking for parents upon reaching the cell element as the function only aims at the cell content.\n    if (isTableCell(current)) {\n      return false;\n    }\n    if (current.getAttribute('role') === 'dialog' || current.getAttribute('data-awsui-table-suppress-navigation') === 'true') {\n      return true;\n    }\n    current = current.parentElement;\n  }\n  return false;\n}\n/**\n * Finds the closest row to the targetAriaRowIndex+delta in the direction of delta.\n */\nexport function findTableRowByAriaRowIndex(table, targetAriaRowIndex, delta) {\n  var _a;\n  let targetRow = null;\n  const rowElements = Array.from(table.querySelectorAll('tr[aria-rowindex]'));\n  if (delta < 0) {\n    rowElements.reverse();\n  }\n  for (const element of rowElements) {\n    const rowIndex = parseInt((_a = element.getAttribute('aria-rowindex')) !== null && _a !== void 0 ? _a : '');\n    targetRow = element;\n    if (rowIndex === targetAriaRowIndex) {\n      break;\n    }\n    if (delta >= 0 && rowIndex > targetAriaRowIndex) {\n      break;\n    }\n    if (delta < 0 && rowIndex < targetAriaRowIndex) {\n      break;\n    }\n  }\n  return targetRow;\n}\n/**\n * Finds the closest column to the targetAriaColIndex+delta in the direction of delta.\n */\nexport function findTableRowCellByAriaColIndex(tableRow, targetAriaColIndex, delta) {\n  var _a;\n  let targetCell = null;\n  const cellElements = Array.from(tableRow.querySelectorAll('td[aria-colindex],th[aria-colindex]'));\n  if (delta < 0) {\n    cellElements.reverse();\n  }\n  for (const element of cellElements) {\n    const columnIndex = parseInt((_a = element.getAttribute('aria-colindex')) !== null && _a !== void 0 ? _a : '');\n    targetCell = element;\n    if (columnIndex === targetAriaColIndex) {\n      break;\n    }\n    if (delta >= 0 && columnIndex > targetAriaColIndex) {\n      break;\n    }\n    if (delta < 0 && columnIndex < targetAriaColIndex) {\n      break;\n    }\n  }\n  return targetCell;\n}\nexport function isTableCell(element) {\n  return element.tagName === 'TD' || element.tagName === 'TH';\n}\nexport function focusNextElement(element) {\n  if (element) {\n    // Table cells are not focusable by default (tabIndex=undefined) and cell.focus() is ignored.\n    // To force focusing we have to imperatively set tabIndex to -1. When focused, the grid navigation\n    // will update the tabIndex to 0 if the cell gets focused or set it to undefined if the cell content\n    // gets focused instead.\n    // We cannot make cells have tabIndex=-1 by default due to an associated bug with text selection, see: PR 2158.\n    if (isTableCell(element)) {\n      element.tabIndex = -1;\n    }\n    element.focus();\n  }\n}","map":{"version":3,"names":["getClosestCell","element","closest","isElementDisabled","HTMLInputElement","HTMLButtonElement","disabled","defaultIsSuppressed","target","current","isTableCell","getAttribute","parentElement","findTableRowByAriaRowIndex","table","targetAriaRowIndex","delta","targetRow","rowElements","Array","from","querySelectorAll","reverse","rowIndex","parseInt","_a","findTableRowCellByAriaColIndex","tableRow","targetAriaColIndex","targetCell","cellElements","columnIndex","tagName","focusNextElement","tabIndex","focus"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/table/table-role/utils.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nexport function getClosestCell(element: Element) {\n  return element.closest('td,th') as null | HTMLTableCellElement;\n}\n\nexport function isElementDisabled(element: HTMLElement) {\n  if (element instanceof HTMLInputElement || element instanceof HTMLButtonElement) {\n    return element.disabled;\n  }\n  return false;\n}\n\n/**\n * Returns true if the target element or one of its parents is a dialog or is marked with data-awsui-table-suppress-navigation attribute.\n * This is used to suppress navigation for interactive content without a need to use a custom suppression check.\n */\nexport function defaultIsSuppressed(target: Element) {\n  let current: null | Element = target;\n  while (current) {\n    // Stop checking for parents upon reaching the cell element as the function only aims at the cell content.\n    if (isTableCell(current)) {\n      return false;\n    }\n    if (\n      current.getAttribute('role') === 'dialog' ||\n      current.getAttribute('data-awsui-table-suppress-navigation') === 'true'\n    ) {\n      return true;\n    }\n    current = current.parentElement;\n  }\n  return false;\n}\n\n/**\n * Finds the closest row to the targetAriaRowIndex+delta in the direction of delta.\n */\nexport function findTableRowByAriaRowIndex(table: HTMLTableElement, targetAriaRowIndex: number, delta: number) {\n  let targetRow: null | HTMLTableRowElement = null;\n  const rowElements = Array.from(table.querySelectorAll('tr[aria-rowindex]'));\n  if (delta < 0) {\n    rowElements.reverse();\n  }\n  for (const element of rowElements) {\n    const rowIndex = parseInt(element.getAttribute('aria-rowindex') ?? '');\n    targetRow = element as HTMLTableRowElement;\n\n    if (rowIndex === targetAriaRowIndex) {\n      break;\n    }\n    if (delta >= 0 && rowIndex > targetAriaRowIndex) {\n      break;\n    }\n    if (delta < 0 && rowIndex < targetAriaRowIndex) {\n      break;\n    }\n  }\n  return targetRow;\n}\n\n/**\n * Finds the closest column to the targetAriaColIndex+delta in the direction of delta.\n */\nexport function findTableRowCellByAriaColIndex(\n  tableRow: HTMLTableRowElement,\n  targetAriaColIndex: number,\n  delta: number\n) {\n  let targetCell: null | HTMLTableCellElement = null;\n  const cellElements = Array.from(tableRow.querySelectorAll('td[aria-colindex],th[aria-colindex]'));\n  if (delta < 0) {\n    cellElements.reverse();\n  }\n  for (const element of cellElements) {\n    const columnIndex = parseInt(element.getAttribute('aria-colindex') ?? '');\n    targetCell = element as HTMLTableCellElement;\n\n    if (columnIndex === targetAriaColIndex) {\n      break;\n    }\n    if (delta >= 0 && columnIndex > targetAriaColIndex) {\n      break;\n    }\n    if (delta < 0 && columnIndex < targetAriaColIndex) {\n      break;\n    }\n  }\n  return targetCell;\n}\n\nexport function isTableCell(element: Element) {\n  return element.tagName === 'TD' || element.tagName === 'TH';\n}\n\nexport function focusNextElement(element: null | HTMLElement) {\n  if (element) {\n    // Table cells are not focusable by default (tabIndex=undefined) and cell.focus() is ignored.\n    // To force focusing we have to imperatively set tabIndex to -1. When focused, the grid navigation\n    // will update the tabIndex to 0 if the cell gets focused or set it to undefined if the cell content\n    // gets focused instead.\n    // We cannot make cells have tabIndex=-1 by default due to an associated bug with text selection, see: PR 2158.\n    if (isTableCell(element)) {\n      element.tabIndex = -1;\n    }\n    element.focus();\n  }\n}\n"],"mappings":"AAAA;AACA;AAEA,OAAM,SAAUA,cAAcA,CAACC,OAAgB;EAC7C,OAAOA,OAAO,CAACC,OAAO,CAAC,OAAO,CAAgC;AAChE;AAEA,OAAM,SAAUC,iBAAiBA,CAACF,OAAoB;EACpD,IAAIA,OAAO,YAAYG,gBAAgB,IAAIH,OAAO,YAAYI,iBAAiB,EAAE;IAC/E,OAAOJ,OAAO,CAACK,QAAQ;;EAEzB,OAAO,KAAK;AACd;AAEA;;;;AAIA,OAAM,SAAUC,mBAAmBA,CAACC,MAAe;EACjD,IAAIC,OAAO,GAAmBD,MAAM;EACpC,OAAOC,OAAO,EAAE;IACd;IACA,IAAIC,WAAW,CAACD,OAAO,CAAC,EAAE;MACxB,OAAO,KAAK;;IAEd,IACEA,OAAO,CAACE,YAAY,CAAC,MAAM,CAAC,KAAK,QAAQ,IACzCF,OAAO,CAACE,YAAY,CAAC,sCAAsC,CAAC,KAAK,MAAM,EACvE;MACA,OAAO,IAAI;;IAEbF,OAAO,GAAGA,OAAO,CAACG,aAAa;;EAEjC,OAAO,KAAK;AACd;AAEA;;;AAGA,OAAM,SAAUC,0BAA0BA,CAACC,KAAuB,EAAEC,kBAA0B,EAAEC,KAAa;;EAC3G,IAAIC,SAAS,GAA+B,IAAI;EAChD,MAAMC,WAAW,GAAGC,KAAK,CAACC,IAAI,CAACN,KAAK,CAACO,gBAAgB,CAAC,mBAAmB,CAAC,CAAC;EAC3E,IAAIL,KAAK,GAAG,CAAC,EAAE;IACbE,WAAW,CAACI,OAAO,EAAE;;EAEvB,KAAK,MAAMrB,OAAO,IAAIiB,WAAW,EAAE;IACjC,MAAMK,QAAQ,GAAGC,QAAQ,CAAC,CAAAC,EAAA,GAAAxB,OAAO,CAACU,YAAY,CAAC,eAAe,CAAC,cAAAc,EAAA,cAAAA,EAAA,GAAI,EAAE,CAAC;IACtER,SAAS,GAAGhB,OAA8B;IAE1C,IAAIsB,QAAQ,KAAKR,kBAAkB,EAAE;MACnC;;IAEF,IAAIC,KAAK,IAAI,CAAC,IAAIO,QAAQ,GAAGR,kBAAkB,EAAE;MAC/C;;IAEF,IAAIC,KAAK,GAAG,CAAC,IAAIO,QAAQ,GAAGR,kBAAkB,EAAE;MAC9C;;;EAGJ,OAAOE,SAAS;AAClB;AAEA;;;AAGA,OAAM,SAAUS,8BAA8BA,CAC5CC,QAA6B,EAC7BC,kBAA0B,EAC1BZ,KAAa;;EAEb,IAAIa,UAAU,GAAgC,IAAI;EAClD,MAAMC,YAAY,GAAGX,KAAK,CAACC,IAAI,CAACO,QAAQ,CAACN,gBAAgB,CAAC,qCAAqC,CAAC,CAAC;EACjG,IAAIL,KAAK,GAAG,CAAC,EAAE;IACbc,YAAY,CAACR,OAAO,EAAE;;EAExB,KAAK,MAAMrB,OAAO,IAAI6B,YAAY,EAAE;IAClC,MAAMC,WAAW,GAAGP,QAAQ,CAAC,CAAAC,EAAA,GAAAxB,OAAO,CAACU,YAAY,CAAC,eAAe,CAAC,cAAAc,EAAA,cAAAA,EAAA,GAAI,EAAE,CAAC;IACzEI,UAAU,GAAG5B,OAA+B;IAE5C,IAAI8B,WAAW,KAAKH,kBAAkB,EAAE;MACtC;;IAEF,IAAIZ,KAAK,IAAI,CAAC,IAAIe,WAAW,GAAGH,kBAAkB,EAAE;MAClD;;IAEF,IAAIZ,KAAK,GAAG,CAAC,IAAIe,WAAW,GAAGH,kBAAkB,EAAE;MACjD;;;EAGJ,OAAOC,UAAU;AACnB;AAEA,OAAM,SAAUnB,WAAWA,CAACT,OAAgB;EAC1C,OAAOA,OAAO,CAAC+B,OAAO,KAAK,IAAI,IAAI/B,OAAO,CAAC+B,OAAO,KAAK,IAAI;AAC7D;AAEA,OAAM,SAAUC,gBAAgBA,CAAChC,OAA2B;EAC1D,IAAIA,OAAO,EAAE;IACX;IACA;IACA;IACA;IACA;IACA,IAAIS,WAAW,CAACT,OAAO,CAAC,EAAE;MACxBA,OAAO,CAACiC,QAAQ,GAAG,CAAC,CAAC;;IAEvBjC,OAAO,CAACkC,KAAK,EAAE;;AAEnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}