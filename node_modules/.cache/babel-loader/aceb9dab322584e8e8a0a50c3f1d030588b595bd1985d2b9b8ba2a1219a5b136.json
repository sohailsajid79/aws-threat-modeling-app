{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useEffect, useRef } from 'react';\nimport { useModalContext } from '../../context/modal-context';\nimport { useEffectOnUpdate } from '../use-effect-on-update';\nimport { useRandomId } from '../use-unique-id';\n/*\nThis hook allows setting an HTML attribute after the first render, without rerendering the component.\n*/\nfunction usePerformanceMarkAttribute(elementRef, value) {\n  const attributeName = 'data-analytics-performance-mark';\n  const attributeValueRef = useRef();\n  useEffect(() => {\n    var _a;\n    // With this effect, we apply the attribute only on the client, to avoid hydration errors.\n    attributeValueRef.current = value;\n    (_a = elementRef.current) === null || _a === void 0 ? void 0 : _a.setAttribute(attributeName, value);\n  }, [value, elementRef]);\n  return {\n    [attributeName]: attributeValueRef.current\n  };\n}\n/**\n * This function returns an object that needs to be spread onto the same\n * element as the `elementRef`, so that the data attribute is applied\n * correctly.\n */\nexport function usePerformanceMarks(name, enabled, elementRef, getDetails, dependencies) {\n  const id = useRandomId();\n  const {\n    isInModal\n  } = useModalContext();\n  const attributes = usePerformanceMarkAttribute(elementRef, id);\n  useEffect(() => {\n    if (!enabled || !elementRef.current || isInModal) {\n      return;\n    }\n    const elementVisible = elementRef.current.offsetWidth > 0 && elementRef.current.offsetHeight > 0 && getComputedStyle(elementRef.current).visibility !== 'hidden';\n    if (!elementVisible) {\n      return;\n    }\n    const renderedMarkName = `${name}Rendered`;\n    performance.mark(renderedMarkName, {\n      detail: Object.assign({\n        source: 'awsui',\n        instanceIdentifier: id\n      }, getDetails())\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useEffectOnUpdate(() => {\n    if (!enabled || !elementRef.current || isInModal) {\n      return;\n    }\n    const elementVisible = elementRef.current.offsetWidth > 0 && elementRef.current.offsetHeight > 0 && getComputedStyle(elementRef.current).visibility !== 'hidden';\n    if (!elementVisible) {\n      return;\n    }\n    const updatedMarkName = `${name}Updated`;\n    performance.mark(updatedMarkName, {\n      detail: Object.assign({\n        source: 'awsui',\n        instanceIdentifier: id\n      }, getDetails())\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, dependencies);\n  return attributes;\n}","map":{"version":3,"names":["useEffect","useRef","useModalContext","useEffectOnUpdate","useRandomId","usePerformanceMarkAttribute","elementRef","value","attributeName","attributeValueRef","current","_a","setAttribute","usePerformanceMarks","name","enabled","getDetails","dependencies","id","isInModal","attributes","elementVisible","offsetWidth","offsetHeight","getComputedStyle","visibility","renderedMarkName","performance","mark","detail","Object","assign","source","instanceIdentifier","updatedMarkName"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/internal/hooks/use-performance-marks/index.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { useEffect, useRef } from 'react';\n\nimport { useModalContext } from '../../context/modal-context';\nimport { useEffectOnUpdate } from '../use-effect-on-update';\nimport { useRandomId } from '../use-unique-id';\n\n/*\nThis hook allows setting an HTML attribute after the first render, without rerendering the component.\n*/\nfunction usePerformanceMarkAttribute(elementRef: React.RefObject<HTMLElement>, value: string) {\n  const attributeName = 'data-analytics-performance-mark';\n\n  const attributeValueRef = useRef<string | undefined>();\n\n  useEffect(() => {\n    // With this effect, we apply the attribute only on the client, to avoid hydration errors.\n    attributeValueRef.current = value;\n    elementRef.current?.setAttribute(attributeName, value);\n  }, [value, elementRef]);\n\n  return {\n    [attributeName]: attributeValueRef.current,\n  };\n}\n\n/**\n * This function returns an object that needs to be spread onto the same\n * element as the `elementRef`, so that the data attribute is applied\n * correctly.\n */\nexport function usePerformanceMarks(\n  name: string,\n  enabled: boolean,\n  elementRef: React.RefObject<HTMLElement>,\n  getDetails: () => Record<string, string | boolean | number | undefined>,\n  dependencies: React.DependencyList\n) {\n  const id = useRandomId();\n  const { isInModal } = useModalContext();\n  const attributes = usePerformanceMarkAttribute(elementRef, id);\n\n  useEffect(() => {\n    if (!enabled || !elementRef.current || isInModal) {\n      return;\n    }\n\n    const elementVisible =\n      elementRef.current.offsetWidth > 0 &&\n      elementRef.current.offsetHeight > 0 &&\n      getComputedStyle(elementRef.current).visibility !== 'hidden';\n\n    if (!elementVisible) {\n      return;\n    }\n\n    const renderedMarkName = `${name}Rendered`;\n\n    performance.mark(renderedMarkName, {\n      detail: {\n        source: 'awsui',\n        instanceIdentifier: id,\n        ...getDetails(),\n      },\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffectOnUpdate(() => {\n    if (!enabled || !elementRef.current || isInModal) {\n      return;\n    }\n    const elementVisible =\n      elementRef.current.offsetWidth > 0 &&\n      elementRef.current.offsetHeight > 0 &&\n      getComputedStyle(elementRef.current).visibility !== 'hidden';\n\n    if (!elementVisible) {\n      return;\n    }\n\n    const updatedMarkName = `${name}Updated`;\n\n    performance.mark(updatedMarkName, {\n      detail: {\n        source: 'awsui',\n        instanceIdentifier: id,\n        ...getDetails(),\n      },\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, dependencies);\n\n  return attributes;\n}\n"],"mappings":"AAAA;AACA;AAEA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAEzC,SAASC,eAAe,QAAQ,6BAA6B;AAC7D,SAASC,iBAAiB,QAAQ,yBAAyB;AAC3D,SAASC,WAAW,QAAQ,kBAAkB;AAE9C;;;AAGA,SAASC,2BAA2BA,CAACC,UAAwC,EAAEC,KAAa;EAC1F,MAAMC,aAAa,GAAG,iCAAiC;EAEvD,MAAMC,iBAAiB,GAAGR,MAAM,EAAsB;EAEtDD,SAAS,CAAC,MAAK;;IACb;IACAS,iBAAiB,CAACC,OAAO,GAAGH,KAAK;IACjC,CAAAI,EAAA,GAAAL,UAAU,CAACI,OAAO,cAAAC,EAAA,uBAAAA,EAAA,CAAEC,YAAY,CAACJ,aAAa,EAAED,KAAK,CAAC;EACxD,CAAC,EAAE,CAACA,KAAK,EAAED,UAAU,CAAC,CAAC;EAEvB,OAAO;IACL,CAACE,aAAa,GAAGC,iBAAiB,CAACC;GACpC;AACH;AAEA;;;;;AAKA,OAAM,SAAUG,mBAAmBA,CACjCC,IAAY,EACZC,OAAgB,EAChBT,UAAwC,EACxCU,UAAuE,EACvEC,YAAkC;EAElC,MAAMC,EAAE,GAAGd,WAAW,EAAE;EACxB,MAAM;IAAEe;EAAS,CAAE,GAAGjB,eAAe,EAAE;EACvC,MAAMkB,UAAU,GAAGf,2BAA2B,CAACC,UAAU,EAAEY,EAAE,CAAC;EAE9DlB,SAAS,CAAC,MAAK;IACb,IAAI,CAACe,OAAO,IAAI,CAACT,UAAU,CAACI,OAAO,IAAIS,SAAS,EAAE;MAChD;;IAGF,MAAME,cAAc,GAClBf,UAAU,CAACI,OAAO,CAACY,WAAW,GAAG,CAAC,IAClChB,UAAU,CAACI,OAAO,CAACa,YAAY,GAAG,CAAC,IACnCC,gBAAgB,CAAClB,UAAU,CAACI,OAAO,CAAC,CAACe,UAAU,KAAK,QAAQ;IAE9D,IAAI,CAACJ,cAAc,EAAE;MACnB;;IAGF,MAAMK,gBAAgB,GAAG,GAAGZ,IAAI,UAAU;IAE1Ca,WAAW,CAACC,IAAI,CAACF,gBAAgB,EAAE;MACjCG,MAAM,EAAAC,MAAA,CAAAC,MAAA;QACJC,MAAM,EAAE,OAAO;QACfC,kBAAkB,EAAEf;MAAE,GACnBF,UAAU,EAAE;KAElB,CAAC;IACF;EACF,CAAC,EAAE,EAAE,CAAC;EAENb,iBAAiB,CAAC,MAAK;IACrB,IAAI,CAACY,OAAO,IAAI,CAACT,UAAU,CAACI,OAAO,IAAIS,SAAS,EAAE;MAChD;;IAEF,MAAME,cAAc,GAClBf,UAAU,CAACI,OAAO,CAACY,WAAW,GAAG,CAAC,IAClChB,UAAU,CAACI,OAAO,CAACa,YAAY,GAAG,CAAC,IACnCC,gBAAgB,CAAClB,UAAU,CAACI,OAAO,CAAC,CAACe,UAAU,KAAK,QAAQ;IAE9D,IAAI,CAACJ,cAAc,EAAE;MACnB;;IAGF,MAAMa,eAAe,GAAG,GAAGpB,IAAI,SAAS;IAExCa,WAAW,CAACC,IAAI,CAACM,eAAe,EAAE;MAChCL,MAAM,EAAAC,MAAA,CAAAC,MAAA;QACJC,MAAM,EAAE,OAAO;QACfC,kBAAkB,EAAEf;MAAE,GACnBF,UAAU,EAAE;KAElB,CAAC;IACF;EACF,CAAC,EAAEC,YAAY,CAAC;EAEhB,OAAOG,UAAU;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}