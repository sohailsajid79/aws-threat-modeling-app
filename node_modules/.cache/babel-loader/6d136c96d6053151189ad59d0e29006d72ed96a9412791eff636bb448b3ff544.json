{"ast":null,"code":"// @ts-expect-error\nimport formatter from 'format';\nexport const fault = Object.assign(create(Error), {\n  eval: create(EvalError),\n  range: create(RangeError),\n  reference: create(ReferenceError),\n  syntax: create(SyntaxError),\n  type: create(TypeError),\n  uri: create(URIError)\n});\n\n/**\n * Create a new `EConstructor`, with the formatted `format` as a first argument.\n *\n * @template {Error} Fault\n * @template {new (reason: string) => Fault} Class\n * @param {Class} Constructor\n */\nexport function create(Constructor) {\n  /** @type {string} */\n  // @ts-expect-error\n  FormattedError.displayName = Constructor.displayName || Constructor.name;\n  return FormattedError;\n\n  /**\n   * Create an error with a printf-like formatted message.\n   *\n   * @param {string|null} [format]\n   *   Template string.\n   * @param {...unknown} values\n   *   Values to render in `format`.\n   * @returns {Fault}\n   */\n  function FormattedError(format) {\n    for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      values[_key - 1] = arguments[_key];\n    }\n    /** @type {string} */\n    const reason = format ? formatter(format, ...values) : format;\n    return new Constructor(reason);\n  }\n}","map":{"version":3,"names":["formatter","fault","Object","assign","create","Error","eval","EvalError","range","RangeError","reference","ReferenceError","syntax","SyntaxError","type","TypeError","uri","URIError","Constructor","FormattedError","displayName","name","format","_len","arguments","length","values","Array","_key","reason"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/fault/index.js"],"sourcesContent":["// @ts-expect-error\nimport formatter from 'format'\n\nexport const fault = Object.assign(create(Error), {\n  eval: create(EvalError),\n  range: create(RangeError),\n  reference: create(ReferenceError),\n  syntax: create(SyntaxError),\n  type: create(TypeError),\n  uri: create(URIError)\n})\n\n/**\n * Create a new `EConstructor`, with the formatted `format` as a first argument.\n *\n * @template {Error} Fault\n * @template {new (reason: string) => Fault} Class\n * @param {Class} Constructor\n */\nexport function create(Constructor) {\n  /** @type {string} */\n  // @ts-expect-error\n  FormattedError.displayName = Constructor.displayName || Constructor.name\n\n  return FormattedError\n\n  /**\n   * Create an error with a printf-like formatted message.\n   *\n   * @param {string|null} [format]\n   *   Template string.\n   * @param {...unknown} values\n   *   Values to render in `format`.\n   * @returns {Fault}\n   */\n  function FormattedError(format, ...values) {\n    /** @type {string} */\n    const reason = format ? formatter(format, ...values) : format\n    return new Constructor(reason)\n  }\n}\n"],"mappings":"AAAA;AACA,OAAOA,SAAS,MAAM,QAAQ;AAE9B,OAAO,MAAMC,KAAK,GAAGC,MAAM,CAACC,MAAM,CAACC,MAAM,CAACC,KAAK,CAAC,EAAE;EAChDC,IAAI,EAAEF,MAAM,CAACG,SAAS,CAAC;EACvBC,KAAK,EAAEJ,MAAM,CAACK,UAAU,CAAC;EACzBC,SAAS,EAAEN,MAAM,CAACO,cAAc,CAAC;EACjCC,MAAM,EAAER,MAAM,CAACS,WAAW,CAAC;EAC3BC,IAAI,EAAEV,MAAM,CAACW,SAAS,CAAC;EACvBC,GAAG,EAAEZ,MAAM,CAACa,QAAQ;AACtB,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASb,MAAMA,CAACc,WAAW,EAAE;EAClC;EACA;EACAC,cAAc,CAACC,WAAW,GAAGF,WAAW,CAACE,WAAW,IAAIF,WAAW,CAACG,IAAI;EAExE,OAAOF,cAAc;;EAErB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASA,cAAcA,CAACG,MAAM,EAAa;IAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAARC,MAAM,OAAAC,KAAA,CAAAJ,IAAA,OAAAA,IAAA,WAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;MAANF,MAAM,CAAAE,IAAA,QAAAJ,SAAA,CAAAI,IAAA;IAAA;IACvC;IACA,MAAMC,MAAM,GAAGP,MAAM,GAAGtB,SAAS,CAACsB,MAAM,EAAE,GAAGI,MAAM,CAAC,GAAGJ,MAAM;IAC7D,OAAO,IAAIJ,WAAW,CAACW,MAAM,CAAC;EAChC;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}