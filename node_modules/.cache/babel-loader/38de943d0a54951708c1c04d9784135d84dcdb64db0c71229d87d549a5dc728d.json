{"ast":null,"code":"import dataTypes from '../data-types';\n/**\n * Casts string true/false to boolean\n * @param {String} value value\n */\n\nvar castToBoolean = function castToBoolean(value) {\n  if (typeof value === 'boolean') {\n    return value;\n  }\n  return value === 'true';\n};\n/**\n * Check if the value can be converted to number\n * @param {Any} value value to be checked\n */\n\nvar canBeConvertedToNumber = function canBeConvertedToNumber(value) {\n  return !isNaN(Number(value)) && value !== '';\n};\n/**\n * Check if the value can be converted to float\n * @param {Any} value value to be checked\n */\n\nvar canBeConvertedToFloat = function canBeConvertedToFloat(value) {\n  if (typeof value == 'string' && value.endsWith('.')) {\n    return false;\n  }\n  return canBeConvertedToNumber(value);\n};\n/**\n * Changes the value type\n * @param {FieldDataTypes} dataType type for value conversion\n * @param {Any} value value to be converted\n */\n\nvar convertType = function convertType(dataType, value) {\n  switch (dataType) {\n    case dataTypes.INTEGER:\n      return canBeConvertedToNumber(value) ? parseInt(value) : value;\n    case dataTypes.FLOAT:\n      return canBeConvertedToFloat(value) ? parseFloat(value) : value;\n    case dataTypes.NUMBER:\n      return canBeConvertedToNumber(value) ? Number(value) : value;\n    case dataTypes.BOOLEAN:\n      return castToBoolean(value);\n    default:\n      return value;\n  }\n};\nexport default convertType;","map":{"version":3,"names":["dataTypes","castToBoolean","value","canBeConvertedToNumber","isNaN","Number","canBeConvertedToFloat","endsWith","convertType","dataType","INTEGER","parseInt","FLOAT","parseFloat","NUMBER","BOOLEAN"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/@data-driven-forms/react-form-renderer/esm/use-field-api/convert-type.js"],"sourcesContent":["import dataTypes from '../data-types';\n/**\n * Casts string true/false to boolean\n * @param {String} value value\n */\n\nvar castToBoolean = function castToBoolean(value) {\n  if (typeof value === 'boolean') {\n    return value;\n  }\n\n  return value === 'true';\n};\n/**\n * Check if the value can be converted to number\n * @param {Any} value value to be checked\n */\n\n\nvar canBeConvertedToNumber = function canBeConvertedToNumber(value) {\n  return !isNaN(Number(value)) && value !== '';\n};\n/**\n * Check if the value can be converted to float\n * @param {Any} value value to be checked\n */\n\n\nvar canBeConvertedToFloat = function canBeConvertedToFloat(value) {\n  if (typeof value == 'string' && value.endsWith('.')) {\n    return false;\n  }\n\n  return canBeConvertedToNumber(value);\n};\n/**\n * Changes the value type\n * @param {FieldDataTypes} dataType type for value conversion\n * @param {Any} value value to be converted\n */\n\n\nvar convertType = function convertType(dataType, value) {\n  switch (dataType) {\n    case dataTypes.INTEGER:\n      return canBeConvertedToNumber(value) ? parseInt(value) : value;\n\n    case dataTypes.FLOAT:\n      return canBeConvertedToFloat(value) ? parseFloat(value) : value;\n\n    case dataTypes.NUMBER:\n      return canBeConvertedToNumber(value) ? Number(value) : value;\n\n    case dataTypes.BOOLEAN:\n      return castToBoolean(value);\n\n    default:\n      return value;\n  }\n};\n\nexport default convertType;"],"mappings":"AAAA,OAAOA,SAAS,MAAM,eAAe;AACrC;AACA;AACA;AACA;;AAEA,IAAIC,aAAa,GAAG,SAASA,aAAaA,CAACC,KAAK,EAAE;EAChD,IAAI,OAAOA,KAAK,KAAK,SAAS,EAAE;IAC9B,OAAOA,KAAK;EACd;EAEA,OAAOA,KAAK,KAAK,MAAM;AACzB,CAAC;AACD;AACA;AACA;AACA;;AAGA,IAAIC,sBAAsB,GAAG,SAASA,sBAAsBA,CAACD,KAAK,EAAE;EAClE,OAAO,CAACE,KAAK,CAACC,MAAM,CAACH,KAAK,CAAC,CAAC,IAAIA,KAAK,KAAK,EAAE;AAC9C,CAAC;AACD;AACA;AACA;AACA;;AAGA,IAAII,qBAAqB,GAAG,SAASA,qBAAqBA,CAACJ,KAAK,EAAE;EAChE,IAAI,OAAOA,KAAK,IAAI,QAAQ,IAAIA,KAAK,CAACK,QAAQ,CAAC,GAAG,CAAC,EAAE;IACnD,OAAO,KAAK;EACd;EAEA,OAAOJ,sBAAsB,CAACD,KAAK,CAAC;AACtC,CAAC;AACD;AACA;AACA;AACA;AACA;;AAGA,IAAIM,WAAW,GAAG,SAASA,WAAWA,CAACC,QAAQ,EAAEP,KAAK,EAAE;EACtD,QAAQO,QAAQ;IACd,KAAKT,SAAS,CAACU,OAAO;MACpB,OAAOP,sBAAsB,CAACD,KAAK,CAAC,GAAGS,QAAQ,CAACT,KAAK,CAAC,GAAGA,KAAK;IAEhE,KAAKF,SAAS,CAACY,KAAK;MAClB,OAAON,qBAAqB,CAACJ,KAAK,CAAC,GAAGW,UAAU,CAACX,KAAK,CAAC,GAAGA,KAAK;IAEjE,KAAKF,SAAS,CAACc,MAAM;MACnB,OAAOX,sBAAsB,CAACD,KAAK,CAAC,GAAGG,MAAM,CAACH,KAAK,CAAC,GAAGA,KAAK;IAE9D,KAAKF,SAAS,CAACe,OAAO;MACpB,OAAOd,aAAa,CAACC,KAAK,CAAC;IAE7B;MACE,OAAOA,KAAK;EAChB;AACF,CAAC;AAED,eAAeM,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}