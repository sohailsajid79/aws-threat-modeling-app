{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo } from 'react';\nimport clsx from 'clsx';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport BarSeries from './bar-series';\nimport LineSeries from './line-series';\nimport { calculateStackedBarValues } from './utils';\nimport styles from './styles.css.js';\n// Should have the same value as the `border-line-chart-width` token.\nconst STROKE_WIDTH = 2;\nexport default function DataSeries(_ref) {\n  let {\n    axis,\n    plotHeight,\n    plotWidth,\n    highlightedGroupIndex,\n    highlightedSeries,\n    stackedBars,\n    isGroupNavigation,\n    visibleSeries,\n    xScale,\n    yScale,\n    isRtl\n  } = _ref;\n  const chartAreaClipPath = useUniqueId('awsui-mixed-line-bar-chart__chart-area-');\n  // Lines get a small extra space at the top and bottom to account for the strokes when they are at the edge of the graph.\n  const lineAreaClipPath = useUniqueId('awsui-line-chart__chart-area-');\n  const stackedBarValues = useMemo(() => {\n    if (!stackedBars) {\n      return undefined;\n    }\n    const barData = [];\n    visibleSeries.forEach(_ref2 => {\n      let {\n        series\n      } = _ref2;\n      if (series.type === 'bar') {\n        barData.push(series.data);\n      } else {\n        barData.push([]);\n      }\n    });\n    return calculateStackedBarValues(barData);\n  }, [visibleSeries, stackedBars]);\n  return React.createElement(React.Fragment, null, React.createElement(\"defs\", {\n    \"aria-hidden\": \"true\"\n  }, React.createElement(\"clipPath\", {\n    id: chartAreaClipPath\n  }, React.createElement(\"rect\", {\n    x: 0,\n    y: 0,\n    width: plotWidth,\n    height: plotHeight\n  })), React.createElement(\"clipPath\", {\n    id: lineAreaClipPath\n  }, React.createElement(\"rect\", {\n    x: 0,\n    y: -STROKE_WIDTH / 2,\n    width: plotWidth,\n    height: plotHeight + STROKE_WIDTH\n  }))), React.createElement(\"g\", {\n    \"aria-hidden\": isGroupNavigation ? true : undefined,\n    role: \"group\"\n  }, visibleSeries.map((_ref3, index) => {\n    let {\n      series,\n      color\n    } = _ref3;\n    const isHighlighted = series === highlightedSeries;\n    const isDimmed = !!highlightedSeries && !isHighlighted;\n    switch (series.type) {\n      case 'line':\n      case 'threshold':\n        {\n          return React.createElement(\"g\", {\n            key: index,\n            role: \"group\",\n            \"aria-label\": series.title,\n            className: clsx(styles.series, styles[`series--${series.type}`], {\n              [styles['series--highlighted']]: isHighlighted,\n              [styles['series--dimmed']]: isDimmed\n            })\n          }, React.createElement(LineSeries, {\n            axis: axis,\n            series: series,\n            color: color,\n            xScale: xScale,\n            yScale: yScale,\n            chartAreaClipPath: lineAreaClipPath\n          }));\n        }\n      case 'bar':\n        return React.createElement(BarSeries, {\n          key: index,\n          axis: axis,\n          series: series,\n          color: color,\n          totalSeriesCount: visibleSeries.filter(s => s.series.type === 'bar').length,\n          seriesIndex: index,\n          xScale: xScale,\n          yScale: yScale,\n          plotSize: axis === 'y' ? plotWidth : plotHeight,\n          highlighted: isHighlighted,\n          dimmed: isDimmed,\n          chartAreaClipPath: chartAreaClipPath,\n          stackedBarValues: stackedBarValues,\n          highlightedGroupIndex: highlightedGroupIndex,\n          isRtl: isRtl\n        });\n    }\n  })));\n}","map":{"version":3,"names":["React","useMemo","clsx","useUniqueId","BarSeries","LineSeries","calculateStackedBarValues","styles","STROKE_WIDTH","DataSeries","_ref","axis","plotHeight","plotWidth","highlightedGroupIndex","highlightedSeries","stackedBars","isGroupNavigation","visibleSeries","xScale","yScale","isRtl","chartAreaClipPath","lineAreaClipPath","stackedBarValues","undefined","barData","forEach","_ref2","series","type","push","data","createElement","Fragment","id","x","y","width","height","role","map","_ref3","index","color","isHighlighted","isDimmed","key","title","className","totalSeriesCount","filter","s","length","seriesIndex","plotSize","highlighted","dimmed"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/mixed-line-bar-chart/data-series.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo } from 'react';\nimport clsx from 'clsx';\n\nimport { ChartScale, NumericChartScale } from '../internal/components/cartesian-chart/scales';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport BarSeries from './bar-series';\nimport { ChartDataTypes, InternalChartSeries, MixedLineBarChartProps } from './interfaces';\nimport LineSeries from './line-series';\nimport { calculateStackedBarValues } from './utils';\n\nimport styles from './styles.css.js';\n\n// Should have the same value as the `border-line-chart-width` token.\nconst STROKE_WIDTH = 2;\n\nexport interface DataSeriesProps<T> {\n  axis: 'x' | 'y';\n\n  plotHeight: number;\n  plotWidth: number;\n\n  highlightedSeries: MixedLineBarChartProps.ChartSeries<T> | null;\n  highlightedGroupIndex: number | null;\n\n  stackedBars: boolean;\n  isGroupNavigation: boolean;\n\n  visibleSeries: ReadonlyArray<InternalChartSeries<T>>;\n  xScale: ChartScale;\n  yScale: NumericChartScale;\n  isRtl?: boolean;\n}\n\nexport default function DataSeries<T extends ChartDataTypes>({\n  axis,\n  plotHeight,\n  plotWidth,\n  highlightedGroupIndex,\n  highlightedSeries,\n  stackedBars,\n  isGroupNavigation,\n  visibleSeries,\n  xScale,\n  yScale,\n  isRtl,\n}: DataSeriesProps<T>) {\n  const chartAreaClipPath = useUniqueId('awsui-mixed-line-bar-chart__chart-area-');\n\n  // Lines get a small extra space at the top and bottom to account for the strokes when they are at the edge of the graph.\n  const lineAreaClipPath = useUniqueId('awsui-line-chart__chart-area-');\n\n  const stackedBarValues = useMemo(() => {\n    if (!stackedBars) {\n      return undefined;\n    }\n    const barData: Array<readonly MixedLineBarChartProps.Datum<ChartDataTypes>[]> = [];\n    visibleSeries.forEach(({ series }) => {\n      if (series.type === 'bar') {\n        barData.push(series.data);\n      } else {\n        barData.push([]);\n      }\n    });\n    return calculateStackedBarValues(barData);\n  }, [visibleSeries, stackedBars]);\n\n  return (\n    <>\n      <defs aria-hidden=\"true\">\n        <clipPath id={chartAreaClipPath}>\n          <rect x={0} y={0} width={plotWidth} height={plotHeight} />\n        </clipPath>\n        <clipPath id={lineAreaClipPath}>\n          <rect x={0} y={-STROKE_WIDTH / 2} width={plotWidth} height={plotHeight + STROKE_WIDTH} />\n        </clipPath>\n      </defs>\n      <g aria-hidden={isGroupNavigation ? true : undefined} role=\"group\">\n        {visibleSeries.map(({ series, color }, index) => {\n          const isHighlighted = series === highlightedSeries;\n          const isDimmed = !!highlightedSeries && !isHighlighted;\n\n          switch (series.type) {\n            case 'line':\n            case 'threshold': {\n              return (\n                <g\n                  key={index}\n                  role=\"group\"\n                  aria-label={series.title}\n                  className={clsx(styles.series, styles[`series--${series.type}`], {\n                    [styles['series--highlighted']]: isHighlighted,\n                    [styles['series--dimmed']]: isDimmed,\n                  })}\n                >\n                  <LineSeries\n                    axis={axis}\n                    series={series}\n                    color={color}\n                    xScale={xScale}\n                    yScale={yScale}\n                    chartAreaClipPath={lineAreaClipPath}\n                  />\n                </g>\n              );\n            }\n\n            case 'bar':\n              return (\n                <BarSeries\n                  key={index}\n                  axis={axis}\n                  series={series}\n                  color={color}\n                  totalSeriesCount={visibleSeries.filter(s => s.series.type === 'bar').length}\n                  seriesIndex={index}\n                  xScale={xScale}\n                  yScale={yScale}\n                  plotSize={axis === 'y' ? plotWidth : plotHeight}\n                  highlighted={isHighlighted}\n                  dimmed={isDimmed}\n                  chartAreaClipPath={chartAreaClipPath}\n                  stackedBarValues={stackedBarValues}\n                  highlightedGroupIndex={highlightedGroupIndex}\n                  isRtl={isRtl}\n                />\n              );\n          }\n        })}\n      </g>\n    </>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}