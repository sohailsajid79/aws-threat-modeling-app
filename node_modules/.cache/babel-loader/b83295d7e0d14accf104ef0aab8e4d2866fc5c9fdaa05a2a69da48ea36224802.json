{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef, useMemo, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { addDays, addWeeks, getDaysInMonth, isAfter, isBefore, isLastDayOfMonth, isSameDay, isSameMonth, isToday } from 'date-fns';\nimport { getCalendarMonth } from 'mnth';\nimport { getDateLabel, renderDayName } from '../../../calendar/utils/intl';\nimport ScreenreaderOnly from '../../../internal/components/screenreader-only/index.js';\nimport Tooltip from '../../../internal/components/tooltip';\nimport useHiddenDescription from '../../../internal/hooks/use-hidden-description';\nimport { useMergeRefs } from '../../../internal/hooks/use-merge-refs';\nimport { applyDisplayName } from '../../../internal/utils/apply-display-name';\nimport { formatDate } from '../../../internal/utils/date-time';\nimport styles from './styles.css.js';\nconst GridCell = forwardRef((props, focusedDateRef) => {\n  const {\n      disabledReason\n    } = props,\n    rest = __rest(props, [\"disabledReason\"]);\n  const isDisabledWithReason = !!disabledReason;\n  const {\n    targetProps,\n    descriptionEl\n  } = useHiddenDescription(disabledReason);\n  const ref = useRef(null);\n  const [showTooltip, setShowTooltip] = useState(false);\n  return React.createElement(\"td\", Object.assign({\n    ref: useMergeRefs(focusedDateRef, ref)\n  }, rest, isDisabledWithReason ? targetProps : {}, {\n    onFocus: event => {\n      if (rest.onFocus) {\n        rest.onFocus(event);\n      }\n      if (isDisabledWithReason) {\n        setShowTooltip(true);\n      }\n    },\n    onBlur: event => {\n      if (rest.onBlur) {\n        rest.onBlur(event);\n      }\n      if (isDisabledWithReason) {\n        setShowTooltip(false);\n      }\n    },\n    onMouseEnter: event => {\n      if (rest.onMouseEnter) {\n        rest.onMouseEnter(event);\n      }\n      if (isDisabledWithReason) {\n        setShowTooltip(true);\n      }\n    },\n    onMouseLeave: event => {\n      if (rest.onMouseLeave) {\n        rest.onMouseLeave(event);\n      }\n      if (isDisabledWithReason) {\n        setShowTooltip(false);\n      }\n    }\n  }), props.children, isDisabledWithReason && React.createElement(React.Fragment, null, descriptionEl, showTooltip && React.createElement(Tooltip, {\n    className: styles['disabled-reason-tooltip'],\n    trackRef: ref,\n    value: disabledReason\n  })));\n});\napplyDisplayName(GridCell, 'GridCell');\nexport function Grid(_ref) {\n  let {\n    baseDate,\n    selectedStartDate,\n    selectedEndDate,\n    rangeStartDate,\n    rangeEndDate,\n    focusedDate,\n    focusedDateRef,\n    onSelectDate,\n    onGridKeyDownHandler,\n    onFocusedDateChange,\n    isDateEnabled,\n    dateDisabledReason,\n    locale,\n    startOfWeek,\n    todayAriaLabel,\n    ariaLabelledby,\n    className\n  } = _ref;\n  const baseDateTime = baseDate === null || baseDate === void 0 ? void 0 : baseDate.getTime();\n  // `baseDateTime` is used as a more stable replacement for baseDate\n  const weeks = useMemo(() => getCalendarMonth(baseDate, {\n    firstDayOfWeek: startOfWeek\n  }),\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [baseDateTime, startOfWeek]);\n  const weekdays = weeks[0].map(date => date.getDay());\n  return React.createElement(\"table\", {\n    role: \"grid\",\n    \"aria-labelledby\": ariaLabelledby,\n    className: clsx(styles.grid, className)\n  }, React.createElement(\"thead\", null, React.createElement(\"tr\", null, weekdays.map(dayIndex => React.createElement(\"th\", {\n    key: dayIndex,\n    scope: \"col\",\n    className: clsx(styles['grid-cell'], styles['day-header'])\n  }, React.createElement(\"span\", {\n    \"aria-hidden\": \"true\"\n  }, renderDayName(locale, dayIndex, 'short')), React.createElement(ScreenreaderOnly, null, renderDayName(locale, dayIndex, 'long')))))), React.createElement(\"tbody\", {\n    onKeyDown: onGridKeyDownHandler\n  }, weeks.map((week, weekIndex) => {\n    return React.createElement(\"tr\", {\n      key: weekIndex,\n      className: styles.week\n    }, week.map((date, dateIndex) => {\n      const isStartDate = !!selectedStartDate && isSameDay(date, selectedStartDate);\n      const isEndDate = !!selectedEndDate && isSameDay(date, selectedEndDate);\n      const isSelected = isStartDate || isEndDate;\n      const isRangeStartDate = !!rangeStartDate && isSameDay(date, rangeStartDate);\n      const isRangeEndDate = !!rangeEndDate && isSameDay(date, rangeEndDate);\n      const isFocused = !!focusedDate && isSameDay(date, focusedDate) && isSameMonth(date, baseDate);\n      const dateIsInRange = isStartDate || isEndDate || isInRange(date, rangeStartDate, rangeEndDate);\n      const inRangeStartWeek = rangeStartDate && isInRange(date, rangeStartDate, addDays(addWeeks(rangeStartDate, 1), -1));\n      const inRangeEndWeek = rangeEndDate && isInRange(date, rangeEndDate, addDays(addWeeks(rangeEndDate, -1), 1));\n      const onlyOneSelected = !!rangeStartDate && !!rangeEndDate ? isSameDay(rangeStartDate, rangeEndDate) : !selectedStartDate || !selectedEndDate;\n      const isEnabled = !isDateEnabled || isDateEnabled(date);\n      const disabledReason = dateDisabledReason(date);\n      const isDisabledWithReason = !isEnabled && !!disabledReason;\n      const isFocusable = isFocused && (isEnabled || isDisabledWithReason);\n      const baseClasses = {\n        [styles.day]: true,\n        [styles['grid-cell']]: true,\n        [styles['in-first-row']]: weekIndex === 0,\n        [styles['in-first-column']]: dateIndex === 0\n      };\n      if (!isSameMonth(date, baseDate)) {\n        return React.createElement(\"td\", {\n          key: `${weekIndex}:${dateIndex}`,\n          ref: isFocused ? focusedDateRef : undefined,\n          className: clsx(baseClasses, {\n            [styles['in-previous-month']]: isBefore(date, baseDate),\n            [styles['last-day-of-month']]: isLastDayOfMonth(date),\n            [styles['in-next-month']]: isAfter(date, baseDate)\n          })\n        });\n      }\n      const handlers = {};\n      if (isEnabled) {\n        handlers.onClick = () => onSelectDate(date);\n        handlers.onFocus = () => onFocusedDateChange(date);\n      }\n      // Can't be focused.\n      let tabIndex = undefined;\n      if (isFocusable && (isEnabled || isDisabledWithReason)) {\n        // Next focus target.\n        tabIndex = 0;\n      } else if (isEnabled || isDisabledWithReason) {\n        // Can be focused programmatically.\n        tabIndex = -1;\n      }\n      // Screen-reader announcement for the focused day.\n      let dayAnnouncement = getDateLabel(locale, date, 'short');\n      if (isToday(date)) {\n        dayAnnouncement += '. ' + todayAriaLabel;\n      }\n      return React.createElement(GridCell, Object.assign({\n        ref: isFocused ? focusedDateRef : undefined,\n        key: `${weekIndex}:${dateIndex}`,\n        className: clsx(baseClasses, {\n          [styles['in-current-month']]: isSameMonth(date, baseDate),\n          [styles.enabled]: isEnabled,\n          [styles.selected]: isSelected,\n          [styles['start-date']]: isStartDate,\n          [styles['end-date']]: isEndDate,\n          [styles['range-start-date']]: isRangeStartDate,\n          [styles['range-end-date']]: isRangeEndDate,\n          [styles['no-range']]: isSelected && onlyOneSelected,\n          [styles['in-range']]: dateIsInRange,\n          [styles['in-range-border-block-start']]: !!inRangeStartWeek || date.getDate() <= 7,\n          [styles['in-range-border-block-end']]: !!inRangeEndWeek || date.getDate() > getDaysInMonth(date) - 7,\n          [styles['in-range-border-inline-start']]: dateIndex === 0 || date.getDate() === 1 || isRangeStartDate,\n          [styles['in-range-border-inline-end']]: dateIndex === week.length - 1 || isLastDayOfMonth(date) || isRangeEndDate,\n          [styles.today]: isToday(date)\n        }),\n        \"aria-selected\": isEnabled ? isSelected || dateIsInRange : undefined,\n        \"aria-current\": isToday(date) ? 'date' : undefined,\n        \"data-date\": formatDate(date),\n        \"aria-disabled\": !isEnabled,\n        tabIndex: tabIndex,\n        disabledReason: isDisabledWithReason ? disabledReason : undefined\n      }, handlers), React.createElement(\"span\", {\n        className: styles['day-inner'],\n        \"aria-hidden\": \"true\"\n      }, date.getDate()), React.createElement(ScreenreaderOnly, null, dayAnnouncement));\n    }));\n  })));\n}\nfunction isInRange(date, dateOne, dateTwo) {\n  if (!dateOne || !dateTwo || isSameDay(dateOne, dateTwo)) {\n    return false;\n  }\n  const inRange = isAfter(date, dateOne) && isBefore(date, dateTwo) || isAfter(date, dateTwo) && isBefore(date, dateOne);\n  return inRange || isSameDay(date, dateOne) || isSameDay(date, dateTwo);\n}","map":{"version":3,"names":["React","forwardRef","useMemo","useRef","useState","clsx","addDays","addWeeks","getDaysInMonth","isAfter","isBefore","isLastDayOfMonth","isSameDay","isSameMonth","isToday","getCalendarMonth","getDateLabel","renderDayName","ScreenreaderOnly","Tooltip","useHiddenDescription","useMergeRefs","applyDisplayName","formatDate","styles","GridCell","props","focusedDateRef","disabledReason","rest","__rest","isDisabledWithReason","targetProps","descriptionEl","ref","showTooltip","setShowTooltip","createElement","Object","assign","onFocus","event","onBlur","onMouseEnter","onMouseLeave","children","Fragment","className","trackRef","value","Grid","_ref","baseDate","selectedStartDate","selectedEndDate","rangeStartDate","rangeEndDate","focusedDate","onSelectDate","onGridKeyDownHandler","onFocusedDateChange","isDateEnabled","dateDisabledReason","locale","startOfWeek","todayAriaLabel","ariaLabelledby","baseDateTime","getTime","weeks","firstDayOfWeek","weekdays","map","date","getDay","role","grid","dayIndex","key","scope","onKeyDown","week","weekIndex","dateIndex","isStartDate","isEndDate","isSelected","isRangeStartDate","isRangeEndDate","isFocused","dateIsInRange","isInRange","inRangeStartWeek","inRangeEndWeek","onlyOneSelected","isEnabled","isFocusable","baseClasses","day","undefined","handlers","onClick","tabIndex","dayAnnouncement","enabled","selected","getDate","length","today","dateOne","dateTwo","inRange"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/date-range-picker/calendar/grids/grid.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef, TdHTMLAttributes, useMemo, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport {\n  addDays,\n  addWeeks,\n  getDaysInMonth,\n  isAfter,\n  isBefore,\n  isLastDayOfMonth,\n  isSameDay,\n  isSameMonth,\n  isToday,\n} from 'date-fns';\nimport { getCalendarMonth } from 'mnth';\n\nimport { getDateLabel, renderDayName } from '../../../calendar/utils/intl';\nimport ScreenreaderOnly from '../../../internal/components/screenreader-only/index.js';\nimport Tooltip from '../../../internal/components/tooltip';\nimport useHiddenDescription from '../../../internal/hooks/use-hidden-description';\nimport { useMergeRefs } from '../../../internal/hooks/use-merge-refs';\nimport { applyDisplayName } from '../../../internal/utils/apply-display-name';\nimport { formatDate } from '../../../internal/utils/date-time';\nimport { DateRangePickerProps, DayIndex } from '../../interfaces';\n\nimport styles from './styles.css.js';\n\n/**\n * Calendar grid supports two mechanisms of keyboard navigation:\n * - Native screen-reader table navigation (semantic table markup);\n * - Keyboard arrow-keys navigation (a custom key-down handler).\n *\n * The implementation largely follows the w3 example (https://www.w3.org/WAI/ARIA/apg/example-index/dialog-modal/datepicker-dialog) and shares the following issues:\n * - (table navigation) Chrome+VO - weekday is announced twice when navigating to the calendar's header;\n * - (table navigation) Safari+VO - \"dimmed\" state is announced twice;\n * - (table navigation) Firefox/Chrome+NVDA - cannot use table navigation if any cell has a focus;\n * - (keyboard navigation) Firefox+NVDA - every day is announced as \"not selected\";\n * - (keyboard navigation) Safari/Chrome+VO - weekdays are not announced;\n * - (keyboard navigation) Safari/Chrome+VO - days are not announced as interactive (clickable or selectable);\n * - (keyboard navigation) Safari/Chrome+VO - day announcements are not interruptive and can be missed if navigating fast.\n */\n\nexport interface GridProps {\n  baseDate: Date;\n  selectedStartDate: Date | null;\n  selectedEndDate: Date | null;\n\n  rangeStartDate: Date | null;\n  rangeEndDate: Date | null;\n\n  focusedDate: Date | null;\n  focusedDateRef: React.RefObject<HTMLTableCellElement>;\n\n  onSelectDate: (date: Date) => void;\n  onGridKeyDownHandler: (e: React.KeyboardEvent<HTMLElement>) => void;\n  onFocusedDateChange: React.Dispatch<React.SetStateAction<Date | null>>;\n\n  isDateEnabled: DateRangePickerProps.IsDateEnabledFunction;\n  dateDisabledReason: DateRangePickerProps.DateDisabledReasonFunction;\n\n  locale: string;\n  startOfWeek: DayIndex;\n  todayAriaLabel?: string;\n  ariaLabelledby: string;\n\n  className?: string;\n}\n\ninterface GridCellProps extends TdHTMLAttributes<HTMLTableCellElement> {\n  disabledReason?: string;\n}\n\nconst GridCell = forwardRef((props: GridCellProps, focusedDateRef: React.Ref<HTMLTableCellElement>) => {\n  const { disabledReason, ...rest } = props;\n  const isDisabledWithReason = !!disabledReason;\n  const { targetProps, descriptionEl } = useHiddenDescription(disabledReason);\n  const ref = useRef<HTMLTableCellElement>(null);\n  const [showTooltip, setShowTooltip] = useState(false);\n\n  return (\n    <td\n      ref={useMergeRefs(focusedDateRef, ref)}\n      {...rest}\n      {...(isDisabledWithReason ? targetProps : {})}\n      onFocus={event => {\n        if (rest.onFocus) {\n          rest.onFocus(event);\n        }\n\n        if (isDisabledWithReason) {\n          setShowTooltip(true);\n        }\n      }}\n      onBlur={event => {\n        if (rest.onBlur) {\n          rest.onBlur(event);\n        }\n\n        if (isDisabledWithReason) {\n          setShowTooltip(false);\n        }\n      }}\n      onMouseEnter={event => {\n        if (rest.onMouseEnter) {\n          rest.onMouseEnter(event);\n        }\n\n        if (isDisabledWithReason) {\n          setShowTooltip(true);\n        }\n      }}\n      onMouseLeave={event => {\n        if (rest.onMouseLeave) {\n          rest.onMouseLeave(event);\n        }\n\n        if (isDisabledWithReason) {\n          setShowTooltip(false);\n        }\n      }}\n    >\n      {props.children}\n      {isDisabledWithReason && (\n        <>\n          {descriptionEl}\n          {showTooltip && (\n            <Tooltip className={styles['disabled-reason-tooltip']} trackRef={ref} value={disabledReason!} />\n          )}\n        </>\n      )}\n    </td>\n  );\n});\n\napplyDisplayName(GridCell, 'GridCell');\n\nexport function Grid({\n  baseDate,\n  selectedStartDate,\n  selectedEndDate,\n  rangeStartDate,\n  rangeEndDate,\n  focusedDate,\n\n  focusedDateRef,\n\n  onSelectDate,\n  onGridKeyDownHandler,\n  onFocusedDateChange,\n\n  isDateEnabled,\n  dateDisabledReason,\n\n  locale,\n  startOfWeek,\n  todayAriaLabel,\n  ariaLabelledby,\n\n  className,\n}: GridProps) {\n  const baseDateTime = baseDate?.getTime();\n  // `baseDateTime` is used as a more stable replacement for baseDate\n  const weeks = useMemo<Date[][]>(\n    () => getCalendarMonth(baseDate, { firstDayOfWeek: startOfWeek }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [baseDateTime, startOfWeek]\n  );\n  const weekdays = weeks[0].map(date => date.getDay());\n\n  return (\n    <table role=\"grid\" aria-labelledby={ariaLabelledby} className={clsx(styles.grid, className)}>\n      <thead>\n        <tr>\n          {weekdays.map(dayIndex => (\n            <th key={dayIndex} scope=\"col\" className={clsx(styles['grid-cell'], styles['day-header'])}>\n              <span aria-hidden=\"true\">{renderDayName(locale, dayIndex, 'short')}</span>\n              <ScreenreaderOnly>{renderDayName(locale, dayIndex, 'long')}</ScreenreaderOnly>\n            </th>\n          ))}\n        </tr>\n      </thead>\n      <tbody onKeyDown={onGridKeyDownHandler}>\n        {weeks.map((week, weekIndex) => {\n          return (\n            <tr key={weekIndex} className={styles.week}>\n              {week.map((date, dateIndex) => {\n                const isStartDate = !!selectedStartDate && isSameDay(date, selectedStartDate);\n                const isEndDate = !!selectedEndDate && isSameDay(date, selectedEndDate);\n                const isSelected = isStartDate || isEndDate;\n                const isRangeStartDate = !!rangeStartDate && isSameDay(date, rangeStartDate);\n                const isRangeEndDate = !!rangeEndDate && isSameDay(date, rangeEndDate);\n\n                const isFocused = !!focusedDate && isSameDay(date, focusedDate) && isSameMonth(date, baseDate);\n\n                const dateIsInRange = isStartDate || isEndDate || isInRange(date, rangeStartDate, rangeEndDate);\n                const inRangeStartWeek =\n                  rangeStartDate && isInRange(date, rangeStartDate, addDays(addWeeks(rangeStartDate, 1), -1));\n                const inRangeEndWeek =\n                  rangeEndDate && isInRange(date, rangeEndDate, addDays(addWeeks(rangeEndDate, -1), 1));\n                const onlyOneSelected =\n                  !!rangeStartDate && !!rangeEndDate\n                    ? isSameDay(rangeStartDate, rangeEndDate)\n                    : !selectedStartDate || !selectedEndDate;\n\n                const isEnabled = !isDateEnabled || isDateEnabled(date);\n                const disabledReason = dateDisabledReason(date);\n                const isDisabledWithReason = !isEnabled && !!disabledReason;\n                const isFocusable = isFocused && (isEnabled || isDisabledWithReason);\n\n                const baseClasses = {\n                  [styles.day]: true,\n                  [styles['grid-cell']]: true,\n                  [styles['in-first-row']]: weekIndex === 0,\n                  [styles['in-first-column']]: dateIndex === 0,\n                };\n\n                if (!isSameMonth(date, baseDate)) {\n                  return (\n                    <td\n                      key={`${weekIndex}:${dateIndex}`}\n                      ref={isFocused ? focusedDateRef : undefined}\n                      className={clsx(baseClasses, {\n                        [styles['in-previous-month']]: isBefore(date, baseDate),\n                        [styles['last-day-of-month']]: isLastDayOfMonth(date),\n                        [styles['in-next-month']]: isAfter(date, baseDate),\n                      })}\n                    ></td>\n                  );\n                }\n\n                const handlers: React.HTMLAttributes<HTMLDivElement> = {};\n                if (isEnabled) {\n                  handlers.onClick = () => onSelectDate(date);\n                  handlers.onFocus = () => onFocusedDateChange(date);\n                }\n\n                // Can't be focused.\n                let tabIndex = undefined;\n                if (isFocusable && (isEnabled || isDisabledWithReason)) {\n                  // Next focus target.\n                  tabIndex = 0;\n                } else if (isEnabled || isDisabledWithReason) {\n                  // Can be focused programmatically.\n                  tabIndex = -1;\n                }\n\n                // Screen-reader announcement for the focused day.\n                let dayAnnouncement = getDateLabel(locale, date, 'short');\n                if (isToday(date)) {\n                  dayAnnouncement += '. ' + todayAriaLabel;\n                }\n\n                return (\n                  <GridCell\n                    ref={isFocused ? focusedDateRef : undefined}\n                    key={`${weekIndex}:${dateIndex}`}\n                    className={clsx(baseClasses, {\n                      [styles['in-current-month']]: isSameMonth(date, baseDate),\n                      [styles.enabled]: isEnabled,\n                      [styles.selected]: isSelected,\n                      [styles['start-date']]: isStartDate,\n                      [styles['end-date']]: isEndDate,\n                      [styles['range-start-date']]: isRangeStartDate,\n                      [styles['range-end-date']]: isRangeEndDate,\n                      [styles['no-range']]: isSelected && onlyOneSelected,\n                      [styles['in-range']]: dateIsInRange,\n                      [styles['in-range-border-block-start']]: !!inRangeStartWeek || date.getDate() <= 7,\n                      [styles['in-range-border-block-end']]:\n                        !!inRangeEndWeek || date.getDate() > getDaysInMonth(date) - 7,\n                      [styles['in-range-border-inline-start']]:\n                        dateIndex === 0 || date.getDate() === 1 || isRangeStartDate,\n                      [styles['in-range-border-inline-end']]:\n                        dateIndex === week.length - 1 || isLastDayOfMonth(date) || isRangeEndDate,\n                      [styles.today]: isToday(date),\n                    })}\n                    aria-selected={isEnabled ? isSelected || dateIsInRange : undefined}\n                    aria-current={isToday(date) ? 'date' : undefined}\n                    data-date={formatDate(date)}\n                    aria-disabled={!isEnabled}\n                    tabIndex={tabIndex}\n                    disabledReason={isDisabledWithReason ? disabledReason : undefined}\n                    {...handlers}\n                  >\n                    <span className={styles['day-inner']} aria-hidden=\"true\">\n                      {date.getDate()}\n                    </span>\n                    <ScreenreaderOnly>{dayAnnouncement}</ScreenreaderOnly>\n                  </GridCell>\n                );\n              })}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n\nfunction isInRange(date: Date, dateOne: Date | null, dateTwo: Date | null) {\n  if (!dateOne || !dateTwo || isSameDay(dateOne, dateTwo)) {\n    return false;\n  }\n\n  const inRange =\n    (isAfter(date, dateOne) && isBefore(date, dateTwo)) || (isAfter(date, dateTwo) && isBefore(date, dateOne));\n\n  return inRange || isSameDay(date, dateOne) || isSameDay(date, dateTwo);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}