{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useLayoutEffect, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { useAppLayoutToolbarEnabled } from '../app-layout/utils/feature-flags';\nimport { useKeyboardEvents } from '../app-layout/utils/use-keyboard-events';\nimport { usePointerEvents } from '../app-layout/utils/use-pointer-events';\nimport { InternalButton } from '../button/internal';\nimport { getBaseProps } from '../internal/base-component';\nimport PanelResizeHandle from '../internal/components/panel-resize-handle';\nimport { useSplitPanelContext } from '../internal/context/split-panel-context';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport globalVars from '../internal/styles/global-vars';\nimport { createWidgetizedComponent } from '../internal/widgets';\nimport { SplitPanelContentBottom } from './bottom';\nimport PreferencesModal from './preferences-modal';\nimport { SplitPanelContentSide } from './side';\nimport styles from './styles.css.js';\nimport testUtilStyles from './test-classes/styles.css.js';\nexport function SplitPanelImplementation(_a) {\n  var {\n      __internalRootRef,\n      header,\n      children,\n      hidePreferencesButton,\n      closeBehavior,\n      i18nStrings = {}\n    } = _a,\n    restProps = __rest(_a, [\"__internalRootRef\", \"header\", \"children\", \"hidePreferencesButton\", \"closeBehavior\", \"i18nStrings\"]);\n  const isRefresh = useVisualRefresh();\n  const isToolbar = useAppLayoutToolbarEnabled();\n  const {\n    position,\n    topOffset,\n    bottomOffset,\n    rightOffset,\n    contentWidthStyles,\n    isOpen,\n    isForcedPosition,\n    onPreferencesChange,\n    onResize,\n    onToggle,\n    size,\n    relativeSize,\n    setSplitPanelToggle,\n    refs\n  } = useSplitPanelContext();\n  const baseProps = getBaseProps(restProps);\n  const [isPreferencesOpen, setPreferencesOpen] = useState(false);\n  const appLayoutMaxWidth = isRefresh && position === 'bottom' ? contentWidthStyles : undefined;\n  const openButtonAriaLabel = i18nStrings.openButtonAriaLabel;\n  useEffect(() => {\n    setSplitPanelToggle({\n      displayed: closeBehavior === 'collapse',\n      ariaLabel: openButtonAriaLabel\n    });\n    return () => {\n      setSplitPanelToggle({\n        displayed: false,\n        ariaLabel: undefined\n      });\n    };\n  }, [setSplitPanelToggle, openButtonAriaLabel, closeBehavior]);\n  const splitPanelRefObject = useRef(null);\n  const sizeControlProps = {\n    position,\n    panelRef: splitPanelRefObject,\n    handleRef: refs.slider,\n    onResize,\n    hasTransitions: true\n  };\n  const onSliderPointerDown = usePointerEvents(sizeControlProps);\n  const onKeyDown = useKeyboardEvents(sizeControlProps);\n  const contentStyle = {\n    [globalVars.stickyVerticalTopOffset]: topOffset,\n    [globalVars.stickyVerticalBottomOffset]: bottomOffset\n  };\n  const panelHeaderId = useUniqueId('split-panel-header');\n  const wrappedHeader = React.createElement(\"div\", {\n    className: clsx(styles.header, isToolbar && styles['with-toolbar']),\n    style: appLayoutMaxWidth\n  }, React.createElement(\"h2\", {\n    className: clsx(styles['header-text'], testUtilStyles['header-text']),\n    id: panelHeaderId\n  }, header), React.createElement(\"div\", {\n    className: styles['header-actions']\n  }, !hidePreferencesButton && isOpen && React.createElement(React.Fragment, null, React.createElement(InternalButton, {\n    className: testUtilStyles['preferences-button'],\n    iconName: \"settings\",\n    variant: \"icon\",\n    onClick: () => setPreferencesOpen(true),\n    formAction: \"none\",\n    ariaLabel: i18nStrings.preferencesTitle,\n    ref: refs.preferences\n  }), React.createElement(\"span\", {\n    className: styles.divider\n  })), isOpen ? React.createElement(InternalButton, {\n    className: testUtilStyles['close-button'],\n    iconName: isRefresh && closeBehavior === 'collapse' ? position === 'side' ? 'angle-right' : 'angle-down' : 'close',\n    variant: \"icon\",\n    onClick: onToggle,\n    formAction: \"none\",\n    ariaLabel: i18nStrings.closeButtonAriaLabel,\n    ariaExpanded: isOpen\n  }) : isToolbar || position === 'side' ? null : React.createElement(InternalButton, {\n    className: testUtilStyles['open-button'],\n    iconName: \"angle-up\",\n    variant: \"icon\",\n    formAction: \"none\",\n    ariaLabel: i18nStrings.openButtonAriaLabel,\n    ref: refs.toggle,\n    ariaExpanded: isOpen\n  })));\n  const resizeHandle = React.createElement(PanelResizeHandle, {\n    ref: refs.slider,\n    className: testUtilStyles.slider,\n    ariaLabel: i18nStrings.resizeHandleAriaLabel,\n    // Allows us to use the logical left/right keys to move the slider left/right,\n    // but match aria keyboard behavior of using left/right to decrease/increase\n    // the slider value.\n    ariaValuenow: position === 'bottom' ? relativeSize : 100 - relativeSize,\n    position: position,\n    onKeyDown: onKeyDown,\n    onPointerDown: onSliderPointerDown\n  });\n  /*\n    This effect forces the browser to recalculate the layout\n    whenever the split panel might have moved.\n       This is needed as a workaround for a bug in Safari, which does\n    not automatically calculate the new position of the split panel\n    _content_ when the split panel moves.\n  */\n  useLayoutEffect(() => {\n    const root = splitPanelRefObject.current;\n    if (root) {\n      const property = 'transform';\n      const temporaryValue = 'translateZ(0)';\n      const valueBefore = root.style[property];\n      root.style[property] = temporaryValue;\n      // This line forces the browser to recalculate the layout\n      void root.offsetHeight;\n      root.style[property] = valueBefore;\n    }\n  }, [rightOffset, __internalRootRef]);\n  const mergedRef = useMergeRefs(splitPanelRefObject, __internalRootRef);\n  if (closeBehavior === 'hide' && !isOpen) {\n    return React.createElement(React.Fragment, null);\n  }\n  /**\n   * The AppLayout factor moved the circular buttons out of the\n   * SplitPanel and into the Tools component. This conditional\n   * is still needed for the early return to prevent execution\n   * of the following code.\n   */\n  if (isRefresh && !isToolbar && !isOpen && position === 'side') {\n    return React.createElement(React.Fragment, null);\n  }\n  return React.createElement(React.Fragment, null, position === 'side' && React.createElement(SplitPanelContentSide, {\n    style: contentStyle,\n    resizeHandle: resizeHandle,\n    baseProps: baseProps,\n    isOpen: isOpen,\n    splitPanelRef: mergedRef,\n    cappedSize: size,\n    onToggle: onToggle,\n    openButtonAriaLabel: openButtonAriaLabel,\n    toggleRef: refs.toggle,\n    header: wrappedHeader,\n    panelHeaderId: panelHeaderId\n  }, children), position === 'bottom' && React.createElement(SplitPanelContentBottom, {\n    style: contentStyle,\n    resizeHandle: resizeHandle,\n    baseProps: baseProps,\n    isOpen: isOpen,\n    splitPanelRef: mergedRef,\n    cappedSize: size,\n    onToggle: onToggle,\n    header: wrappedHeader,\n    panelHeaderId: panelHeaderId,\n    appLayoutMaxWidth: appLayoutMaxWidth\n  }, children), isPreferencesOpen && React.createElement(PreferencesModal, {\n    visible: true,\n    preferences: {\n      position\n    },\n    disabledSidePosition: position === 'bottom' && isForcedPosition,\n    isRefresh: isRefresh,\n    i18nStrings: {\n      header: i18nStrings.preferencesTitle,\n      confirm: i18nStrings.preferencesConfirm,\n      cancel: i18nStrings.preferencesCancel,\n      positionLabel: i18nStrings.preferencesPositionLabel,\n      positionDescription: i18nStrings.preferencesPositionDescription,\n      positionBottom: i18nStrings.preferencesPositionBottom,\n      positionSide: i18nStrings.preferencesPositionSide\n    },\n    onConfirm: preferences => {\n      onPreferencesChange(Object.assign({}, preferences));\n      setPreferencesOpen(false);\n    },\n    onDismiss: () => {\n      setPreferencesOpen(false);\n    }\n  }));\n}\nexport const createWidgetizedSplitPanel = createWidgetizedComponent(SplitPanelImplementation);","map":{"version":3,"names":["React","useEffect","useLayoutEffect","useRef","useState","clsx","useAppLayoutToolbarEnabled","useKeyboardEvents","usePointerEvents","InternalButton","getBaseProps","PanelResizeHandle","useSplitPanelContext","useMergeRefs","useUniqueId","useVisualRefresh","globalVars","createWidgetizedComponent","SplitPanelContentBottom","PreferencesModal","SplitPanelContentSide","styles","testUtilStyles","SplitPanelImplementation","_a","__internalRootRef","header","children","hidePreferencesButton","closeBehavior","i18nStrings","restProps","__rest","isRefresh","isToolbar","position","topOffset","bottomOffset","rightOffset","contentWidthStyles","isOpen","isForcedPosition","onPreferencesChange","onResize","onToggle","size","relativeSize","setSplitPanelToggle","refs","baseProps","isPreferencesOpen","setPreferencesOpen","appLayoutMaxWidth","undefined","openButtonAriaLabel","displayed","ariaLabel","splitPanelRefObject","sizeControlProps","panelRef","handleRef","slider","hasTransitions","onSliderPointerDown","onKeyDown","contentStyle","stickyVerticalTopOffset","stickyVerticalBottomOffset","panelHeaderId","wrappedHeader","createElement","className","style","id","Fragment","iconName","variant","onClick","formAction","preferencesTitle","ref","preferences","divider","closeButtonAriaLabel","ariaExpanded","toggle","resizeHandle","resizeHandleAriaLabel","ariaValuenow","onPointerDown","root","current","property","temporaryValue","valueBefore","offsetHeight","mergedRef","splitPanelRef","cappedSize","toggleRef","visible","disabledSidePosition","confirm","preferencesConfirm","cancel","preferencesCancel","positionLabel","preferencesPositionLabel","positionDescription","preferencesPositionDescription","positionBottom","preferencesPositionBottom","positionSide","preferencesPositionSide","onConfirm","Object","assign","onDismiss","createWidgetizedSplitPanel"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/split-panel/implementation.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useLayoutEffect, useRef, useState } from 'react';\nimport clsx from 'clsx';\n\nimport { useAppLayoutToolbarEnabled } from '../app-layout/utils/feature-flags';\nimport { SizeControlProps } from '../app-layout/utils/interfaces';\nimport { useKeyboardEvents } from '../app-layout/utils/use-keyboard-events';\nimport { usePointerEvents } from '../app-layout/utils/use-pointer-events';\nimport { InternalButton } from '../button/internal';\nimport { getBaseProps } from '../internal/base-component';\nimport PanelResizeHandle from '../internal/components/panel-resize-handle';\nimport { useSplitPanelContext } from '../internal/context/split-panel-context';\nimport { InternalBaseComponentProps } from '../internal/hooks/use-base-component';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport globalVars from '../internal/styles/global-vars';\nimport { SomeRequired } from '../internal/types';\nimport { createWidgetizedComponent } from '../internal/widgets';\nimport { SplitPanelContentBottom } from './bottom';\nimport { SplitPanelProps } from './interfaces';\nimport PreferencesModal from './preferences-modal';\nimport { SplitPanelContentSide } from './side';\n\nimport styles from './styles.css.js';\nimport testUtilStyles from './test-classes/styles.css.js';\n\nexport type SplitPanelImplementationProps = SomeRequired<SplitPanelProps, 'hidePreferencesButton' | 'closeBehavior'> &\n  InternalBaseComponentProps;\n\nexport function SplitPanelImplementation({\n  __internalRootRef,\n  header,\n  children,\n  hidePreferencesButton,\n  closeBehavior,\n  i18nStrings = {},\n  ...restProps\n}: SplitPanelImplementationProps) {\n  const isRefresh = useVisualRefresh();\n  const isToolbar = useAppLayoutToolbarEnabled();\n\n  const {\n    position,\n    topOffset,\n    bottomOffset,\n    rightOffset,\n    contentWidthStyles,\n    isOpen,\n    isForcedPosition,\n    onPreferencesChange,\n    onResize,\n    onToggle,\n    size,\n    relativeSize,\n    setSplitPanelToggle,\n    refs,\n  } = useSplitPanelContext();\n  const baseProps = getBaseProps(restProps);\n  const [isPreferencesOpen, setPreferencesOpen] = useState<boolean>(false);\n\n  const appLayoutMaxWidth = isRefresh && position === 'bottom' ? contentWidthStyles : undefined;\n\n  const openButtonAriaLabel = i18nStrings.openButtonAriaLabel;\n  useEffect(() => {\n    setSplitPanelToggle({ displayed: closeBehavior === 'collapse', ariaLabel: openButtonAriaLabel });\n\n    return () => {\n      setSplitPanelToggle({ displayed: false, ariaLabel: undefined });\n    };\n  }, [setSplitPanelToggle, openButtonAriaLabel, closeBehavior]);\n\n  const splitPanelRefObject = useRef<HTMLDivElement>(null);\n\n  const sizeControlProps: SizeControlProps = {\n    position,\n    panelRef: splitPanelRefObject,\n    handleRef: refs.slider,\n    onResize,\n    hasTransitions: true,\n  };\n  const onSliderPointerDown = usePointerEvents(sizeControlProps);\n  const onKeyDown = useKeyboardEvents(sizeControlProps);\n\n  const contentStyle = {\n    [globalVars.stickyVerticalTopOffset]: topOffset,\n    [globalVars.stickyVerticalBottomOffset]: bottomOffset,\n  };\n\n  const panelHeaderId = useUniqueId('split-panel-header');\n\n  const wrappedHeader = (\n    <div className={clsx(styles.header, isToolbar && styles['with-toolbar'])} style={appLayoutMaxWidth}>\n      <h2 className={clsx(styles['header-text'], testUtilStyles['header-text'])} id={panelHeaderId}>\n        {header}\n      </h2>\n      <div className={styles['header-actions']}>\n        {!hidePreferencesButton && isOpen && (\n          <>\n            <InternalButton\n              className={testUtilStyles['preferences-button']}\n              iconName=\"settings\"\n              variant=\"icon\"\n              onClick={() => setPreferencesOpen(true)}\n              formAction=\"none\"\n              ariaLabel={i18nStrings.preferencesTitle}\n              ref={refs.preferences}\n            />\n            <span className={styles.divider} />\n          </>\n        )}\n\n        {isOpen ? (\n          <InternalButton\n            className={testUtilStyles['close-button']}\n            iconName={\n              isRefresh && closeBehavior === 'collapse' ? (position === 'side' ? 'angle-right' : 'angle-down') : 'close'\n            }\n            variant=\"icon\"\n            onClick={onToggle}\n            formAction=\"none\"\n            ariaLabel={i18nStrings.closeButtonAriaLabel}\n            ariaExpanded={isOpen}\n          />\n        ) : isToolbar || position === 'side' ? null : (\n          <InternalButton\n            className={testUtilStyles['open-button']}\n            iconName=\"angle-up\"\n            variant=\"icon\"\n            formAction=\"none\"\n            ariaLabel={i18nStrings.openButtonAriaLabel}\n            ref={refs.toggle}\n            ariaExpanded={isOpen}\n          />\n        )}\n      </div>\n    </div>\n  );\n\n  const resizeHandle = (\n    <PanelResizeHandle\n      ref={refs.slider}\n      className={testUtilStyles.slider}\n      ariaLabel={i18nStrings.resizeHandleAriaLabel}\n      // Allows us to use the logical left/right keys to move the slider left/right,\n      // but match aria keyboard behavior of using left/right to decrease/increase\n      // the slider value.\n      ariaValuenow={position === 'bottom' ? relativeSize : 100 - relativeSize}\n      position={position}\n      onKeyDown={onKeyDown}\n      onPointerDown={onSliderPointerDown}\n    />\n  );\n\n  /*\n    This effect forces the browser to recalculate the layout\n    whenever the split panel might have moved.\n\n    This is needed as a workaround for a bug in Safari, which does\n    not automatically calculate the new position of the split panel\n    _content_ when the split panel moves.\n  */\n  useLayoutEffect(() => {\n    const root = splitPanelRefObject.current;\n\n    if (root) {\n      const property = 'transform';\n      const temporaryValue = 'translateZ(0)';\n\n      const valueBefore = root.style[property];\n      root.style[property] = temporaryValue;\n\n      // This line forces the browser to recalculate the layout\n      void root.offsetHeight;\n\n      root.style[property] = valueBefore;\n    }\n  }, [rightOffset, __internalRootRef]);\n\n  const mergedRef = useMergeRefs(splitPanelRefObject, __internalRootRef);\n\n  if (closeBehavior === 'hide' && !isOpen) {\n    return <></>;\n  }\n\n  /**\n   * The AppLayout factor moved the circular buttons out of the\n   * SplitPanel and into the Tools component. This conditional\n   * is still needed for the early return to prevent execution\n   * of the following code.\n   */\n  if (isRefresh && !isToolbar && !isOpen && position === 'side') {\n    return <></>;\n  }\n\n  return (\n    <>\n      {position === 'side' && (\n        <SplitPanelContentSide\n          style={contentStyle}\n          resizeHandle={resizeHandle}\n          baseProps={baseProps}\n          isOpen={isOpen}\n          splitPanelRef={mergedRef}\n          cappedSize={size}\n          onToggle={onToggle}\n          openButtonAriaLabel={openButtonAriaLabel}\n          toggleRef={refs.toggle}\n          header={wrappedHeader}\n          panelHeaderId={panelHeaderId}\n        >\n          {children}\n        </SplitPanelContentSide>\n      )}\n\n      {position === 'bottom' && (\n        <SplitPanelContentBottom\n          style={contentStyle}\n          resizeHandle={resizeHandle}\n          baseProps={baseProps}\n          isOpen={isOpen}\n          splitPanelRef={mergedRef}\n          cappedSize={size}\n          onToggle={onToggle}\n          header={wrappedHeader}\n          panelHeaderId={panelHeaderId}\n          appLayoutMaxWidth={appLayoutMaxWidth}\n        >\n          {children}\n        </SplitPanelContentBottom>\n      )}\n      {isPreferencesOpen && (\n        <PreferencesModal\n          visible={true}\n          preferences={{ position }}\n          disabledSidePosition={position === 'bottom' && isForcedPosition}\n          isRefresh={isRefresh}\n          i18nStrings={{\n            header: i18nStrings.preferencesTitle,\n            confirm: i18nStrings.preferencesConfirm,\n            cancel: i18nStrings.preferencesCancel,\n            positionLabel: i18nStrings.preferencesPositionLabel,\n            positionDescription: i18nStrings.preferencesPositionDescription,\n            positionBottom: i18nStrings.preferencesPositionBottom,\n            positionSide: i18nStrings.preferencesPositionSide,\n          }}\n          onConfirm={preferences => {\n            onPreferencesChange({ ...preferences });\n            setPreferencesOpen(false);\n          }}\n          onDismiss={() => {\n            setPreferencesOpen(false);\n          }}\n        />\n      )}\n    </>\n  );\n}\n\nexport const createWidgetizedSplitPanel = createWidgetizedComponent(SplitPanelImplementation);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}