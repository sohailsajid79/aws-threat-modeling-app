{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo, useState } from 'react';\nimport { DndContext, DragOverlay } from '@dnd-kit/core';\nimport { arrayMove, SortableContext, verticalListSortingStrategy } from '@dnd-kit/sortable';\nimport InternalBox from '../../box/internal';\nimport InternalButton from '../../button/internal';\nimport { useInternalI18n } from '../../i18n/context';\nimport Portal from '../../internal/components/portal';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport InternalSpaceBetween from '../../space-between/internal';\nimport InternalTextFilter from '../../text-filter/internal';\nimport { getAnalyticsInnerContextAttribute } from '../analytics-metadata/utils';\nimport ContentDisplayOption from './content-display-option';\nimport DraggableOption from './draggable-option';\nimport useDragAndDropReorder from './use-drag-and-drop-reorder';\nimport useLiveAnnouncements from './use-live-announcements';\nimport { getFilteredOptions, getSortedOptions } from './utils';\nimport styles from '../styles.css.js';\nconst componentPrefix = 'content-display';\nconst getClassName = suffix => styles[`${componentPrefix}-${suffix}`];\nexport default function ContentDisplayPreference(_ref) {\n  let {\n    title,\n    description,\n    options,\n    value = options.map(_ref2 => {\n      let {\n        id\n      } = _ref2;\n      return {\n        id,\n        visible: true\n      };\n    }),\n    onChange,\n    liveAnnouncementDndStarted,\n    liveAnnouncementDndItemReordered,\n    liveAnnouncementDndItemCommitted,\n    liveAnnouncementDndDiscarded,\n    dragHandleAriaDescription,\n    dragHandleAriaLabel,\n    enableColumnFiltering = false,\n    i18nStrings\n  } = _ref;\n  const idPrefix = useUniqueId(componentPrefix);\n  const i18n = useInternalI18n('collection-preferences');\n  const [columnFilteringText, setColumnFilteringText] = useState('');\n  const titleId = `${idPrefix}-title`;\n  const descriptionId = `${idPrefix}-description`;\n  const [sortedOptions, sortedAndFilteredOptions] = useMemo(() => {\n    const sorted = getSortedOptions({\n      options,\n      contentDisplay: value\n    });\n    const filtered = getFilteredOptions(sorted, columnFilteringText);\n    return [sorted, filtered];\n  }, [columnFilteringText, options, value]);\n  const onToggle = option => {\n    // We use sortedOptions as base and not value because there might be options that\n    // are not in the value yet, so they're added as non-visible after the known ones.\n    onChange(sortedOptions.map(_ref3 => {\n      let {\n        id,\n        visible\n      } = _ref3;\n      return {\n        id,\n        visible: id === option.id ? !option.visible : visible\n      };\n    }));\n  };\n  const {\n    activeItem,\n    collisionDetection,\n    handleKeyDown,\n    sensors,\n    setActiveItem\n  } = useDragAndDropReorder({\n    sortedOptions: sortedAndFilteredOptions\n  });\n  const activeOption = activeItem ? sortedAndFilteredOptions.find(_ref4 => {\n    let {\n      id\n    } = _ref4;\n    return id === activeItem;\n  }) : null;\n  const announcements = useLiveAnnouncements({\n    isDragging: activeItem !== null,\n    liveAnnouncementDndStarted: i18n('contentDisplayPreference.liveAnnouncementDndStarted', liveAnnouncementDndStarted, format => (position, total) => format({\n      position,\n      total\n    })),\n    liveAnnouncementDndItemReordered: i18n('contentDisplayPreference.liveAnnouncementDndItemReordered', liveAnnouncementDndItemReordered, format => (initialPosition, currentPosition, total) => format({\n      currentPosition,\n      total,\n      isInitialPosition: `${initialPosition === currentPosition}`\n    })),\n    liveAnnouncementDndItemCommitted: i18n('contentDisplayPreference.liveAnnouncementDndItemCommitted', liveAnnouncementDndItemCommitted, format => (initialPosition, finalPosition, total) => format({\n      initialPosition,\n      finalPosition,\n      total,\n      isInitialPosition: `${initialPosition === finalPosition}`\n    })),\n    liveAnnouncementDndDiscarded: i18n('contentDisplayPreference.liveAnnouncementDndDiscarded', liveAnnouncementDndDiscarded),\n    sortedOptions: sortedAndFilteredOptions\n  });\n  const renderedDragHandleAriaDescription = i18n('contentDisplayPreference.dragHandleAriaDescription', dragHandleAriaDescription);\n  return React.createElement(\"div\", Object.assign({\n    className: styles[componentPrefix]\n  }, getAnalyticsInnerContextAttribute('contentDisplay')), React.createElement(\"h3\", {\n    className: getClassName('title'),\n    id: titleId\n  }, i18n('contentDisplayPreference.title', title)), React.createElement(\"p\", {\n    className: getClassName('description'),\n    id: descriptionId\n  }, i18n('contentDisplayPreference.description', description)), enableColumnFiltering && React.createElement(\"div\", {\n    className: getClassName('text-filter')\n  }, React.createElement(InternalTextFilter, {\n    filteringText: columnFilteringText,\n    filteringPlaceholder: i18n('contentDisplayPreference.i18nStrings.columnFilteringPlaceholder', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnFilteringPlaceholder),\n    filteringAriaLabel: i18n('contentDisplayPreference.i18nStrings.columnFilteringAriaLabel', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnFilteringAriaLabel),\n    filteringClearAriaLabel: i18n('contentDisplayPreference.i18nStrings.columnFilteringClearFilterText', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnFilteringClearFilterText),\n    onChange: _ref5 => {\n      let {\n        detail\n      } = _ref5;\n      return setColumnFilteringText(detail.filteringText);\n    },\n    countText: i18n('contentDisplayPreference.i18nStrings.columnFilteringCountText', (i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnFilteringCountText) ? i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnFilteringCountText(sortedAndFilteredOptions.length) : undefined, format => format({\n      count: sortedAndFilteredOptions.length\n    }))\n  })), sortedAndFilteredOptions.length === 0 && React.createElement(\"div\", {\n    className: getClassName('no-match')\n  }, React.createElement(InternalSpaceBetween, {\n    size: \"s\",\n    alignItems: \"center\"\n  }, React.createElement(InternalBox, {\n    margin: {\n      top: 'm'\n    }\n  }, i18n('contentDisplayPreference.i18nStrings.columnFilteringNoMatchText', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnFilteringNoMatchText)), React.createElement(InternalButton, {\n    onClick: () => setColumnFilteringText('')\n  }, i18n('contentDisplayPreference.i18nStrings.columnFilteringClearFilterText', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnFilteringClearFilterText)))), React.createElement(DndContext, {\n    sensors: sensors,\n    collisionDetection: collisionDetection,\n    accessibility: {\n      announcements,\n      restoreFocus: false,\n      screenReaderInstructions: renderedDragHandleAriaDescription ? {\n        draggable: renderedDragHandleAriaDescription\n      } : undefined\n    },\n    onDragStart: _ref6 => {\n      let {\n        active\n      } = _ref6;\n      return setActiveItem(active.id);\n    },\n    onDragEnd: event => {\n      setActiveItem(null);\n      const {\n        active,\n        over\n      } = event;\n      if (over && active.id !== over.id) {\n        const oldIndex = sortedOptions.findIndex(_ref7 => {\n          let {\n            id\n          } = _ref7;\n          return id === active.id;\n        });\n        const newIndex = sortedOptions.findIndex(_ref8 => {\n          let {\n            id\n          } = _ref8;\n          return id === over.id;\n        });\n        // We need to remember to trim the options down to id and visible to emit changes.\n        onChange(arrayMove([...sortedOptions], oldIndex, newIndex).map(_ref9 => {\n          let {\n            id,\n            visible\n          } = _ref9;\n          return {\n            id,\n            visible\n          };\n        }));\n      }\n    },\n    onDragCancel: () => setActiveItem(null)\n  }, React.createElement(\"ul\", {\n    className: getClassName('option-list'),\n    \"aria-describedby\": descriptionId,\n    \"aria-labelledby\": titleId,\n    role: \"list\"\n  }, React.createElement(SortableContext, {\n    disabled: columnFilteringText.trim().length > 0,\n    items: sortedAndFilteredOptions.map(_ref10 => {\n      let {\n        id\n      } = _ref10;\n      return id;\n    }),\n    strategy: verticalListSortingStrategy\n  }, sortedAndFilteredOptions.map(option => {\n    return React.createElement(DraggableOption, {\n      dragHandleAriaLabel: i18n('contentDisplayPreference.dragHandleAriaLabel', dragHandleAriaLabel),\n      key: option.id,\n      onKeyDown: handleKeyDown,\n      onToggle: onToggle,\n      option: option\n    });\n  }))), React.createElement(Portal, null, React.createElement(DragOverlay, {\n    className: styles['drag-overlay'],\n    dropAnimation: null,\n    style: {\n      zIndex: 5000\n    }\n  }, activeOption && React.createElement(ContentDisplayOption, {\n    listeners: {\n      onKeyDown: handleKeyDown\n    },\n    dragHandleAriaLabel: i18n('contentDisplayPreference.dragHandleAriaLabel', dragHandleAriaLabel),\n    onToggle: onToggle,\n    option: activeOption\n  })))));\n}","map":{"version":3,"names":["React","useMemo","useState","DndContext","DragOverlay","arrayMove","SortableContext","verticalListSortingStrategy","InternalBox","InternalButton","useInternalI18n","Portal","useUniqueId","InternalSpaceBetween","InternalTextFilter","getAnalyticsInnerContextAttribute","ContentDisplayOption","DraggableOption","useDragAndDropReorder","useLiveAnnouncements","getFilteredOptions","getSortedOptions","styles","componentPrefix","getClassName","suffix","ContentDisplayPreference","_ref","title","description","options","value","map","_ref2","id","visible","onChange","liveAnnouncementDndStarted","liveAnnouncementDndItemReordered","liveAnnouncementDndItemCommitted","liveAnnouncementDndDiscarded","dragHandleAriaDescription","dragHandleAriaLabel","enableColumnFiltering","i18nStrings","idPrefix","i18n","columnFilteringText","setColumnFilteringText","titleId","descriptionId","sortedOptions","sortedAndFilteredOptions","sorted","contentDisplay","filtered","onToggle","option","_ref3","activeItem","collisionDetection","handleKeyDown","sensors","setActiveItem","activeOption","find","_ref4","announcements","isDragging","format","position","total","initialPosition","currentPosition","isInitialPosition","finalPosition","renderedDragHandleAriaDescription","createElement","Object","assign","className","filteringText","filteringPlaceholder","columnFilteringPlaceholder","filteringAriaLabel","columnFilteringAriaLabel","filteringClearAriaLabel","columnFilteringClearFilterText","_ref5","detail","countText","columnFilteringCountText","length","undefined","count","size","alignItems","margin","top","columnFilteringNoMatchText","onClick","accessibility","restoreFocus","screenReaderInstructions","draggable","onDragStart","_ref6","active","onDragEnd","event","over","oldIndex","findIndex","_ref7","newIndex","_ref8","_ref9","onDragCancel","role","disabled","trim","items","_ref10","strategy","key","onKeyDown","dropAnimation","style","zIndex","listeners"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/collection-preferences/content-display/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo, useState } from 'react';\nimport { DndContext, DragOverlay } from '@dnd-kit/core';\nimport { arrayMove, SortableContext, verticalListSortingStrategy } from '@dnd-kit/sortable';\n\nimport InternalBox from '../../box/internal';\nimport InternalButton from '../../button/internal';\nimport { useInternalI18n } from '../../i18n/context';\nimport Portal from '../../internal/components/portal';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport InternalSpaceBetween from '../../space-between/internal';\nimport InternalTextFilter from '../../text-filter/internal';\nimport { getAnalyticsInnerContextAttribute } from '../analytics-metadata/utils';\nimport { CollectionPreferencesProps } from '../interfaces';\nimport ContentDisplayOption from './content-display-option';\nimport DraggableOption from './draggable-option';\nimport useDragAndDropReorder from './use-drag-and-drop-reorder';\nimport useLiveAnnouncements from './use-live-announcements';\nimport { getFilteredOptions, getSortedOptions, OptionWithVisibility } from './utils';\n\nimport styles from '../styles.css.js';\n\nconst componentPrefix = 'content-display';\n\nconst getClassName = (suffix: string) => styles[`${componentPrefix}-${suffix}`];\n\ninterface ContentDisplayPreferenceProps extends CollectionPreferencesProps.ContentDisplayPreference {\n  onChange: (value: ReadonlyArray<CollectionPreferencesProps.ContentDisplayItem>) => void;\n  value?: ReadonlyArray<CollectionPreferencesProps.ContentDisplayItem>;\n}\n\nexport default function ContentDisplayPreference({\n  title,\n  description,\n  options,\n  value = options.map(({ id }) => ({\n    id,\n    visible: true,\n  })),\n  onChange,\n  liveAnnouncementDndStarted,\n  liveAnnouncementDndItemReordered,\n  liveAnnouncementDndItemCommitted,\n  liveAnnouncementDndDiscarded,\n  dragHandleAriaDescription,\n  dragHandleAriaLabel,\n  enableColumnFiltering = false,\n  i18nStrings,\n}: ContentDisplayPreferenceProps) {\n  const idPrefix = useUniqueId(componentPrefix);\n  const i18n = useInternalI18n('collection-preferences');\n  const [columnFilteringText, setColumnFilteringText] = useState('');\n\n  const titleId = `${idPrefix}-title`;\n  const descriptionId = `${idPrefix}-description`;\n\n  const [sortedOptions, sortedAndFilteredOptions] = useMemo(() => {\n    const sorted = getSortedOptions({ options, contentDisplay: value });\n    const filtered = getFilteredOptions(sorted, columnFilteringText);\n    return [sorted, filtered];\n  }, [columnFilteringText, options, value]);\n\n  const onToggle = (option: OptionWithVisibility) => {\n    // We use sortedOptions as base and not value because there might be options that\n    // are not in the value yet, so they're added as non-visible after the known ones.\n    onChange(sortedOptions.map(({ id, visible }) => ({ id, visible: id === option.id ? !option.visible : visible })));\n  };\n\n  const { activeItem, collisionDetection, handleKeyDown, sensors, setActiveItem } = useDragAndDropReorder({\n    sortedOptions: sortedAndFilteredOptions,\n  });\n\n  const activeOption = activeItem ? sortedAndFilteredOptions.find(({ id }) => id === activeItem) : null;\n\n  const announcements = useLiveAnnouncements({\n    isDragging: activeItem !== null,\n    liveAnnouncementDndStarted: i18n(\n      'contentDisplayPreference.liveAnnouncementDndStarted',\n      liveAnnouncementDndStarted,\n      format => (position, total) => format({ position, total })\n    ),\n    liveAnnouncementDndItemReordered: i18n(\n      'contentDisplayPreference.liveAnnouncementDndItemReordered',\n      liveAnnouncementDndItemReordered,\n      format => (initialPosition, currentPosition, total) =>\n        format({ currentPosition, total, isInitialPosition: `${initialPosition === currentPosition}` })\n    ),\n    liveAnnouncementDndItemCommitted: i18n(\n      'contentDisplayPreference.liveAnnouncementDndItemCommitted',\n      liveAnnouncementDndItemCommitted,\n      format => (initialPosition, finalPosition, total) =>\n        format({ initialPosition, finalPosition, total, isInitialPosition: `${initialPosition === finalPosition}` })\n    ),\n    liveAnnouncementDndDiscarded: i18n(\n      'contentDisplayPreference.liveAnnouncementDndDiscarded',\n      liveAnnouncementDndDiscarded\n    ),\n    sortedOptions: sortedAndFilteredOptions,\n  });\n\n  const renderedDragHandleAriaDescription = i18n(\n    'contentDisplayPreference.dragHandleAriaDescription',\n    dragHandleAriaDescription\n  );\n\n  return (\n    <div className={styles[componentPrefix]} {...getAnalyticsInnerContextAttribute('contentDisplay')}>\n      <h3 className={getClassName('title')} id={titleId}>\n        {i18n('contentDisplayPreference.title', title)}\n      </h3>\n      <p className={getClassName('description')} id={descriptionId}>\n        {i18n('contentDisplayPreference.description', description)}\n      </p>\n\n      {/* Filter input */}\n      {enableColumnFiltering && (\n        <div className={getClassName('text-filter')}>\n          <InternalTextFilter\n            filteringText={columnFilteringText}\n            filteringPlaceholder={i18n(\n              'contentDisplayPreference.i18nStrings.columnFilteringPlaceholder',\n              i18nStrings?.columnFilteringPlaceholder\n            )}\n            filteringAriaLabel={i18n(\n              'contentDisplayPreference.i18nStrings.columnFilteringAriaLabel',\n              i18nStrings?.columnFilteringAriaLabel\n            )}\n            filteringClearAriaLabel={i18n(\n              'contentDisplayPreference.i18nStrings.columnFilteringClearFilterText',\n              i18nStrings?.columnFilteringClearFilterText\n            )}\n            onChange={({ detail }) => setColumnFilteringText(detail.filteringText)}\n            countText={i18n(\n              'contentDisplayPreference.i18nStrings.columnFilteringCountText',\n              i18nStrings?.columnFilteringCountText\n                ? i18nStrings?.columnFilteringCountText(sortedAndFilteredOptions.length)\n                : undefined,\n              format => format({ count: sortedAndFilteredOptions.length })\n            )}\n          />\n        </div>\n      )}\n\n      {/* No match */}\n      {sortedAndFilteredOptions.length === 0 && (\n        <div className={getClassName('no-match')}>\n          <InternalSpaceBetween size=\"s\" alignItems=\"center\">\n            <InternalBox margin={{ top: 'm' }}>\n              {i18n(\n                'contentDisplayPreference.i18nStrings.columnFilteringNoMatchText',\n                i18nStrings?.columnFilteringNoMatchText\n              )}\n            </InternalBox>\n            <InternalButton onClick={() => setColumnFilteringText('')}>\n              {i18n(\n                'contentDisplayPreference.i18nStrings.columnFilteringClearFilterText',\n                i18nStrings?.columnFilteringClearFilterText\n              )}\n            </InternalButton>\n          </InternalSpaceBetween>\n        </div>\n      )}\n\n      {/* Drag and drop */}\n      <DndContext\n        sensors={sensors}\n        collisionDetection={collisionDetection}\n        accessibility={{\n          announcements,\n          restoreFocus: false,\n          screenReaderInstructions: renderedDragHandleAriaDescription\n            ? { draggable: renderedDragHandleAriaDescription }\n            : undefined,\n        }}\n        onDragStart={({ active }) => setActiveItem(active.id)}\n        onDragEnd={event => {\n          setActiveItem(null);\n          const { active, over } = event;\n\n          if (over && active.id !== over.id) {\n            const oldIndex = sortedOptions.findIndex(({ id }) => id === active.id);\n            const newIndex = sortedOptions.findIndex(({ id }) => id === over.id);\n            // We need to remember to trim the options down to id and visible to emit changes.\n            onChange(arrayMove([...sortedOptions], oldIndex, newIndex).map(({ id, visible }) => ({ id, visible })));\n          }\n        }}\n        onDragCancel={() => setActiveItem(null)}\n      >\n        {/* Use explicit list role to work around Safari not announcing lists as such when list-style is set to none.\n            See https://bugs.webkit.org/show_bug.cgi?id=170179 */}\n        <ul\n          className={getClassName('option-list')}\n          aria-describedby={descriptionId}\n          aria-labelledby={titleId}\n          role=\"list\"\n        >\n          <SortableContext\n            disabled={columnFilteringText.trim().length > 0}\n            items={sortedAndFilteredOptions.map(({ id }) => id)}\n            strategy={verticalListSortingStrategy}\n          >\n            {sortedAndFilteredOptions.map(option => {\n              return (\n                <DraggableOption\n                  dragHandleAriaLabel={i18n('contentDisplayPreference.dragHandleAriaLabel', dragHandleAriaLabel)}\n                  key={option.id}\n                  onKeyDown={handleKeyDown}\n                  onToggle={onToggle}\n                  option={option}\n                />\n              );\n            })}\n          </SortableContext>\n        </ul>\n        <Portal>\n          {/* Make sure that the drag overlay is above the modal\n              by assigning the z-index as inline style\n              so that it prevails over dnd-kit's inline z-index of 999  */}\n          {/* className is a documented prop of the DragOverlay component:\n              https://docs.dndkit.com/api-documentation/draggable/drag-overlay#class-name-and-inline-styles */\n          /* eslint-disable-next-line react/forbid-component-props */}\n          <DragOverlay className={styles['drag-overlay']} dropAnimation={null} style={{ zIndex: 5000 }}>\n            {activeOption && (\n              <ContentDisplayOption\n                listeners={{ onKeyDown: handleKeyDown }}\n                dragHandleAriaLabel={i18n('contentDisplayPreference.dragHandleAriaLabel', dragHandleAriaLabel)}\n                onToggle={onToggle}\n                option={activeOption}\n              />\n            )}\n          </DragOverlay>\n        </Portal>\n      </DndContext>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}