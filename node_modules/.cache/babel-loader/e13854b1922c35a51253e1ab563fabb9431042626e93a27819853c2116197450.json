{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport flattenChildren from 'react-keyed-flatten-children';\nimport clsx from 'clsx';\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\nimport styles from './styles.css.js';\nconst isOdd = value => value % 2 !== 0;\nexport function calculcateCssColumnCount(columns, minColumnWidth, containerWidth) {\n  if (!containerWidth) {\n    return columns;\n  }\n  // First, calculate how many columns we can have based on the current container width and minColumnWidth.\n  const targetColumnCount = Math.min(columns, Math.floor(containerWidth / minColumnWidth));\n  // When we start wrapping into fewer columns than desired, we want to keep the number of columns even.\n  return Math.max(1, targetColumnCount < columns && isOdd(targetColumnCount) ? targetColumnCount - 1 : targetColumnCount);\n}\nexport default function FlexibleColumnLayout(_ref) {\n  let {\n    columns = 1,\n    minColumnWidth = 0,\n    disableGutters,\n    variant,\n    children,\n    __tagOverride\n  } = _ref;\n  const [containerWidth, containerRef] = useContainerQuery(rect => rect.contentBoxWidth);\n  const columnCount = calculcateCssColumnCount(columns, minColumnWidth, containerWidth);\n  const shouldDisableGutters = variant !== 'text-grid' && disableGutters;\n  // Flattening the children allows us to \"see through\" React Fragments and nested arrays.\n  const flattenedChildren = flattenChildren(children);\n  const Tag = __tagOverride !== null && __tagOverride !== void 0 ? __tagOverride : 'div';\n  return React.createElement(Tag, {\n    ref: containerRef,\n    className: clsx(styles['css-grid'], styles[`grid-variant-${variant}`], shouldDisableGutters && [styles['grid-no-gutters']]),\n    style: {\n      gridTemplateColumns: `repeat(${columnCount}, minmax(0, 1fr))`\n    }\n  }, flattenedChildren.map((child, i) => {\n    // If this react child is a primitive value, the key will be undefined\n    const key = child.key;\n    return React.createElement(\"div\", {\n      key: key ? String(key) : undefined,\n      className: clsx(styles.item, {\n        [styles['first-column']]: i % columnCount === 0\n      })\n    }, child);\n  }));\n}","map":{"version":3,"names":["React","flattenChildren","clsx","useContainerQuery","styles","isOdd","value","calculcateCssColumnCount","columns","minColumnWidth","containerWidth","targetColumnCount","Math","min","floor","max","FlexibleColumnLayout","_ref","disableGutters","variant","children","__tagOverride","containerRef","rect","contentBoxWidth","columnCount","shouldDisableGutters","flattenedChildren","Tag","createElement","ref","className","style","gridTemplateColumns","map","child","i","key","String","undefined","item"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/column-layout/flexible-column-layout/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport flattenChildren from 'react-keyed-flatten-children';\nimport clsx from 'clsx';\n\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\n\nimport { InternalColumnLayoutProps } from '../interfaces';\n\nimport styles from './styles.css.js';\n\nconst isOdd = (value: number): boolean => value % 2 !== 0;\n\nexport function calculcateCssColumnCount(\n  columns: number,\n  minColumnWidth: number,\n  containerWidth: number | null\n): number {\n  if (!containerWidth) {\n    return columns;\n  }\n\n  // First, calculate how many columns we can have based on the current container width and minColumnWidth.\n  const targetColumnCount = Math.min(columns, Math.floor(containerWidth / minColumnWidth));\n\n  // When we start wrapping into fewer columns than desired, we want to keep the number of columns even.\n  return Math.max(\n    1,\n    targetColumnCount < columns && isOdd(targetColumnCount) ? targetColumnCount - 1 : targetColumnCount\n  );\n}\n\ninterface FlexibleColumnLayoutProps\n  extends Pick<\n    InternalColumnLayoutProps,\n    'minColumnWidth' | 'columns' | 'variant' | 'borders' | 'disableGutters' | '__tagOverride'\n  > {\n  children: React.ReactNode;\n}\n\nexport default function FlexibleColumnLayout({\n  columns = 1,\n  minColumnWidth = 0,\n  disableGutters,\n  variant,\n  children,\n  __tagOverride,\n}: FlexibleColumnLayoutProps) {\n  const [containerWidth, containerRef] = useContainerQuery(rect => rect.contentBoxWidth);\n\n  const columnCount = calculcateCssColumnCount(columns, minColumnWidth, containerWidth);\n  const shouldDisableGutters = variant !== 'text-grid' && disableGutters;\n\n  // Flattening the children allows us to \"see through\" React Fragments and nested arrays.\n  const flattenedChildren = flattenChildren(children);\n  const Tag = (__tagOverride ?? 'div') as 'div';\n\n  return (\n    <Tag\n      ref={containerRef}\n      className={clsx(\n        styles['css-grid'],\n        styles[`grid-variant-${variant}`],\n        shouldDisableGutters && [styles['grid-no-gutters']]\n      )}\n      style={{ gridTemplateColumns: `repeat(${columnCount}, minmax(0, 1fr))` }}\n    >\n      {flattenedChildren.map((child, i) => {\n        // If this react child is a primitive value, the key will be undefined\n        const key = (child as Record<'key', unknown>).key;\n\n        return (\n          <div\n            key={key ? String(key) : undefined}\n            className={clsx(styles.item, {\n              [styles['first-column']]: i % columnCount === 0,\n            })}\n          >\n            {child}\n          </div>\n        );\n      })}\n    </Tag>\n  );\n}\n"],"mappings":"AAAA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,eAAe,MAAM,8BAA8B;AAC1D,OAAOC,IAAI,MAAM,MAAM;AAEvB,SAASC,iBAAiB,QAAQ,sCAAsC;AAIxE,OAAOC,MAAM,MAAM,iBAAiB;AAEpC,MAAMC,KAAK,GAAIC,KAAa,IAAcA,KAAK,GAAG,CAAC,KAAK,CAAC;AAEzD,OAAM,SAAUC,wBAAwBA,CACtCC,OAAe,EACfC,cAAsB,EACtBC,cAA6B;EAE7B,IAAI,CAACA,cAAc,EAAE;IACnB,OAAOF,OAAO;;EAGhB;EACA,MAAMG,iBAAiB,GAAGC,IAAI,CAACC,GAAG,CAACL,OAAO,EAAEI,IAAI,CAACE,KAAK,CAACJ,cAAc,GAAGD,cAAc,CAAC,CAAC;EAExF;EACA,OAAOG,IAAI,CAACG,GAAG,CACb,CAAC,EACDJ,iBAAiB,GAAGH,OAAO,IAAIH,KAAK,CAACM,iBAAiB,CAAC,GAAGA,iBAAiB,GAAG,CAAC,GAAGA,iBAAiB,CACpG;AACH;AAUA,eAAc,SAAUK,oBAAoBA,CAAAC,IAAA,EAOhB;EAAA,IAPiB;IAC3CT,OAAO,GAAG,CAAC;IACXC,cAAc,GAAG,CAAC;IAClBS,cAAc;IACdC,OAAO;IACPC,QAAQ;IACRC;EAAa,CACa,GAAAJ,IAAA;EAC1B,MAAM,CAACP,cAAc,EAAEY,YAAY,CAAC,GAAGnB,iBAAiB,CAACoB,IAAI,IAAIA,IAAI,CAACC,eAAe,CAAC;EAEtF,MAAMC,WAAW,GAAGlB,wBAAwB,CAACC,OAAO,EAAEC,cAAc,EAAEC,cAAc,CAAC;EACrF,MAAMgB,oBAAoB,GAAGP,OAAO,KAAK,WAAW,IAAID,cAAc;EAEtE;EACA,MAAMS,iBAAiB,GAAG1B,eAAe,CAACmB,QAAQ,CAAC;EACnD,MAAMQ,GAAG,GAAIP,aAAa,aAAbA,aAAa,cAAbA,aAAa,GAAI,KAAe;EAE7C,OACErB,KAAA,CAAA6B,aAAA,CAACD,GAAG;IACFE,GAAG,EAAER,YAAY;IACjBS,SAAS,EAAE7B,IAAI,CACbE,MAAM,CAAC,UAAU,CAAC,EAClBA,MAAM,CAAC,gBAAgBe,OAAO,EAAE,CAAC,EACjCO,oBAAoB,IAAI,CAACtB,MAAM,CAAC,iBAAiB,CAAC,CAAC,CACpD;IACD4B,KAAK,EAAE;MAAEC,mBAAmB,EAAE,UAAUR,WAAW;IAAmB;EAAE,GAEvEE,iBAAiB,CAACO,GAAG,CAAC,CAACC,KAAK,EAAEC,CAAC,KAAI;IAClC;IACA,MAAMC,GAAG,GAAIF,KAAgC,CAACE,GAAG;IAEjD,OACErC,KAAA,CAAA6B,aAAA;MACEQ,GAAG,EAAEA,GAAG,GAAGC,MAAM,CAACD,GAAG,CAAC,GAAGE,SAAS;MAClCR,SAAS,EAAE7B,IAAI,CAACE,MAAM,CAACoC,IAAI,EAAE;QAC3B,CAACpC,MAAM,CAAC,cAAc,CAAC,GAAGgC,CAAC,GAAGX,WAAW,KAAK;OAC/C;IAAC,GAEDU,KAAK,CACF;EAEV,CAAC,CAAC,CACE;AAEV","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}