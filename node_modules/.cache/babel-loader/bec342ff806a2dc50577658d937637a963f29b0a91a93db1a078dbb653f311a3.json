{"ast":null,"code":"import { isDataSeries, isXThreshold, isYThreshold, matchesX } from './utils';\n/**\n * Creates a list of all bar (and mixed) groups in the series with their scaled positions.\n */\nexport default function makeScaledBarGroups(series, xScale, plotWidth, plotHeight, axis) {\n  if (!xScale.isCategorical()) {\n    return [];\n  }\n  return xScale.domain.map(x => {\n    const scaledX = xScale.d3Scale(x);\n    const isValid = typeof scaledX !== 'undefined' && isFinite(scaledX);\n    return {\n      x,\n      isValid,\n      hasData: series.some(_ref => {\n        let {\n          series\n        } = _ref;\n        // If there is a threshold series, every valid group will have a data point.\n        if (isYThreshold(series)) {\n          return true;\n        }\n        // X-thresholds do not have associated value.\n        if (isXThreshold(series)) {\n          return false;\n        }\n        if (isDataSeries(series)) {\n          return series.data.some(datum => matchesX(datum.x, x));\n        }\n        return false;\n      }),\n      position: axis === 'x' ? {\n        x: 0,\n        y: isValid ? scaledX || 0 : 0,\n        width: plotWidth,\n        height: xScale.d3Scale.bandwidth()\n      } : {\n        x: isValid ? scaledX || 0 : 0,\n        y: 0,\n        width: xScale.d3Scale.bandwidth(),\n        height: plotHeight\n      }\n    };\n  });\n}","map":{"version":3,"names":["isDataSeries","isXThreshold","isYThreshold","matchesX","makeScaledBarGroups","series","xScale","plotWidth","plotHeight","axis","isCategorical","domain","map","x","scaledX","d3Scale","isValid","isFinite","hasData","some","_ref","data","datum","position","y","width","height","bandwidth"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/mixed-line-bar-chart/make-scaled-bar-groups.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ChartScale } from '../internal/components/cartesian-chart/scales';\nimport { ChartDataTypes, InternalChartSeries, MixedLineBarChartProps } from './interfaces';\nimport { isDataSeries, isXThreshold, isYThreshold, matchesX } from './utils';\n\nexport interface ScaledBarGroup<T> {\n  x: T;\n  hasData: boolean;\n  isValid: boolean;\n  position: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  };\n}\n\n/**\n * Creates a list of all bar (and mixed) groups in the series with their scaled positions.\n */\nexport default function makeScaledBarGroups<T extends ChartDataTypes>(\n  series: ReadonlyArray<InternalChartSeries<T>>,\n  xScale: ChartScale,\n  plotWidth: number,\n  plotHeight: number,\n  axis: 'x' | 'y'\n): ScaledBarGroup<T>[] {\n  if (!xScale.isCategorical()) {\n    return [];\n  }\n\n  return (xScale.domain as ReadonlyArray<T>).map(x => {\n    const scaledX = xScale.d3Scale(x);\n    const isValid = typeof scaledX !== 'undefined' && isFinite(scaledX);\n\n    return {\n      x,\n      isValid,\n      hasData: series.some(({ series }) => {\n        // If there is a threshold series, every valid group will have a data point.\n        if (isYThreshold(series)) {\n          return true;\n        }\n        // X-thresholds do not have associated value.\n        if (isXThreshold(series)) {\n          return false;\n        }\n        if (isDataSeries(series)) {\n          return (series.data as ReadonlyArray<MixedLineBarChartProps.Datum<T>>).some(datum => matchesX(datum.x, x));\n        }\n        return false;\n      }),\n      position:\n        axis === 'x'\n          ? {\n              x: 0,\n              y: isValid ? scaledX || 0 : 0,\n              width: plotWidth,\n              height: xScale.d3Scale.bandwidth(),\n            }\n          : {\n              x: isValid ? scaledX || 0 : 0,\n              y: 0,\n              width: xScale.d3Scale.bandwidth(),\n              height: plotHeight,\n            },\n    };\n  });\n}\n"],"mappings":"AAIA,SAASA,YAAY,EAAEC,YAAY,EAAEC,YAAY,EAAEC,QAAQ,QAAQ,SAAS;AAc5E;;;AAGA,eAAc,SAAUC,mBAAmBA,CACzCC,MAA6C,EAC7CC,MAAkB,EAClBC,SAAiB,EACjBC,UAAkB,EAClBC,IAAe;EAEf,IAAI,CAACH,MAAM,CAACI,aAAa,EAAE,EAAE;IAC3B,OAAO,EAAE;;EAGX,OAAQJ,MAAM,CAACK,MAA2B,CAACC,GAAG,CAACC,CAAC,IAAG;IACjD,MAAMC,OAAO,GAAGR,MAAM,CAACS,OAAO,CAACF,CAAC,CAAC;IACjC,MAAMG,OAAO,GAAG,OAAOF,OAAO,KAAK,WAAW,IAAIG,QAAQ,CAACH,OAAO,CAAC;IAEnE,OAAO;MACLD,CAAC;MACDG,OAAO;MACPE,OAAO,EAAEb,MAAM,CAACc,IAAI,CAACC,IAAA,IAAe;QAAA,IAAd;UAAEf;QAAM,CAAE,GAAAe,IAAA;QAC9B;QACA,IAAIlB,YAAY,CAACG,MAAM,CAAC,EAAE;UACxB,OAAO,IAAI;;QAEb;QACA,IAAIJ,YAAY,CAACI,MAAM,CAAC,EAAE;UACxB,OAAO,KAAK;;QAEd,IAAIL,YAAY,CAACK,MAAM,CAAC,EAAE;UACxB,OAAQA,MAAM,CAACgB,IAAuD,CAACF,IAAI,CAACG,KAAK,IAAInB,QAAQ,CAACmB,KAAK,CAACT,CAAC,EAAEA,CAAC,CAAC,CAAC;;QAE5G,OAAO,KAAK;MACd,CAAC,CAAC;MACFU,QAAQ,EACNd,IAAI,KAAK,GAAG,GACR;QACEI,CAAC,EAAE,CAAC;QACJW,CAAC,EAAER,OAAO,GAAGF,OAAO,IAAI,CAAC,GAAG,CAAC;QAC7BW,KAAK,EAAElB,SAAS;QAChBmB,MAAM,EAAEpB,MAAM,CAACS,OAAO,CAACY,SAAS;OACjC,GACD;QACEd,CAAC,EAAEG,OAAO,GAAGF,OAAO,IAAI,CAAC,GAAG,CAAC;QAC7BU,CAAC,EAAE,CAAC;QACJC,KAAK,EAAEnB,MAAM,CAACS,OAAO,CAACY,SAAS,EAAE;QACjCD,MAAM,EAAElB;;KAEjB;EACH,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}