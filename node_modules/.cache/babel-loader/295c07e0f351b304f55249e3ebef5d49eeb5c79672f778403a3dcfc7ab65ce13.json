{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\n/** *******************************************************************************************************************\n  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n  \n  Licensed under the Apache License, Version 2.0 (the \"License\").\n  You may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n  \n      http://www.apache.org/licenses/LICENSE-2.0\n  \n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.                                                                              *\n ******************************************************************************************************************** */\nimport { useMemo } from 'react';\nimport { componentTypes } from '../../../FormRenderer';\nimport SpaceBetween from '@cloudscape-design/components/space-between';\nimport Box from '@cloudscape-design/components/box';\nimport { IMAGE_AUTH_APP, IMAGE_SMS_MFA } from '../../assets/images';\nimport GenericView from '../GenericView';\nconst MFA_LITERALS = {\n  SMS_MFA: {\n    key: 'SMS',\n    value: 'Authenticate using a code sent via text message to your phone.',\n    img: IMAGE_SMS_MFA\n  },\n  SOFTWARE_TOKEN_MFA: {\n    key: 'Authenticator app',\n    value: 'Authenticate using a code generated by an authenticator app.',\n    img: IMAGE_AUTH_APP\n  }\n};\nconst MFASelectionView = ({\n  challengeParams,\n  onConfirm,\n  onBackToSignIn\n}) => {\n  const schema = useMemo(() => {\n    return {\n      header: 'Choose a MFA method',\n      headerVariant: 'h2',\n      variant: 'embedded',\n      canCancel: false,\n      submitLabel: 'Continue',\n      fields: [{\n        component: componentTypes.PLAIN_TEXT,\n        label: 'You must configure MFA before you can sign in. Choose how you want to authenticate.',\n        name: 'description'\n      }, {\n        component: componentTypes.RADIO,\n        label: 'MFA Methods',\n        name: 'mfaMethod',\n        options: JSON.parse(challengeParams.MFAS_CAN_SETUP ?? challengeParams.MFAS_CAN_CHOOSE).map(v => ({\n          value: v,\n          label: _jsx(Box, {\n            padding: {\n              bottom: 'l'\n            },\n            children: _jsxs(SpaceBetween, {\n              direction: \"horizontal\",\n              size: \"xl\",\n              children: [_jsx(\"img\", {\n                src: MFA_LITERALS[v].img,\n                alt: v\n              }), _jsxs(SpaceBetween, {\n                direction: \"vertical\",\n                size: \"xl\",\n                children: [_jsx(\"span\", {\n                  children: _jsx(\"b\", {\n                    children: MFA_LITERALS[v].key\n                  })\n                }), _jsx(\"span\", {\n                  style: {\n                    display: 'block',\n                    wordWrap: 'break-word',\n                    maxWidth: '360px'\n                  },\n                  children: MFA_LITERALS[v].value\n                })]\n              })]\n            })\n          })\n        })),\n        validate: [{\n          type: 'required'\n        }]\n      }]\n    };\n  }, [challengeParams]);\n  return _jsx(GenericView, {\n    schema: schema,\n    onSubmit: onConfirm,\n    onBackToSignIn: onBackToSignIn\n  });\n};\nexport default MFASelectionView;","map":{"version":3,"names":["jsx","_jsx","jsxs","_jsxs","useMemo","componentTypes","SpaceBetween","Box","IMAGE_AUTH_APP","IMAGE_SMS_MFA","GenericView","MFA_LITERALS","SMS_MFA","key","value","img","SOFTWARE_TOKEN_MFA","MFASelectionView","challengeParams","onConfirm","onBackToSignIn","schema","header","headerVariant","variant","canCancel","submitLabel","fields","component","PLAIN_TEXT","label","name","RADIO","options","JSON","parse","MFAS_CAN_SETUP","MFAS_CAN_CHOOSE","map","v","padding","bottom","children","direction","size","src","alt","style","display","wordWrap","maxWidth","validate","type","onSubmit"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/@aws-northstar/ui/components/CognitoAuth/components/MFASelectionView/index.js"],"sourcesContent":["import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\n/** *******************************************************************************************************************\n  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n  \n  Licensed under the Apache License, Version 2.0 (the \"License\").\n  You may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n  \n      http://www.apache.org/licenses/LICENSE-2.0\n  \n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.                                                                              *\n ******************************************************************************************************************** */\nimport { useMemo } from 'react';\nimport { componentTypes } from '../../../FormRenderer';\nimport SpaceBetween from '@cloudscape-design/components/space-between';\nimport Box from '@cloudscape-design/components/box';\nimport { IMAGE_AUTH_APP, IMAGE_SMS_MFA } from '../../assets/images';\nimport GenericView from '../GenericView';\nconst MFA_LITERALS = {\n    SMS_MFA: {\n        key: 'SMS',\n        value: 'Authenticate using a code sent via text message to your phone.',\n        img: IMAGE_SMS_MFA,\n    },\n    SOFTWARE_TOKEN_MFA: {\n        key: 'Authenticator app',\n        value: 'Authenticate using a code generated by an authenticator app.',\n        img: IMAGE_AUTH_APP,\n    },\n};\nconst MFASelectionView = ({ challengeParams, onConfirm, onBackToSignIn }) => {\n    const schema = useMemo(() => {\n        return {\n            header: 'Choose a MFA method',\n            headerVariant: 'h2',\n            variant: 'embedded',\n            canCancel: false,\n            submitLabel: 'Continue',\n            fields: [\n                {\n                    component: componentTypes.PLAIN_TEXT,\n                    label: 'You must configure MFA before you can sign in. Choose how you want to authenticate.',\n                    name: 'description',\n                },\n                {\n                    component: componentTypes.RADIO,\n                    label: 'MFA Methods',\n                    name: 'mfaMethod',\n                    options: JSON.parse(challengeParams.MFAS_CAN_SETUP ?? challengeParams.MFAS_CAN_CHOOSE).map((v) => ({\n                        value: v,\n                        label: (_jsx(Box, { padding: {\n                                bottom: 'l',\n                            }, children: _jsxs(SpaceBetween, { direction: \"horizontal\", size: \"xl\", children: [_jsx(\"img\", { src: MFA_LITERALS[v].img, alt: v }), _jsxs(SpaceBetween, { direction: \"vertical\", size: \"xl\", children: [_jsx(\"span\", { children: _jsx(\"b\", { children: MFA_LITERALS[v].key }) }), _jsx(\"span\", { style: {\n                                                    display: 'block',\n                                                    wordWrap: 'break-word',\n                                                    maxWidth: '360px',\n                                                }, children: MFA_LITERALS[v].value })] })] }) })),\n                    })),\n                    validate: [\n                        {\n                            type: 'required',\n                        },\n                    ],\n                },\n            ],\n        };\n    }, [challengeParams]);\n    return _jsx(GenericView, { schema: schema, onSubmit: onConfirm, onBackToSignIn: onBackToSignIn });\n};\nexport default MFASelectionView;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}