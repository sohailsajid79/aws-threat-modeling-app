{"ast":null,"code":"/** *******************************************************************************************************************\n  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\").\n  You may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n ******************************************************************************************************************** */\n\nimport { z } from 'zod';\nimport { EntityBaseSchema } from './entities';\nimport { SINGLE_FIELD_INPUT_MAX_LENGTH } from '../configs';\nexport const ThreatStatementDisplayTokenSchema = z.object({\n  /**\n   * the html tag type for the content. If not type is specified. <span> will be used.\n   */\n  type: z.union([z.literal('b'), z.literal('span')]).optional(),\n  /**\n    * The tooltip content of the node.\n    */\n  tooltip: z.string().max(30).optional(),\n  /**\n    * The text content of the node.\n    */\n  content: z.string().max(SINGLE_FIELD_INPUT_MAX_LENGTH)\n}).strict();\nexport const ThreatStatementImpactedGoalItem = z.string().max(SINGLE_FIELD_INPUT_MAX_LENGTH);\n_c = ThreatStatementImpactedGoalItem;\nexport const ThreatStatementImpactedAssetItem = z.string().max(SINGLE_FIELD_INPUT_MAX_LENGTH);\n_c2 = ThreatStatementImpactedAssetItem;\nexport const TemplateThreatStatementSchema = EntityBaseSchema.extend({\n  /**\n    * Source of the threat.\n    */\n  threatSource: z.string().max(SINGLE_FIELD_INPUT_MAX_LENGTH).optional(),\n  /**\n    * Prerequisites of the threat.\n    */\n  prerequisites: z.string().max(SINGLE_FIELD_INPUT_MAX_LENGTH).optional(),\n  /**\n    * Threat action.\n    */\n  threatAction: z.string().max(SINGLE_FIELD_INPUT_MAX_LENGTH).optional(),\n  /**\n    * Impact of the threat.\n    */\n  threatImpact: z.string().max(SINGLE_FIELD_INPUT_MAX_LENGTH).optional(),\n  /**\n    * Impacted goal of the threat.\n    */\n  impactedGoal: ThreatStatementImpactedGoalItem.array().optional(),\n  /**\n    * Impacted assets of the threat.\n    */\n  impactedAssets: ThreatStatementImpactedAssetItem.array().optional(),\n  /**\n    * The full rendered statement as string.\n    */\n  statement: z.string().max(SINGLE_FIELD_INPUT_MAX_LENGTH * 7).optional(),\n  /**\n    * The custom templates applied to the threat statement.\n    */\n  customTemplate: z.string().max(SINGLE_FIELD_INPUT_MAX_LENGTH).optional(),\n  /**\n    * A list of displayed statement token\n    */\n  displayedStatement: z.union([ThreatStatementDisplayTokenSchema, z.string()]).array().optional()\n}).strict();\nexport const PerFieldExampleSchema = z.object({\n  /**Example string */\n  example: z.string(),\n  /**\n  * The statement Id.\n  * For now, use the array index.\n  * In future, if the examples are downloaded online, should change to use threatStatementId.\n  */\n  fromId: z.number(),\n  /**\n    * The stride from the statement.\n    */\n  stride: z.string().array().optional()\n});\nvar _c, _c2;\n$RefreshReg$(_c, \"ThreatStatementImpactedGoalItem\");\n$RefreshReg$(_c2, \"ThreatStatementImpactedAssetItem\");","map":{"version":3,"names":["z","EntityBaseSchema","SINGLE_FIELD_INPUT_MAX_LENGTH","ThreatStatementDisplayTokenSchema","object","type","union","literal","optional","tooltip","string","max","content","strict","ThreatStatementImpactedGoalItem","_c","ThreatStatementImpactedAssetItem","_c2","TemplateThreatStatementSchema","extend","threatSource","prerequisites","threatAction","threatImpact","impactedGoal","array","impactedAssets","statement","customTemplate","displayedStatement","PerFieldExampleSchema","example","fromId","number","stride","$RefreshReg$"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/src/customTypes/threats.ts"],"sourcesContent":["/** *******************************************************************************************************************\n  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\").\n  You may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n ******************************************************************************************************************** */\n\nimport { z } from 'zod';\nimport { EntityBaseSchema } from './entities';\nimport { SINGLE_FIELD_INPUT_MAX_LENGTH, LEVEL_HIGH, LEVEL_MEDIUM, LEVEL_LOW, LEVEL_NOT_SET } from '../configs';\n\nexport const ThreatStatementDisplayTokenSchema = z.object({\n  /**\n   * the html tag type for the content. If not type is specified. <span> will be used.\n   */\n  type: z.union([z.literal('b'), z.literal('span')]).optional(),\n  /**\n    * The tooltip content of the node.\n    */\n  tooltip: z.string().max(30).optional(),\n  /**\n    * The text content of the node.\n    */\n  content: z.string().max(SINGLE_FIELD_INPUT_MAX_LENGTH),\n}).strict();\n\nexport type ThreatStatementDisplayToken = z.infer<typeof ThreatStatementDisplayTokenSchema>;\n\nexport const ThreatStatementImpactedGoalItem = z.string().max(SINGLE_FIELD_INPUT_MAX_LENGTH);\n\nexport const ThreatStatementImpactedAssetItem = z.string().max(SINGLE_FIELD_INPUT_MAX_LENGTH);\n\nexport const TemplateThreatStatementSchema = EntityBaseSchema.extend({\n  /**\n    * Source of the threat.\n    */\n  threatSource: z.string().max(SINGLE_FIELD_INPUT_MAX_LENGTH).optional(),\n  /**\n    * Prerequisites of the threat.\n    */\n  prerequisites: z.string().max(SINGLE_FIELD_INPUT_MAX_LENGTH).optional(),\n  /**\n    * Threat action.\n    */\n  threatAction: z.string().max(SINGLE_FIELD_INPUT_MAX_LENGTH).optional(),\n  /**\n    * Impact of the threat.\n    */\n  threatImpact: z.string().max(SINGLE_FIELD_INPUT_MAX_LENGTH).optional(),\n  /**\n    * Impacted goal of the threat.\n    */\n  impactedGoal: ThreatStatementImpactedGoalItem.array().optional(),\n  /**\n    * Impacted assets of the threat.\n    */\n  impactedAssets: ThreatStatementImpactedAssetItem.array().optional(),\n  /**\n    * The full rendered statement as string.\n    */\n  statement: z.string().max(SINGLE_FIELD_INPUT_MAX_LENGTH * 7).optional(),\n  /**\n    * The custom templates applied to the threat statement.\n    */\n  customTemplate: z.string().max(SINGLE_FIELD_INPUT_MAX_LENGTH).optional(),\n  /**\n    * A list of displayed statement token\n    */\n  displayedStatement: z.union([ThreatStatementDisplayTokenSchema, z.string()]).array().optional(),\n}).strict();\n\nexport type TemplateThreatStatement = z.infer<typeof TemplateThreatStatementSchema>;\n\nexport interface ThreatFieldData {\n  fieldId: number;\n  fieldPosition: number;\n  weight: number;\n  displayTitle: string;\n  displayField: string;\n  tooltip: string;\n  description: string;\n  examples?: string[];\n  tokens?: string[];\n}\n\nexport interface ThreatStatementListFilter {\n  linkedMitigations?: boolean;\n  linkedControls?: boolean;\n  linkedAssumptions?: boolean;\n  priority?: typeof LEVEL_HIGH | typeof LEVEL_MEDIUM | typeof LEVEL_LOW | typeof LEVEL_NOT_SET;\n  stride?: 'S' | 'T' | 'R' | 'I' | 'D' | 'E' | 'LM' | typeof LEVEL_NOT_SET;\n}\n\nexport interface ThreatStatementFormat {\n  [fieldCombination: number]: {\n    template: string;\n    suggestions?: string[];\n  };\n}\n\nexport const PerFieldExampleSchema = z.object({\n  /**Example string */\n  example: z.string(),\n  /**\n  * The statement Id.\n  * For now, use the array index.\n  * In future, if the examples are downloaded online, should change to use threatStatementId.\n  */\n  fromId: z.number(),\n  /**\n    * The stride from the statement.\n    */\n  stride: z.string().array().optional(),\n});\n\nexport type PerFieldExample = z.infer<typeof PerFieldExampleSchema>;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}