{"ast":null,"code":"import { AceModes } from './ace-modes';\nimport { DarkThemes, LightThemes } from './ace-themes';\nconst CLOUD_EDITOR_LIGHT_THEME = 'cloud_editor';\nconst CLOUD_EDITOR_DARK_THEME = 'cloud_editor_dark';\nconst FALLBACK_LIGHT_THEME = 'dawn';\nconst FALLBACK_DARK_THEME = 'tomorrow_night_bright';\nexport const DEFAULT_AVAILABLE_THEMES = {\n  light: LightThemes.map(theme => theme.value).filter(value => value !== CLOUD_EDITOR_LIGHT_THEME),\n  dark: DarkThemes.map(theme => theme.value).filter(value => value !== CLOUD_EDITOR_DARK_THEME)\n};\nfunction isAceVersionAtLeast(ace, minVersion) {\n  var _a;\n  // Split semantic version numbers. We don't need a full semver parser for this.\n  const semanticVersion = (_a = ace === null || ace === void 0 ? void 0 : ace.version) === null || _a === void 0 ? void 0 : _a.split('.').map(part => {\n    const parsed = parseInt(part);\n    return Number.isNaN(parsed) ? part : parsed;\n  });\n  return !!semanticVersion && typeof semanticVersion[0] === 'number' && semanticVersion[0] >= minVersion[0] && typeof semanticVersion[1] === 'number' && semanticVersion[1] >= minVersion[1] && typeof semanticVersion[2] === 'number' && semanticVersion[2] >= minVersion[2];\n}\nexport function supportsKeyboardAccessibility(ace) {\n  return isAceVersionAtLeast(ace, [1, 23, 0]);\n}\nexport function getDefaultConfig(ace) {\n  return Object.assign({\n    behavioursEnabled: true\n  }, supportsKeyboardAccessibility(ace) ? {\n    enableKeyboardAccessibility: true\n  } : {});\n}\nexport function getDefaultTheme(mode, themes) {\n  if (mode === 'light') {\n    return (themes === null || themes === void 0 ? void 0 : themes.light.some(value => value === CLOUD_EDITOR_LIGHT_THEME)) ? CLOUD_EDITOR_LIGHT_THEME : FALLBACK_LIGHT_THEME;\n  } else {\n    return (themes === null || themes === void 0 ? void 0 : themes.dark.some(value => value === CLOUD_EDITOR_DARK_THEME)) ? CLOUD_EDITOR_DARK_THEME : FALLBACK_DARK_THEME;\n  }\n}\nexport function getAceTheme(theme) {\n  return `ace/theme/${theme}`;\n}\nexport function getLanguageLabel(language) {\n  var _a;\n  return ((_a = AceModes.filter(mode => mode.value === language)[0]) === null || _a === void 0 ? void 0 : _a.label) || language;\n}\nexport function getStatusButtonId(_ref) {\n  let {\n    paneId,\n    paneStatus\n  } = _ref;\n  return paneId ? `${paneId}-button-${paneStatus}` : undefined;\n}","map":{"version":3,"names":["AceModes","DarkThemes","LightThemes","CLOUD_EDITOR_LIGHT_THEME","CLOUD_EDITOR_DARK_THEME","FALLBACK_LIGHT_THEME","FALLBACK_DARK_THEME","DEFAULT_AVAILABLE_THEMES","light","map","theme","value","filter","dark","isAceVersionAtLeast","ace","minVersion","semanticVersion","_a","version","split","part","parsed","parseInt","Number","isNaN","supportsKeyboardAccessibility","getDefaultConfig","Object","assign","behavioursEnabled","enableKeyboardAccessibility","getDefaultTheme","mode","themes","some","getAceTheme","getLanguageLabel","language","label","getStatusButtonId","_ref","paneId","paneStatus","undefined"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/code-editor/util.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Ace } from 'ace-builds';\n\nimport { AceModes } from './ace-modes';\nimport { DarkThemes, LightThemes } from './ace-themes';\nimport { CodeEditorProps } from './interfaces';\n\nexport type PaneStatus = 'error' | 'warning' | 'hidden';\n\nconst CLOUD_EDITOR_LIGHT_THEME: (typeof LightThemes)[number]['value'] = 'cloud_editor';\nconst CLOUD_EDITOR_DARK_THEME: (typeof DarkThemes)[number]['value'] = 'cloud_editor_dark';\nconst FALLBACK_LIGHT_THEME: (typeof LightThemes)[number]['value'] = 'dawn';\nconst FALLBACK_DARK_THEME: (typeof DarkThemes)[number]['value'] = 'tomorrow_night_bright';\n\nexport const DEFAULT_AVAILABLE_THEMES = {\n  light: LightThemes.map(theme => theme.value).filter(value => value !== CLOUD_EDITOR_LIGHT_THEME),\n  dark: DarkThemes.map(theme => theme.value).filter(value => value !== CLOUD_EDITOR_DARK_THEME),\n};\n\nfunction isAceVersionAtLeast(ace: any, minVersion: [number, number, number]): boolean {\n  // Split semantic version numbers. We don't need a full semver parser for this.\n  const semanticVersion = ace?.version?.split('.').map((part: string) => {\n    const parsed = parseInt(part);\n    return Number.isNaN(parsed) ? part : parsed;\n  });\n\n  return (\n    !!semanticVersion &&\n    typeof semanticVersion[0] === 'number' &&\n    semanticVersion[0] >= minVersion[0] &&\n    typeof semanticVersion[1] === 'number' &&\n    semanticVersion[1] >= minVersion[1] &&\n    typeof semanticVersion[2] === 'number' &&\n    semanticVersion[2] >= minVersion[2]\n  );\n}\n\nexport function supportsKeyboardAccessibility(ace: any): boolean {\n  return isAceVersionAtLeast(ace, [1, 23, 0]);\n}\n\nexport function getDefaultConfig(ace: any): Partial<Ace.EditorOptions> {\n  return {\n    behavioursEnabled: true,\n    ...(supportsKeyboardAccessibility(ace) ? { enableKeyboardAccessibility: true } : {}),\n  };\n}\n\nexport function getDefaultTheme(\n  mode: 'light' | 'dark',\n  themes?: CodeEditorProps.AvailableThemes\n): CodeEditorProps.Theme {\n  if (mode === 'light') {\n    return themes?.light.some(value => value === CLOUD_EDITOR_LIGHT_THEME)\n      ? CLOUD_EDITOR_LIGHT_THEME\n      : FALLBACK_LIGHT_THEME;\n  } else {\n    return themes?.dark.some(value => value === CLOUD_EDITOR_DARK_THEME)\n      ? CLOUD_EDITOR_DARK_THEME\n      : FALLBACK_DARK_THEME;\n  }\n}\n\nexport function getAceTheme(theme: CodeEditorProps.Theme) {\n  return `ace/theme/${theme}`;\n}\n\nexport function getLanguageLabel(language: CodeEditorProps.Language): string {\n  return AceModes.filter((mode: { value: string }) => mode.value === language)[0]?.label || language;\n}\n\nexport function getStatusButtonId({ paneId, paneStatus }: { paneId?: string; paneStatus: PaneStatus }) {\n  return paneId ? `${paneId}-button-${paneStatus}` : undefined;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}