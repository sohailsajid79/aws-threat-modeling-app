{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport InternalIcon from '../icon/internal';\nimport { getBaseProps } from '../internal/base-component';\nimport InternalSpinner from '../spinner/internal';\nimport styles from './styles.css.js';\nconst typeToIcon = size => ({\n  error: React.createElement(InternalIcon, {\n    name: \"status-negative\",\n    size: size\n  }),\n  warning: React.createElement(InternalIcon, {\n    name: \"status-warning\",\n    size: size\n  }),\n  success: React.createElement(InternalIcon, {\n    name: \"status-positive\",\n    size: size\n  }),\n  info: React.createElement(InternalIcon, {\n    name: \"status-info\",\n    size: size\n  }),\n  stopped: React.createElement(InternalIcon, {\n    name: \"status-stopped\",\n    size: size\n  }),\n  pending: React.createElement(InternalIcon, {\n    name: \"status-pending\",\n    size: size\n  }),\n  'in-progress': React.createElement(InternalIcon, {\n    name: \"status-in-progress\",\n    size: size\n  }),\n  loading: React.createElement(InternalSpinner, null)\n});\nexport default function StatusIndicator(_a) {\n  var {\n      type,\n      children,\n      iconAriaLabel,\n      colorOverride,\n      wrapText = true,\n      __animate = false,\n      __internalRootRef,\n      __size = 'normal',\n      __display = 'inline-block'\n    } = _a,\n    rest = __rest(_a, [\"type\", \"children\", \"iconAriaLabel\", \"colorOverride\", \"wrapText\", \"__animate\", \"__internalRootRef\", \"__size\", \"__display\"]);\n  const baseProps = getBaseProps(rest);\n  return React.createElement(\"span\", Object.assign({}, baseProps, {\n    className: clsx(styles.root, styles[`status-${type}`], {\n      [styles[`color-override-${colorOverride}`]]: colorOverride\n    }, baseProps.className),\n    ref: __internalRootRef\n  }), React.createElement(\"span\", {\n    className: clsx(styles.container, styles[`display-${__display}`], wrapText === false && styles['overflow-ellipsis'], __animate && styles['container-fade-in'])\n  }, React.createElement(\"span\", {\n    className: clsx(styles.icon, __animate && styles['icon-shake']),\n    \"aria-label\": iconAriaLabel,\n    role: iconAriaLabel ? 'img' : undefined\n  }, typeToIcon(__size)[type], __display === 'inline' && React.createElement(React.Fragment, null, \"\\u00A0\")), children));\n}","map":{"version":3,"names":["React","clsx","InternalIcon","getBaseProps","InternalSpinner","styles","typeToIcon","size","error","createElement","name","warning","success","info","stopped","pending","loading","StatusIndicator","_a","type","children","iconAriaLabel","colorOverride","wrapText","__animate","__internalRootRef","__size","__display","rest","__rest","baseProps","Object","assign","className","root","ref","container","icon","role","undefined","Fragment"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/status-indicator/internal.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\n\nimport { IconProps } from '../icon/interfaces';\nimport InternalIcon from '../icon/internal';\nimport { BaseComponentProps, getBaseProps } from '../internal/base-component';\nimport { InternalBaseComponentProps } from '../internal/hooks/use-base-component';\nimport { SomeRequired } from '../internal/types';\nimport InternalSpinner from '../spinner/internal';\n\nimport styles from './styles.css.js';\n\nconst typeToIcon: (size: IconProps.Size) => Record<StatusIndicatorProps.Type, JSX.Element> = size => ({\n  error: <InternalIcon name=\"status-negative\" size={size} />,\n  warning: <InternalIcon name=\"status-warning\" size={size} />,\n  success: <InternalIcon name=\"status-positive\" size={size} />,\n  info: <InternalIcon name=\"status-info\" size={size} />,\n  stopped: <InternalIcon name=\"status-stopped\" size={size} />,\n  pending: <InternalIcon name=\"status-pending\" size={size} />,\n  'in-progress': <InternalIcon name=\"status-in-progress\" size={size} />,\n  loading: <InternalSpinner />,\n});\n\nexport interface StatusIndicatorProps extends BaseComponentProps {\n  /**\n   * Specifies the status type.\n   */\n  type?: StatusIndicatorProps.Type;\n  /**\n   * A text fragment that communicates the status.\n   */\n  children?: React.ReactNode;\n  /**\n   * Specifies an `aria-label` for the icon. If the status text alone does not fully describe the status,\n   * use this to communicate additional context.\n   */\n  iconAriaLabel?: string;\n  /**\n   * Specifies an override for the status indicator color.\n   */\n  colorOverride?: StatusIndicatorProps.Color;\n  /**\n   * Specifies if the text content should wrap. If you set it to false, it prevents the text from wrapping\n   * and truncates it with an ellipsis.\n   */\n  wrapText?: boolean;\n}\n\nexport interface InternalStatusIndicatorProps\n  extends SomeRequired<StatusIndicatorProps, 'type'>,\n    InternalBaseComponentProps {\n  /**\n   * Play an animation on the error icon when first rendered\n   */\n  __animate?: boolean;\n\n  /**\n   * Size of icon.\n   */\n  __size?: IconProps.Size;\n\n  /**\n   * The CSS behavior of the status indicator container element.\n   */\n  __display?: 'inline' | 'inline-block';\n}\n\nexport namespace StatusIndicatorProps {\n  // Why not enums? Explained there\n  // https://stackoverflow.com/questions/52393730/typescript-string-literal-union-type-from-enum\n  export type Type = 'error' | 'warning' | 'success' | 'info' | 'stopped' | 'pending' | 'in-progress' | 'loading';\n  export type Color = 'blue' | 'grey' | 'green' | 'red' | 'yellow';\n}\n\nexport default function StatusIndicator({\n  type,\n  children,\n  iconAriaLabel,\n  colorOverride,\n  wrapText = true,\n  __animate = false,\n  __internalRootRef,\n  __size = 'normal',\n  __display = 'inline-block',\n  ...rest\n}: InternalStatusIndicatorProps) {\n  const baseProps = getBaseProps(rest);\n  return (\n    <span\n      {...baseProps}\n      className={clsx(\n        styles.root,\n        styles[`status-${type}`],\n        {\n          [styles[`color-override-${colorOverride}`]]: colorOverride,\n        },\n        baseProps.className\n      )}\n      ref={__internalRootRef}\n    >\n      <span\n        className={clsx(\n          styles.container,\n          styles[`display-${__display}`],\n          wrapText === false && styles['overflow-ellipsis'],\n          __animate && styles['container-fade-in']\n        )}\n      >\n        <span\n          className={clsx(styles.icon, __animate && styles['icon-shake'])}\n          aria-label={iconAriaLabel}\n          role={iconAriaLabel ? 'img' : undefined}\n        >\n          {typeToIcon(__size)[type]}\n          {__display === 'inline' && <>&nbsp;</>}\n        </span>\n        {children}\n      </span>\n    </span>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}