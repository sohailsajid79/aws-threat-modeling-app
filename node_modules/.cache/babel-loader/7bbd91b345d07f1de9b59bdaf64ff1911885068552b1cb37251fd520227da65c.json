{"ast":null,"code":"/** *******************************************************************************************************************\n  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\").\n  You may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n ******************************************************************************************************************** */\n\nexport const addNewValueToStringArray = (arr, newValue) => {\n  return newValue && !arr.includes(newValue) ? [...arr, newValue] : arr;\n};\nexport const addNewValueArrayToStringArrayArray = (arr, newValue) => {\n  if (newValue && newValue.length > 0) {\n    if (!arr.find(strArr => strArr.length === newValue.length && newValue.every(v => strArr.includes(v)))) {\n      return [...arr, newValue];\n    }\n  }\n  return arr;\n};\nexport const addNewValueArrayToStringArray = (arr, newValue) => {\n  if (newValue && newValue.length > 0) {\n    return [...arr, ...newValue.filter(v => !arr.includes(v))];\n  }\n  return arr;\n};\nexport const addNewValueToPerFieldExampleArray = (arr, field, newValue, fromId) => {\n  return newValue[field] ? [...arr, {\n    example: newValue[field],\n    fromId,\n    stride: []\n  }] : arr;\n};","map":{"version":3,"names":["addNewValueToStringArray","arr","newValue","includes","addNewValueArrayToStringArrayArray","length","find","strArr","every","v","addNewValueArrayToStringArray","filter","addNewValueToPerFieldExampleArray","field","fromId","example","stride"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/src/contexts/ThreatsContext/utils.ts"],"sourcesContent":["/** *******************************************************************************************************************\n  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\").\n  You may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n ******************************************************************************************************************** */\n\nimport { PerFieldExample, TemplateThreatStatement } from '../../customTypes';\n\nexport const addNewValueToStringArray = (arr: string[], newValue?: string) => {\n  return newValue && !arr.includes(newValue) ? [...arr, newValue] : arr;\n};\n\nexport const addNewValueArrayToStringArrayArray = (arr: string[][], newValue?: string[]) => {\n  if (newValue && newValue.length > 0) {\n    if (!arr.find(strArr => strArr.length === newValue.length && newValue.every(v => strArr.includes(v)))) {\n      return [...arr, newValue];\n    }\n  }\n\n  return arr;\n};\n\nexport const addNewValueArrayToStringArray = (arr: string[], newValue?: string[]) => {\n  if (newValue && newValue.length > 0) {\n    return [...arr, ...newValue.filter(v => !arr.includes(v))];\n  }\n\n  return arr;\n};\n\nexport const addNewValueToPerFieldExampleArray = (\n  arr: PerFieldExample[],\n  field: keyof TemplateThreatStatement,\n  newValue: TemplateThreatStatement,\n  fromId: number) => {\n  return newValue[field] ? [\n    ...arr, {\n      example: newValue[field] as string,\n      fromId,\n      stride: [],\n    },\n  ] : arr;\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,OAAO,MAAMA,wBAAwB,GAAGA,CAACC,GAAa,EAAEC,QAAiB,KAAK;EAC5E,OAAOA,QAAQ,IAAI,CAACD,GAAG,CAACE,QAAQ,CAACD,QAAQ,CAAC,GAAG,CAAC,GAAGD,GAAG,EAAEC,QAAQ,CAAC,GAAGD,GAAG;AACvE,CAAC;AAED,OAAO,MAAMG,kCAAkC,GAAGA,CAACH,GAAe,EAAEC,QAAmB,KAAK;EAC1F,IAAIA,QAAQ,IAAIA,QAAQ,CAACG,MAAM,GAAG,CAAC,EAAE;IACnC,IAAI,CAACJ,GAAG,CAACK,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACF,MAAM,KAAKH,QAAQ,CAACG,MAAM,IAAIH,QAAQ,CAACM,KAAK,CAACC,CAAC,IAAIF,MAAM,CAACJ,QAAQ,CAACM,CAAC,CAAC,CAAC,CAAC,EAAE;MACrG,OAAO,CAAC,GAAGR,GAAG,EAAEC,QAAQ,CAAC;IAC3B;EACF;EAEA,OAAOD,GAAG;AACZ,CAAC;AAED,OAAO,MAAMS,6BAA6B,GAAGA,CAACT,GAAa,EAAEC,QAAmB,KAAK;EACnF,IAAIA,QAAQ,IAAIA,QAAQ,CAACG,MAAM,GAAG,CAAC,EAAE;IACnC,OAAO,CAAC,GAAGJ,GAAG,EAAE,GAAGC,QAAQ,CAACS,MAAM,CAACF,CAAC,IAAI,CAACR,GAAG,CAACE,QAAQ,CAACM,CAAC,CAAC,CAAC,CAAC;EAC5D;EAEA,OAAOR,GAAG;AACZ,CAAC;AAED,OAAO,MAAMW,iCAAiC,GAAGA,CAC/CX,GAAsB,EACtBY,KAAoC,EACpCX,QAAiC,EACjCY,MAAc,KAAK;EACnB,OAAOZ,QAAQ,CAACW,KAAK,CAAC,GAAG,CACvB,GAAGZ,GAAG,EAAE;IACNc,OAAO,EAAEb,QAAQ,CAACW,KAAK,CAAW;IAClCC,MAAM;IACNE,MAAM,EAAE;EACV,CAAC,CACF,GAAGf,GAAG;AACT,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}