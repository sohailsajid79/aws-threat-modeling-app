{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport { findUpUntil } from '@cloudscape-design/component-toolkit/dom';\nimport { getAnalyticsMetadataAttribute } from '@cloudscape-design/component-toolkit/internal/analytics-metadata';\nimport ScreenreaderOnly from '../internal/components/screenreader-only';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport { TableHeaderCell } from './header-cell';\nimport { TableThElement } from './header-cell/th-element';\nimport { Divider } from './resizer';\nimport { focusMarkers, SelectionControl } from './selection';\nimport { getTableHeaderRowRoleProps } from './table-role';\nimport { useColumnWidths } from './use-column-widths';\nimport { getColumnKey } from './utils';\nimport headerCellStyles from './header-cell/styles.css.js';\nimport styles from './styles.css.js';\nconst Thead = React.forwardRef((_ref, outerRef) => {\n  let {\n    selectionType,\n    getSelectAllProps,\n    columnDefinitions,\n    sortingColumn,\n    sortingDisabled,\n    sortingDescending,\n    resizableColumns,\n    variant,\n    wrapLines,\n    onFocusMove,\n    onSortingChange,\n    onResizeFinish,\n    singleSelectionHeaderAriaLabel,\n    stripedRows,\n    sticky = false,\n    hidden = false,\n    stuck = false,\n    stickyState,\n    selectionColumnId,\n    focusedComponent,\n    onFocusedComponentChange,\n    tableRole,\n    resizerRoleDescription,\n    isExpandable,\n    setLastUserAction\n  } = _ref;\n  const isVisualRefresh = useVisualRefresh();\n  const headerCellClass = clsx(headerCellStyles['header-cell'], headerCellStyles[`header-cell-variant-${variant}`], sticky && headerCellStyles['header-cell-sticky'], stuck && headerCellStyles['header-cell-stuck'], stripedRows && headerCellStyles['has-striped-rows'], isVisualRefresh && headerCellStyles['is-visual-refresh']);\n  const selectionCellClass = clsx(styles['selection-control'], styles['selection-control-header'], isVisualRefresh && styles['is-visual-refresh']);\n  const {\n    getColumnStyles,\n    columnWidths,\n    updateColumn,\n    setCell\n  } = useColumnWidths();\n  return React.createElement(\"thead\", {\n    className: clsx(!hidden && styles['thead-active'])\n  }, React.createElement(\"tr\", Object.assign({}, focusMarkers.all, {\n    ref: outerRef,\n    \"aria-rowindex\": 1\n  }, getTableHeaderRowRoleProps({\n    tableRole\n  }), {\n    onFocus: event => {\n      var _a;\n      const focusControlElement = findUpUntil(event.target, element => !!element.getAttribute('data-focus-id'));\n      const focusId = (_a = focusControlElement === null || focusControlElement === void 0 ? void 0 : focusControlElement.getAttribute('data-focus-id')) !== null && _a !== void 0 ? _a : null;\n      onFocusedComponentChange === null || onFocusedComponentChange === void 0 ? void 0 : onFocusedComponentChange(focusId);\n    },\n    onBlur: () => onFocusedComponentChange === null || onFocusedComponentChange === void 0 ? void 0 : onFocusedComponentChange(null)\n  }), selectionType ? React.createElement(TableThElement, Object.assign({\n    className: clsx(headerCellClass, selectionCellClass, hidden && headerCellStyles['header-cell-hidden']),\n    hidden: hidden,\n    tableRole: tableRole,\n    colIndex: 0,\n    focusedComponent: focusedComponent,\n    columnId: selectionColumnId,\n    stickyState: stickyState\n  }, getAnalyticsMetadataAttribute({\n    action: 'selectAll'\n  })), getSelectAllProps ? React.createElement(SelectionControl, Object.assign({\n    onFocusDown: event => {\n      onFocusMove(event.target, -1, +1);\n    },\n    focusedComponent: focusedComponent\n  }, getSelectAllProps(), sticky ? {\n    tabIndex: -1\n  } : {})) : React.createElement(ScreenreaderOnly, null, singleSelectionHeaderAriaLabel), React.createElement(Divider, {\n    className: styles['resize-divider']\n  })) : null, columnDefinitions.map((column, colIndex) => {\n    const columnId = getColumnKey(column, colIndex);\n    return React.createElement(TableHeaderCell, {\n      key: columnId,\n      style: getColumnStyles(sticky, columnId),\n      className: headerCellClass,\n      tabIndex: sticky ? -1 : 0,\n      focusedComponent: focusedComponent,\n      column: column,\n      activeSortingColumn: sortingColumn,\n      sortingDescending: sortingDescending,\n      sortingDisabled: sortingDisabled,\n      wrapLines: wrapLines,\n      hidden: hidden,\n      colIndex: selectionType ? colIndex + 1 : colIndex,\n      columnId: columnId,\n      updateColumn: updateColumn,\n      onResizeFinish: () => onResizeFinish(columnWidths),\n      resizableColumns: resizableColumns,\n      onClick: detail => {\n        setLastUserAction('sorting');\n        fireNonCancelableEvent(onSortingChange, detail);\n      },\n      isEditable: !!column.editConfig,\n      stickyState: stickyState,\n      cellRef: node => setCell(sticky, columnId, node),\n      tableRole: tableRole,\n      resizerRoleDescription: resizerRoleDescription,\n      // Expandable option is only applicable to the first data column of the table.\n      // When present, the header content receives extra padding to match the first offset in the data cells.\n      isExpandable: colIndex === 0 && isExpandable,\n      hasDynamicContent: hidden && !resizableColumns && column.hasDynamicContent\n    });\n  })));\n});\nexport default Thead;","map":{"version":3,"names":["React","clsx","findUpUntil","getAnalyticsMetadataAttribute","ScreenreaderOnly","fireNonCancelableEvent","useVisualRefresh","TableHeaderCell","TableThElement","Divider","focusMarkers","SelectionControl","getTableHeaderRowRoleProps","useColumnWidths","getColumnKey","headerCellStyles","styles","Thead","forwardRef","_ref","outerRef","selectionType","getSelectAllProps","columnDefinitions","sortingColumn","sortingDisabled","sortingDescending","resizableColumns","variant","wrapLines","onFocusMove","onSortingChange","onResizeFinish","singleSelectionHeaderAriaLabel","stripedRows","sticky","hidden","stuck","stickyState","selectionColumnId","focusedComponent","onFocusedComponentChange","tableRole","resizerRoleDescription","isExpandable","setLastUserAction","isVisualRefresh","headerCellClass","selectionCellClass","getColumnStyles","columnWidths","updateColumn","setCell","createElement","className","Object","assign","all","ref","onFocus","event","focusControlElement","target","element","getAttribute","focusId","_a","onBlur","colIndex","columnId","action","onFocusDown","tabIndex","map","column","key","style","activeSortingColumn","onClick","detail","isEditable","editConfig","cellRef","node","hasDynamicContent"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/table/thead.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\n\nimport { findUpUntil } from '@cloudscape-design/component-toolkit/dom';\nimport { getAnalyticsMetadataAttribute } from '@cloudscape-design/component-toolkit/internal/analytics-metadata';\n\nimport ScreenreaderOnly from '../internal/components/screenreader-only';\nimport { fireNonCancelableEvent, NonCancelableEventHandler } from '../internal/events';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport { GeneratedAnalyticsMetadataTableSelectAll } from './analytics-metadata/interfaces';\nimport { TableHeaderCell } from './header-cell';\nimport { TableThElement } from './header-cell/th-element';\nimport { TableProps } from './interfaces';\nimport { Divider } from './resizer';\nimport { focusMarkers, SelectionControl, SelectionProps } from './selection';\nimport { StickyColumnsModel } from './sticky-columns';\nimport { getTableHeaderRowRoleProps, TableRole } from './table-role';\nimport { useColumnWidths } from './use-column-widths';\nimport { getColumnKey } from './utils';\n\nimport headerCellStyles from './header-cell/styles.css.js';\nimport styles from './styles.css.js';\n\nexport interface TheadProps {\n  selectionType: TableProps.SelectionType | undefined;\n  columnDefinitions: ReadonlyArray<TableProps.ColumnDefinition<any>>;\n  sortingColumn: TableProps.SortingColumn<any> | undefined;\n  sortingDescending: boolean | undefined;\n  sortingDisabled: boolean | undefined;\n  variant: TableProps.Variant;\n  wrapLines: boolean | undefined;\n  resizableColumns: boolean | undefined;\n  getSelectAllProps?: () => SelectionProps;\n  onFocusMove: ((sourceElement: HTMLElement, fromIndex: number, direction: -1 | 1) => void) | undefined;\n  onResizeFinish: (newWidths: Map<PropertyKey, number>) => void;\n  onSortingChange: NonCancelableEventHandler<TableProps.SortingState<any>> | undefined;\n  sticky?: boolean;\n  hidden?: boolean;\n  stuck?: boolean;\n  singleSelectionHeaderAriaLabel?: string;\n  resizerRoleDescription?: string;\n  stripedRows?: boolean;\n  stickyState: StickyColumnsModel;\n  selectionColumnId: PropertyKey;\n  focusedComponent?: null | string;\n  onFocusedComponentChange?: (focusId: null | string) => void;\n  tableRole: TableRole;\n  isExpandable?: boolean;\n  setLastUserAction: (name: string) => void;\n}\n\nconst Thead = React.forwardRef(\n  (\n    {\n      selectionType,\n      getSelectAllProps,\n      columnDefinitions,\n      sortingColumn,\n      sortingDisabled,\n      sortingDescending,\n      resizableColumns,\n      variant,\n      wrapLines,\n      onFocusMove,\n      onSortingChange,\n      onResizeFinish,\n      singleSelectionHeaderAriaLabel,\n      stripedRows,\n      sticky = false,\n      hidden = false,\n      stuck = false,\n      stickyState,\n      selectionColumnId,\n      focusedComponent,\n      onFocusedComponentChange,\n      tableRole,\n      resizerRoleDescription,\n      isExpandable,\n      setLastUserAction,\n    }: TheadProps,\n    outerRef: React.Ref<HTMLTableRowElement>\n  ) => {\n    const isVisualRefresh = useVisualRefresh();\n\n    const headerCellClass = clsx(\n      headerCellStyles['header-cell'],\n      headerCellStyles[`header-cell-variant-${variant}`],\n      sticky && headerCellStyles['header-cell-sticky'],\n      stuck && headerCellStyles['header-cell-stuck'],\n      stripedRows && headerCellStyles['has-striped-rows'],\n      isVisualRefresh && headerCellStyles['is-visual-refresh']\n    );\n\n    const selectionCellClass = clsx(\n      styles['selection-control'],\n      styles['selection-control-header'],\n      isVisualRefresh && styles['is-visual-refresh']\n    );\n\n    const { getColumnStyles, columnWidths, updateColumn, setCell } = useColumnWidths();\n\n    return (\n      <thead className={clsx(!hidden && styles['thead-active'])}>\n        <tr\n          {...focusMarkers.all}\n          ref={outerRef}\n          aria-rowindex={1}\n          {...getTableHeaderRowRoleProps({ tableRole })}\n          onFocus={event => {\n            const focusControlElement = findUpUntil(event.target, element => !!element.getAttribute('data-focus-id'));\n            const focusId = focusControlElement?.getAttribute('data-focus-id') ?? null;\n            onFocusedComponentChange?.(focusId);\n          }}\n          onBlur={() => onFocusedComponentChange?.(null)}\n        >\n          {selectionType ? (\n            <TableThElement\n              className={clsx(headerCellClass, selectionCellClass, hidden && headerCellStyles['header-cell-hidden'])}\n              hidden={hidden}\n              tableRole={tableRole}\n              colIndex={0}\n              focusedComponent={focusedComponent}\n              columnId={selectionColumnId}\n              stickyState={stickyState}\n              {...getAnalyticsMetadataAttribute({\n                action: 'selectAll',\n              } as Partial<GeneratedAnalyticsMetadataTableSelectAll>)}\n            >\n              {getSelectAllProps ? (\n                <SelectionControl\n                  onFocusDown={event => {\n                    onFocusMove!(event.target as HTMLElement, -1, +1);\n                  }}\n                  focusedComponent={focusedComponent}\n                  {...getSelectAllProps()}\n                  {...(sticky ? { tabIndex: -1 } : {})}\n                />\n              ) : (\n                <ScreenreaderOnly>{singleSelectionHeaderAriaLabel}</ScreenreaderOnly>\n              )}\n              <Divider className={styles['resize-divider']} />\n            </TableThElement>\n          ) : null}\n\n          {columnDefinitions.map((column, colIndex) => {\n            const columnId = getColumnKey(column, colIndex);\n            return (\n              <TableHeaderCell\n                key={columnId}\n                style={getColumnStyles(sticky, columnId)}\n                className={headerCellClass}\n                tabIndex={sticky ? -1 : 0}\n                focusedComponent={focusedComponent}\n                column={column}\n                activeSortingColumn={sortingColumn}\n                sortingDescending={sortingDescending}\n                sortingDisabled={sortingDisabled}\n                wrapLines={wrapLines}\n                hidden={hidden}\n                colIndex={selectionType ? colIndex + 1 : colIndex}\n                columnId={columnId}\n                updateColumn={updateColumn}\n                onResizeFinish={() => onResizeFinish(columnWidths)}\n                resizableColumns={resizableColumns}\n                onClick={detail => {\n                  setLastUserAction('sorting');\n                  fireNonCancelableEvent(onSortingChange, detail);\n                }}\n                isEditable={!!column.editConfig}\n                stickyState={stickyState}\n                cellRef={node => setCell(sticky, columnId, node)}\n                tableRole={tableRole}\n                resizerRoleDescription={resizerRoleDescription}\n                // Expandable option is only applicable to the first data column of the table.\n                // When present, the header content receives extra padding to match the first offset in the data cells.\n                isExpandable={colIndex === 0 && isExpandable}\n                hasDynamicContent={hidden && !resizableColumns && column.hasDynamicContent}\n              />\n            );\n          })}\n        </tr>\n      </thead>\n    );\n  }\n);\n\nexport default Thead;\n"],"mappings":"AAAA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,MAAM;AAEvB,SAASC,WAAW,QAAQ,0CAA0C;AACtE,SAASC,6BAA6B,QAAQ,kEAAkE;AAEhH,OAAOC,gBAAgB,MAAM,0CAA0C;AACvE,SAASC,sBAAsB,QAAmC,oBAAoB;AACtF,SAASC,gBAAgB,QAAQ,mCAAmC;AAEpE,SAASC,eAAe,QAAQ,eAAe;AAC/C,SAASC,cAAc,QAAQ,0BAA0B;AAEzD,SAASC,OAAO,QAAQ,WAAW;AACnC,SAASC,YAAY,EAAEC,gBAAgB,QAAwB,aAAa;AAE5E,SAASC,0BAA0B,QAAmB,cAAc;AACpE,SAASC,eAAe,QAAQ,qBAAqB;AACrD,SAASC,YAAY,QAAQ,SAAS;AAEtC,OAAOC,gBAAgB,MAAM,6BAA6B;AAC1D,OAAOC,MAAM,MAAM,iBAAiB;AA8BpC,MAAMC,KAAK,GAAGjB,KAAK,CAACkB,UAAU,CAC5B,CAAAC,IAAA,EA4BEC,QAAwC,KACtC;EAAA,IA5BF;IACEC,aAAa;IACbC,iBAAiB;IACjBC,iBAAiB;IACjBC,aAAa;IACbC,eAAe;IACfC,iBAAiB;IACjBC,gBAAgB;IAChBC,OAAO;IACPC,SAAS;IACTC,WAAW;IACXC,eAAe;IACfC,cAAc;IACdC,8BAA8B;IAC9BC,WAAW;IACXC,MAAM,GAAG,KAAK;IACdC,MAAM,GAAG,KAAK;IACdC,KAAK,GAAG,KAAK;IACbC,WAAW;IACXC,iBAAiB;IACjBC,gBAAgB;IAChBC,wBAAwB;IACxBC,SAAS;IACTC,sBAAsB;IACtBC,YAAY;IACZC;EAAiB,CACN,GAAA1B,IAAA;EAGb,MAAM2B,eAAe,GAAGxC,gBAAgB,EAAE;EAE1C,MAAMyC,eAAe,GAAG9C,IAAI,CAC1Bc,gBAAgB,CAAC,aAAa,CAAC,EAC/BA,gBAAgB,CAAC,uBAAuBa,OAAO,EAAE,CAAC,EAClDO,MAAM,IAAIpB,gBAAgB,CAAC,oBAAoB,CAAC,EAChDsB,KAAK,IAAItB,gBAAgB,CAAC,mBAAmB,CAAC,EAC9CmB,WAAW,IAAInB,gBAAgB,CAAC,kBAAkB,CAAC,EACnD+B,eAAe,IAAI/B,gBAAgB,CAAC,mBAAmB,CAAC,CACzD;EAED,MAAMiC,kBAAkB,GAAG/C,IAAI,CAC7Be,MAAM,CAAC,mBAAmB,CAAC,EAC3BA,MAAM,CAAC,0BAA0B,CAAC,EAClC8B,eAAe,IAAI9B,MAAM,CAAC,mBAAmB,CAAC,CAC/C;EAED,MAAM;IAAEiC,eAAe;IAAEC,YAAY;IAAEC,YAAY;IAAEC;EAAO,CAAE,GAAGvC,eAAe,EAAE;EAElF,OACEb,KAAA,CAAAqD,aAAA;IAAOC,SAAS,EAAErD,IAAI,CAAC,CAACmC,MAAM,IAAIpB,MAAM,CAAC,cAAc,CAAC;EAAC,GACvDhB,KAAA,CAAAqD,aAAA,OAAAE,MAAA,CAAAC,MAAA,KACM9C,YAAY,CAAC+C,GAAG;IACpBC,GAAG,EAAEtC,QAAQ;IAAA,iBACE;EAAC,GACZR,0BAA0B,CAAC;IAAE8B;EAAS,CAAE,CAAC;IAC7CiB,OAAO,EAAEC,KAAK,IAAG;;MACf,MAAMC,mBAAmB,GAAG3D,WAAW,CAAC0D,KAAK,CAACE,MAAM,EAAEC,OAAO,IAAI,CAAC,CAACA,OAAO,CAACC,YAAY,CAAC,eAAe,CAAC,CAAC;MACzG,MAAMC,OAAO,GAAG,CAAAC,EAAA,GAAAL,mBAAmB,aAAnBA,mBAAmB,uBAAnBA,mBAAmB,CAAEG,YAAY,CAAC,eAAe,CAAC,cAAAE,EAAA,cAAAA,EAAA,GAAI,IAAI;MAC1EzB,wBAAwB,aAAxBA,wBAAwB,uBAAxBA,wBAAwB,CAAGwB,OAAO,CAAC;IACrC,CAAC;IACDE,MAAM,EAAEA,CAAA,KAAM1B,wBAAwB,aAAxBA,wBAAwB,uBAAxBA,wBAAwB,CAAG,IAAI;EAAC,IAE7CpB,aAAa,GACZrB,KAAA,CAAAqD,aAAA,CAAC7C,cAAc,EAAA+C,MAAA,CAAAC,MAAA;IACbF,SAAS,EAAErD,IAAI,CAAC8C,eAAe,EAAEC,kBAAkB,EAAEZ,MAAM,IAAIrB,gBAAgB,CAAC,oBAAoB,CAAC,CAAC;IACtGqB,MAAM,EAAEA,MAAM;IACdM,SAAS,EAAEA,SAAS;IACpB0B,QAAQ,EAAE,CAAC;IACX5B,gBAAgB,EAAEA,gBAAgB;IAClC6B,QAAQ,EAAE9B,iBAAiB;IAC3BD,WAAW,EAAEA;EAAW,GACpBnC,6BAA6B,CAAC;IAChCmE,MAAM,EAAE;GAC4C,CAAC,GAEtDhD,iBAAiB,GAChBtB,KAAA,CAAAqD,aAAA,CAAC1C,gBAAgB,EAAA4C,MAAA,CAAAC,MAAA;IACfe,WAAW,EAAEX,KAAK,IAAG;MACnB9B,WAAY,CAAC8B,KAAK,CAACE,MAAqB,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACnD,CAAC;IACDtB,gBAAgB,EAAEA;EAAgB,GAC9BlB,iBAAiB,EAAE,EAClBa,MAAM,GAAG;IAAEqC,QAAQ,EAAE,CAAC;EAAC,CAAE,GAAG,EAAG,EACpC,GAEFxE,KAAA,CAAAqD,aAAA,CAACjD,gBAAgB,QAAE6B,8BAA8B,CAClD,EACDjC,KAAA,CAAAqD,aAAA,CAAC5C,OAAO;IAAC6C,SAAS,EAAEtC,MAAM,CAAC,gBAAgB;EAAC,EAAI,CACjC,GACf,IAAI,EAEPO,iBAAiB,CAACkD,GAAG,CAAC,CAACC,MAAM,EAAEN,QAAQ,KAAI;IAC1C,MAAMC,QAAQ,GAAGvD,YAAY,CAAC4D,MAAM,EAAEN,QAAQ,CAAC;IAC/C,OACEpE,KAAA,CAAAqD,aAAA,CAAC9C,eAAe;MACdoE,GAAG,EAAEN,QAAQ;MACbO,KAAK,EAAE3B,eAAe,CAACd,MAAM,EAAEkC,QAAQ,CAAC;MACxCf,SAAS,EAAEP,eAAe;MAC1ByB,QAAQ,EAAErC,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC;MACzBK,gBAAgB,EAAEA,gBAAgB;MAClCkC,MAAM,EAAEA,MAAM;MACdG,mBAAmB,EAAErD,aAAa;MAClCE,iBAAiB,EAAEA,iBAAiB;MACpCD,eAAe,EAAEA,eAAe;MAChCI,SAAS,EAAEA,SAAS;MACpBO,MAAM,EAAEA,MAAM;MACdgC,QAAQ,EAAE/C,aAAa,GAAG+C,QAAQ,GAAG,CAAC,GAAGA,QAAQ;MACjDC,QAAQ,EAAEA,QAAQ;MAClBlB,YAAY,EAAEA,YAAY;MAC1BnB,cAAc,EAAEA,CAAA,KAAMA,cAAc,CAACkB,YAAY,CAAC;MAClDvB,gBAAgB,EAAEA,gBAAgB;MAClCmD,OAAO,EAAEC,MAAM,IAAG;QAChBlC,iBAAiB,CAAC,SAAS,CAAC;QAC5BxC,sBAAsB,CAAC0B,eAAe,EAAEgD,MAAM,CAAC;MACjD,CAAC;MACDC,UAAU,EAAE,CAAC,CAACN,MAAM,CAACO,UAAU;MAC/B3C,WAAW,EAAEA,WAAW;MACxB4C,OAAO,EAAEC,IAAI,IAAI/B,OAAO,CAACjB,MAAM,EAAEkC,QAAQ,EAAEc,IAAI,CAAC;MAChDzC,SAAS,EAAEA,SAAS;MACpBC,sBAAsB,EAAEA,sBAAsB;MAC9C;MACA;MACAC,YAAY,EAAEwB,QAAQ,KAAK,CAAC,IAAIxB,YAAY;MAC5CwC,iBAAiB,EAAEhD,MAAM,IAAI,CAACT,gBAAgB,IAAI+C,MAAM,CAACU;IAAiB,EAC1E;EAEN,CAAC,CAAC,CACC,CACC;AAEZ,CAAC,CACF;AAED,eAAenE,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}