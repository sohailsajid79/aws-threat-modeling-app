{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useEffect, useLayoutEffect, useRef, useState } from 'react';\nimport { useAppLayoutToolbarEnabled } from '../../../app-layout/utils/feature-flags';\nimport { awsuiPluginsInternal } from '../api';\nfunction useSetGlobalBreadcrumbsImplementation(props) {\n  const registrationRef = useRef();\n  const [registered, setRegistered] = useState(false);\n  useEffect(() => {\n    const registration = awsuiPluginsInternal.breadcrumbs.registerBreadcrumbs(props, () => setRegistered(true));\n    registrationRef.current = registration;\n    return () => {\n      registration.cleanup();\n    };\n    // subsequent prop changes are handled by another effect\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useLayoutEffect(() => {\n    var _a;\n    (_a = registrationRef.current) === null || _a === void 0 ? void 0 : _a.update(props);\n  });\n  return registered;\n}\nexport function useSetGlobalBreadcrumbs(props) {\n  // avoid additional side effects when this feature is not active\n  if (!useAppLayoutToolbarEnabled()) {\n    return false;\n  }\n  // getGlobalFlag() value does not change without full page reload\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return useSetGlobalBreadcrumbsImplementation(props);\n}\nexport function useGetGlobalBreadcrumbs(enabled) {\n  const [discoveredBreadcrumbs, setDiscoveredBreadcrumbs] = useState(null);\n  useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n    return awsuiPluginsInternal.breadcrumbs.registerAppLayout(breadcrumbs => {\n      setDiscoveredBreadcrumbs(breadcrumbs);\n    });\n  }, [enabled]);\n  return discoveredBreadcrumbs;\n}","map":{"version":3,"names":["useEffect","useLayoutEffect","useRef","useState","useAppLayoutToolbarEnabled","awsuiPluginsInternal","useSetGlobalBreadcrumbsImplementation","props","registrationRef","registered","setRegistered","registration","breadcrumbs","registerBreadcrumbs","current","cleanup","_a","update","useSetGlobalBreadcrumbs","useGetGlobalBreadcrumbs","enabled","discoveredBreadcrumbs","setDiscoveredBreadcrumbs","registerAppLayout"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/internal/plugins/helpers/use-global-breadcrumbs.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useEffect, useLayoutEffect, useRef, useState } from 'react';\n\nimport { useAppLayoutToolbarEnabled } from '../../../app-layout/utils/feature-flags';\nimport { BreadcrumbGroupProps } from '../../../breadcrumb-group/interfaces';\nimport { awsuiPluginsInternal } from '../api';\nimport { BreadcrumbsGlobalRegistration } from '../controllers/breadcrumbs';\n\nfunction useSetGlobalBreadcrumbsImplementation(props: BreadcrumbGroupProps<any>) {\n  const registrationRef = useRef<BreadcrumbsGlobalRegistration<BreadcrumbGroupProps> | null>();\n  const [registered, setRegistered] = useState(false);\n\n  useEffect(() => {\n    const registration = awsuiPluginsInternal.breadcrumbs.registerBreadcrumbs(props, () => setRegistered(true));\n    registrationRef.current = registration;\n\n    return () => {\n      registration.cleanup();\n    };\n    // subsequent prop changes are handled by another effect\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useLayoutEffect(() => {\n    registrationRef.current?.update(props);\n  });\n\n  return registered;\n}\n\nexport function useSetGlobalBreadcrumbs<T extends BreadcrumbGroupProps.Item>(props: BreadcrumbGroupProps<T>) {\n  // avoid additional side effects when this feature is not active\n  if (!useAppLayoutToolbarEnabled()) {\n    return false;\n  }\n  // getGlobalFlag() value does not change without full page reload\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return useSetGlobalBreadcrumbsImplementation(props);\n}\n\nexport function useGetGlobalBreadcrumbs(enabled: boolean) {\n  const [discoveredBreadcrumbs, setDiscoveredBreadcrumbs] = useState<BreadcrumbGroupProps<any> | null>(null);\n\n  useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n    return awsuiPluginsInternal.breadcrumbs.registerAppLayout(breadcrumbs => {\n      setDiscoveredBreadcrumbs(breadcrumbs);\n    });\n  }, [enabled]);\n\n  return discoveredBreadcrumbs;\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,SAAS,EAAEC,eAAe,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAEpE,SAASC,0BAA0B,QAAQ,yCAAyC;AAEpF,SAASC,oBAAoB,QAAQ,QAAQ;AAG7C,SAASC,qCAAqCA,CAACC,KAAgC;EAC7E,MAAMC,eAAe,GAAGN,MAAM,EAA8D;EAC5F,MAAM,CAACO,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EAEnDH,SAAS,CAAC,MAAK;IACb,MAAMW,YAAY,GAAGN,oBAAoB,CAACO,WAAW,CAACC,mBAAmB,CAACN,KAAK,EAAE,MAAMG,aAAa,CAAC,IAAI,CAAC,CAAC;IAC3GF,eAAe,CAACM,OAAO,GAAGH,YAAY;IAEtC,OAAO,MAAK;MACVA,YAAY,CAACI,OAAO,EAAE;IACxB,CAAC;IACD;IACA;EACF,CAAC,EAAE,EAAE,CAAC;EAENd,eAAe,CAAC,MAAK;;IACnB,CAAAe,EAAA,GAAAR,eAAe,CAACM,OAAO,cAAAE,EAAA,uBAAAA,EAAA,CAAEC,MAAM,CAACV,KAAK,CAAC;EACxC,CAAC,CAAC;EAEF,OAAOE,UAAU;AACnB;AAEA,OAAM,SAAUS,uBAAuBA,CAAsCX,KAA8B;EACzG;EACA,IAAI,CAACH,0BAA0B,EAAE,EAAE;IACjC,OAAO,KAAK;;EAEd;EACA;EACA,OAAOE,qCAAqC,CAACC,KAAK,CAAC;AACrD;AAEA,OAAM,SAAUY,uBAAuBA,CAACC,OAAgB;EACtD,MAAM,CAACC,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGnB,QAAQ,CAAmC,IAAI,CAAC;EAE1GH,SAAS,CAAC,MAAK;IACb,IAAI,CAACoB,OAAO,EAAE;MACZ;;IAEF,OAAOf,oBAAoB,CAACO,WAAW,CAACW,iBAAiB,CAACX,WAAW,IAAG;MACtEU,wBAAwB,CAACV,WAAW,CAAC;IACvC,CAAC,CAAC;EACJ,CAAC,EAAE,CAACQ,OAAO,CAAC,CAAC;EAEb,OAAOC,qBAAqB;AAC9B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}