{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { padLeftZeros } from '../../../utils/strings';\nimport { insertAt } from './strings';\nclass MaskFormat {\n  constructor(_ref) {\n    let {\n      separator,\n      inputSeparators = [],\n      segments\n    } = _ref;\n    this.positionFormats = new Map();\n    this.segments = [];\n    this.separator = separator;\n    this.inputSeparators = [...inputSeparators, separator];\n    this.enrichSegmentDefinitions(segments);\n  }\n  tryAppendSeparator(value) {\n    const withSeparator = `${value}${this.separator}`;\n    return this.isValid(withSeparator) ? withSeparator : value;\n  }\n  isSeparator(key) {\n    return this.inputSeparators.indexOf(key) !== -1;\n  }\n  isValid(value) {\n    const inputSegments = value.split(this.separator);\n    if (inputSegments.length > this.segments.length) {\n      return false;\n    }\n    return inputSegments.every((segmentValue, i) => {\n      const segment = this.segments[i];\n      // disallow empty segments\n      if (segmentValue === '') {\n        // except empty last segment (e.g. trailing separator \"12:\")\n        if (i === inputSegments.length - 1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      // only allow numerals\n      if (!segmentValue.match(/^\\d+$/)) {\n        return false;\n      }\n      // disallow incomplete segments, except at end\n      if (segmentValue.length < segment.length && i !== inputSegments.length - 1) {\n        return false;\n      }\n      // limit numerical value\n      const intValue = parseInt(segmentValue, 10);\n      // Handles values padded with 0s that are lost during parsing\n      if (segmentValue.length > segment.length) {\n        return false;\n      }\n      if (intValue < segment.min || intValue > segment.max(value)) {\n        // allow incomplete segments in final position\n        if (i === inputSegments.length - 1 && segmentValue.length < segment.length) {\n          return true;\n        }\n        return false;\n      }\n      return true;\n    });\n  }\n  getValidValue(value) {\n    let validValue = value;\n    do {\n      if (this.isValid(validValue)) {\n        return this.tryAppendSeparator(validValue);\n      }\n      validValue = validValue.substring(0, validValue.length - 1);\n    } while (validValue.length > 0);\n    return '';\n  }\n  autoComplete(value) {\n    // aka [...completeSegments, lastSegment] = value.split(':')\n    // but that's not valid :/\n    const [lastSegmentValue, ...completeSegmentValues] = value.split(this.separator).reverse();\n    const lastSegment = this.segments[completeSegmentValues.length];\n    // if the last segment isn't complete, pad it with a preceding 0\n    // e.g. 10:1 -> 10:01\n    const paddedLastSegmentValue = this.padWithDefaultValue(lastSegmentValue, lastSegment);\n    // recombine, and pad with extra segments for the full format\n    const partial = [...completeSegmentValues.reverse(), paddedLastSegmentValue];\n    while (partial.length < this.segments.length) {\n      const nextSegment = this.segments[partial.length];\n      const segmentValue = this.padWithDefaultValue('', nextSegment);\n      partial.push(segmentValue);\n    }\n    value = partial.join(this.separator);\n    value = this.correctMinMaxValues(value);\n    return value;\n  }\n  getSegmentValueWithAddition(position, value, enteredDigit) {\n    const segment = this.positionFormats.get(position);\n    const segmentValue = value.substr(segment.start, segment.length);\n    const segmentPosition = position - segment.start;\n    const newValue = insertAt(segmentValue, enteredDigit, segmentPosition, segmentPosition + 1);\n    return parseInt(newValue, 10);\n  }\n  replaceDigitsWithZeroes(value, cursorStart, cursorEnd) {\n    const position = this.isCursorAtSeparator(cursorStart) ? cursorStart + 1 : cursorStart;\n    // move selection forwards if it starts with a separator\n    if (this.isCursorAtSeparator(cursorStart)) {\n      cursorStart++;\n    }\n    // first, insert zeros in a partial segment at beginning of selection\n    if (!this.isSegmentStart(cursorStart)) {\n      const segment = this.positionFormats.get(cursorStart);\n      value = insertAt(value, padLeftZeros('', segment.end - cursorStart), cursorStart, segment.end);\n      cursorStart = segment.end + 1;\n    }\n    // then loop through remaining segments, filling with zeros\n    let currentSegment;\n    while (cursorStart < cursorEnd && (currentSegment = this.positionFormats.get(cursorStart + 1))) {\n      const insertionEnd = Math.min(cursorEnd, currentSegment.end);\n      value = insertAt(value, padLeftZeros('', insertionEnd - currentSegment.start), currentSegment.start, insertionEnd);\n      cursorStart = insertionEnd + 1;\n    }\n    value = this.correctMinMaxValues(value);\n    return {\n      value,\n      position\n    };\n  }\n  handleSeparatorInput(value, position) {\n    if (position === value.length && !this.isSegmentStart(position)) {\n      const segment = this.positionFormats.get(position);\n      let segmentValue = value.substr(segment.start, segment.length);\n      segmentValue = this.padWithDefaultValue(segmentValue, segment);\n      value = insertAt(value, segmentValue, segment.start, segment.end);\n      value = this.correctMinMaxValues(value);\n      return {\n        value,\n        position: value.length\n      };\n    }\n  }\n  isCursorAtSeparator(position) {\n    return 0 < position && position < this.getMaxLength() && this.positionFormats.get(position) === undefined;\n  }\n  isSegmentStart(position) {\n    return position === 0 || this.isCursorAtSeparator(position - 1);\n  }\n  getSegmentMaxValue(value, position) {\n    return this.positionFormats.get(position).max(value);\n  }\n  getSegmentMinValue(value, position) {\n    return this.positionFormats.get(position).min;\n  }\n  getMaxLength() {\n    const last = this.segments[this.segments.length - 1];\n    return last.start + last.length;\n  }\n  deleteSeparator(value, position) {\n    value = insertAt(value, '0', position - 2, position - 1);\n    return {\n      value: this.correctMinMaxValues(value),\n      position: position - 2\n    };\n  }\n  deleteDigit(value, position) {\n    value = insertAt(value, '0', position - 1, position);\n    // 23:59|: => backspace => 23:5|\n    const length = value.length;\n    if (value.slice(length - 2) === '0:') {\n      value = value.slice(0, length - 2);\n    }\n    return {\n      value: this.correctMinMaxValues(value),\n      position: position - 1\n    };\n  }\n  correctMinMaxValues(value) {\n    let segment = this.positionFormats.get(0);\n    while (segment && value.length >= segment.end) {\n      const segmentValue = parseInt(value.substr(segment.start, segment.length), 10);\n      const segmentMax = segment.max(value);\n      if (segmentValue < segment.min) {\n        let toInsert = segment.min.toFixed();\n        toInsert = padLeftZeros(toInsert, segment.length);\n        value = insertAt(value, toInsert, segment.start, segment.end);\n      }\n      if (segmentValue > segmentMax) {\n        value = insertAt(value, segmentMax.toFixed(), segment.start, segment.end);\n      }\n      segment = this.positionFormats.get(segment.end + 1);\n    }\n    return value.substr(0, this.segments[this.segments.length - 1].end);\n  }\n  formatPastedText(text, value, cursorStart, cursorEnd) {\n    const keyArr = text.trim().split('');\n    let position = cursorStart;\n    let formattedValue = value;\n    // if a selection range captures the end of the current value\n    // we replace it with the value in buffer even if the value in buffer is shorter\n    if (cursorEnd > cursorStart && cursorEnd === value.length) {\n      formattedValue = value.slice(0, cursorStart);\n    }\n    for (const key of keyArr) {\n      if (position >= this.getMaxLength()) {\n        break;\n      }\n      const result = this.processKey(formattedValue, key, position);\n      formattedValue = result.value;\n      position = result.position;\n    }\n    return this.tryAppendSeparator(formattedValue);\n  }\n  processKey(initialValue, key, initialPosition) {\n    let value = initialValue;\n    let position = initialPosition;\n    if (this.isSeparator(key)) {\n      const result = this.handleSeparatorInput(value, position);\n      if (result) {\n        value = result.value;\n        position = result.position;\n      }\n    } else {\n      const isCursorAtEnd = position === value.length;\n      const segmentValue = this.getSegmentValueWithAddition(position, value, key);\n      const segmentMaxValue = this.getSegmentMaxValue(value, position);\n      const segmentMinValue = this.getSegmentMinValue(value, position);\n      const firstDigitGreater = parseInt(key, 10) > parseInt(segmentMaxValue.toFixed()[0], 10);\n      const isValidPosition = isCursorAtEnd || segmentValue.toFixed().length === 1;\n      const exceedsMaxAtSegmentStart = this.isSegmentStart(position) && isValidPosition && firstDigitGreater;\n      if (exceedsMaxAtSegmentStart) {\n        // 22:| => Enter '9' => 22:09|\n        // |1 => Enter '9' => 09|\n        value = insertAt(value, `0${key}`, position, position + 2);\n        position += 2;\n      } else if (segmentValue > segmentMaxValue && this.isSegmentStart(position)) {\n        // 22:|22 => Enter '9' => 22:59|\n        value = insertAt(value, segmentMaxValue.toFixed(), position, position + segmentMaxValue.toFixed().length);\n        position += segmentMaxValue.toFixed().length;\n      } else if (segmentValue > segmentMaxValue) {\n        // 2|2:22 => Enter '9' => 23:|22\n        value = insertAt(value, segmentMaxValue.toFixed(), position - 1, position + 1);\n        position += 1;\n      } else if (segmentValue < segmentMinValue && !this.isSegmentStart(position)) {\n        // 0| => enter '0' => 01:\n        value = insertAt(value, segmentMinValue.toFixed(), position, position + 1);\n        position += 1;\n      } else {\n        // 22:| => Enter '5' => 23:5|\n        value = insertAt(value, key, position, position + 1);\n        position += 1;\n      }\n    }\n    value = this.tryAppendSeparator(value);\n    // Move cursor in front of separator if behind after overwriting a character\n    if (this.isCursorAtSeparator(position)) {\n      position++;\n    }\n    return {\n      value,\n      position\n    };\n  }\n  padWithDefaultValue(segmentValue, segment) {\n    let defaultValue = (segment.default || segment.min).toFixed();\n    defaultValue = padLeftZeros(defaultValue, segment.length);\n    return insertAt(defaultValue, segmentValue, segment.length - segmentValue.length, segment.length);\n  }\n  enrichSegmentDefinitions(segments) {\n    this.positionFormats = new Map();\n    this.segments = [];\n    let position = 0;\n    for (const segment of segments) {\n      const max = segment.max;\n      const fullSegment = Object.assign(Object.assign({}, segment), {\n        max: typeof max === 'number' ? () => max : max,\n        start: position,\n        end: position + segment.length\n      });\n      this.segments.push(fullSegment);\n      // insert this format segment for every char in the max value\n      for (let j = 0; j < fullSegment.length; j++) {\n        this.positionFormats.set(position++, fullSegment);\n      }\n      // skip a position for separator\n      position++;\n    }\n  }\n}\nexport default MaskFormat;","map":{"version":3,"names":["padLeftZeros","insertAt","MaskFormat","constructor","_ref","separator","inputSeparators","segments","positionFormats","Map","enrichSegmentDefinitions","tryAppendSeparator","value","withSeparator","isValid","isSeparator","key","indexOf","inputSegments","split","length","every","segmentValue","i","segment","match","intValue","parseInt","min","max","getValidValue","validValue","substring","autoComplete","lastSegmentValue","completeSegmentValues","reverse","lastSegment","paddedLastSegmentValue","padWithDefaultValue","partial","nextSegment","push","join","correctMinMaxValues","getSegmentValueWithAddition","position","enteredDigit","get","substr","start","segmentPosition","newValue","replaceDigitsWithZeroes","cursorStart","cursorEnd","isCursorAtSeparator","isSegmentStart","end","currentSegment","insertionEnd","Math","handleSeparatorInput","getMaxLength","undefined","getSegmentMaxValue","getSegmentMinValue","last","deleteSeparator","deleteDigit","slice","segmentMax","toInsert","toFixed","formatPastedText","text","keyArr","trim","formattedValue","result","processKey","initialValue","initialPosition","isCursorAtEnd","segmentMaxValue","segmentMinValue","firstDigitGreater","isValidPosition","exceedsMaxAtSegmentStart","defaultValue","default","fullSegment","Object","assign","j","set"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/internal/components/masked-input/utils/mask-format.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { padLeftZeros } from '../../../utils/strings';\nimport { insertAt } from './strings';\n\ninterface FormatSegment {\n  min: number;\n  max: number | ((value: string) => number);\n  length: number;\n  default?: number;\n}\n\ninterface FormatSegmentFull extends FormatSegment {\n  start: number;\n  max(value: string): number;\n  end: number;\n}\n\nexport interface MaskArgs {\n  separator: string;\n  inputSeparators?: Array<string>;\n  segments: Array<FormatSegment>;\n}\n\nexport interface ChangeResult {\n  value: string;\n  position: number;\n}\n\nclass MaskFormat {\n  separator: string;\n  private inputSeparators: Array<string>;\n  private segments: Array<FormatSegmentFull>;\n  private positionFormats = new Map<number, FormatSegmentFull>();\n\n  constructor({ separator, inputSeparators = [], segments }: MaskArgs) {\n    this.segments = [];\n    this.separator = separator;\n\n    this.inputSeparators = [...inputSeparators, separator];\n    this.enrichSegmentDefinitions(segments);\n  }\n\n  tryAppendSeparator(value: string) {\n    const withSeparator = `${value}${this.separator}`;\n    return this.isValid(withSeparator) ? withSeparator : value;\n  }\n\n  isSeparator(key: string): boolean {\n    return this.inputSeparators.indexOf(key) !== -1;\n  }\n\n  isValid(value: string): boolean {\n    const inputSegments = value.split(this.separator);\n\n    if (inputSegments.length > this.segments.length) {\n      return false;\n    }\n\n    return inputSegments.every((segmentValue, i) => {\n      const segment = this.segments[i];\n\n      // disallow empty segments\n      if (segmentValue === '') {\n        // except empty last segment (e.g. trailing separator \"12:\")\n        if (i === inputSegments.length - 1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      // only allow numerals\n      if (!segmentValue.match(/^\\d+$/)) {\n        return false;\n      }\n      // disallow incomplete segments, except at end\n      if (segmentValue.length < segment.length && i !== inputSegments.length - 1) {\n        return false;\n      }\n      // limit numerical value\n      const intValue = parseInt(segmentValue, 10);\n\n      // Handles values padded with 0s that are lost during parsing\n      if (segmentValue.length > segment.length) {\n        return false;\n      }\n\n      if (intValue < segment.min || intValue > segment.max(value)) {\n        // allow incomplete segments in final position\n        if (i === inputSegments.length - 1 && segmentValue.length < segment.length) {\n          return true;\n        }\n        return false;\n      }\n      return true;\n    });\n  }\n\n  getValidValue(value: string): string {\n    let validValue = value;\n\n    do {\n      if (this.isValid(validValue)) {\n        return this.tryAppendSeparator(validValue);\n      }\n\n      validValue = validValue.substring(0, validValue.length - 1);\n    } while (validValue.length > 0);\n\n    return '';\n  }\n\n  autoComplete(value: string): string {\n    // aka [...completeSegments, lastSegment] = value.split(':')\n    // but that's not valid :/\n    const [lastSegmentValue, ...completeSegmentValues] = value.split(this.separator).reverse();\n    const lastSegment = this.segments[completeSegmentValues.length];\n\n    // if the last segment isn't complete, pad it with a preceding 0\n    // e.g. 10:1 -> 10:01\n    const paddedLastSegmentValue = this.padWithDefaultValue(lastSegmentValue, lastSegment);\n\n    // recombine, and pad with extra segments for the full format\n    const partial = [...completeSegmentValues.reverse(), paddedLastSegmentValue];\n    while (partial.length < this.segments.length) {\n      const nextSegment = this.segments[partial.length];\n      const segmentValue = this.padWithDefaultValue('', nextSegment);\n      partial.push(segmentValue);\n    }\n    value = partial.join(this.separator);\n    value = this.correctMinMaxValues(value);\n    return value;\n  }\n\n  getSegmentValueWithAddition(position: number, value: string, enteredDigit: string) {\n    const segment = this.positionFormats.get(position)!;\n    const segmentValue = value.substr(segment.start, segment.length);\n    const segmentPosition = position - segment.start;\n    const newValue = insertAt(segmentValue, enteredDigit, segmentPosition, segmentPosition + 1);\n    return parseInt(newValue, 10);\n  }\n\n  replaceDigitsWithZeroes(value: string, cursorStart: number, cursorEnd: number): ChangeResult {\n    const position = this.isCursorAtSeparator(cursorStart) ? cursorStart + 1 : cursorStart;\n\n    // move selection forwards if it starts with a separator\n    if (this.isCursorAtSeparator(cursorStart)) {\n      cursorStart++;\n    }\n\n    // first, insert zeros in a partial segment at beginning of selection\n    if (!this.isSegmentStart(cursorStart)) {\n      const segment = this.positionFormats.get(cursorStart)!;\n      value = insertAt(value, padLeftZeros('', segment.end - cursorStart), cursorStart, segment.end);\n      cursorStart = segment.end + 1;\n    }\n\n    // then loop through remaining segments, filling with zeros\n    let currentSegment: FormatSegmentFull;\n    while (cursorStart < cursorEnd && (currentSegment = this.positionFormats.get(cursorStart + 1)!)) {\n      const insertionEnd = Math.min(cursorEnd, currentSegment.end);\n      value = insertAt(\n        value,\n        padLeftZeros('', insertionEnd - currentSegment.start),\n        currentSegment.start,\n        insertionEnd\n      );\n      cursorStart = insertionEnd + 1;\n    }\n\n    value = this.correctMinMaxValues(value);\n\n    return {\n      value,\n      position,\n    };\n  }\n\n  handleSeparatorInput(value: string, position: number): ChangeResult | void {\n    if (position === value.length && !this.isSegmentStart(position)) {\n      const segment = this.positionFormats.get(position)!;\n      let segmentValue = value.substr(segment.start, segment.length);\n      segmentValue = this.padWithDefaultValue(segmentValue, segment);\n      value = insertAt(value, segmentValue, segment.start, segment.end);\n      value = this.correctMinMaxValues(value);\n      return {\n        value,\n        position: value.length,\n      };\n    }\n  }\n\n  isCursorAtSeparator(position: number) {\n    return 0 < position && position < this.getMaxLength() && this.positionFormats.get(position) === undefined;\n  }\n\n  isSegmentStart(position: number) {\n    return position === 0 || this.isCursorAtSeparator(position - 1);\n  }\n\n  getSegmentMaxValue(value: string, position: number): number {\n    return this.positionFormats.get(position)!.max(value);\n  }\n\n  getSegmentMinValue(value: string, position: number): number {\n    return this.positionFormats.get(position)!.min;\n  }\n\n  getMaxLength() {\n    const last = this.segments[this.segments.length - 1];\n    return last.start + last.length;\n  }\n\n  deleteSeparator(value: string, position: number): ChangeResult {\n    value = insertAt(value, '0', position - 2, position - 1);\n\n    return {\n      value: this.correctMinMaxValues(value),\n      position: position - 2,\n    };\n  }\n\n  deleteDigit(value: string, position: number): ChangeResult {\n    value = insertAt(value, '0', position - 1, position);\n\n    // 23:59|: => backspace => 23:5|\n    const length = value.length;\n    if (value.slice(length - 2) === '0:') {\n      value = value.slice(0, length - 2);\n    }\n\n    return {\n      value: this.correctMinMaxValues(value),\n      position: position - 1,\n    };\n  }\n\n  correctMinMaxValues(value: string): string {\n    let segment = this.positionFormats.get(0);\n    while (segment && value.length >= segment.end) {\n      const segmentValue = parseInt(value.substr(segment.start, segment.length), 10);\n      const segmentMax = segment.max(value);\n      if (segmentValue < segment.min) {\n        let toInsert = segment.min.toFixed();\n        toInsert = padLeftZeros(toInsert, segment.length);\n        value = insertAt(value, toInsert, segment.start, segment.end);\n      }\n      if (segmentValue > segmentMax) {\n        value = insertAt(value, segmentMax.toFixed(), segment.start, segment.end);\n      }\n      segment = this.positionFormats.get(segment.end + 1);\n    }\n    return value.substr(0, this.segments[this.segments.length - 1].end);\n  }\n\n  formatPastedText(text: string, value: string, cursorStart: number, cursorEnd: number): string {\n    const keyArr = text.trim().split('');\n\n    let position = cursorStart;\n\n    let formattedValue = value;\n    // if a selection range captures the end of the current value\n    // we replace it with the value in buffer even if the value in buffer is shorter\n    if (cursorEnd > cursorStart && cursorEnd === value.length) {\n      formattedValue = value.slice(0, cursorStart);\n    }\n\n    for (const key of keyArr) {\n      if (position >= this.getMaxLength()) {\n        break;\n      }\n\n      const result = this.processKey(formattedValue, key, position);\n      formattedValue = result.value;\n      position = result.position;\n    }\n\n    return this.tryAppendSeparator(formattedValue);\n  }\n\n  processKey(initialValue: string, key: string, initialPosition: number) {\n    let value = initialValue;\n    let position = initialPosition;\n\n    if (this.isSeparator(key)) {\n      const result = this.handleSeparatorInput(value, position);\n      if (result) {\n        value = result.value;\n        position = result.position;\n      }\n    } else {\n      const isCursorAtEnd = position === value.length;\n      const segmentValue = this.getSegmentValueWithAddition(position, value, key);\n      const segmentMaxValue = this.getSegmentMaxValue(value, position);\n      const segmentMinValue = this.getSegmentMinValue(value, position);\n      const firstDigitGreater = parseInt(key, 10) > parseInt(segmentMaxValue.toFixed()[0], 10);\n      const isValidPosition = isCursorAtEnd || segmentValue.toFixed().length === 1;\n      const exceedsMaxAtSegmentStart = this.isSegmentStart(position) && isValidPosition && firstDigitGreater;\n\n      if (exceedsMaxAtSegmentStart) {\n        // 22:| => Enter '9' => 22:09|\n        // |1 => Enter '9' => 09|\n        value = insertAt(value, `0${key}`, position, position + 2);\n        position += 2;\n      } else if (segmentValue > segmentMaxValue && this.isSegmentStart(position)) {\n        // 22:|22 => Enter '9' => 22:59|\n        value = insertAt(value, segmentMaxValue.toFixed(), position, position + segmentMaxValue.toFixed().length);\n        position += segmentMaxValue.toFixed().length;\n      } else if (segmentValue > segmentMaxValue) {\n        // 2|2:22 => Enter '9' => 23:|22\n        value = insertAt(value, segmentMaxValue.toFixed(), position - 1, position + 1);\n        position += 1;\n      } else if (segmentValue < segmentMinValue && !this.isSegmentStart(position)) {\n        // 0| => enter '0' => 01:\n        value = insertAt(value, segmentMinValue.toFixed(), position, position + 1);\n        position += 1;\n      } else {\n        // 22:| => Enter '5' => 23:5|\n        value = insertAt(value, key, position, position + 1);\n        position += 1;\n      }\n    }\n\n    value = this.tryAppendSeparator(value);\n\n    // Move cursor in front of separator if behind after overwriting a character\n    if (this.isCursorAtSeparator(position)) {\n      position++;\n    }\n\n    return { value, position };\n  }\n\n  private padWithDefaultValue(segmentValue: string, segment: FormatSegmentFull) {\n    let defaultValue = (segment.default || segment.min).toFixed();\n    defaultValue = padLeftZeros(defaultValue, segment.length);\n    return insertAt(defaultValue, segmentValue, segment.length - segmentValue.length, segment.length);\n  }\n\n  private enrichSegmentDefinitions(segments: FormatSegment[]) {\n    this.positionFormats = new Map();\n    this.segments = [];\n    let position = 0;\n    for (const segment of segments) {\n      const max = segment.max;\n      const fullSegment: FormatSegmentFull = {\n        ...segment,\n        max: typeof max === 'number' ? () => max : max,\n        start: position,\n        end: position + segment.length,\n      };\n      this.segments.push(fullSegment);\n      // insert this format segment for every char in the max value\n      for (let j = 0; j < fullSegment.length; j++) {\n        this.positionFormats.set(position++, fullSegment);\n      }\n      // skip a position for separator\n      position++;\n    }\n  }\n}\n\nexport default MaskFormat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}