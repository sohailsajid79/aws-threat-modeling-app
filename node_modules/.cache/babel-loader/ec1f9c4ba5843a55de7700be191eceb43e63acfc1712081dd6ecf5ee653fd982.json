{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\nimport InternalButton from '../button/internal';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { isDevelopment } from '../internal/is-development';\nimport { getToggleIcon } from './util';\nimport styles from './styles.css.js';\nexport const InternalToggleButton = React.forwardRef((_a, ref) => {\n  var {\n      pressed,\n      iconName: defaultIconName,\n      pressedIconName,\n      iconSvg: defaultIconSvg,\n      pressedIconSvg,\n      iconUrl: defaultIconUrl,\n      pressedIconUrl,\n      variant,\n      onChange,\n      className\n    } = _a,\n    rest = __rest(_a, [\"pressed\", \"iconName\", \"pressedIconName\", \"iconSvg\", \"pressedIconSvg\", \"iconUrl\", \"pressedIconUrl\", \"variant\", \"onChange\", \"className\"]);\n  if (isDevelopment) {\n    if (defaultIconName && !pressedIconName) {\n      warnOnce('ToggleButton', '`pressedIconName` must be provided for `pressed` state.');\n    }\n    if (defaultIconSvg && !pressedIconSvg) {\n      warnOnce('ToggleButton', '`pressedIconSvg` must be provided for `pressed` state.');\n    }\n    if (defaultIconUrl && !pressedIconUrl) {\n      warnOnce('ToggleButton', '`pressedIconUrl` must be provided for `pressed` state.');\n    }\n  }\n  return React.createElement(InternalButton, Object.assign({\n    className: clsx(className, styles[`variant-${variant}`], {\n      [styles.pressed]: pressed\n    }),\n    variant: variant,\n    formAction: \"none\",\n    iconName: getToggleIcon(pressed, defaultIconName, pressedIconName),\n    iconUrl: getToggleIcon(pressed, defaultIconUrl, pressedIconUrl),\n    iconSvg: getToggleIcon(pressed, defaultIconSvg, pressedIconSvg),\n    \"aria-pressed\": pressed,\n    onClick: event => {\n      event.preventDefault();\n      fireNonCancelableEvent(onChange, {\n        pressed: !pressed\n      });\n    }\n  }, rest, {\n    ref: ref\n  }));\n});\nexport default InternalToggleButton;","map":{"version":3,"names":["React","clsx","warnOnce","InternalButton","fireNonCancelableEvent","isDevelopment","getToggleIcon","styles","InternalToggleButton","forwardRef","_a","ref","pressed","iconName","defaultIconName","pressedIconName","iconSvg","defaultIconSvg","pressedIconSvg","iconUrl","defaultIconUrl","pressedIconUrl","variant","onChange","className","rest","__rest","createElement","Object","assign","formAction","onClick","event","preventDefault"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/toggle-button/internal.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\n\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\n\nimport InternalButton from '../button/internal';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { isDevelopment } from '../internal/is-development';\nimport { ToggleButtonProps } from './interfaces';\nimport { getToggleIcon } from './util';\n\nimport styles from './styles.css.js';\n\nexport const InternalToggleButton = React.forwardRef(\n  (\n    {\n      pressed,\n      iconName: defaultIconName,\n      pressedIconName,\n      iconSvg: defaultIconSvg,\n      pressedIconSvg,\n      iconUrl: defaultIconUrl,\n      pressedIconUrl,\n      variant,\n      onChange,\n      className,\n      ...rest\n    }: ToggleButtonProps,\n    ref: React.Ref<ToggleButtonProps.Ref>\n  ) => {\n    if (isDevelopment) {\n      if (defaultIconName && !pressedIconName) {\n        warnOnce('ToggleButton', '`pressedIconName` must be provided for `pressed` state.');\n      }\n\n      if (defaultIconSvg && !pressedIconSvg) {\n        warnOnce('ToggleButton', '`pressedIconSvg` must be provided for `pressed` state.');\n      }\n\n      if (defaultIconUrl && !pressedIconUrl) {\n        warnOnce('ToggleButton', '`pressedIconUrl` must be provided for `pressed` state.');\n      }\n    }\n\n    return (\n      <InternalButton\n        className={clsx(className, styles[`variant-${variant}`], { [styles.pressed]: pressed })}\n        variant={variant}\n        formAction=\"none\"\n        iconName={getToggleIcon(pressed, defaultIconName, pressedIconName)}\n        iconUrl={getToggleIcon(pressed, defaultIconUrl, pressedIconUrl)}\n        iconSvg={getToggleIcon(pressed, defaultIconSvg, pressedIconSvg)}\n        aria-pressed={pressed}\n        onClick={event => {\n          event.preventDefault();\n\n          fireNonCancelableEvent(onChange, { pressed: !pressed });\n        }}\n        {...rest}\n        ref={ref}\n      />\n    );\n  }\n);\n\nexport default InternalToggleButton;\n"],"mappings":";AAAA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,MAAM;AAEvB,SAASC,QAAQ,QAAQ,+CAA+C;AAExE,OAAOC,cAAc,MAAM,oBAAoB;AAC/C,SAASC,sBAAsB,QAAQ,oBAAoB;AAC3D,SAASC,aAAa,QAAQ,4BAA4B;AAE1D,SAASC,aAAa,QAAQ,QAAQ;AAEtC,OAAOC,MAAM,MAAM,iBAAiB;AAEpC,OAAO,MAAMC,oBAAoB,GAAGR,KAAK,CAACS,UAAU,CAClD,CACEC,EAYoB,EACpBC,GAAqC,KACnC;MAdF;MACEC,OAAO;MACPC,QAAQ,EAAEC,eAAe;MACzBC,eAAe;MACfC,OAAO,EAAEC,cAAc;MACvBC,cAAc;MACdC,OAAO,EAAEC,cAAc;MACvBC,cAAc;MACdC,OAAO;MACPC,QAAQ;MACRC;IAAS,IAAAd,EAES;IADfe,IAAI,GAAAC,MAAA,CAAAhB,EAAA,EAXT,wIAYC,CADQ;EAIT,IAAIL,aAAa,EAAE;IACjB,IAAIS,eAAe,IAAI,CAACC,eAAe,EAAE;MACvCb,QAAQ,CAAC,cAAc,EAAE,yDAAyD,CAAC;;IAGrF,IAAIe,cAAc,IAAI,CAACC,cAAc,EAAE;MACrChB,QAAQ,CAAC,cAAc,EAAE,wDAAwD,CAAC;;IAGpF,IAAIkB,cAAc,IAAI,CAACC,cAAc,EAAE;MACrCnB,QAAQ,CAAC,cAAc,EAAE,wDAAwD,CAAC;;;EAItF,OACEF,KAAA,CAAA2B,aAAA,CAACxB,cAAc,EAAAyB,MAAA,CAAAC,MAAA;IACbL,SAAS,EAAEvB,IAAI,CAACuB,SAAS,EAAEjB,MAAM,CAAC,WAAWe,OAAO,EAAE,CAAC,EAAE;MAAE,CAACf,MAAM,CAACK,OAAO,GAAGA;IAAO,CAAE,CAAC;IACvFU,OAAO,EAAEA,OAAO;IAChBQ,UAAU,EAAC,MAAM;IACjBjB,QAAQ,EAAEP,aAAa,CAACM,OAAO,EAAEE,eAAe,EAAEC,eAAe,CAAC;IAClEI,OAAO,EAAEb,aAAa,CAACM,OAAO,EAAEQ,cAAc,EAAEC,cAAc,CAAC;IAC/DL,OAAO,EAAEV,aAAa,CAACM,OAAO,EAAEK,cAAc,EAAEC,cAAc,CAAC;IAAA,gBACjDN,OAAO;IACrBmB,OAAO,EAAEC,KAAK,IAAG;MACfA,KAAK,CAACC,cAAc,EAAE;MAEtB7B,sBAAsB,CAACmB,QAAQ,EAAE;QAAEX,OAAO,EAAE,CAACA;MAAO,CAAE,CAAC;IACzD;EAAC,GACGa,IAAI;IACRd,GAAG,EAAEA;EAAG,GACR;AAEN,CAAC,CACF;AAED,eAAeH,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}