{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport { getBaseProps } from '../internal/base-component';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport { InternalToggleButton } from './internal';\nconst ToggleButton = React.forwardRef((_a, ref) => {\n  var {\n      children,\n      iconName,\n      pressedIconName,\n      iconUrl,\n      pressedIconUrl,\n      iconSvg,\n      pressedIconSvg,\n      variant = 'normal',\n      loading = false,\n      loadingText,\n      disabled = false,\n      disabledReason,\n      wrapText = true,\n      ariaLabel,\n      ariaDescribedby,\n      ariaControls,\n      pressed = false,\n      onChange\n    } = _a,\n    props = __rest(_a, [\"children\", \"iconName\", \"pressedIconName\", \"iconUrl\", \"pressedIconUrl\", \"iconSvg\", \"pressedIconSvg\", \"variant\", \"loading\", \"loadingText\", \"disabled\", \"disabledReason\", \"wrapText\", \"ariaLabel\", \"ariaDescribedby\", \"ariaControls\", \"pressed\", \"onChange\"]);\n  const baseComponentProps = useBaseComponent('ToggleButton', {\n    props: {\n      iconName,\n      pressedIconName,\n      pressed,\n      variant,\n      wrapText\n    }\n  });\n  const baseProps = getBaseProps(props);\n  return React.createElement(InternalToggleButton, Object.assign({}, baseProps, baseComponentProps, {\n    ref: ref,\n    iconName: iconName,\n    iconUrl: iconUrl,\n    iconSvg: iconSvg,\n    variant: variant,\n    loading: loading,\n    loadingText: loadingText,\n    disabled: disabled,\n    disabledReason: disabledReason,\n    wrapText: wrapText,\n    ariaLabel: ariaLabel,\n    ariaDescribedby: ariaDescribedby,\n    ariaControls: ariaControls,\n    pressedIconName: pressedIconName,\n    pressedIconUrl: pressedIconUrl,\n    pressedIconSvg: pressedIconSvg,\n    pressed: pressed,\n    onChange: onChange\n  }), children);\n});\napplyDisplayName(ToggleButton, 'ToggleButton');\nexport default ToggleButton;","map":{"version":3,"names":["React","getBaseProps","useBaseComponent","applyDisplayName","InternalToggleButton","ToggleButton","forwardRef","_a","ref","children","iconName","pressedIconName","iconUrl","pressedIconUrl","iconSvg","pressedIconSvg","variant","loading","loadingText","disabled","disabledReason","wrapText","ariaLabel","ariaDescribedby","ariaControls","pressed","onChange","props","__rest","baseComponentProps","baseProps","createElement","Object","assign"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/toggle-button/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\n\nimport { getBaseProps } from '../internal/base-component';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport { ToggleButtonProps } from './interfaces';\nimport { InternalToggleButton } from './internal';\n\nexport { ToggleButtonProps };\n\nconst ToggleButton = React.forwardRef(\n  (\n    {\n      children,\n      iconName,\n      pressedIconName,\n      iconUrl,\n      pressedIconUrl,\n      iconSvg,\n      pressedIconSvg,\n      variant = 'normal',\n      loading = false,\n      loadingText,\n      disabled = false,\n      disabledReason,\n      wrapText = true,\n      ariaLabel,\n      ariaDescribedby,\n      ariaControls,\n      pressed = false,\n      onChange,\n      ...props\n    }: ToggleButtonProps,\n    ref: React.Ref<ToggleButtonProps.Ref>\n  ) => {\n    const baseComponentProps = useBaseComponent('ToggleButton', {\n      props: { iconName, pressedIconName, pressed, variant, wrapText },\n    });\n    const baseProps = getBaseProps(props);\n\n    return (\n      <InternalToggleButton\n        {...baseProps}\n        {...baseComponentProps}\n        ref={ref}\n        iconName={iconName}\n        iconUrl={iconUrl}\n        iconSvg={iconSvg}\n        variant={variant}\n        loading={loading}\n        loadingText={loadingText}\n        disabled={disabled}\n        disabledReason={disabledReason}\n        wrapText={wrapText}\n        ariaLabel={ariaLabel}\n        ariaDescribedby={ariaDescribedby}\n        ariaControls={ariaControls}\n        pressedIconName={pressedIconName}\n        pressedIconUrl={pressedIconUrl}\n        pressedIconSvg={pressedIconSvg}\n        pressed={pressed}\n        onChange={onChange}\n      >\n        {children}\n      </InternalToggleButton>\n    );\n  }\n);\n\napplyDisplayName(ToggleButton, 'ToggleButton');\nexport default ToggleButton;\n"],"mappings":";AAAA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,YAAY,QAAQ,4BAA4B;AACzD,OAAOC,gBAAgB,MAAM,sCAAsC;AACnE,SAASC,gBAAgB,QAAQ,sCAAsC;AAEvE,SAASC,oBAAoB,QAAQ,YAAY;AAIjD,MAAMC,YAAY,GAAGL,KAAK,CAACM,UAAU,CACnC,CACEC,EAoBoB,EACpBC,GAAqC,KACnC;MAtBF;MACEC,QAAQ;MACRC,QAAQ;MACRC,eAAe;MACfC,OAAO;MACPC,cAAc;MACdC,OAAO;MACPC,cAAc;MACdC,OAAO,GAAG,QAAQ;MAClBC,OAAO,GAAG,KAAK;MACfC,WAAW;MACXC,QAAQ,GAAG,KAAK;MAChBC,cAAc;MACdC,QAAQ,GAAG,IAAI;MACfC,SAAS;MACTC,eAAe;MACfC,YAAY;MACZC,OAAO,GAAG,KAAK;MACfC;IAAQ,IAAAnB,EAEU;IADfoB,KAAK,GAAAC,MAAA,CAAArB,EAAA,EAnBV,2PAoBC,CADS;EAIV,MAAMsB,kBAAkB,GAAG3B,gBAAgB,CAAC,cAAc,EAAE;IAC1DyB,KAAK,EAAE;MAAEjB,QAAQ;MAAEC,eAAe;MAAEc,OAAO;MAAET,OAAO;MAAEK;IAAQ;GAC/D,CAAC;EACF,MAAMS,SAAS,GAAG7B,YAAY,CAAC0B,KAAK,CAAC;EAErC,OACE3B,KAAA,CAAA+B,aAAA,CAAC3B,oBAAoB,EAAA4B,MAAA,CAAAC,MAAA,KACfH,SAAS,EACTD,kBAAkB;IACtBrB,GAAG,EAAEA,GAAG;IACRE,QAAQ,EAAEA,QAAQ;IAClBE,OAAO,EAAEA,OAAO;IAChBE,OAAO,EAAEA,OAAO;IAChBE,OAAO,EAAEA,OAAO;IAChBC,OAAO,EAAEA,OAAO;IAChBC,WAAW,EAAEA,WAAW;IACxBC,QAAQ,EAAEA,QAAQ;IAClBC,cAAc,EAAEA,cAAc;IAC9BC,QAAQ,EAAEA,QAAQ;IAClBC,SAAS,EAAEA,SAAS;IACpBC,eAAe,EAAEA,eAAe;IAChCC,YAAY,EAAEA,YAAY;IAC1Bb,eAAe,EAAEA,eAAe;IAChCE,cAAc,EAAEA,cAAc;IAC9BE,cAAc,EAAEA,cAAc;IAC9BU,OAAO,EAAEA,OAAO;IAChBC,QAAQ,EAAEA;EAAQ,IAEjBjB,QAAQ,CACY;AAE3B,CAAC,CACF;AAEDN,gBAAgB,CAACE,YAAY,EAAE,cAAc,CAAC;AAC9C,eAAeA,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}