{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useImperativeHandle, useState } from 'react';\nimport ScreenreaderOnly from '../../internal/components/screenreader-only';\nimport { fireNonCancelableEvent } from '../../internal/events';\nimport { useControllable } from '../../internal/hooks/use-controllable';\nimport { useMobile } from '../../internal/hooks/use-mobile';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport { useGetGlobalBreadcrumbs } from '../../internal/plugins/helpers/use-global-breadcrumbs';\nimport globalVars from '../../internal/styles/global-vars';\nimport { getSplitPanelDefaultSize } from '../../split-panel/utils/size-utils';\nimport { MIN_DRAWER_SIZE, useDrawers } from '../utils/use-drawers';\nimport { useFocusControl, useMultipleFocusControl } from '../utils/use-focus-control';\nimport { useSplitPanelFocusControl } from '../utils/use-split-panel-focus-control';\nimport { ActiveDrawersContext } from '../utils/visibility-context';\nimport { computeHorizontalLayout, computeVerticalLayout } from './compute-layout';\nimport { AppLayoutDrawer, AppLayoutGlobalDrawers, AppLayoutNavigation, AppLayoutNotifications, AppLayoutSplitPanelBottom, AppLayoutSplitPanelSide, AppLayoutToolbar } from './internal';\nimport { useMultiAppLayout } from './multi-layout';\nimport { SkeletonLayout } from './skeleton';\nconst AppLayoutVisualRefreshToolbar = React.forwardRef((_a, forwardRef) => {\n  var _b, _c;\n  var {\n      ariaLabels,\n      contentHeader,\n      content,\n      navigationOpen,\n      navigationWidth,\n      navigation,\n      navigationHide,\n      onNavigationChange,\n      tools,\n      toolsOpen: controlledToolsOpen,\n      onToolsChange,\n      toolsHide,\n      toolsWidth,\n      contentType,\n      headerVariant,\n      breadcrumbs,\n      notifications,\n      stickyNotifications,\n      splitPanelPreferences: controlledSplitPanelPreferences,\n      splitPanelOpen: controlledSplitPanelOpen,\n      splitPanel,\n      splitPanelSize: controlledSplitPanelSize,\n      onSplitPanelToggle,\n      onSplitPanelResize,\n      onSplitPanelPreferencesChange,\n      disableContentPaddings,\n      minContentWidth,\n      maxContentWidth,\n      placement\n    } = _a,\n    rest = __rest(_a, [\"ariaLabels\", \"contentHeader\", \"content\", \"navigationOpen\", \"navigationWidth\", \"navigation\", \"navigationHide\", \"onNavigationChange\", \"tools\", \"toolsOpen\", \"onToolsChange\", \"toolsHide\", \"toolsWidth\", \"contentType\", \"headerVariant\", \"breadcrumbs\", \"notifications\", \"stickyNotifications\", \"splitPanelPreferences\", \"splitPanelOpen\", \"splitPanel\", \"splitPanelSize\", \"onSplitPanelToggle\", \"onSplitPanelResize\", \"onSplitPanelPreferencesChange\", \"disableContentPaddings\", \"minContentWidth\", \"maxContentWidth\", \"placement\"]);\n  const isMobile = useMobile();\n  const {\n    __embeddedViewMode: embeddedViewMode,\n    __forceDeduplicationType: forceDeduplicationType\n  } = rest;\n  const splitPanelControlId = useUniqueId('split-panel');\n  const [toolbarState, setToolbarState] = useState('show');\n  const [toolbarHeight, setToolbarHeight] = useState(0);\n  const [notificationsHeight, setNotificationsHeight] = useState(0);\n  const onNavigationToggle = open => {\n    navigationFocusControl.setFocus();\n    fireNonCancelableEvent(onNavigationChange, {\n      open\n    });\n  };\n  const [toolsOpen = false, setToolsOpen] = useControllable(controlledToolsOpen, onToolsChange, false, {\n    componentName: 'AppLayout',\n    controlledProp: 'toolsOpen',\n    changeHandler: 'onToolsChange'\n  });\n  const onToolsToggle = open => {\n    setToolsOpen(open);\n    drawersFocusControl.setFocus();\n    fireNonCancelableEvent(onToolsChange, {\n      open\n    });\n  };\n  const onGlobalDrawerFocus = (drawerId, open) => {\n    globalDrawersFocusControl.setFocus({\n      force: true,\n      drawerId,\n      open\n    });\n  };\n  const onAddNewActiveDrawer = drawerId => {\n    var _a, _b, _c;\n    // If a local drawer is already open, and we attempt to open a new one,\n    // it will replace the existing one instead of opening an additional drawer,\n    // since only one local drawer is supported. Therefore, layout calculations are not necessary.\n    if (activeDrawer && (drawers === null || drawers === void 0 ? void 0 : drawers.find(drawer => drawer.id === drawerId))) {\n      return;\n    }\n    // get the size of drawerId. it could be either local or global drawer\n    const combinedDrawers = [...(drawers || []), ...globalDrawers];\n    const newDrawer = combinedDrawers.find(drawer => drawer.id === drawerId);\n    if (!newDrawer) {\n      return;\n    }\n    const newDrawerSize = Math.min((_b = (_a = newDrawer.defaultSize) !== null && _a !== void 0 ? _a : drawerSizes[drawerId]) !== null && _b !== void 0 ? _b : MIN_DRAWER_SIZE, MIN_DRAWER_SIZE);\n    //   check if the active drawers could be resized to fit the new drawers\n    //   to do this, we need to take all active drawers, sum up their min sizes, truncate it from resizableSpaceAvailable\n    //   and compare a given number with the new drawer id min size\n    // the total size of all global drawers resized to their min size\n    let totalActiveDrawersMinSize = activeGlobalDrawersIds.map(activeDrawerId => {\n      var _a, _b;\n      return (_b = (_a = combinedDrawers.find(drawer => drawer.id === activeDrawerId)) === null || _a === void 0 ? void 0 : _a.defaultSize) !== null && _b !== void 0 ? _b : MIN_DRAWER_SIZE;\n    }).reduce((acc, curr) => acc + curr, 0);\n    if (activeDrawer) {\n      totalActiveDrawersMinSize += Math.min((_c = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.defaultSize) !== null && _c !== void 0 ? _c : MIN_DRAWER_SIZE, MIN_DRAWER_SIZE);\n    }\n    const availableSpaceForNewDrawer = resizableSpaceAvailable - totalActiveDrawersMinSize;\n    if (availableSpaceForNewDrawer >= newDrawerSize) {\n      return;\n    }\n    // now we made sure we cannot accommodate the new drawer with existing ones\n    const drawerToClose = drawersOpenQueue[drawersOpenQueue.length - 1];\n    if (activeDrawer && (activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id) === drawerToClose) {\n      onActiveDrawerChange(null);\n    } else if (activeGlobalDrawersIds.includes(drawerToClose)) {\n      onActiveGlobalDrawersChange(drawerToClose);\n    }\n  };\n  const {\n    drawers,\n    activeDrawer,\n    minDrawerSize,\n    minGlobalDrawersSizes,\n    activeDrawerSize,\n    ariaLabelsWithDrawers,\n    globalDrawers,\n    activeGlobalDrawers,\n    activeGlobalDrawersIds,\n    activeGlobalDrawersSizes,\n    drawerSizes,\n    drawersOpenQueue,\n    onActiveDrawerChange,\n    onActiveDrawerResize,\n    onActiveGlobalDrawersChange\n  } = useDrawers(Object.assign(Object.assign({}, rest), {\n    onGlobalDrawerFocus,\n    onAddNewActiveDrawer\n  }), ariaLabels, {\n    ariaLabels,\n    toolsHide,\n    toolsOpen,\n    tools,\n    toolsWidth,\n    onToolsToggle\n  });\n  const onActiveDrawerChangeHandler = drawerId => {\n    onActiveDrawerChange(drawerId);\n    drawersFocusControl.setFocus();\n  };\n  const [splitPanelOpen = false, setSplitPanelOpen] = useControllable(controlledSplitPanelOpen, onSplitPanelToggle, false, {\n    componentName: 'AppLayout',\n    controlledProp: 'splitPanelOpen',\n    changeHandler: 'onSplitPanelToggle'\n  });\n  const onSplitPanelToggleHandler = () => {\n    setSplitPanelOpen(!splitPanelOpen);\n    splitPanelFocusControl.setLastInteraction({\n      type: splitPanelOpen ? 'close' : 'open'\n    });\n    fireNonCancelableEvent(onSplitPanelToggle, {\n      open: !splitPanelOpen\n    });\n  };\n  const [splitPanelPreferences, setSplitPanelPreferences] = useControllable(controlledSplitPanelPreferences, onSplitPanelPreferencesChange, undefined, {\n    componentName: 'AppLayout',\n    controlledProp: 'splitPanelPreferences',\n    changeHandler: 'onSplitPanelPreferencesChange'\n  });\n  const onSplitPanelPreferencesChangeHandler = detail => {\n    setSplitPanelPreferences(detail);\n    splitPanelFocusControl.setLastInteraction({\n      type: 'position'\n    });\n    fireNonCancelableEvent(onSplitPanelPreferencesChange, detail);\n  };\n  const [splitPanelSize = 0, setSplitPanelSize] = useControllable(controlledSplitPanelSize, onSplitPanelResize, getSplitPanelDefaultSize((_b = splitPanelPreferences === null || splitPanelPreferences === void 0 ? void 0 : splitPanelPreferences.position) !== null && _b !== void 0 ? _b : 'bottom'), {\n    componentName: 'AppLayout',\n    controlledProp: 'splitPanelSize',\n    changeHandler: 'onSplitPanelResize'\n  });\n  const [splitPanelReportedSize, setSplitPanelReportedSize] = useState(0);\n  const onSplitPanelResizeHandler = size => {\n    setSplitPanelSize(size);\n    fireNonCancelableEvent(onSplitPanelResize, {\n      size\n    });\n  };\n  const [splitPanelToggleConfig, setSplitPanelToggleConfig] = useState({\n    ariaLabel: undefined,\n    displayed: false\n  });\n  const globalDrawersFocusControl = useMultipleFocusControl(true, activeGlobalDrawersIds);\n  const drawersFocusControl = useFocusControl(!!(activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id), true, activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id);\n  const navigationFocusControl = useFocusControl(navigationOpen);\n  const splitPanelFocusControl = useSplitPanelFocusControl([splitPanelPreferences, splitPanelOpen]);\n  useImperativeHandle(forwardRef, () => ({\n    closeNavigationIfNecessary: () => isMobile && onNavigationToggle(false),\n    openTools: () => onToolsToggle(true),\n    focusToolsClose: () => drawersFocusControl.setFocus(true),\n    focusActiveDrawer: () => drawersFocusControl.setFocus(true),\n    focusSplitPanel: () => {\n      var _a;\n      return (_a = splitPanelFocusControl.refs.slider.current) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n  }));\n  const resolvedNavigation = navigationHide ? null : navigation !== null && navigation !== void 0 ? navigation : React.createElement(React.Fragment, null);\n  const resolvedStickyNotifications = !!stickyNotifications && !isMobile;\n  const {\n    maxDrawerSize,\n    maxSplitPanelSize,\n    splitPanelForcedPosition,\n    splitPanelPosition,\n    maxGlobalDrawersSizes,\n    resizableSpaceAvailable\n  } = computeHorizontalLayout({\n    activeDrawerSize: activeDrawer ? activeDrawerSize : 0,\n    splitPanelSize,\n    minContentWidth,\n    navigationOpen: !!resolvedNavigation && navigationOpen,\n    navigationWidth,\n    placement,\n    splitPanelOpen,\n    splitPanelPosition: splitPanelPreferences === null || splitPanelPreferences === void 0 ? void 0 : splitPanelPreferences.position,\n    isMobile,\n    activeGlobalDrawersSizes\n  });\n  const {\n    registered,\n    toolbarProps\n  } = useMultiAppLayout({\n    forceDeduplicationType,\n    ariaLabels: ariaLabelsWithDrawers,\n    navigation: resolvedNavigation,\n    navigationOpen,\n    onNavigationToggle,\n    navigationFocusRef: navigationFocusControl.refs.toggle,\n    breadcrumbs,\n    activeDrawerId: (_c = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id) !== null && _c !== void 0 ? _c : null,\n    // only pass it down if there are non-empty drawers or tools\n    drawers: (drawers === null || drawers === void 0 ? void 0 : drawers.length) || !toolsHide ? drawers : undefined,\n    onActiveDrawerChange: onActiveDrawerChangeHandler,\n    drawersFocusRef: drawersFocusControl.refs.toggle,\n    splitPanel,\n    splitPanelToggleProps: Object.assign(Object.assign({}, splitPanelToggleConfig), {\n      active: splitPanelOpen,\n      controlId: splitPanelControlId,\n      position: splitPanelPosition\n    }),\n    splitPanelFocusRef: splitPanelFocusControl.refs.toggle,\n    onSplitPanelToggle: onSplitPanelToggleHandler\n  });\n  const hasToolbar = !embeddedViewMode && !!toolbarProps;\n  const discoveredBreadcrumbs = useGetGlobalBreadcrumbs(hasToolbar);\n  const verticalOffsets = computeVerticalLayout({\n    topOffset: placement.insetBlockStart,\n    hasVisibleToolbar: hasToolbar && toolbarState !== 'hide',\n    notificationsHeight: notificationsHeight !== null && notificationsHeight !== void 0 ? notificationsHeight : 0,\n    toolbarHeight: toolbarHeight !== null && toolbarHeight !== void 0 ? toolbarHeight : 0,\n    stickyNotifications: resolvedStickyNotifications\n  });\n  const appLayoutInternals = {\n    ariaLabels: ariaLabelsWithDrawers,\n    headerVariant,\n    isMobile,\n    breadcrumbs,\n    discoveredBreadcrumbs,\n    stickyNotifications: resolvedStickyNotifications,\n    navigationOpen,\n    navigation: resolvedNavigation,\n    navigationFocusControl,\n    activeDrawer,\n    activeDrawerSize,\n    minDrawerSize,\n    maxDrawerSize,\n    minGlobalDrawersSizes,\n    maxGlobalDrawersSizes,\n    drawers: drawers,\n    globalDrawers,\n    activeGlobalDrawers,\n    activeGlobalDrawersIds,\n    activeGlobalDrawersSizes,\n    onActiveGlobalDrawersChange,\n    drawersFocusControl,\n    globalDrawersFocusControl,\n    splitPanelPosition,\n    splitPanelToggleConfig,\n    splitPanelOpen,\n    splitPanelControlId,\n    splitPanelFocusControl,\n    placement,\n    toolbarState,\n    setToolbarState,\n    verticalOffsets,\n    drawersOpenQueue,\n    setToolbarHeight,\n    setNotificationsHeight,\n    onSplitPanelToggle: onSplitPanelToggleHandler,\n    onNavigationToggle,\n    onActiveDrawerChange: onActiveDrawerChangeHandler,\n    onActiveDrawerResize\n  };\n  const splitPanelInternals = {\n    bottomOffset: 0,\n    getMaxHeight: () => {\n      const availableHeight = document.documentElement.clientHeight - placement.insetBlockStart - placement.insetBlockEnd;\n      // If the page is likely zoomed in at 200%, allow the split panel to fill the content area.\n      return availableHeight < 400 ? availableHeight - 40 : availableHeight - 250;\n    },\n    maxWidth: maxSplitPanelSize,\n    isForcedPosition: splitPanelForcedPosition,\n    isOpen: splitPanelOpen,\n    leftOffset: 0,\n    onPreferencesChange: onSplitPanelPreferencesChangeHandler,\n    onResize: onSplitPanelResizeHandler,\n    onToggle: onSplitPanelToggleHandler,\n    position: splitPanelPosition,\n    reportSize: size => setSplitPanelReportedSize(size),\n    reportHeaderHeight: () => {\n      /*unused in this design*/\n    },\n    rightOffset: 0,\n    size: splitPanelSize,\n    topOffset: 0,\n    setSplitPanelToggle: setSplitPanelToggleConfig,\n    refs: splitPanelFocusControl.refs\n  };\n  useEffect(() => {\n    // Close navigation drawer on mobile so that the main content is visible\n    if (isMobile) {\n      onNavigationToggle(false);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isMobile]);\n  return React.createElement(React.Fragment, null, !hasToolbar && breadcrumbs ? React.createElement(ScreenreaderOnly, null, breadcrumbs) : null, React.createElement(SkeletonLayout, {\n    style: Object.assign({\n      [globalVars.stickyVerticalTopOffset]: `${verticalOffsets.header}px`,\n      [globalVars.stickyVerticalBottomOffset]: `${placement.insetBlockEnd}px`,\n      paddingBlockEnd: splitPanelOpen && splitPanelPosition === 'bottom' ? splitPanelReportedSize : ''\n    }, !isMobile ? {\n      minWidth: `${minContentWidth}px`\n    } : {}),\n    toolbar: hasToolbar && React.createElement(AppLayoutToolbar, {\n      appLayoutInternals: appLayoutInternals,\n      toolbarProps: toolbarProps\n    }),\n    notifications: notifications && React.createElement(AppLayoutNotifications, {\n      appLayoutInternals: appLayoutInternals\n    }, notifications),\n    headerVariant: headerVariant,\n    contentHeader: contentHeader,\n    // delay rendering the content until registration of this instance is complete\n    content: registered ? content : null,\n    navigation: resolvedNavigation && React.createElement(AppLayoutNavigation, {\n      appLayoutInternals: appLayoutInternals\n    }),\n    navigationOpen: navigationOpen,\n    navigationWidth: navigationWidth,\n    tools: drawers && drawers.length > 0 && React.createElement(AppLayoutDrawer, {\n      appLayoutInternals: appLayoutInternals\n    }),\n    globalTools: React.createElement(ActiveDrawersContext.Provider, {\n      value: activeGlobalDrawersIds\n    }, React.createElement(AppLayoutGlobalDrawers, {\n      appLayoutInternals: appLayoutInternals\n    })),\n    globalToolsOpen: !!activeGlobalDrawersIds.length,\n    toolsOpen: !!activeDrawer,\n    toolsWidth: activeDrawerSize,\n    sideSplitPanel: splitPanelPosition === 'side' && React.createElement(AppLayoutSplitPanelSide, {\n      appLayoutInternals: appLayoutInternals,\n      splitPanelInternals: splitPanelInternals\n    }, splitPanel),\n    bottomSplitPanel: splitPanelPosition === 'bottom' && React.createElement(AppLayoutSplitPanelBottom, {\n      appLayoutInternals: appLayoutInternals,\n      splitPanelInternals: splitPanelInternals\n    }, splitPanel),\n    splitPanelOpen: splitPanelOpen,\n    placement: placement,\n    contentType: contentType,\n    maxContentWidth: maxContentWidth,\n    disableContentPaddings: disableContentPaddings\n  }));\n});\nexport default AppLayoutVisualRefreshToolbar;","map":{"version":3,"names":["React","useEffect","useImperativeHandle","useState","ScreenreaderOnly","fireNonCancelableEvent","useControllable","useMobile","useUniqueId","useGetGlobalBreadcrumbs","globalVars","getSplitPanelDefaultSize","MIN_DRAWER_SIZE","useDrawers","useFocusControl","useMultipleFocusControl","useSplitPanelFocusControl","ActiveDrawersContext","computeHorizontalLayout","computeVerticalLayout","AppLayoutDrawer","AppLayoutGlobalDrawers","AppLayoutNavigation","AppLayoutNotifications","AppLayoutSplitPanelBottom","AppLayoutSplitPanelSide","AppLayoutToolbar","useMultiAppLayout","SkeletonLayout","AppLayoutVisualRefreshToolbar","forwardRef","_a","ariaLabels","contentHeader","content","navigationOpen","navigationWidth","navigation","navigationHide","onNavigationChange","tools","toolsOpen","controlledToolsOpen","onToolsChange","toolsHide","toolsWidth","contentType","headerVariant","breadcrumbs","notifications","stickyNotifications","splitPanelPreferences","controlledSplitPanelPreferences","splitPanelOpen","controlledSplitPanelOpen","splitPanel","splitPanelSize","controlledSplitPanelSize","onSplitPanelToggle","onSplitPanelResize","onSplitPanelPreferencesChange","disableContentPaddings","minContentWidth","maxContentWidth","placement","rest","__rest","isMobile","__embeddedViewMode","embeddedViewMode","__forceDeduplicationType","forceDeduplicationType","splitPanelControlId","toolbarState","setToolbarState","toolbarHeight","setToolbarHeight","notificationsHeight","setNotificationsHeight","onNavigationToggle","open","navigationFocusControl","setFocus","setToolsOpen","componentName","controlledProp","changeHandler","onToolsToggle","drawersFocusControl","onGlobalDrawerFocus","drawerId","globalDrawersFocusControl","force","onAddNewActiveDrawer","activeDrawer","drawers","find","drawer","id","combinedDrawers","globalDrawers","newDrawer","newDrawerSize","Math","min","_b","defaultSize","drawerSizes","totalActiveDrawersMinSize","activeGlobalDrawersIds","map","activeDrawerId","reduce","acc","curr","_c","availableSpaceForNewDrawer","resizableSpaceAvailable","drawerToClose","drawersOpenQueue","length","onActiveDrawerChange","includes","onActiveGlobalDrawersChange","minDrawerSize","minGlobalDrawersSizes","activeDrawerSize","ariaLabelsWithDrawers","activeGlobalDrawers","activeGlobalDrawersSizes","onActiveDrawerResize","Object","assign","onActiveDrawerChangeHandler","setSplitPanelOpen","onSplitPanelToggleHandler","splitPanelFocusControl","setLastInteraction","type","setSplitPanelPreferences","undefined","onSplitPanelPreferencesChangeHandler","detail","setSplitPanelSize","position","splitPanelReportedSize","setSplitPanelReportedSize","onSplitPanelResizeHandler","size","splitPanelToggleConfig","setSplitPanelToggleConfig","ariaLabel","displayed","closeNavigationIfNecessary","openTools","focusToolsClose","focusActiveDrawer","focusSplitPanel","refs","slider","current","focus","resolvedNavigation","createElement","Fragment","resolvedStickyNotifications","maxDrawerSize","maxSplitPanelSize","splitPanelForcedPosition","splitPanelPosition","maxGlobalDrawersSizes","registered","toolbarProps","navigationFocusRef","toggle","drawersFocusRef","splitPanelToggleProps","active","controlId","splitPanelFocusRef","hasToolbar","discoveredBreadcrumbs","verticalOffsets","topOffset","insetBlockStart","hasVisibleToolbar","appLayoutInternals","splitPanelInternals","bottomOffset","getMaxHeight","availableHeight","document","documentElement","clientHeight","insetBlockEnd","maxWidth","isForcedPosition","isOpen","leftOffset","onPreferencesChange","onResize","onToggle","reportSize","reportHeaderHeight","rightOffset","setSplitPanelToggle","style","stickyVerticalTopOffset","header","stickyVerticalBottomOffset","paddingBlockEnd","minWidth","toolbar","globalTools","Provider","value","globalToolsOpen","sideSplitPanel","bottomSplitPanel"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/app-layout/visual-refresh-toolbar/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useImperativeHandle, useState } from 'react';\n\nimport ScreenreaderOnly from '../../internal/components/screenreader-only';\nimport { SplitPanelSideToggleProps } from '../../internal/context/split-panel-context';\nimport { fireNonCancelableEvent } from '../../internal/events';\nimport { useControllable } from '../../internal/hooks/use-controllable';\nimport { useMobile } from '../../internal/hooks/use-mobile';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport { useGetGlobalBreadcrumbs } from '../../internal/plugins/helpers/use-global-breadcrumbs';\nimport globalVars from '../../internal/styles/global-vars';\nimport { getSplitPanelDefaultSize } from '../../split-panel/utils/size-utils';\nimport { AppLayoutProps, AppLayoutPropsWithDefaults } from '../interfaces';\nimport { SplitPanelProviderProps } from '../split-panel';\nimport { MIN_DRAWER_SIZE, useDrawers } from '../utils/use-drawers';\nimport { useFocusControl, useMultipleFocusControl } from '../utils/use-focus-control';\nimport { useSplitPanelFocusControl } from '../utils/use-split-panel-focus-control';\nimport { ActiveDrawersContext } from '../utils/visibility-context';\nimport { computeHorizontalLayout, computeVerticalLayout } from './compute-layout';\nimport { AppLayoutInternals } from './interfaces';\nimport {\n  AppLayoutDrawer,\n  AppLayoutGlobalDrawers,\n  AppLayoutNavigation,\n  AppLayoutNotifications,\n  AppLayoutSplitPanelBottom,\n  AppLayoutSplitPanelSide,\n  AppLayoutToolbar,\n} from './internal';\nimport { useMultiAppLayout } from './multi-layout';\nimport { SkeletonLayout } from './skeleton';\n\nconst AppLayoutVisualRefreshToolbar = React.forwardRef<AppLayoutProps.Ref, AppLayoutPropsWithDefaults>(\n  (\n    {\n      ariaLabels,\n      contentHeader,\n      content,\n      navigationOpen,\n      navigationWidth,\n      navigation,\n      navigationHide,\n      onNavigationChange,\n      tools,\n      toolsOpen: controlledToolsOpen,\n      onToolsChange,\n      toolsHide,\n      toolsWidth,\n      contentType,\n      headerVariant,\n      breadcrumbs,\n      notifications,\n      stickyNotifications,\n      splitPanelPreferences: controlledSplitPanelPreferences,\n      splitPanelOpen: controlledSplitPanelOpen,\n      splitPanel,\n      splitPanelSize: controlledSplitPanelSize,\n      onSplitPanelToggle,\n      onSplitPanelResize,\n      onSplitPanelPreferencesChange,\n      disableContentPaddings,\n      minContentWidth,\n      maxContentWidth,\n      placement,\n      ...rest\n    },\n    forwardRef\n  ) => {\n    const isMobile = useMobile();\n    const { __embeddedViewMode: embeddedViewMode, __forceDeduplicationType: forceDeduplicationType } = rest as any;\n    const splitPanelControlId = useUniqueId('split-panel');\n    const [toolbarState, setToolbarState] = useState<'show' | 'hide'>('show');\n    const [toolbarHeight, setToolbarHeight] = useState(0);\n    const [notificationsHeight, setNotificationsHeight] = useState(0);\n\n    const onNavigationToggle = (open: boolean) => {\n      navigationFocusControl.setFocus();\n      fireNonCancelableEvent(onNavigationChange, { open });\n    };\n\n    const [toolsOpen = false, setToolsOpen] = useControllable(controlledToolsOpen, onToolsChange, false, {\n      componentName: 'AppLayout',\n      controlledProp: 'toolsOpen',\n      changeHandler: 'onToolsChange',\n    });\n    const onToolsToggle = (open: boolean) => {\n      setToolsOpen(open);\n      drawersFocusControl.setFocus();\n      fireNonCancelableEvent(onToolsChange, { open });\n    };\n\n    const onGlobalDrawerFocus = (drawerId: string, open: boolean) => {\n      globalDrawersFocusControl.setFocus({ force: true, drawerId, open });\n    };\n\n    const onAddNewActiveDrawer = (drawerId: string) => {\n      // If a local drawer is already open, and we attempt to open a new one,\n      // it will replace the existing one instead of opening an additional drawer,\n      // since only one local drawer is supported. Therefore, layout calculations are not necessary.\n      if (activeDrawer && drawers?.find(drawer => drawer.id === drawerId)) {\n        return;\n      }\n      // get the size of drawerId. it could be either local or global drawer\n      const combinedDrawers = [...(drawers || []), ...globalDrawers];\n      const newDrawer = combinedDrawers.find(drawer => drawer.id === drawerId);\n      if (!newDrawer) {\n        return;\n      }\n      const newDrawerSize = Math.min(\n        newDrawer.defaultSize ?? drawerSizes[drawerId] ?? MIN_DRAWER_SIZE,\n        MIN_DRAWER_SIZE\n      );\n      //   check if the active drawers could be resized to fit the new drawers\n      //   to do this, we need to take all active drawers, sum up their min sizes, truncate it from resizableSpaceAvailable\n      //   and compare a given number with the new drawer id min size\n\n      // the total size of all global drawers resized to their min size\n      let totalActiveDrawersMinSize = activeGlobalDrawersIds\n        .map(\n          activeDrawerId => combinedDrawers.find(drawer => drawer.id === activeDrawerId)?.defaultSize ?? MIN_DRAWER_SIZE\n        )\n        .reduce((acc, curr) => acc + curr, 0);\n      if (activeDrawer) {\n        totalActiveDrawersMinSize += Math.min(activeDrawer?.defaultSize ?? MIN_DRAWER_SIZE, MIN_DRAWER_SIZE);\n      }\n\n      const availableSpaceForNewDrawer = resizableSpaceAvailable - totalActiveDrawersMinSize;\n      if (availableSpaceForNewDrawer >= newDrawerSize) {\n        return;\n      }\n\n      // now we made sure we cannot accommodate the new drawer with existing ones\n      const drawerToClose = drawersOpenQueue[drawersOpenQueue.length - 1];\n      if (activeDrawer && activeDrawer?.id === drawerToClose) {\n        onActiveDrawerChange(null);\n      } else if (activeGlobalDrawersIds.includes(drawerToClose)) {\n        onActiveGlobalDrawersChange(drawerToClose);\n      }\n    };\n\n    const {\n      drawers,\n      activeDrawer,\n      minDrawerSize,\n      minGlobalDrawersSizes,\n      activeDrawerSize,\n      ariaLabelsWithDrawers,\n      globalDrawers,\n      activeGlobalDrawers,\n      activeGlobalDrawersIds,\n      activeGlobalDrawersSizes,\n      drawerSizes,\n      drawersOpenQueue,\n      onActiveDrawerChange,\n      onActiveDrawerResize,\n      onActiveGlobalDrawersChange,\n    } = useDrawers({ ...rest, onGlobalDrawerFocus, onAddNewActiveDrawer }, ariaLabels, {\n      ariaLabels,\n      toolsHide,\n      toolsOpen,\n      tools,\n      toolsWidth,\n      onToolsToggle,\n    });\n\n    const onActiveDrawerChangeHandler = (drawerId: string | null) => {\n      onActiveDrawerChange(drawerId);\n      drawersFocusControl.setFocus();\n    };\n\n    const [splitPanelOpen = false, setSplitPanelOpen] = useControllable(\n      controlledSplitPanelOpen,\n      onSplitPanelToggle,\n      false,\n      {\n        componentName: 'AppLayout',\n        controlledProp: 'splitPanelOpen',\n        changeHandler: 'onSplitPanelToggle',\n      }\n    );\n\n    const onSplitPanelToggleHandler = () => {\n      setSplitPanelOpen(!splitPanelOpen);\n      splitPanelFocusControl.setLastInteraction({ type: splitPanelOpen ? 'close' : 'open' });\n      fireNonCancelableEvent(onSplitPanelToggle, { open: !splitPanelOpen });\n    };\n\n    const [splitPanelPreferences, setSplitPanelPreferences] = useControllable(\n      controlledSplitPanelPreferences,\n      onSplitPanelPreferencesChange,\n      undefined,\n      {\n        componentName: 'AppLayout',\n        controlledProp: 'splitPanelPreferences',\n        changeHandler: 'onSplitPanelPreferencesChange',\n      }\n    );\n\n    const onSplitPanelPreferencesChangeHandler = (detail: AppLayoutProps.SplitPanelPreferences) => {\n      setSplitPanelPreferences(detail);\n      splitPanelFocusControl.setLastInteraction({ type: 'position' });\n      fireNonCancelableEvent(onSplitPanelPreferencesChange, detail);\n    };\n\n    const [splitPanelSize = 0, setSplitPanelSize] = useControllable(\n      controlledSplitPanelSize,\n      onSplitPanelResize,\n      getSplitPanelDefaultSize(splitPanelPreferences?.position ?? 'bottom'),\n      { componentName: 'AppLayout', controlledProp: 'splitPanelSize', changeHandler: 'onSplitPanelResize' }\n    );\n\n    const [splitPanelReportedSize, setSplitPanelReportedSize] = useState(0);\n\n    const onSplitPanelResizeHandler = (size: number) => {\n      setSplitPanelSize(size);\n      fireNonCancelableEvent(onSplitPanelResize, { size });\n    };\n\n    const [splitPanelToggleConfig, setSplitPanelToggleConfig] = useState<SplitPanelSideToggleProps>({\n      ariaLabel: undefined,\n      displayed: false,\n    });\n\n    const globalDrawersFocusControl = useMultipleFocusControl(true, activeGlobalDrawersIds);\n    const drawersFocusControl = useFocusControl(!!activeDrawer?.id, true, activeDrawer?.id);\n    const navigationFocusControl = useFocusControl(navigationOpen);\n    const splitPanelFocusControl = useSplitPanelFocusControl([splitPanelPreferences, splitPanelOpen]);\n\n    useImperativeHandle(forwardRef, () => ({\n      closeNavigationIfNecessary: () => isMobile && onNavigationToggle(false),\n      openTools: () => onToolsToggle(true),\n      focusToolsClose: () => drawersFocusControl.setFocus(true),\n      focusActiveDrawer: () => drawersFocusControl.setFocus(true),\n      focusSplitPanel: () => splitPanelFocusControl.refs.slider.current?.focus(),\n    }));\n\n    const resolvedNavigation = navigationHide ? null : navigation ?? <></>;\n    const resolvedStickyNotifications = !!stickyNotifications && !isMobile;\n    const {\n      maxDrawerSize,\n      maxSplitPanelSize,\n      splitPanelForcedPosition,\n      splitPanelPosition,\n      maxGlobalDrawersSizes,\n      resizableSpaceAvailable,\n    } = computeHorizontalLayout({\n      activeDrawerSize: activeDrawer ? activeDrawerSize : 0,\n      splitPanelSize,\n      minContentWidth,\n      navigationOpen: !!resolvedNavigation && navigationOpen,\n      navigationWidth,\n      placement,\n      splitPanelOpen,\n      splitPanelPosition: splitPanelPreferences?.position,\n      isMobile,\n      activeGlobalDrawersSizes,\n    });\n\n    const { registered, toolbarProps } = useMultiAppLayout({\n      forceDeduplicationType,\n      ariaLabels: ariaLabelsWithDrawers,\n      navigation: resolvedNavigation,\n      navigationOpen,\n      onNavigationToggle,\n      navigationFocusRef: navigationFocusControl.refs.toggle,\n      breadcrumbs,\n      activeDrawerId: activeDrawer?.id ?? null,\n      // only pass it down if there are non-empty drawers or tools\n      drawers: drawers?.length || !toolsHide ? drawers : undefined,\n      onActiveDrawerChange: onActiveDrawerChangeHandler,\n      drawersFocusRef: drawersFocusControl.refs.toggle,\n      splitPanel,\n      splitPanelToggleProps: {\n        ...splitPanelToggleConfig,\n        active: splitPanelOpen,\n        controlId: splitPanelControlId,\n        position: splitPanelPosition,\n      },\n      splitPanelFocusRef: splitPanelFocusControl.refs.toggle,\n      onSplitPanelToggle: onSplitPanelToggleHandler,\n    });\n\n    const hasToolbar = !embeddedViewMode && !!toolbarProps;\n    const discoveredBreadcrumbs = useGetGlobalBreadcrumbs(hasToolbar);\n\n    const verticalOffsets = computeVerticalLayout({\n      topOffset: placement.insetBlockStart,\n      hasVisibleToolbar: hasToolbar && toolbarState !== 'hide',\n      notificationsHeight: notificationsHeight ?? 0,\n      toolbarHeight: toolbarHeight ?? 0,\n      stickyNotifications: resolvedStickyNotifications,\n    });\n\n    const appLayoutInternals: AppLayoutInternals = {\n      ariaLabels: ariaLabelsWithDrawers,\n      headerVariant,\n      isMobile,\n      breadcrumbs,\n      discoveredBreadcrumbs,\n      stickyNotifications: resolvedStickyNotifications,\n      navigationOpen,\n      navigation: resolvedNavigation,\n      navigationFocusControl,\n      activeDrawer,\n      activeDrawerSize,\n      minDrawerSize,\n      maxDrawerSize,\n      minGlobalDrawersSizes,\n      maxGlobalDrawersSizes,\n      drawers: drawers!,\n      globalDrawers,\n      activeGlobalDrawers,\n      activeGlobalDrawersIds,\n      activeGlobalDrawersSizes,\n      onActiveGlobalDrawersChange,\n      drawersFocusControl,\n      globalDrawersFocusControl,\n      splitPanelPosition,\n      splitPanelToggleConfig,\n      splitPanelOpen,\n      splitPanelControlId,\n      splitPanelFocusControl,\n      placement,\n      toolbarState,\n      setToolbarState,\n      verticalOffsets,\n      drawersOpenQueue,\n      setToolbarHeight,\n      setNotificationsHeight,\n      onSplitPanelToggle: onSplitPanelToggleHandler,\n      onNavigationToggle,\n      onActiveDrawerChange: onActiveDrawerChangeHandler,\n      onActiveDrawerResize,\n    };\n\n    const splitPanelInternals: SplitPanelProviderProps = {\n      bottomOffset: 0,\n      getMaxHeight: () => {\n        const availableHeight =\n          document.documentElement.clientHeight - placement.insetBlockStart - placement.insetBlockEnd;\n        // If the page is likely zoomed in at 200%, allow the split panel to fill the content area.\n        return availableHeight < 400 ? availableHeight - 40 : availableHeight - 250;\n      },\n      maxWidth: maxSplitPanelSize,\n      isForcedPosition: splitPanelForcedPosition,\n      isOpen: splitPanelOpen,\n      leftOffset: 0,\n      onPreferencesChange: onSplitPanelPreferencesChangeHandler,\n      onResize: onSplitPanelResizeHandler,\n      onToggle: onSplitPanelToggleHandler,\n      position: splitPanelPosition,\n      reportSize: size => setSplitPanelReportedSize(size),\n      reportHeaderHeight: () => {\n        /*unused in this design*/\n      },\n      rightOffset: 0,\n      size: splitPanelSize,\n      topOffset: 0,\n      setSplitPanelToggle: setSplitPanelToggleConfig,\n      refs: splitPanelFocusControl.refs,\n    };\n\n    useEffect(() => {\n      // Close navigation drawer on mobile so that the main content is visible\n      if (isMobile) {\n        onNavigationToggle(false);\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [isMobile]);\n\n    return (\n      <>\n        {/* Rendering a hidden copy of breadcrumbs to trigger their deduplication */}\n        {!hasToolbar && breadcrumbs ? <ScreenreaderOnly>{breadcrumbs}</ScreenreaderOnly> : null}\n        <SkeletonLayout\n          style={{\n            [globalVars.stickyVerticalTopOffset]: `${verticalOffsets.header}px`,\n            [globalVars.stickyVerticalBottomOffset]: `${placement.insetBlockEnd}px`,\n            paddingBlockEnd: splitPanelOpen && splitPanelPosition === 'bottom' ? splitPanelReportedSize : '',\n            ...(!isMobile ? { minWidth: `${minContentWidth}px` } : {}),\n          }}\n          toolbar={\n            hasToolbar && <AppLayoutToolbar appLayoutInternals={appLayoutInternals} toolbarProps={toolbarProps} />\n          }\n          notifications={\n            notifications && (\n              <AppLayoutNotifications appLayoutInternals={appLayoutInternals}>{notifications}</AppLayoutNotifications>\n            )\n          }\n          headerVariant={headerVariant}\n          contentHeader={contentHeader}\n          // delay rendering the content until registration of this instance is complete\n          content={registered ? content : null}\n          navigation={resolvedNavigation && <AppLayoutNavigation appLayoutInternals={appLayoutInternals} />}\n          navigationOpen={navigationOpen}\n          navigationWidth={navigationWidth}\n          tools={drawers && drawers.length > 0 && <AppLayoutDrawer appLayoutInternals={appLayoutInternals} />}\n          globalTools={\n            <ActiveDrawersContext.Provider value={activeGlobalDrawersIds}>\n              <AppLayoutGlobalDrawers appLayoutInternals={appLayoutInternals} />\n            </ActiveDrawersContext.Provider>\n          }\n          globalToolsOpen={!!activeGlobalDrawersIds.length}\n          toolsOpen={!!activeDrawer}\n          toolsWidth={activeDrawerSize}\n          sideSplitPanel={\n            splitPanelPosition === 'side' && (\n              <AppLayoutSplitPanelSide\n                appLayoutInternals={appLayoutInternals}\n                splitPanelInternals={splitPanelInternals}\n              >\n                {splitPanel}\n              </AppLayoutSplitPanelSide>\n            )\n          }\n          bottomSplitPanel={\n            splitPanelPosition === 'bottom' && (\n              <AppLayoutSplitPanelBottom\n                appLayoutInternals={appLayoutInternals}\n                splitPanelInternals={splitPanelInternals}\n              >\n                {splitPanel}\n              </AppLayoutSplitPanelBottom>\n            )\n          }\n          splitPanelOpen={splitPanelOpen}\n          placement={placement}\n          contentType={contentType}\n          maxContentWidth={maxContentWidth}\n          disableContentPaddings={disableContentPaddings}\n        />\n      </>\n    );\n  }\n);\n\nexport default AppLayoutVisualRefreshToolbar;\n"],"mappings":";AAAA;AACA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,mBAAmB,EAAEC,QAAQ,QAAQ,OAAO;AAEvE,OAAOC,gBAAgB,MAAM,6CAA6C;AAE1E,SAASC,sBAAsB,QAAQ,uBAAuB;AAC9D,SAASC,eAAe,QAAQ,uCAAuC;AACvE,SAASC,SAAS,QAAQ,iCAAiC;AAC3D,SAASC,WAAW,QAAQ,oCAAoC;AAChE,SAASC,uBAAuB,QAAQ,uDAAuD;AAC/F,OAAOC,UAAU,MAAM,mCAAmC;AAC1D,SAASC,wBAAwB,QAAQ,oCAAoC;AAG7E,SAASC,eAAe,EAAEC,UAAU,QAAQ,sBAAsB;AAClE,SAASC,eAAe,EAAEC,uBAAuB,QAAQ,4BAA4B;AACrF,SAASC,yBAAyB,QAAQ,wCAAwC;AAClF,SAASC,oBAAoB,QAAQ,6BAA6B;AAClE,SAASC,uBAAuB,EAAEC,qBAAqB,QAAQ,kBAAkB;AAEjF,SACEC,eAAe,EACfC,sBAAsB,EACtBC,mBAAmB,EACnBC,sBAAsB,EACtBC,yBAAyB,EACzBC,uBAAuB,EACvBC,gBAAgB,QACX,YAAY;AACnB,SAASC,iBAAiB,QAAQ,gBAAgB;AAClD,SAASC,cAAc,QAAQ,YAAY;AAE3C,MAAMC,6BAA6B,GAAG7B,KAAK,CAAC8B,UAAU,CACpD,CACEC,EA+BC,EACDD,UAAU,KACR;;MAjCF;MACEE,UAAU;MACVC,aAAa;MACbC,OAAO;MACPC,cAAc;MACdC,eAAe;MACfC,UAAU;MACVC,cAAc;MACdC,kBAAkB;MAClBC,KAAK;MACLC,SAAS,EAAEC,mBAAmB;MAC9BC,aAAa;MACbC,SAAS;MACTC,UAAU;MACVC,WAAW;MACXC,aAAa;MACbC,WAAW;MACXC,aAAa;MACbC,mBAAmB;MACnBC,qBAAqB,EAAEC,+BAA+B;MACtDC,cAAc,EAAEC,wBAAwB;MACxCC,UAAU;MACVC,cAAc,EAAEC,wBAAwB;MACxCC,kBAAkB;MAClBC,kBAAkB;MAClBC,6BAA6B;MAC7BC,sBAAsB;MACtBC,eAAe;MACfC,eAAe;MACfC;IAAS,IAAAjC,EAEV;IADIkC,IAAI,GAAAC,MAAA,CAAAnC,EAAA,EA9BT,mgBA+BC,CADQ;EAIT,MAAMoC,QAAQ,GAAG5D,SAAS,EAAE;EAC5B,MAAM;IAAE6D,kBAAkB,EAAEC,gBAAgB;IAAEC,wBAAwB,EAAEC;EAAsB,CAAE,GAAGN,IAAW;EAC9G,MAAMO,mBAAmB,GAAGhE,WAAW,CAAC,aAAa,CAAC;EACtD,MAAM,CAACiE,YAAY,EAAEC,eAAe,CAAC,GAAGvE,QAAQ,CAAkB,MAAM,CAAC;EACzE,MAAM,CAACwE,aAAa,EAAEC,gBAAgB,CAAC,GAAGzE,QAAQ,CAAC,CAAC,CAAC;EACrD,MAAM,CAAC0E,mBAAmB,EAAEC,sBAAsB,CAAC,GAAG3E,QAAQ,CAAC,CAAC,CAAC;EAEjE,MAAM4E,kBAAkB,GAAIC,IAAa,IAAI;IAC3CC,sBAAsB,CAACC,QAAQ,EAAE;IACjC7E,sBAAsB,CAACkC,kBAAkB,EAAE;MAAEyC;IAAI,CAAE,CAAC;EACtD,CAAC;EAED,MAAM,CAACvC,SAAS,GAAG,KAAK,EAAE0C,YAAY,CAAC,GAAG7E,eAAe,CAACoC,mBAAmB,EAAEC,aAAa,EAAE,KAAK,EAAE;IACnGyC,aAAa,EAAE,WAAW;IAC1BC,cAAc,EAAE,WAAW;IAC3BC,aAAa,EAAE;GAChB,CAAC;EACF,MAAMC,aAAa,GAAIP,IAAa,IAAI;IACtCG,YAAY,CAACH,IAAI,CAAC;IAClBQ,mBAAmB,CAACN,QAAQ,EAAE;IAC9B7E,sBAAsB,CAACsC,aAAa,EAAE;MAAEqC;IAAI,CAAE,CAAC;EACjD,CAAC;EAED,MAAMS,mBAAmB,GAAGA,CAACC,QAAgB,EAAEV,IAAa,KAAI;IAC9DW,yBAAyB,CAACT,QAAQ,CAAC;MAAEU,KAAK,EAAE,IAAI;MAAEF,QAAQ;MAAEV;IAAI,CAAE,CAAC;EACrE,CAAC;EAED,MAAMa,oBAAoB,GAAIH,QAAgB,IAAI;;IAChD;IACA;IACA;IACA,IAAII,YAAY,KAAIC,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEC,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACC,EAAE,KAAKR,QAAQ,CAAC,GAAE;MACnE;;IAEF;IACA,MAAMS,eAAe,GAAG,CAAC,IAAIJ,OAAO,IAAI,EAAE,CAAC,EAAE,GAAGK,aAAa,CAAC;IAC9D,MAAMC,SAAS,GAAGF,eAAe,CAACH,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACC,EAAE,KAAKR,QAAQ,CAAC;IACxE,IAAI,CAACW,SAAS,EAAE;MACd;;IAEF,MAAMC,aAAa,GAAGC,IAAI,CAACC,GAAG,CAC5B,CAAAC,EAAA,IAAA1E,EAAA,GAAAsE,SAAS,CAACK,WAAW,cAAA3E,EAAA,cAAAA,EAAA,GAAI4E,WAAW,CAACjB,QAAQ,CAAC,cAAAe,EAAA,cAAAA,EAAA,GAAI7F,eAAe,EACjEA,eAAe,CAChB;IACD;IACA;IACA;IAEA;IACA,IAAIgG,yBAAyB,GAAGC,sBAAsB,CACnDC,GAAG,CACFC,cAAc,IAAG;MAAA,IAAAhF,EAAA,EAAA0E,EAAA;MAAC,QAAAA,EAAA,IAAA1E,EAAA,GAAAoE,eAAe,CAACH,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACC,EAAE,KAAKa,cAAc,CAAC,cAAAhF,EAAA,uBAAAA,EAAA,CAAE2E,WAAW,cAAAD,EAAA,cAAAA,EAAA,GAAI7F,eAAe;IAAA,EAC/G,CACAoG,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGC,IAAI,EAAE,CAAC,CAAC;IACvC,IAAIpB,YAAY,EAAE;MAChBc,yBAAyB,IAAIL,IAAI,CAACC,GAAG,CAAC,CAAAW,EAAA,GAAArB,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEY,WAAW,cAAAS,EAAA,cAAAA,EAAA,GAAIvG,eAAe,EAAEA,eAAe,CAAC;;IAGtG,MAAMwG,0BAA0B,GAAGC,uBAAuB,GAAGT,yBAAyB;IACtF,IAAIQ,0BAA0B,IAAId,aAAa,EAAE;MAC/C;;IAGF;IACA,MAAMgB,aAAa,GAAGC,gBAAgB,CAACA,gBAAgB,CAACC,MAAM,GAAG,CAAC,CAAC;IACnE,IAAI1B,YAAY,IAAI,CAAAA,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEI,EAAE,MAAKoB,aAAa,EAAE;MACtDG,oBAAoB,CAAC,IAAI,CAAC;KAC3B,MAAM,IAAIZ,sBAAsB,CAACa,QAAQ,CAACJ,aAAa,CAAC,EAAE;MACzDK,2BAA2B,CAACL,aAAa,CAAC;;EAE9C,CAAC;EAED,MAAM;IACJvB,OAAO;IACPD,YAAY;IACZ8B,aAAa;IACbC,qBAAqB;IACrBC,gBAAgB;IAChBC,qBAAqB;IACrB3B,aAAa;IACb4B,mBAAmB;IACnBnB,sBAAsB;IACtBoB,wBAAwB;IACxBtB,WAAW;IACXY,gBAAgB;IAChBE,oBAAoB;IACpBS,oBAAoB;IACpBP;EAA2B,CAC5B,GAAG9G,UAAU,CAAAsH,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAMnE,IAAI;IAAEwB,mBAAmB;IAAEI;EAAoB,IAAI7D,UAAU,EAAE;IACjFA,UAAU;IACVY,SAAS;IACTH,SAAS;IACTD,KAAK;IACLK,UAAU;IACV0C;GACD,CAAC;EAEF,MAAM8C,2BAA2B,GAAI3C,QAAuB,IAAI;IAC9D+B,oBAAoB,CAAC/B,QAAQ,CAAC;IAC9BF,mBAAmB,CAACN,QAAQ,EAAE;EAChC,CAAC;EAED,MAAM,CAAC7B,cAAc,GAAG,KAAK,EAAEiF,iBAAiB,CAAC,GAAGhI,eAAe,CACjEgD,wBAAwB,EACxBI,kBAAkB,EAClB,KAAK,EACL;IACE0B,aAAa,EAAE,WAAW;IAC1BC,cAAc,EAAE,gBAAgB;IAChCC,aAAa,EAAE;GAChB,CACF;EAED,MAAMiD,yBAAyB,GAAGA,CAAA,KAAK;IACrCD,iBAAiB,CAAC,CAACjF,cAAc,CAAC;IAClCmF,sBAAsB,CAACC,kBAAkB,CAAC;MAAEC,IAAI,EAAErF,cAAc,GAAG,OAAO,GAAG;IAAM,CAAE,CAAC;IACtFhD,sBAAsB,CAACqD,kBAAkB,EAAE;MAAEsB,IAAI,EAAE,CAAC3B;IAAc,CAAE,CAAC;EACvE,CAAC;EAED,MAAM,CAACF,qBAAqB,EAAEwF,wBAAwB,CAAC,GAAGrI,eAAe,CACvE8C,+BAA+B,EAC/BQ,6BAA6B,EAC7BgF,SAAS,EACT;IACExD,aAAa,EAAE,WAAW;IAC1BC,cAAc,EAAE,uBAAuB;IACvCC,aAAa,EAAE;GAChB,CACF;EAED,MAAMuD,oCAAoC,GAAIC,MAA4C,IAAI;IAC5FH,wBAAwB,CAACG,MAAM,CAAC;IAChCN,sBAAsB,CAACC,kBAAkB,CAAC;MAAEC,IAAI,EAAE;IAAU,CAAE,CAAC;IAC/DrI,sBAAsB,CAACuD,6BAA6B,EAAEkF,MAAM,CAAC;EAC/D,CAAC;EAED,MAAM,CAACtF,cAAc,GAAG,CAAC,EAAEuF,iBAAiB,CAAC,GAAGzI,eAAe,CAC7DmD,wBAAwB,EACxBE,kBAAkB,EAClBhD,wBAAwB,CAAC,CAAA8F,EAAA,GAAAtD,qBAAqB,aAArBA,qBAAqB,uBAArBA,qBAAqB,CAAE6F,QAAQ,cAAAvC,EAAA,cAAAA,EAAA,GAAI,QAAQ,CAAC,EACrE;IAAErB,aAAa,EAAE,WAAW;IAAEC,cAAc,EAAE,gBAAgB;IAAEC,aAAa,EAAE;EAAoB,CAAE,CACtG;EAED,MAAM,CAAC2D,sBAAsB,EAAEC,yBAAyB,CAAC,GAAG/I,QAAQ,CAAC,CAAC,CAAC;EAEvE,MAAMgJ,yBAAyB,GAAIC,IAAY,IAAI;IACjDL,iBAAiB,CAACK,IAAI,CAAC;IACvB/I,sBAAsB,CAACsD,kBAAkB,EAAE;MAAEyF;IAAI,CAAE,CAAC;EACtD,CAAC;EAED,MAAM,CAACC,sBAAsB,EAAEC,yBAAyB,CAAC,GAAGnJ,QAAQ,CAA4B;IAC9FoJ,SAAS,EAAEX,SAAS;IACpBY,SAAS,EAAE;GACZ,CAAC;EAEF,MAAM7D,yBAAyB,GAAG5E,uBAAuB,CAAC,IAAI,EAAE8F,sBAAsB,CAAC;EACvF,MAAMrB,mBAAmB,GAAG1E,eAAe,CAAC,CAAC,EAACgF,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEI,EAAE,GAAE,IAAI,EAAEJ,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEI,EAAE,CAAC;EACvF,MAAMjB,sBAAsB,GAAGnE,eAAe,CAACqB,cAAc,CAAC;EAC9D,MAAMqG,sBAAsB,GAAGxH,yBAAyB,CAAC,CAACmC,qBAAqB,EAAEE,cAAc,CAAC,CAAC;EAEjGnD,mBAAmB,CAAC4B,UAAU,EAAE,OAAO;IACrC2H,0BAA0B,EAAEA,CAAA,KAAMtF,QAAQ,IAAIY,kBAAkB,CAAC,KAAK,CAAC;IACvE2E,SAAS,EAAEA,CAAA,KAAMnE,aAAa,CAAC,IAAI,CAAC;IACpCoE,eAAe,EAAEA,CAAA,KAAMnE,mBAAmB,CAACN,QAAQ,CAAC,IAAI,CAAC;IACzD0E,iBAAiB,EAAEA,CAAA,KAAMpE,mBAAmB,CAACN,QAAQ,CAAC,IAAI,CAAC;IAC3D2E,eAAe,EAAEA,CAAA,KAAK;MAAA,IAAA9H,EAAA;MAAC,QAAAA,EAAA,GAAAyG,sBAAsB,CAACsB,IAAI,CAACC,MAAM,CAACC,OAAO,cAAAjI,EAAA,uBAAAA,EAAA,CAAEkI,KAAK,EAAE;IAAA;GAC3E,CAAC,CAAC;EAEH,MAAMC,kBAAkB,GAAG5H,cAAc,GAAG,IAAI,GAAGD,UAAU,aAAVA,UAAU,cAAVA,UAAU,GAAIrC,KAAA,CAAAmK,aAAA,CAAAnK,KAAA,CAAAoK,QAAA,OAAK;EACtE,MAAMC,2BAA2B,GAAG,CAAC,CAACnH,mBAAmB,IAAI,CAACiB,QAAQ;EACtE,MAAM;IACJmG,aAAa;IACbC,iBAAiB;IACjBC,wBAAwB;IACxBC,kBAAkB;IAClBC,qBAAqB;IACrBrD;EAAuB,CACxB,GAAGnG,uBAAuB,CAAC;IAC1B4G,gBAAgB,EAAEhC,YAAY,GAAGgC,gBAAgB,GAAG,CAAC;IACrDtE,cAAc;IACdM,eAAe;IACf3B,cAAc,EAAE,CAAC,CAAC+H,kBAAkB,IAAI/H,cAAc;IACtDC,eAAe;IACf4B,SAAS;IACTX,cAAc;IACdoH,kBAAkB,EAAEtH,qBAAqB,aAArBA,qBAAqB,uBAArBA,qBAAqB,CAAE6F,QAAQ;IACnD7E,QAAQ;IACR8D;GACD,CAAC;EAEF,MAAM;IAAE0C,UAAU;IAAEC;EAAY,CAAE,GAAGjJ,iBAAiB,CAAC;IACrD4C,sBAAsB;IACtBvC,UAAU,EAAE+F,qBAAqB;IACjC1F,UAAU,EAAE6H,kBAAkB;IAC9B/H,cAAc;IACd4C,kBAAkB;IAClB8F,kBAAkB,EAAE5F,sBAAsB,CAAC6E,IAAI,CAACgB,MAAM;IACtD9H,WAAW;IACX+D,cAAc,EAAE,CAAAI,EAAA,GAAArB,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEI,EAAE,cAAAiB,EAAA,cAAAA,EAAA,GAAI,IAAI;IACxC;IACApB,OAAO,EAAE,CAAAA,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEyB,MAAM,KAAI,CAAC5E,SAAS,GAAGmD,OAAO,GAAG6C,SAAS;IAC5DnB,oBAAoB,EAAEY,2BAA2B;IACjD0C,eAAe,EAAEvF,mBAAmB,CAACsE,IAAI,CAACgB,MAAM;IAChDvH,UAAU;IACVyH,qBAAqB,EAAA7C,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAChBiB,sBAAsB;MACzB4B,MAAM,EAAE5H,cAAc;MACtB6H,SAAS,EAAE1G,mBAAmB;MAC9BwE,QAAQ,EAAEyB;IAAkB,EAC7B;IACDU,kBAAkB,EAAE3C,sBAAsB,CAACsB,IAAI,CAACgB,MAAM;IACtDpH,kBAAkB,EAAE6E;GACrB,CAAC;EAEF,MAAM6C,UAAU,GAAG,CAAC/G,gBAAgB,IAAI,CAAC,CAACuG,YAAY;EACtD,MAAMS,qBAAqB,GAAG5K,uBAAuB,CAAC2K,UAAU,CAAC;EAEjE,MAAME,eAAe,GAAGnK,qBAAqB,CAAC;IAC5CoK,SAAS,EAAEvH,SAAS,CAACwH,eAAe;IACpCC,iBAAiB,EAAEL,UAAU,IAAI3G,YAAY,KAAK,MAAM;IACxDI,mBAAmB,EAAEA,mBAAmB,aAAnBA,mBAAmB,cAAnBA,mBAAmB,GAAI,CAAC;IAC7CF,aAAa,EAAEA,aAAa,aAAbA,aAAa,cAAbA,aAAa,GAAI,CAAC;IACjCzB,mBAAmB,EAAEmH;GACtB,CAAC;EAEF,MAAMqB,kBAAkB,GAAuB;IAC7C1J,UAAU,EAAE+F,qBAAqB;IACjChF,aAAa;IACboB,QAAQ;IACRnB,WAAW;IACXqI,qBAAqB;IACrBnI,mBAAmB,EAAEmH,2BAA2B;IAChDlI,cAAc;IACdE,UAAU,EAAE6H,kBAAkB;IAC9BjF,sBAAsB;IACtBa,YAAY;IACZgC,gBAAgB;IAChBF,aAAa;IACb0C,aAAa;IACbzC,qBAAqB;IACrB6C,qBAAqB;IACrB3E,OAAO,EAAEA,OAAQ;IACjBK,aAAa;IACb4B,mBAAmB;IACnBnB,sBAAsB;IACtBoB,wBAAwB;IACxBN,2BAA2B;IAC3BnC,mBAAmB;IACnBG,yBAAyB;IACzB8E,kBAAkB;IAClBpB,sBAAsB;IACtBhG,cAAc;IACdmB,mBAAmB;IACnBgE,sBAAsB;IACtBxE,SAAS;IACTS,YAAY;IACZC,eAAe;IACf4G,eAAe;IACf/D,gBAAgB;IAChB3C,gBAAgB;IAChBE,sBAAsB;IACtBpB,kBAAkB,EAAE6E,yBAAyB;IAC7CxD,kBAAkB;IAClB0C,oBAAoB,EAAEY,2BAA2B;IACjDH;GACD;EAED,MAAMyD,mBAAmB,GAA4B;IACnDC,YAAY,EAAE,CAAC;IACfC,YAAY,EAAEA,CAAA,KAAK;MACjB,MAAMC,eAAe,GACnBC,QAAQ,CAACC,eAAe,CAACC,YAAY,GAAGjI,SAAS,CAACwH,eAAe,GAAGxH,SAAS,CAACkI,aAAa;MAC7F;MACA,OAAOJ,eAAe,GAAG,GAAG,GAAGA,eAAe,GAAG,EAAE,GAAGA,eAAe,GAAG,GAAG;IAC7E,CAAC;IACDK,QAAQ,EAAE5B,iBAAiB;IAC3B6B,gBAAgB,EAAE5B,wBAAwB;IAC1C6B,MAAM,EAAEhJ,cAAc;IACtBiJ,UAAU,EAAE,CAAC;IACbC,mBAAmB,EAAE1D,oCAAoC;IACzD2D,QAAQ,EAAErD,yBAAyB;IACnCsD,QAAQ,EAAElE,yBAAyB;IACnCS,QAAQ,EAAEyB,kBAAkB;IAC5BiC,UAAU,EAAEtD,IAAI,IAAIF,yBAAyB,CAACE,IAAI,CAAC;IACnDuD,kBAAkB,EAAEA,CAAA,KAAK;MACvB;IAAA,CACD;IACDC,WAAW,EAAE,CAAC;IACdxD,IAAI,EAAE5F,cAAc;IACpB+H,SAAS,EAAE,CAAC;IACZsB,mBAAmB,EAAEvD,yBAAyB;IAC9CQ,IAAI,EAAEtB,sBAAsB,CAACsB;GAC9B;EAED7J,SAAS,CAAC,MAAK;IACb;IACA,IAAIkE,QAAQ,EAAE;MACZY,kBAAkB,CAAC,KAAK,CAAC;;IAE3B;EACF,CAAC,EAAE,CAACZ,QAAQ,CAAC,CAAC;EAEd,OACEnE,KAAA,CAAAmK,aAAA,CAAAnK,KAAA,CAAAoK,QAAA,QAEG,CAACgB,UAAU,IAAIpI,WAAW,GAAGhD,KAAA,CAAAmK,aAAA,CAAC/J,gBAAgB,QAAE4C,WAAW,CAAoB,GAAG,IAAI,EACvFhD,KAAA,CAAAmK,aAAA,CAACvI,cAAc;IACbkL,KAAK,EAAA3E,MAAA,CAAAC,MAAA;MACH,CAAC1H,UAAU,CAACqM,uBAAuB,GAAG,GAAGzB,eAAe,CAAC0B,MAAM,IAAI;MACnE,CAACtM,UAAU,CAACuM,0BAA0B,GAAG,GAAGjJ,SAAS,CAACkI,aAAa,IAAI;MACvEgB,eAAe,EAAE7J,cAAc,IAAIoH,kBAAkB,KAAK,QAAQ,GAAGxB,sBAAsB,GAAG;IAAE,GAC5F,CAAC9E,QAAQ,GAAG;MAAEgJ,QAAQ,EAAE,GAAGrJ,eAAe;IAAI,CAAE,GAAG,EAAG;IAE5DsJ,OAAO,EACLhC,UAAU,IAAIpL,KAAA,CAAAmK,aAAA,CAACzI,gBAAgB;MAACgK,kBAAkB,EAAEA,kBAAkB;MAAEd,YAAY,EAAEA;IAAY,EAAI;IAExG3H,aAAa,EACXA,aAAa,IACXjD,KAAA,CAAAmK,aAAA,CAAC5I,sBAAsB;MAACmK,kBAAkB,EAAEA;IAAkB,GAAGzI,aAAa,CAC/E;IAEHF,aAAa,EAAEA,aAAa;IAC5Bd,aAAa,EAAEA,aAAa;IAC5B;IACAC,OAAO,EAAEyI,UAAU,GAAGzI,OAAO,GAAG,IAAI;IACpCG,UAAU,EAAE6H,kBAAkB,IAAIlK,KAAA,CAAAmK,aAAA,CAAC7I,mBAAmB;MAACoK,kBAAkB,EAAEA;IAAkB,EAAI;IACjGvJ,cAAc,EAAEA,cAAc;IAC9BC,eAAe,EAAEA,eAAe;IAChCI,KAAK,EAAEuD,OAAO,IAAIA,OAAO,CAACyB,MAAM,GAAG,CAAC,IAAIxH,KAAA,CAAAmK,aAAA,CAAC/I,eAAe;MAACsK,kBAAkB,EAAEA;IAAkB,EAAI;IACnG2B,WAAW,EACTrN,KAAA,CAAAmK,aAAA,CAAClJ,oBAAoB,CAACqM,QAAQ;MAACC,KAAK,EAAE1G;IAAsB,GAC1D7G,KAAA,CAAAmK,aAAA,CAAC9I,sBAAsB;MAACqK,kBAAkB,EAAEA;IAAkB,EAAI,CACpC;IAElC8B,eAAe,EAAE,CAAC,CAAC3G,sBAAsB,CAACW,MAAM;IAChD/E,SAAS,EAAE,CAAC,CAACqD,YAAY;IACzBjD,UAAU,EAAEiF,gBAAgB;IAC5B2F,cAAc,EACZhD,kBAAkB,KAAK,MAAM,IAC3BzK,KAAA,CAAAmK,aAAA,CAAC1I,uBAAuB;MACtBiK,kBAAkB,EAAEA,kBAAkB;MACtCC,mBAAmB,EAAEA;IAAmB,GAEvCpI,UAAU,CAEd;IAEHmK,gBAAgB,EACdjD,kBAAkB,KAAK,QAAQ,IAC7BzK,KAAA,CAAAmK,aAAA,CAAC3I,yBAAyB;MACxBkK,kBAAkB,EAAEA,kBAAkB;MACtCC,mBAAmB,EAAEA;IAAmB,GAEvCpI,UAAU,CAEd;IAEHF,cAAc,EAAEA,cAAc;IAC9BW,SAAS,EAAEA,SAAS;IACpBlB,WAAW,EAAEA,WAAW;IACxBiB,eAAe,EAAEA,eAAe;IAChCF,sBAAsB,EAAEA;EAAsB,EAC9C,CACD;AAEP,CAAC,CACF;AAED,eAAehC,6BAA6B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}