{"ast":null,"code":"var _jsxFileName = \"/Users/sohailsajid/Desktop/threat-modeling-app/src/components/generic/Autosuggest/index.tsx\",\n  _s = $RefreshSig$();\n/** *******************************************************************************************************************\n  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\").\n  You may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n ******************************************************************************************************************** */\n\nimport CloudscapeAutosuggest from '@cloudscape-design/components/autosuggest';\nimport FormField from '@cloudscape-design/components/form-field';\nimport React, { useCallback, useState } from 'react';\nimport useContentValidation from '../../../hooks/useContentValidation';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Autosuggest = /*#__PURE__*/_s(/*#__PURE__*/React.forwardRef(_c = _s(({\n  onChange,\n  value,\n  validateData,\n  errorText: _errorText,\n  ...props\n}, ref) => {\n  _s();\n  const [resetErrorText, setResetErrorText] = useState();\n  const {\n    tempValue,\n    errorText,\n    handleChange\n  } = useContentValidation(value, onChange, validateData);\n  const handleKeyDown = useCallback(event => {\n    var _props$onKeyDown;\n    if (event.detail.keyCode === 8 && !value && errorText) {\n      // When the value is empty, press backspace to reset the errorText.\n      setResetErrorText(true);\n    } else {\n      setResetErrorText(false);\n    }\n    (_props$onKeyDown = props.onKeyDown) === null || _props$onKeyDown === void 0 ? void 0 : _props$onKeyDown.call(props, event);\n  }, [errorText, value, props]);\n  return /*#__PURE__*/_jsxDEV(FormField, {\n    ...props,\n    errorText: resetErrorText ? undefined : errorText,\n    children: /*#__PURE__*/_jsxDEV(CloudscapeAutosuggest, {\n      ...props,\n      ref: ref,\n      value: errorText ? value : tempValue,\n      onChange: event => handleChange(event),\n      onKeyDown: handleKeyDown\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}, \"l8ulp4rnrLxhqbVnBAalMfwyno0=\", false, function () {\n  return [useContentValidation];\n})), \"l8ulp4rnrLxhqbVnBAalMfwyno0=\", false, function () {\n  return [useContentValidation];\n});\n_c2 = Autosuggest;\nexport default Autosuggest;\nvar _c, _c2;\n$RefreshReg$(_c, \"Autosuggest$React.forwardRef\");\n$RefreshReg$(_c2, \"Autosuggest\");","map":{"version":3,"names":["CloudscapeAutosuggest","FormField","React","useCallback","useState","useContentValidation","jsxDEV","_jsxDEV","Autosuggest","_s","forwardRef","_c","onChange","value","validateData","errorText","_errorText","props","ref","resetErrorText","setResetErrorText","tempValue","handleChange","handleKeyDown","event","_props$onKeyDown","detail","keyCode","onKeyDown","call","undefined","children","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/src/components/generic/Autosuggest/index.tsx"],"sourcesContent":["/** *******************************************************************************************************************\n  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\").\n  You may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n ******************************************************************************************************************** */\n\nimport CloudscapeAutosuggest, { AutosuggestProps as CloudscapeAutosuggestProps } from '@cloudscape-design/components/autosuggest';\nimport FormField, { FormFieldProps } from '@cloudscape-design/components/form-field';\nimport { BaseKeyDetail, CancelableEventHandler } from '@cloudscape-design/components/internal/events';\nimport React, { FC, useCallback, useState } from 'react';\nimport { z } from 'zod';\nimport useContentValidation from '../../../hooks/useContentValidation';\n\nexport interface AutosuggestProps extends FormFieldProps, Omit<CloudscapeAutosuggestProps, 'errorText'> {\n  ref?: React.ForwardedRef<any>;\n  validateData?: (newValue: string) => z.SafeParseReturnType<string | undefined, string | undefined>;\n}\n\nconst Autosuggest: FC<AutosuggestProps> = React.forwardRef<CloudscapeAutosuggestProps.Ref, AutosuggestProps>(({\n  onChange,\n  value,\n  validateData,\n  errorText: _errorText,\n  ...props\n},\nref) => {\n  const [resetErrorText, setResetErrorText] = useState<boolean>();\n  const { tempValue, errorText, handleChange } = useContentValidation(value, onChange, validateData);\n\n  const handleKeyDown: CancelableEventHandler<BaseKeyDetail> = useCallback((event) => {\n    if (event.detail.keyCode === 8 && !value && errorText) {\n      // When the value is empty, press backspace to reset the errorText.\n      setResetErrorText(true);\n    } else {\n      setResetErrorText(false);\n    }\n\n    props.onKeyDown?.(event);\n  },\n  [errorText, value, props]);\n\n  return (\n    <FormField\n      {...props}\n      errorText={resetErrorText ? undefined : errorText}\n    >\n      <CloudscapeAutosuggest\n        {...props}\n        ref={ref}\n        value={errorText ? value : tempValue}\n        onChange={event =>\n          handleChange(event)\n        }\n        onKeyDown={handleKeyDown}\n      />\n    </FormField>);\n});\n\nexport default Autosuggest;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,qBAAqB,MAA0D,2CAA2C;AACjI,OAAOC,SAAS,MAA0B,0CAA0C;AAEpF,OAAOC,KAAK,IAAQC,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AAExD,OAAOC,oBAAoB,MAAM,qCAAqC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAOvE,MAAMC,WAAiC,gBAAAC,EAAA,cAAGP,KAAK,CAACQ,UAAU,CAAAC,EAAA,GAAAF,EAAA,CAAmD,CAAC;EAC5GG,QAAQ;EACRC,KAAK;EACLC,YAAY;EACZC,SAAS,EAAEC,UAAU;EACrB,GAAGC;AACL,CAAC,EACDC,GAAG,KAAK;EAAAT,EAAA;EACN,MAAM,CAACU,cAAc,EAAEC,iBAAiB,CAAC,GAAGhB,QAAQ,CAAU,CAAC;EAC/D,MAAM;IAAEiB,SAAS;IAAEN,SAAS;IAAEO;EAAa,CAAC,GAAGjB,oBAAoB,CAACQ,KAAK,EAAED,QAAQ,EAAEE,YAAY,CAAC;EAElG,MAAMS,aAAoD,GAAGpB,WAAW,CAAEqB,KAAK,IAAK;IAAA,IAAAC,gBAAA;IAClF,IAAID,KAAK,CAACE,MAAM,CAACC,OAAO,KAAK,CAAC,IAAI,CAACd,KAAK,IAAIE,SAAS,EAAE;MACrD;MACAK,iBAAiB,CAAC,IAAI,CAAC;IACzB,CAAC,MAAM;MACLA,iBAAiB,CAAC,KAAK,CAAC;IAC1B;IAEA,CAAAK,gBAAA,GAAAR,KAAK,CAACW,SAAS,cAAAH,gBAAA,uBAAfA,gBAAA,CAAAI,IAAA,CAAAZ,KAAK,EAAaO,KAAK,CAAC;EAC1B,CAAC,EACD,CAACT,SAAS,EAAEF,KAAK,EAAEI,KAAK,CAAC,CAAC;EAE1B,oBACEV,OAAA,CAACN,SAAS;IAAA,GACJgB,KAAK;IACTF,SAAS,EAAEI,cAAc,GAAGW,SAAS,GAAGf,SAAU;IAAAgB,QAAA,eAElDxB,OAAA,CAACP,qBAAqB;MAAA,GAChBiB,KAAK;MACTC,GAAG,EAAEA,GAAI;MACTL,KAAK,EAAEE,SAAS,GAAGF,KAAK,GAAGQ,SAAU;MACrCT,QAAQ,EAAEY,KAAK,IACbF,YAAY,CAACE,KAAK,CACnB;MACDI,SAAS,EAAEL;IAAc;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1B;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACO,CAAC;AAChB,CAAC;EAAA,QA7BgD9B,oBAAoB;AAAA,EA6BpE,CAAC;EAAA,QA7B+CA,oBAAoB;AAAA,EA6BnE;AAAC+B,GAAA,GAtCG5B,WAAiC;AAwCvC,eAAeA,WAAW;AAAC,IAAAG,EAAA,EAAAyB,GAAA;AAAAC,YAAA,CAAA1B,EAAA;AAAA0B,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}