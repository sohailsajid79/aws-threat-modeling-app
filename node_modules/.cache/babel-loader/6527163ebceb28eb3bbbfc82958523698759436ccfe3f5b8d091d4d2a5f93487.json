{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef } from 'react';\nimport { Transition } from 'react-transition-group';\nimport clsx from 'clsx';\nimport { InternalButton } from '../../../button/internal';\nimport PanelResizeHandle from '../../../internal/components/panel-resize-handle';\nimport customCssProps from '../../../internal/generated/custom-css-properties';\nimport { getLimitedValue } from '../../../split-panel/utils/size-utils';\nimport { getDrawerTopOffset } from '../compute-layout';\nimport { useResize } from './use-resize';\nimport sharedStyles from '../../resize/styles.css.js';\nimport testutilStyles from '../../test-classes/styles.css.js';\nimport styles from './styles.css.js';\nfunction AppLayoutGlobalDrawerImplementation({\n  appLayoutInternals,\n  show,\n  activeGlobalDrawer\n}) {\n  var _a, _b, _c, _d, _e, _f;\n  const {\n    ariaLabels,\n    globalDrawersFocusControl,\n    isMobile,\n    placement,\n    onActiveGlobalDrawersChange,\n    onActiveDrawerResize,\n    minGlobalDrawersSizes,\n    maxGlobalDrawersSizes,\n    activeGlobalDrawersSizes,\n    verticalOffsets,\n    drawersOpenQueue\n  } = appLayoutInternals;\n  const drawerRef = useRef(null);\n  const activeDrawerId = (_a = activeGlobalDrawer === null || activeGlobalDrawer === void 0 ? void 0 : activeGlobalDrawer.id) !== null && _a !== void 0 ? _a : '';\n  const computedAriaLabels = {\n    closeButton: activeGlobalDrawer ? (_b = activeGlobalDrawer.ariaLabels) === null || _b === void 0 ? void 0 : _b.closeButton : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsClose,\n    content: activeGlobalDrawer ? (_c = activeGlobalDrawer.ariaLabels) === null || _c === void 0 ? void 0 : _c.drawerName : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools\n  };\n  const drawersTopOffset = getDrawerTopOffset(verticalOffsets, isMobile, placement);\n  const activeDrawerSize = (_d = activeDrawerId ? activeGlobalDrawersSizes[activeDrawerId] : 0) !== null && _d !== void 0 ? _d : 0;\n  const minDrawerSize = (_e = activeDrawerId ? minGlobalDrawersSizes[activeDrawerId] : 0) !== null && _e !== void 0 ? _e : 0;\n  const maxDrawerSize = (_f = activeDrawerId ? maxGlobalDrawersSizes[activeDrawerId] : 0) !== null && _f !== void 0 ? _f : 0;\n  const refs = globalDrawersFocusControl.refs[activeDrawerId];\n  const resizeProps = useResize({\n    currentWidth: activeDrawerSize,\n    minWidth: minDrawerSize,\n    maxWidth: maxDrawerSize,\n    panelRef: drawerRef,\n    handleRef: refs === null || refs === void 0 ? void 0 : refs.slider,\n    onResize: size => onActiveDrawerResize({\n      id: activeDrawerId,\n      size\n    })\n  });\n  const size = getLimitedValue(minDrawerSize, activeDrawerSize, maxDrawerSize);\n  const lastOpenedDrawerId = drawersOpenQueue.length ? drawersOpenQueue[0] : null;\n  const hasTriggerButton = !!(activeGlobalDrawer === null || activeGlobalDrawer === void 0 ? void 0 : activeGlobalDrawer.trigger);\n  return React.createElement(Transition, {\n    nodeRef: drawerRef,\n    in: show,\n    appear: show,\n    timeout: 0\n  }, state => {\n    var _a;\n    return React.createElement(\"aside\", {\n      id: activeDrawerId,\n      \"aria-hidden\": !show,\n      \"aria-label\": computedAriaLabels.content,\n      className: clsx(styles.drawer, styles['drawer-global'], styles[state], sharedStyles['with-motion'], {\n        [styles['drawer-hidden']]: !show,\n        [styles['last-opened']]: lastOpenedDrawerId === activeDrawerId,\n        [testutilStyles['active-drawer']]: show\n      }),\n      ref: drawerRef,\n      onBlur: e => {\n        // Drawers with trigger buttons follow this restore focus logic:\n        // If a previously focused element exists, restore focus on it; otherwise, focus on the associated trigger button.\n        // This function resets the previously focused element.\n        // If the drawer has no trigger button and loses focus on the previously focused element, it defaults to document.body,\n        // which ideally should never happen.\n        if (!hasTriggerButton) {\n          return;\n        }\n        if (!e.relatedTarget || !e.currentTarget.contains(e.relatedTarget)) {\n          globalDrawersFocusControl.loseFocus();\n        }\n      },\n      style: Object.assign({\n        blockSize: `calc(100vh - ${drawersTopOffset}px - ${placement.insetBlockEnd}px)`,\n        insetBlockStart: drawersTopOffset\n      }, !isMobile && {\n        [customCssProps.drawerSize]: `${['entering', 'entered'].includes(state) ? size : 0}px`\n      }),\n      \"data-testid\": `awsui-app-layout-drawer-${activeDrawerId}`\n    }, !isMobile && (activeGlobalDrawer === null || activeGlobalDrawer === void 0 ? void 0 : activeGlobalDrawer.resizable) && React.createElement(\"div\", {\n      className: styles['drawer-slider']\n    }, React.createElement(PanelResizeHandle, {\n      ref: refs === null || refs === void 0 ? void 0 : refs.slider,\n      position: \"side\",\n      className: testutilStyles['drawers-slider'],\n      ariaLabel: (_a = activeGlobalDrawer === null || activeGlobalDrawer === void 0 ? void 0 : activeGlobalDrawer.ariaLabels) === null || _a === void 0 ? void 0 : _a.resizeHandle,\n      ariaValuenow: resizeProps.relativeSize,\n      onKeyDown: resizeProps.onKeyDown,\n      onPointerDown: resizeProps.onPointerDown\n    })), React.createElement(\"div\", {\n      className: clsx(styles['drawer-content-container'], sharedStyles['with-motion'])\n    }, React.createElement(\"div\", {\n      className: clsx(styles['drawer-close-button'])\n    }, React.createElement(InternalButton, {\n      ariaLabel: computedAriaLabels.closeButton,\n      className: clsx({\n        [testutilStyles['active-drawer-close-button']]: activeDrawerId\n      }),\n      formAction: \"none\",\n      iconName: isMobile ? 'close' : 'angle-right',\n      onClick: () => onActiveGlobalDrawersChange(activeDrawerId),\n      ref: refs === null || refs === void 0 ? void 0 : refs.close,\n      variant: \"icon\"\n    })), React.createElement(\"div\", {\n      className: styles['drawer-content']\n    }, activeGlobalDrawer === null || activeGlobalDrawer === void 0 ? void 0 : activeGlobalDrawer.content)));\n  });\n}\nexport default AppLayoutGlobalDrawerImplementation;","map":{"version":3,"names":["React","useRef","Transition","clsx","InternalButton","PanelResizeHandle","customCssProps","getLimitedValue","getDrawerTopOffset","useResize","sharedStyles","testutilStyles","styles","AppLayoutGlobalDrawerImplementation","appLayoutInternals","show","activeGlobalDrawer","ariaLabels","globalDrawersFocusControl","isMobile","placement","onActiveGlobalDrawersChange","onActiveDrawerResize","minGlobalDrawersSizes","maxGlobalDrawersSizes","activeGlobalDrawersSizes","verticalOffsets","drawersOpenQueue","drawerRef","activeDrawerId","_a","id","computedAriaLabels","closeButton","_b","toolsClose","content","_c","drawerName","tools","drawersTopOffset","activeDrawerSize","_d","minDrawerSize","_e","maxDrawerSize","_f","refs","resizeProps","currentWidth","minWidth","maxWidth","panelRef","handleRef","slider","onResize","size","lastOpenedDrawerId","length","hasTriggerButton","trigger","createElement","nodeRef","in","appear","timeout","state","className","drawer","ref","onBlur","e","relatedTarget","currentTarget","contains","loseFocus","style","Object","assign","blockSize","insetBlockEnd","insetBlockStart","drawerSize","includes","resizable","position","ariaLabel","resizeHandle","ariaValuenow","relativeSize","onKeyDown","onPointerDown","formAction","iconName","onClick","close","variant"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/app-layout/visual-refresh-toolbar/drawer/global-drawer.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef } from 'react';\nimport { Transition } from 'react-transition-group';\nimport clsx from 'clsx';\n\nimport { InternalButton } from '../../../button/internal';\nimport PanelResizeHandle from '../../../internal/components/panel-resize-handle';\nimport { NonCancelableEventHandler } from '../../../internal/events';\nimport customCssProps from '../../../internal/generated/custom-css-properties';\nimport { getLimitedValue } from '../../../split-panel/utils/size-utils';\nimport { AppLayoutProps } from '../../interfaces';\nimport { getDrawerTopOffset } from '../compute-layout';\nimport { AppLayoutInternals } from '../interfaces';\nimport { useResize } from './use-resize';\n\nimport sharedStyles from '../../resize/styles.css.js';\nimport testutilStyles from '../../test-classes/styles.css.js';\nimport styles from './styles.css.js';\n\ninterface AppLayoutGlobalDrawerImplementationProps {\n  appLayoutInternals: AppLayoutInternals;\n  show: boolean;\n  activeGlobalDrawer:\n    | (AppLayoutProps.Drawer & { onShow?: NonCancelableEventHandler; onHide?: NonCancelableEventHandler })\n    | undefined;\n}\n\nfunction AppLayoutGlobalDrawerImplementation({\n  appLayoutInternals,\n  show,\n  activeGlobalDrawer,\n}: AppLayoutGlobalDrawerImplementationProps) {\n  const {\n    ariaLabels,\n    globalDrawersFocusControl,\n    isMobile,\n    placement,\n    onActiveGlobalDrawersChange,\n    onActiveDrawerResize,\n    minGlobalDrawersSizes,\n    maxGlobalDrawersSizes,\n    activeGlobalDrawersSizes,\n    verticalOffsets,\n    drawersOpenQueue,\n  } = appLayoutInternals;\n  const drawerRef = useRef<HTMLDivElement>(null);\n  const activeDrawerId = activeGlobalDrawer?.id ?? '';\n\n  const computedAriaLabels = {\n    closeButton: activeGlobalDrawer ? activeGlobalDrawer.ariaLabels?.closeButton : ariaLabels?.toolsClose,\n    content: activeGlobalDrawer ? activeGlobalDrawer.ariaLabels?.drawerName : ariaLabels?.tools,\n  };\n\n  const drawersTopOffset = getDrawerTopOffset(verticalOffsets, isMobile, placement);\n  const activeDrawerSize = (activeDrawerId ? activeGlobalDrawersSizes[activeDrawerId] : 0) ?? 0;\n  const minDrawerSize = (activeDrawerId ? minGlobalDrawersSizes[activeDrawerId] : 0) ?? 0;\n  const maxDrawerSize = (activeDrawerId ? maxGlobalDrawersSizes[activeDrawerId] : 0) ?? 0;\n  const refs = globalDrawersFocusControl.refs[activeDrawerId];\n  const resizeProps = useResize({\n    currentWidth: activeDrawerSize,\n    minWidth: minDrawerSize,\n    maxWidth: maxDrawerSize,\n    panelRef: drawerRef,\n    handleRef: refs?.slider,\n    onResize: size => onActiveDrawerResize({ id: activeDrawerId!, size }),\n  });\n  const size = getLimitedValue(minDrawerSize, activeDrawerSize, maxDrawerSize);\n  const lastOpenedDrawerId = drawersOpenQueue.length ? drawersOpenQueue[0] : null;\n  const hasTriggerButton = !!activeGlobalDrawer?.trigger;\n\n  return (\n    <Transition nodeRef={drawerRef} in={show} appear={show} timeout={0}>\n      {state => {\n        return (\n          <aside\n            id={activeDrawerId}\n            aria-hidden={!show}\n            aria-label={computedAriaLabels.content}\n            className={clsx(styles.drawer, styles['drawer-global'], styles[state], sharedStyles['with-motion'], {\n              [styles['drawer-hidden']]: !show,\n              [styles['last-opened']]: lastOpenedDrawerId === activeDrawerId,\n              [testutilStyles['active-drawer']]: show,\n            })}\n            ref={drawerRef}\n            onBlur={e => {\n              // Drawers with trigger buttons follow this restore focus logic:\n              // If a previously focused element exists, restore focus on it; otherwise, focus on the associated trigger button.\n              // This function resets the previously focused element.\n              // If the drawer has no trigger button and loses focus on the previously focused element, it defaults to document.body,\n              // which ideally should never happen.\n              if (!hasTriggerButton) {\n                return;\n              }\n\n              if (!e.relatedTarget || !e.currentTarget.contains(e.relatedTarget)) {\n                globalDrawersFocusControl.loseFocus();\n              }\n            }}\n            style={{\n              blockSize: `calc(100vh - ${drawersTopOffset}px - ${placement.insetBlockEnd}px)`,\n              insetBlockStart: drawersTopOffset,\n              ...(!isMobile && {\n                [customCssProps.drawerSize]: `${['entering', 'entered'].includes(state) ? size : 0}px`,\n              }),\n            }}\n            data-testid={`awsui-app-layout-drawer-${activeDrawerId}`}\n          >\n            {!isMobile && activeGlobalDrawer?.resizable && (\n              <div className={styles['drawer-slider']}>\n                <PanelResizeHandle\n                  ref={refs?.slider}\n                  position=\"side\"\n                  className={testutilStyles['drawers-slider']}\n                  ariaLabel={activeGlobalDrawer?.ariaLabels?.resizeHandle}\n                  ariaValuenow={resizeProps.relativeSize}\n                  onKeyDown={resizeProps.onKeyDown}\n                  onPointerDown={resizeProps.onPointerDown}\n                />\n              </div>\n            )}\n            <div className={clsx(styles['drawer-content-container'], sharedStyles['with-motion'])}>\n              <div className={clsx(styles['drawer-close-button'])}>\n                <InternalButton\n                  ariaLabel={computedAriaLabels.closeButton}\n                  className={clsx({\n                    [testutilStyles['active-drawer-close-button']]: activeDrawerId,\n                  })}\n                  formAction=\"none\"\n                  iconName={isMobile ? 'close' : 'angle-right'}\n                  onClick={() => onActiveGlobalDrawersChange(activeDrawerId)}\n                  ref={refs?.close}\n                  variant=\"icon\"\n                />\n              </div>\n              <div className={styles['drawer-content']}>{activeGlobalDrawer?.content}</div>\n            </div>\n          </aside>\n        );\n      }}\n    </Transition>\n  );\n}\n\nexport default AppLayoutGlobalDrawerImplementation;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}