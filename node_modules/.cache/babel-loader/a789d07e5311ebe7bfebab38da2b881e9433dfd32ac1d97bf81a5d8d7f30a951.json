{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { getTrackableValue } from '../utils';\nexport const SELECTION_ITEM = 'selection-item';\nexport const SELECTION_ROOT = 'selection-root';\n// A set, that compares items by their \"trackables\" (the results of applying `trackBy` to them)\nexport class ItemSet {\n  constructor(trackBy, items) {\n    this.map = new Map();\n    this.put = item => this.map.set.call(this.map, getTrackableValue(this.trackBy, item), item);\n    this.has = item => this.map.has.call(this.map, getTrackableValue(this.trackBy, item));\n    this.forEach = this.map.forEach.bind(this.map);\n    this.trackBy = trackBy;\n    items.forEach(this.put);\n  }\n}\nexport const focusMarkers = {\n  item: {\n    ['data-' + SELECTION_ITEM]: 'item'\n  },\n  all: {\n    ['data-' + SELECTION_ITEM]: 'all'\n  },\n  root: {\n    ['data-' + SELECTION_ROOT]: 'true'\n  }\n};","map":{"version":3,"names":["getTrackableValue","SELECTION_ITEM","SELECTION_ROOT","ItemSet","constructor","trackBy","items","map","Map","put","item","set","call","has","forEach","bind","focusMarkers","all","root"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/table/selection/utils.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { TableProps } from '../interfaces';\nimport { getTrackableValue } from '../utils';\n\nexport const SELECTION_ITEM = 'selection-item';\nexport const SELECTION_ROOT = 'selection-root';\n\n// A set, that compares items by their \"trackables\" (the results of applying `trackBy` to them)\nexport class ItemSet<T> {\n  constructor(trackBy: TableProps.TrackBy<T> | undefined, items: ReadonlyArray<T>) {\n    this.trackBy = trackBy;\n    items.forEach(this.put);\n  }\n  private trackBy: TableProps.TrackBy<T> | undefined;\n  private map: Map<unknown, T> = new Map();\n  put = (item: T) => this.map.set.call(this.map, getTrackableValue(this.trackBy, item), item);\n  has = (item: T) => this.map.has.call(this.map, getTrackableValue(this.trackBy, item));\n  forEach = this.map.forEach.bind(this.map);\n}\n\nexport const focusMarkers = {\n  item: { ['data-' + SELECTION_ITEM]: 'item' },\n  all: { ['data-' + SELECTION_ITEM]: 'all' },\n  root: { ['data-' + SELECTION_ROOT]: 'true' },\n};\n"],"mappings":"AAAA;AACA;AAGA,SAASA,iBAAiB,QAAQ,UAAU;AAE5C,OAAO,MAAMC,cAAc,GAAG,gBAAgB;AAC9C,OAAO,MAAMC,cAAc,GAAG,gBAAgB;AAE9C;AACA,OAAM,MAAOC,OAAO;EAClBC,YAAYC,OAA0C,EAAEC,KAAuB;IAKvE,KAAAC,GAAG,GAAoB,IAAIC,GAAG,EAAE;IACxC,KAAAC,GAAG,GAAIC,IAAO,IAAK,IAAI,CAACH,GAAG,CAACI,GAAG,CAACC,IAAI,CAAC,IAAI,CAACL,GAAG,EAAEP,iBAAiB,CAAC,IAAI,CAACK,OAAO,EAAEK,IAAI,CAAC,EAAEA,IAAI,CAAC;IAC3F,KAAAG,GAAG,GAAIH,IAAO,IAAK,IAAI,CAACH,GAAG,CAACM,GAAG,CAACD,IAAI,CAAC,IAAI,CAACL,GAAG,EAAEP,iBAAiB,CAAC,IAAI,CAACK,OAAO,EAAEK,IAAI,CAAC,CAAC;IACrF,KAAAI,OAAO,GAAG,IAAI,CAACP,GAAG,CAACO,OAAO,CAACC,IAAI,CAAC,IAAI,CAACR,GAAG,CAAC;IAPvC,IAAI,CAACF,OAAO,GAAGA,OAAO;IACtBC,KAAK,CAACQ,OAAO,CAAC,IAAI,CAACL,GAAG,CAAC;EACzB;;AAQF,OAAO,MAAMO,YAAY,GAAG;EAC1BN,IAAI,EAAE;IAAE,CAAC,OAAO,GAAGT,cAAc,GAAG;EAAM,CAAE;EAC5CgB,GAAG,EAAE;IAAE,CAAC,OAAO,GAAGhB,cAAc,GAAG;EAAK,CAAE;EAC1CiB,IAAI,EAAE;IAAE,CAAC,OAAO,GAAGhB,cAAc,GAAG;EAAM;CAC3C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}