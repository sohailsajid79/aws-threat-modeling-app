{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { getMinColumnSpan, getMinRowSpan } from \"../../internal/utils/layout\";\n/**\n * Creates an announcement object describing the last user move.\n */\nexport function createOperationAnnouncement(transition, direction) {\n  var _a, _b;\n  const {\n    operation,\n    layoutShift,\n    itemsLayout\n  } = transition;\n  const targetItem = (_a = itemsLayout.items.find(it => it.id === transition.draggableItem.id)) !== null && _a !== void 0 ? _a : null;\n  if (!layoutShift) {\n    return null;\n  }\n  const firstMove = layoutShift.moves[0];\n  const targetId = (_b = firstMove === null || firstMove === void 0 ? void 0 : firstMove.itemId) !== null && _b !== void 0 ? _b : targetItem === null || targetItem === void 0 ? void 0 : targetItem.id;\n  if (!targetId) {\n    return null;\n  }\n  const itemMoves = layoutShift.moves.filter(m => m.itemId === targetId);\n  const lastItemMove = itemMoves[itemMoves.length - 1];\n  const placement = lastItemMove !== null && lastItemMove !== void 0 ? lastItemMove : targetItem;\n  const conflicts = new Set(layoutShift.conflicts);\n  const disturbed = new Set(layoutShift.moves.map(move => move.itemId));\n  disturbed.delete(targetId);\n  return {\n    type: \"dnd-action\",\n    item: transition.draggableItem,\n    operation,\n    placement: {\n      x: placement.x,\n      y: placement.y,\n      width: placement.width,\n      height: placement.height\n    },\n    direction,\n    conflicts,\n    disturbed\n  };\n}\n/**\n * Applies i18nStrings to the announcement object to produce a string for the live region.\n */\nexport function announcementToString(announcement, items, i18nStrings, columns) {\n  if (!announcement) {\n    return \"\";\n  }\n  const item = announcement.item;\n  const toItem = id => items.find(it => (it === null || it === void 0 ? void 0 : it.id) === id);\n  const formatDirection = direction => {\n    if (!direction) {\n      return null;\n    }\n    return direction === \"left\" || direction === \"right\" ? \"horizontal\" : \"vertical\";\n  };\n  function createDndActionAnnouncement(announcement) {\n    const placement = announcement.placement;\n    const direction = formatDirection(announcement.direction);\n    const conflicts = [...announcement.conflicts].map(toItem);\n    const disturbed = [...announcement.disturbed].map(toItem);\n    switch (announcement.operation) {\n      case \"reorder\":\n        return i18nStrings.liveAnnouncementDndItemReordered({\n          item,\n          placement,\n          direction: direction,\n          conflicts,\n          disturbed\n        });\n      case \"resize\":\n        return i18nStrings.liveAnnouncementDndItemResized({\n          item,\n          placement,\n          direction: direction,\n          isMinimalColumnsReached: placement.width === getMinColumnSpan(item, columns),\n          isMinimalRowsReached: placement.height === getMinRowSpan(item),\n          conflicts,\n          disturbed\n        });\n      case \"insert\":\n        return i18nStrings.liveAnnouncementDndItemInserted({\n          item,\n          placement,\n          conflicts,\n          disturbed\n        });\n    }\n  }\n  function createItemRemovedAnnouncement(announcement) {\n    return i18nStrings.liveAnnouncementItemRemoved({\n      item,\n      disturbed: [...announcement.disturbed].map(toItem)\n    });\n  }\n  switch (announcement.type) {\n    case \"dnd-started\":\n      return i18nStrings.liveAnnouncementDndStarted(announcement.operation);\n    case \"dnd-action\":\n      return createDndActionAnnouncement(announcement);\n    case \"dnd-committed\":\n      return i18nStrings.liveAnnouncementDndCommitted(announcement.operation);\n    case \"dnd-discarded\":\n      return i18nStrings.liveAnnouncementDndDiscarded(announcement.operation);\n    case \"item-removed\":\n      return createItemRemovedAnnouncement(announcement);\n  }\n}","map":{"version":3,"names":["getMinColumnSpan","getMinRowSpan","createOperationAnnouncement","transition","direction","operation","layoutShift","itemsLayout","targetItem","_a","items","find","it","id","draggableItem","firstMove","moves","targetId","_b","itemId","itemMoves","filter","m","lastItemMove","length","placement","conflicts","Set","disturbed","map","move","delete","type","item","x","y","width","height","announcementToString","announcement","i18nStrings","columns","toItem","formatDirection","createDndActionAnnouncement","liveAnnouncementDndItemReordered","liveAnnouncementDndItemResized","isMinimalColumnsReached","isMinimalRowsReached","liveAnnouncementDndItemInserted","createItemRemovedAnnouncement","liveAnnouncementItemRemoved","liveAnnouncementDndStarted","liveAnnouncementDndCommitted","liveAnnouncementDndDiscarded"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/board/utils/announcements.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Direction, ItemId } from \"../../internal/interfaces\";\nimport { getMinColumnSpan, getMinRowSpan } from \"../../internal/utils/layout\";\nimport {\n  BoardProps,\n  DndActionAnnouncement,\n  ItemRemovedAnnouncement,\n  Transition,\n  TransitionAnnouncement,\n} from \"../interfaces\";\n\n/**\n * Creates an announcement object describing the last user move.\n */\nexport function createOperationAnnouncement<D>(\n  transition: Transition<D>,\n  direction: null | Direction,\n): null | DndActionAnnouncement {\n  const { operation, layoutShift, itemsLayout } = transition;\n  const targetItem = itemsLayout.items.find((it) => it.id === transition.draggableItem.id) ?? null;\n\n  if (!layoutShift) {\n    return null;\n  }\n\n  const firstMove = layoutShift.moves[0];\n  const targetId = firstMove?.itemId ?? targetItem?.id;\n  if (!targetId) {\n    return null;\n  }\n\n  const itemMoves = layoutShift.moves.filter((m) => m.itemId === targetId);\n  const lastItemMove = itemMoves[itemMoves.length - 1];\n  const placement = lastItemMove ?? targetItem;\n\n  const conflicts = new Set(layoutShift.conflicts);\n\n  const disturbed = new Set(layoutShift.moves.map((move) => move.itemId));\n  disturbed.delete(targetId);\n\n  return {\n    type: \"dnd-action\",\n    item: transition.draggableItem,\n    operation,\n    placement: {\n      x: placement.x,\n      y: placement.y,\n      width: placement.width,\n      height: placement.height,\n    },\n    direction,\n    conflicts,\n    disturbed,\n  };\n}\n\n/**\n * Applies i18nStrings to the announcement object to produce a string for the live region.\n */\nexport function announcementToString<D>(\n  announcement: TransitionAnnouncement,\n  items: readonly BoardProps.Item<D>[],\n  i18nStrings: BoardProps.I18nStrings<D>,\n  columns: number,\n): string {\n  if (!announcement) {\n    return \"\";\n  }\n  const item = announcement.item as BoardProps.Item<D>;\n\n  const toItem = (id: ItemId) => items.find((it) => it?.id === id)!;\n  const formatDirection = (direction: null | Direction) => {\n    if (!direction) {\n      return null;\n    }\n    return direction === \"left\" || direction === \"right\" ? \"horizontal\" : \"vertical\";\n  };\n\n  function createDndActionAnnouncement(announcement: DndActionAnnouncement) {\n    const placement = announcement.placement;\n    const direction = formatDirection(announcement.direction);\n    const conflicts = [...announcement.conflicts].map(toItem);\n    const disturbed = [...announcement.disturbed].map(toItem);\n\n    switch (announcement.operation) {\n      case \"reorder\":\n        return i18nStrings.liveAnnouncementDndItemReordered({\n          item,\n          placement,\n          direction: direction!,\n          conflicts,\n          disturbed,\n        });\n      case \"resize\":\n        return i18nStrings.liveAnnouncementDndItemResized({\n          item,\n          placement,\n          direction: direction!,\n          isMinimalColumnsReached: placement.width === getMinColumnSpan(item, columns),\n          isMinimalRowsReached: placement.height === getMinRowSpan(item),\n          conflicts,\n          disturbed,\n        });\n      case \"insert\":\n        return i18nStrings.liveAnnouncementDndItemInserted({ item, placement, conflicts, disturbed });\n    }\n  }\n\n  function createItemRemovedAnnouncement(announcement: ItemRemovedAnnouncement) {\n    return i18nStrings.liveAnnouncementItemRemoved({ item, disturbed: [...announcement.disturbed].map(toItem) });\n  }\n\n  switch (announcement.type) {\n    case \"dnd-started\":\n      return i18nStrings.liveAnnouncementDndStarted(announcement.operation);\n    case \"dnd-action\":\n      return createDndActionAnnouncement(announcement);\n    case \"dnd-committed\":\n      return i18nStrings.liveAnnouncementDndCommitted(announcement.operation);\n    case \"dnd-discarded\":\n      return i18nStrings.liveAnnouncementDndDiscarded(announcement.operation);\n    case \"item-removed\":\n      return createItemRemovedAnnouncement(announcement);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}