{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n/** *******************************************************************************************************************\n  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n  \n  Licensed under the Apache License, Version 2.0 (the \"License\").\n  You may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n  \n      http://www.apache.org/licenses/LICENSE-2.0\n  \n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.                                                                              *\n ******************************************************************************************************************** */\nimport { CognitoUserAttribute, CognitoUser } from 'amazon-cognito-identity-js';\nimport { useCallback, useState } from 'react';\nimport SignUpView from '../SignUpView';\nimport SignUpVerificationView from '../SignUpVerificationView';\nconst SignUp = _ref => {\n  let {\n    userPool,\n    resetView,\n    attributes,\n    hrefTermsAndConditions\n  } = _ref;\n  const [cognitoUser, setCognitoUser] = useState();\n  const [signUpResult, setSignUpResult] = useState();\n  const handleSignUp = useCallback(async data => {\n    if (userPool) {\n      const attributeList = data.attributes && Object.entries(data.attributes).map(n => {\n        return new CognitoUserAttribute({\n          Name: n[0],\n          Value: n[1]\n        });\n      });\n      return new Promise((resolve, reject) => {\n        userPool.signUp(data.username, data.password, attributeList || [], [], (err, result) => {\n          if (err) {\n            console.error('Congnito Signup Failure', err);\n            reject(err);\n          } else {\n            if (signUpResult?.userConfirmed) {\n              resetView();\n            } else {\n              setSignUpResult(result);\n              setCognitoUser(new CognitoUser({\n                Username: data.username,\n                Pool: userPool\n              }));\n            }\n          }\n          resolve(result);\n        });\n      });\n    }\n  }, [userPool, resetView, signUpResult?.userConfirmed]);\n  const handleConfirmRegistration = useCallback(async data => {\n    if (cognitoUser) {\n      return new Promise((resolve, reject) => {\n        cognitoUser.confirmRegistration(data.verificationCode, true, function (err, result) {\n          if (err) {\n            console.error('Congnito confirmRegistration Failure', err);\n            reject(err);\n          } else {\n            resolve(result);\n            resetView();\n          }\n        });\n      });\n    }\n  }, [cognitoUser, resetView]);\n  const handleResendCode = useCallback(async () => {\n    if (cognitoUser) {\n      return new Promise((resolve, reject) => {\n        cognitoUser.resendConfirmationCode(function (err, result) {\n          if (err) {\n            console.error('Congnito resendConfirmationCode Failure', err);\n            reject(err);\n          } else {\n            resolve(result);\n          }\n        });\n      });\n    }\n  }, [cognitoUser]);\n  return cognitoUser ? _jsx(SignUpVerificationView, {\n    onConfirm: handleConfirmRegistration,\n    onResendCode: handleResendCode,\n    signUpResult: signUpResult\n  }) : _jsx(SignUpView, {\n    onSignUp: handleSignUp,\n    attributes: attributes,\n    hrefTermsAndConditions: hrefTermsAndConditions\n  });\n};\nexport default SignUp;","map":{"version":3,"names":["jsx","_jsx","CognitoUserAttribute","CognitoUser","useCallback","useState","SignUpView","SignUpVerificationView","SignUp","_ref","userPool","resetView","attributes","hrefTermsAndConditions","cognitoUser","setCognitoUser","signUpResult","setSignUpResult","handleSignUp","data","attributeList","Object","entries","map","n","Name","Value","Promise","resolve","reject","signUp","username","password","err","result","console","error","userConfirmed","Username","Pool","handleConfirmRegistration","confirmRegistration","verificationCode","handleResendCode","resendConfirmationCode","onConfirm","onResendCode","onSignUp"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/@aws-northstar/ui/components/CognitoAuth/components/SignUp/index.js"],"sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\n/** *******************************************************************************************************************\n  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n  \n  Licensed under the Apache License, Version 2.0 (the \"License\").\n  You may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n  \n      http://www.apache.org/licenses/LICENSE-2.0\n  \n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.                                                                              *\n ******************************************************************************************************************** */\nimport { CognitoUserAttribute, CognitoUser } from 'amazon-cognito-identity-js';\nimport { useCallback, useState } from 'react';\nimport SignUpView from '../SignUpView';\nimport SignUpVerificationView from '../SignUpVerificationView';\nconst SignUp = ({ userPool, resetView, attributes, hrefTermsAndConditions }) => {\n    const [cognitoUser, setCognitoUser] = useState();\n    const [signUpResult, setSignUpResult] = useState();\n    const handleSignUp = useCallback(async (data) => {\n        if (userPool) {\n            const attributeList = data.attributes &&\n                Object.entries(data.attributes).map((n) => {\n                    return new CognitoUserAttribute({\n                        Name: n[0],\n                        Value: n[1],\n                    });\n                });\n            return new Promise((resolve, reject) => {\n                userPool.signUp(data.username, data.password, attributeList || [], [], (err, result) => {\n                    if (err) {\n                        console.error('Congnito Signup Failure', err);\n                        reject(err);\n                    }\n                    else {\n                        if (signUpResult?.userConfirmed) {\n                            resetView();\n                        }\n                        else {\n                            setSignUpResult(result);\n                            setCognitoUser(new CognitoUser({\n                                Username: data.username,\n                                Pool: userPool,\n                            }));\n                        }\n                    }\n                    resolve(result);\n                });\n            });\n        }\n    }, [userPool, resetView, signUpResult?.userConfirmed]);\n    const handleConfirmRegistration = useCallback(async (data) => {\n        if (cognitoUser) {\n            return new Promise((resolve, reject) => {\n                cognitoUser.confirmRegistration(data.verificationCode, true, function (err, result) {\n                    if (err) {\n                        console.error('Congnito confirmRegistration Failure', err);\n                        reject(err);\n                    }\n                    else {\n                        resolve(result);\n                        resetView();\n                    }\n                });\n            });\n        }\n    }, [cognitoUser, resetView]);\n    const handleResendCode = useCallback(async () => {\n        if (cognitoUser) {\n            return new Promise((resolve, reject) => {\n                cognitoUser.resendConfirmationCode(function (err, result) {\n                    if (err) {\n                        console.error('Congnito resendConfirmationCode Failure', err);\n                        reject(err);\n                    }\n                    else {\n                        resolve(result);\n                    }\n                });\n            });\n        }\n    }, [cognitoUser]);\n    return cognitoUser ? (_jsx(SignUpVerificationView, { onConfirm: handleConfirmRegistration, onResendCode: handleResendCode, signUpResult: signUpResult })) : (_jsx(SignUpView, { onSignUp: handleSignUp, attributes: attributes, hrefTermsAndConditions: hrefTermsAndConditions }));\n};\nexport default SignUp;\n"],"mappings":"AAAA,SAASA,GAAG,IAAIC,IAAI,QAAQ,mBAAmB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,oBAAoB,EAAEC,WAAW,QAAQ,4BAA4B;AAC9E,SAASC,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AAC7C,OAAOC,UAAU,MAAM,eAAe;AACtC,OAAOC,sBAAsB,MAAM,2BAA2B;AAC9D,MAAMC,MAAM,GAAGC,IAAA,IAAiE;EAAA,IAAhE;IAAEC,QAAQ;IAAEC,SAAS;IAAEC,UAAU;IAAEC;EAAuB,CAAC,GAAAJ,IAAA;EACvE,MAAM,CAACK,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,CAAC;EAChD,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,CAAC;EAClD,MAAMa,YAAY,GAAGd,WAAW,CAAC,MAAOe,IAAI,IAAK;IAC7C,IAAIT,QAAQ,EAAE;MACV,MAAMU,aAAa,GAAGD,IAAI,CAACP,UAAU,IACjCS,MAAM,CAACC,OAAO,CAACH,IAAI,CAACP,UAAU,CAAC,CAACW,GAAG,CAAEC,CAAC,IAAK;QACvC,OAAO,IAAItB,oBAAoB,CAAC;UAC5BuB,IAAI,EAAED,CAAC,CAAC,CAAC,CAAC;UACVE,KAAK,EAAEF,CAAC,CAAC,CAAC;QACd,CAAC,CAAC;MACN,CAAC,CAAC;MACN,OAAO,IAAIG,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACpCnB,QAAQ,CAACoB,MAAM,CAACX,IAAI,CAACY,QAAQ,EAAEZ,IAAI,CAACa,QAAQ,EAAEZ,aAAa,IAAI,EAAE,EAAE,EAAE,EAAE,CAACa,GAAG,EAAEC,MAAM,KAAK;UACpF,IAAID,GAAG,EAAE;YACLE,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEH,GAAG,CAAC;YAC7CJ,MAAM,CAACI,GAAG,CAAC;UACf,CAAC,MACI;YACD,IAAIjB,YAAY,EAAEqB,aAAa,EAAE;cAC7B1B,SAAS,CAAC,CAAC;YACf,CAAC,MACI;cACDM,eAAe,CAACiB,MAAM,CAAC;cACvBnB,cAAc,CAAC,IAAIZ,WAAW,CAAC;gBAC3BmC,QAAQ,EAAEnB,IAAI,CAACY,QAAQ;gBACvBQ,IAAI,EAAE7B;cACV,CAAC,CAAC,CAAC;YACP;UACJ;UACAkB,OAAO,CAACM,MAAM,CAAC;QACnB,CAAC,CAAC;MACN,CAAC,CAAC;IACN;EACJ,CAAC,EAAE,CAACxB,QAAQ,EAAEC,SAAS,EAAEK,YAAY,EAAEqB,aAAa,CAAC,CAAC;EACtD,MAAMG,yBAAyB,GAAGpC,WAAW,CAAC,MAAOe,IAAI,IAAK;IAC1D,IAAIL,WAAW,EAAE;MACb,OAAO,IAAIa,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACpCf,WAAW,CAAC2B,mBAAmB,CAACtB,IAAI,CAACuB,gBAAgB,EAAE,IAAI,EAAE,UAAUT,GAAG,EAAEC,MAAM,EAAE;UAChF,IAAID,GAAG,EAAE;YACLE,OAAO,CAACC,KAAK,CAAC,sCAAsC,EAAEH,GAAG,CAAC;YAC1DJ,MAAM,CAACI,GAAG,CAAC;UACf,CAAC,MACI;YACDL,OAAO,CAACM,MAAM,CAAC;YACfvB,SAAS,CAAC,CAAC;UACf;QACJ,CAAC,CAAC;MACN,CAAC,CAAC;IACN;EACJ,CAAC,EAAE,CAACG,WAAW,EAAEH,SAAS,CAAC,CAAC;EAC5B,MAAMgC,gBAAgB,GAAGvC,WAAW,CAAC,YAAY;IAC7C,IAAIU,WAAW,EAAE;MACb,OAAO,IAAIa,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACpCf,WAAW,CAAC8B,sBAAsB,CAAC,UAAUX,GAAG,EAAEC,MAAM,EAAE;UACtD,IAAID,GAAG,EAAE;YACLE,OAAO,CAACC,KAAK,CAAC,yCAAyC,EAAEH,GAAG,CAAC;YAC7DJ,MAAM,CAACI,GAAG,CAAC;UACf,CAAC,MACI;YACDL,OAAO,CAACM,MAAM,CAAC;UACnB;QACJ,CAAC,CAAC;MACN,CAAC,CAAC;IACN;EACJ,CAAC,EAAE,CAACpB,WAAW,CAAC,CAAC;EACjB,OAAOA,WAAW,GAAIb,IAAI,CAACM,sBAAsB,EAAE;IAAEsC,SAAS,EAAEL,yBAAyB;IAAEM,YAAY,EAAEH,gBAAgB;IAAE3B,YAAY,EAAEA;EAAa,CAAC,CAAC,GAAKf,IAAI,CAACK,UAAU,EAAE;IAAEyC,QAAQ,EAAE7B,YAAY;IAAEN,UAAU,EAAEA,UAAU;IAAEC,sBAAsB,EAAEA;EAAuB,CAAC,CAAE;AACtR,CAAC;AACD,eAAeL,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}