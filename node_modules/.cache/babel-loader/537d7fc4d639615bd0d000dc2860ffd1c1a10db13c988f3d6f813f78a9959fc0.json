{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useState, useEffect, useCallback } from 'react';\nimport { useStableCallback } from '../internal/stable-callback';\nimport { isDevelopment } from '../internal/is-development';\nimport { warnOnce } from '../internal/logging';\n/**\n * This hook allows you to make a component that can be used both in controlled\n * mode and uncontrolled mode. Pass in your component's props, and then implement\n * your component as if it was only controlled.\n *\n * A component determines its mode (either controlled or uncontrolled) on the\n * first render and keeps it for its lifetime. The mode cannot be switched later.\n *\n * @example\n * Using useControllableState in a custom checkbox component\n * ```\n * const [checked, setChecked] = useControllable(\n *   props.checked,\n *   props.onChange,\n *   props.defaultEnabled ?? false,\n *   {\n *     componentName: 'MyCheckboxComponent',\n *     propertyName: 'checked',\n *     changeHandler: 'onChange'\n *   }\n * );\n *\n * return (\n *   <input\n *     type=\"checkbox\"\n *     checked={checked}\n *     onChange={event => setChecked(event.target.checked)}\n *   />\n * );\n * ```\n *\n * @param controlledValue The value to use for controlled mode\n * @param changeHandler The update handler for controlled mode\n * @param defaultValue The initial value for uncontrolled mode\n * @param propertyDescriptions Property names used when emitting warnings\n * @param fireEvent Callback executed when controllable value changes\n * @returns A tuple of value and value setter\n */\nexport default function useControllable(controlledValue, changeHandler, defaultValue, propertyDescriptions) {\n  let fireEvent = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : (value, handler) => handler(value);\n  const {\n    componentName,\n    changeHandlerName,\n    propertyName\n  } = propertyDescriptions;\n  // The decision whether a component is controlled or uncontrolled is made on\n  // its first render and cannot be changed afterwards.\n  const [isControlled] = useState(controlledValue !== undefined);\n  // Most build tools will just strip this block from production builds, so we can\n  // skip the conditional hook lint error.\n  if (isDevelopment) {\n    // Print a warning if a controlled property was passed in without a change handler.\n    // This may fire every render if the change handler isn't memoized, but warnOnce\n    // will dedupe the error messages.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n      if (isControlled && changeHandler === undefined) {\n        warnOnce(componentName, `You provided a \\`${propertyName}\\` prop without an \\`${changeHandlerName}\\` handler. This will render a non-interactive component.`);\n      }\n    }, [changeHandler, isControlled, componentName, changeHandlerName, propertyName]);\n    // Print a warning if the component switches between controlled and uncontrolled mode.\n    const isControlledValueProvided = controlledValue !== undefined;\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n      if (isControlled !== isControlledValueProvided) {\n        const initialMode = isControlled ? 'controlled' : 'uncontrolled';\n        const modeNow = isControlledValueProvided ? 'controlled' : 'uncontrolled';\n        warnOnce(componentName, `A component tried to change ${initialMode} '${propertyName}' property to be ${modeNow}. ` + `This is not supported. Properties should not switch from ${initialMode} to ${modeNow} (or vice versa). ` + `Decide between using a controlled or uncontrolled mode for the lifetime of the component. ` + `More info: https://fb.me/react-controlled-components`);\n      }\n    }, [isControlled, isControlledValueProvided, propertyName, componentName]);\n  }\n  // This is the value that is used if the component is uncontrolled.\n  const [valueState, setValue] = useState(defaultValue);\n  const [isUncontrolledValueSet, setIsUncontrolledValueSet] = useState(false);\n  const stableFireEvent = useStableCallback((value, handler) => fireEvent(value, handler));\n  const setControlledValue = useCallback(value => {\n    if (changeHandler) {\n      stableFireEvent(value, changeHandler);\n    }\n  }, [changeHandler, stableFireEvent]);\n  // We allow changes to the defaultValue prop to be reflected until the component\n  // starts controlling it internally.\n  const currentUncontrolledValue = isUncontrolledValueSet ? valueState : defaultValue;\n  const setUncontrolledValue = useCallback(newValue => {\n    setValue(newValue);\n    setIsUncontrolledValueSet(true);\n  }, []);\n  return isControlled ? [controlledValue, setControlledValue] : [currentUncontrolledValue, setUncontrolledValue];\n}","map":{"version":3,"names":["useState","useEffect","useCallback","useStableCallback","isDevelopment","warnOnce","useControllable","controlledValue","changeHandler","defaultValue","propertyDescriptions","fireEvent","arguments","length","undefined","value","handler","componentName","changeHandlerName","propertyName","isControlled","isControlledValueProvided","initialMode","modeNow","valueState","setValue","isUncontrolledValueSet","setIsUncontrolledValueSet","stableFireEvent","setControlledValue","currentUncontrolledValue","setUncontrolledValue","newValue"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/@cloudscape-design/component-toolkit/use-controllable-state/use-controllable-state.js"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useState, useEffect, useCallback } from 'react';\nimport { useStableCallback } from '../internal/stable-callback';\nimport { isDevelopment } from '../internal/is-development';\nimport { warnOnce } from '../internal/logging';\n/**\n * This hook allows you to make a component that can be used both in controlled\n * mode and uncontrolled mode. Pass in your component's props, and then implement\n * your component as if it was only controlled.\n *\n * A component determines its mode (either controlled or uncontrolled) on the\n * first render and keeps it for its lifetime. The mode cannot be switched later.\n *\n * @example\n * Using useControllableState in a custom checkbox component\n * ```\n * const [checked, setChecked] = useControllable(\n *   props.checked,\n *   props.onChange,\n *   props.defaultEnabled ?? false,\n *   {\n *     componentName: 'MyCheckboxComponent',\n *     propertyName: 'checked',\n *     changeHandler: 'onChange'\n *   }\n * );\n *\n * return (\n *   <input\n *     type=\"checkbox\"\n *     checked={checked}\n *     onChange={event => setChecked(event.target.checked)}\n *   />\n * );\n * ```\n *\n * @param controlledValue The value to use for controlled mode\n * @param changeHandler The update handler for controlled mode\n * @param defaultValue The initial value for uncontrolled mode\n * @param propertyDescriptions Property names used when emitting warnings\n * @param fireEvent Callback executed when controllable value changes\n * @returns A tuple of value and value setter\n */\nexport default function useControllable(controlledValue, changeHandler, defaultValue, propertyDescriptions, fireEvent = (value, handler) => handler(value)) {\n    const { componentName, changeHandlerName, propertyName } = propertyDescriptions;\n    // The decision whether a component is controlled or uncontrolled is made on\n    // its first render and cannot be changed afterwards.\n    const [isControlled] = useState(controlledValue !== undefined);\n    // Most build tools will just strip this block from production builds, so we can\n    // skip the conditional hook lint error.\n    if (isDevelopment) {\n        // Print a warning if a controlled property was passed in without a change handler.\n        // This may fire every render if the change handler isn't memoized, but warnOnce\n        // will dedupe the error messages.\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        useEffect(() => {\n            if (isControlled && changeHandler === undefined) {\n                warnOnce(componentName, `You provided a \\`${propertyName}\\` prop without an \\`${changeHandlerName}\\` handler. This will render a non-interactive component.`);\n            }\n        }, [changeHandler, isControlled, componentName, changeHandlerName, propertyName]);\n        // Print a warning if the component switches between controlled and uncontrolled mode.\n        const isControlledValueProvided = controlledValue !== undefined;\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        useEffect(() => {\n            if (isControlled !== isControlledValueProvided) {\n                const initialMode = isControlled ? 'controlled' : 'uncontrolled';\n                const modeNow = isControlledValueProvided ? 'controlled' : 'uncontrolled';\n                warnOnce(componentName, `A component tried to change ${initialMode} '${propertyName}' property to be ${modeNow}. ` +\n                    `This is not supported. Properties should not switch from ${initialMode} to ${modeNow} (or vice versa). ` +\n                    `Decide between using a controlled or uncontrolled mode for the lifetime of the component. ` +\n                    `More info: https://fb.me/react-controlled-components`);\n            }\n        }, [isControlled, isControlledValueProvided, propertyName, componentName]);\n    }\n    // This is the value that is used if the component is uncontrolled.\n    const [valueState, setValue] = useState(defaultValue);\n    const [isUncontrolledValueSet, setIsUncontrolledValueSet] = useState(false);\n    const stableFireEvent = useStableCallback((value, handler) => fireEvent(value, handler));\n    const setControlledValue = useCallback((value) => {\n        if (changeHandler) {\n            stableFireEvent(value, changeHandler);\n        }\n    }, [changeHandler, stableFireEvent]);\n    // We allow changes to the defaultValue prop to be reflected until the component\n    // starts controlling it internally.\n    const currentUncontrolledValue = isUncontrolledValueSet ? valueState : defaultValue;\n    const setUncontrolledValue = useCallback((newValue) => {\n        setValue(newValue);\n        setIsUncontrolledValueSet(true);\n    }, []);\n    return isControlled ? [controlledValue, setControlledValue] : [currentUncontrolledValue, setUncontrolledValue];\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}