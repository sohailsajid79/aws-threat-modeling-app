{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useState } from 'react';\nimport clsx from 'clsx';\nimport { addMonths, endOfDay, isAfter, isBefore, isSameMonth, startOfDay, startOfMonth } from 'date-fns';\nimport { getDateLabel, renderTimeLabel } from '../../calendar/utils/intl';\nimport { getBaseDay } from '../../calendar/utils/navigation';\nimport { useInternalI18n } from '../../i18n/context.js';\nimport LiveRegion from '../../internal/components/live-region';\nimport { useMobile } from '../../internal/hooks/use-mobile/index.js';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport { formatDateTime, parseDate, splitDateTime } from '../../internal/utils/date-time';\nimport { normalizeLocale, normalizeStartOfWeek } from '../../internal/utils/locale';\nimport SpaceBetween from '../../space-between/internal';\nimport { Grids } from './grids';\nimport CalendarHeader from './header';\nimport RangeInputs from './range-inputs.js';\nimport { findDateToFocus, findMonthToDisplay } from './utils';\nimport styles from '../styles.css.js';\nexport default function DateRangePickerCalendar(_ref) {\n  let {\n    value,\n    setValue,\n    locale = '',\n    startOfWeek,\n    isDateEnabled = () => true,\n    dateDisabledReason = () => '',\n    i18nStrings,\n    dateOnly = false,\n    timeInputFormat = 'hh:mm:ss',\n    customAbsoluteRangeControl\n  } = _ref;\n  const isSingleGrid = useMobile();\n  const normalizedLocale = normalizeLocale('DateRangePicker', locale);\n  const normalizedStartOfWeek = normalizeStartOfWeek(startOfWeek, normalizedLocale);\n  const i18n = useInternalI18n('date-range-picker');\n  const [announcement, setAnnouncement] = useState('');\n  const [currentMonth, setCurrentMonth] = useState(() => findMonthToDisplay(value, isSingleGrid));\n  const [focusedDate, setFocusedDate] = useState(() => {\n    if (value.start.date) {\n      const startDate = parseDate(value.start.date);\n      if (isSameMonth(startDate, currentMonth)) {\n        return startDate;\n      }\n      if (!isSingleGrid && isSameMonth(startDate, addMonths(currentMonth, -1))) {\n        return startDate;\n      }\n    }\n    return findDateToFocus(parseDate(value.start.date), currentMonth, isDateEnabled);\n  });\n  const updateCurrentMonth = startDate => {\n    if (startDate.length >= 8) {\n      const newCurrentMonth = startOfMonth(parseDate(startDate));\n      setCurrentMonth(isSingleGrid ? newCurrentMonth : addMonths(newCurrentMonth, 1));\n    }\n  };\n  // recommended to include the start/end time announced with the selection\n  // because the user is not aware of the fact that a start/end time is also set as soon as they select a date\n  const announceStart = startDate => {\n    return i18n('i18nStrings.startDateLabel', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.startDateLabel) + ', ' + getDateLabel(normalizedLocale, startDate) + ', ' + i18n('i18nStrings.startTimeLabel', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.startTimeLabel) + ', ' + renderTimeLabel(normalizedLocale, startDate, timeInputFormat) + '. ';\n  };\n  const announceEnd = endDate => {\n    return i18n('i18nStrings.endDateLabel', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.endDateLabel) + ', ' + getDateLabel(normalizedLocale, endDate) + ', ' + i18n('i18nStrings.endTimeLabel', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.endTimeLabel) + ', ' + renderTimeLabel(normalizedLocale, endDate, timeInputFormat) + '. ';\n  };\n  const renderSelectedAbsoluteRangeAriaLive = i18n('i18nStrings.renderSelectedAbsoluteRangeAriaLive', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.renderSelectedAbsoluteRangeAriaLive, format => (startDate, endDate) => format({\n    startDate,\n    endDate\n  }));\n  const announceRange = (startDate, endDate) => {\n    if (!renderSelectedAbsoluteRangeAriaLive) {\n      return `${getDateLabel(normalizedLocale, startDate)} â€“ ${getDateLabel(normalizedLocale, endDate)}`;\n    }\n    return renderSelectedAbsoluteRangeAriaLive(getDateLabel(normalizedLocale, startDate), getDateLabel(normalizedLocale, endDate));\n  };\n  const onSelectDateHandler = selectedDate => {\n    const {\n      start,\n      end\n    } = value;\n    let newStart = undefined;\n    let newEnd = undefined;\n    let announcement = '';\n    // If both fields are empty, we set the start date\n    if (!start.date && !end.date) {\n      newStart = startOfDay(selectedDate);\n      announcement = announceStart(newStart);\n    }\n    // If both fields are set, we start new\n    else if (start.date && end.date) {\n      newStart = startOfDay(selectedDate);\n      newEnd = null;\n      announcement = announceStart(newStart);\n    }\n    // If only the END date is empty, we fill it (and swap dates if needed)\n    else if (start.date && !end.date) {\n      const parsedStartDate = parseDate(start.date);\n      if (isBefore(selectedDate, parsedStartDate)) {\n        // The user has selected the range backwards, so we swap start and end\n        newStart = startOfDay(selectedDate);\n        newEnd = endOfDay(parsedStartDate);\n        announcement = announceStart(newStart) + announceRange(newStart, newEnd);\n      } else {\n        newEnd = endOfDay(selectedDate);\n        announcement = announceEnd(newEnd) + announceRange(parsedStartDate, newEnd);\n      }\n    }\n    // If only the START date is empty, we fill it (and swap dates if needed)\n    else if (!start.date && end.date) {\n      const existingEndDate = parseDate(end.date);\n      if (isAfter(selectedDate, existingEndDate)) {\n        // The user has selected the range backwards, so we swap start and end\n        newStart = startOfDay(existingEndDate);\n        newEnd = endOfDay(selectedDate);\n        announcement = announceEnd(newEnd) + announceRange(newStart, newEnd);\n      } else {\n        newStart = startOfDay(selectedDate);\n        announcement = announceStart(newStart) + announceRange(newStart, existingEndDate);\n      }\n    }\n    const formatValue = (date, previous) => {\n      if (date === null) {\n        // explicitly reset to empty\n        return {\n          date: '',\n          time: ''\n        };\n      } else if (date === undefined) {\n        // keep old value\n        return previous;\n      }\n      return splitDateTime(formatDateTime(date));\n    };\n    setValue({\n      start: formatValue(newStart, value.start),\n      end: formatValue(newEnd, value.end)\n    });\n    setAnnouncement(announcement);\n  };\n  const onHeaderChangeMonthHandler = newCurrentMonth => {\n    setCurrentMonth(newCurrentMonth);\n    const newBaseDateMonth = isSingleGrid ? newCurrentMonth : addMonths(newCurrentMonth, -1);\n    const newBaseDate = getBaseDay(newBaseDateMonth, isDateEnabled);\n    setFocusedDate(newBaseDate);\n  };\n  const onChangeStartDate = value => {\n    setValue(oldValue => Object.assign(Object.assign({}, oldValue), {\n      start: Object.assign(Object.assign({}, oldValue.start), {\n        date: value\n      })\n    }));\n    updateCurrentMonth(value);\n  };\n  const interceptedSetValue = newValue => {\n    setValue(oldValue => {\n      const updated = typeof newValue === 'function' ? newValue(oldValue) : newValue;\n      updateCurrentMonth(updated.start.date);\n      return updated;\n    });\n  };\n  const headingIdPrefix = useUniqueId('date-range-picker-calendar-heading');\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: clsx(styles['calendar-container'], {\n      [styles['one-grid']]: isSingleGrid\n    })\n  }, React.createElement(SpaceBetween, {\n    size: \"s\"\n  }, React.createElement(\"div\", {\n    className: clsx(styles.calendar, {\n      [styles['one-grid']]: isSingleGrid\n    })\n  }, React.createElement(CalendarHeader, {\n    baseDate: currentMonth,\n    locale: normalizedLocale,\n    onChangeMonth: onHeaderChangeMonthHandler,\n    previousMonthLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.previousMonthAriaLabel,\n    nextMonthLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.nextMonthAriaLabel,\n    isSingleGrid: isSingleGrid,\n    headingIdPrefix: headingIdPrefix\n  }), React.createElement(Grids, {\n    isSingleGrid: isSingleGrid,\n    locale: normalizedLocale,\n    baseDate: currentMonth,\n    focusedDate: focusedDate,\n    onFocusedDateChange: setFocusedDate,\n    isDateEnabled: isDateEnabled,\n    dateDisabledReason: dateDisabledReason,\n    onSelectDate: onSelectDateHandler,\n    onChangeMonth: setCurrentMonth,\n    startOfWeek: normalizedStartOfWeek,\n    todayAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.todayAriaLabel,\n    selectedStartDate: parseDate(value.start.date, true),\n    selectedEndDate: parseDate(value.end.date, true),\n    headingIdPrefix: headingIdPrefix\n  })), React.createElement(RangeInputs, {\n    startDate: value.start.date,\n    onChangeStartDate: onChangeStartDate,\n    startTime: value.start.time,\n    onChangeStartTime: value => setValue(oldValue => Object.assign(Object.assign({}, oldValue), {\n      start: Object.assign(Object.assign({}, oldValue.start), {\n        time: value\n      })\n    })),\n    endDate: value.end.date,\n    onChangeEndDate: value => setValue(oldValue => Object.assign(Object.assign({}, oldValue), {\n      end: Object.assign(Object.assign({}, oldValue.end), {\n        date: value\n      })\n    })),\n    endTime: value.end.time,\n    onChangeEndTime: value => setValue(oldValue => Object.assign(Object.assign({}, oldValue), {\n      end: Object.assign(Object.assign({}, oldValue.end), {\n        time: value\n      })\n    })),\n    i18nStrings: i18nStrings,\n    dateOnly: dateOnly,\n    timeInputFormat: timeInputFormat\n  }), customAbsoluteRangeControl && React.createElement(\"div\", null, customAbsoluteRangeControl(value, interceptedSetValue)))), React.createElement(LiveRegion, {\n    className: styles['calendar-aria-live']\n  }, announcement));\n}","map":{"version":3,"names":["React","useState","clsx","addMonths","endOfDay","isAfter","isBefore","isSameMonth","startOfDay","startOfMonth","getDateLabel","renderTimeLabel","getBaseDay","useInternalI18n","LiveRegion","useMobile","useUniqueId","formatDateTime","parseDate","splitDateTime","normalizeLocale","normalizeStartOfWeek","SpaceBetween","Grids","CalendarHeader","RangeInputs","findDateToFocus","findMonthToDisplay","styles","DateRangePickerCalendar","_ref","value","setValue","locale","startOfWeek","isDateEnabled","dateDisabledReason","i18nStrings","dateOnly","timeInputFormat","customAbsoluteRangeControl","isSingleGrid","normalizedLocale","normalizedStartOfWeek","i18n","announcement","setAnnouncement","currentMonth","setCurrentMonth","focusedDate","setFocusedDate","start","date","startDate","updateCurrentMonth","length","newCurrentMonth","announceStart","startDateLabel","startTimeLabel","announceEnd","endDate","endDateLabel","endTimeLabel","renderSelectedAbsoluteRangeAriaLive","format","announceRange","onSelectDateHandler","selectedDate","end","newStart","undefined","newEnd","parsedStartDate","existingEndDate","formatValue","previous","time","onHeaderChangeMonthHandler","newBaseDateMonth","newBaseDate","onChangeStartDate","oldValue","Object","assign","interceptedSetValue","newValue","updated","headingIdPrefix","createElement","Fragment","className","size","calendar","baseDate","onChangeMonth","previousMonthLabel","previousMonthAriaLabel","nextMonthLabel","nextMonthAriaLabel","onFocusedDateChange","onSelectDate","todayAriaLabel","selectedStartDate","selectedEndDate","startTime","onChangeStartTime","onChangeEndDate","endTime","onChangeEndTime"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/date-range-picker/calendar/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useState } from 'react';\nimport clsx from 'clsx';\nimport { addMonths, endOfDay, isAfter, isBefore, isSameMonth, startOfDay, startOfMonth } from 'date-fns';\n\nimport { getDateLabel, renderTimeLabel } from '../../calendar/utils/intl';\nimport { getBaseDay } from '../../calendar/utils/navigation';\nimport { useInternalI18n } from '../../i18n/context.js';\nimport { BaseComponentProps } from '../../internal/base-component';\nimport LiveRegion from '../../internal/components/live-region';\nimport { useMobile } from '../../internal/hooks/use-mobile/index.js';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport { formatDateTime, parseDate, splitDateTime } from '../../internal/utils/date-time';\nimport { normalizeLocale, normalizeStartOfWeek } from '../../internal/utils/locale';\nimport SpaceBetween from '../../space-between/internal';\nimport { TimeInputProps } from '../../time-input/interfaces';\nimport { DateRangePickerProps, RangeCalendarI18nStrings } from '../interfaces';\nimport { Grids } from './grids';\nimport CalendarHeader from './header';\nimport RangeInputs from './range-inputs.js';\nimport { findDateToFocus, findMonthToDisplay } from './utils';\n\nimport styles from '../styles.css.js';\n\nexport interface DateRangePickerCalendarProps extends BaseComponentProps {\n  value: DateRangePickerProps.PendingAbsoluteValue;\n  setValue: React.Dispatch<React.SetStateAction<DateRangePickerProps.PendingAbsoluteValue>>;\n  locale?: string;\n  startOfWeek?: number;\n  isDateEnabled?: (date: Date) => boolean;\n  dateDisabledReason?: (date: Date) => string;\n  i18nStrings?: RangeCalendarI18nStrings;\n  dateOnly?: boolean;\n  timeInputFormat?: TimeInputProps.Format;\n  customAbsoluteRangeControl: DateRangePickerProps.AbsoluteRangeControl | undefined;\n}\n\nexport default function DateRangePickerCalendar({\n  value,\n  setValue,\n  locale = '',\n  startOfWeek,\n  isDateEnabled = () => true,\n  dateDisabledReason = () => '',\n  i18nStrings,\n  dateOnly = false,\n  timeInputFormat = 'hh:mm:ss',\n  customAbsoluteRangeControl,\n}: DateRangePickerCalendarProps) {\n  const isSingleGrid = useMobile();\n  const normalizedLocale = normalizeLocale('DateRangePicker', locale);\n  const normalizedStartOfWeek = normalizeStartOfWeek(startOfWeek, normalizedLocale);\n  const i18n = useInternalI18n('date-range-picker');\n\n  const [announcement, setAnnouncement] = useState('');\n  const [currentMonth, setCurrentMonth] = useState(() => findMonthToDisplay(value, isSingleGrid));\n  const [focusedDate, setFocusedDate] = useState<Date | null>(() => {\n    if (value.start.date) {\n      const startDate = parseDate(value.start.date);\n      if (isSameMonth(startDate, currentMonth)) {\n        return startDate;\n      }\n      if (!isSingleGrid && isSameMonth(startDate, addMonths(currentMonth, -1))) {\n        return startDate;\n      }\n    }\n    return findDateToFocus(parseDate(value.start.date), currentMonth, isDateEnabled);\n  });\n\n  const updateCurrentMonth = (startDate: string) => {\n    if (startDate.length >= 8) {\n      const newCurrentMonth = startOfMonth(parseDate(startDate));\n      setCurrentMonth(isSingleGrid ? newCurrentMonth : addMonths(newCurrentMonth, 1));\n    }\n  };\n\n  // recommended to include the start/end time announced with the selection\n  // because the user is not aware of the fact that a start/end time is also set as soon as they select a date\n  const announceStart = (startDate: Date) => {\n    return (\n      i18n('i18nStrings.startDateLabel', i18nStrings?.startDateLabel) +\n      ', ' +\n      getDateLabel(normalizedLocale, startDate) +\n      ', ' +\n      i18n('i18nStrings.startTimeLabel', i18nStrings?.startTimeLabel) +\n      ', ' +\n      renderTimeLabel(normalizedLocale, startDate, timeInputFormat) +\n      '. '\n    );\n  };\n\n  const announceEnd = (endDate: Date) => {\n    return (\n      i18n('i18nStrings.endDateLabel', i18nStrings?.endDateLabel) +\n      ', ' +\n      getDateLabel(normalizedLocale, endDate) +\n      ', ' +\n      i18n('i18nStrings.endTimeLabel', i18nStrings?.endTimeLabel) +\n      ', ' +\n      renderTimeLabel(normalizedLocale, endDate, timeInputFormat) +\n      '. '\n    );\n  };\n\n  const renderSelectedAbsoluteRangeAriaLive = i18n(\n    'i18nStrings.renderSelectedAbsoluteRangeAriaLive',\n    i18nStrings?.renderSelectedAbsoluteRangeAriaLive,\n    format => (startDate, endDate) => format({ startDate, endDate })\n  );\n\n  const announceRange = (startDate: Date, endDate: Date) => {\n    if (!renderSelectedAbsoluteRangeAriaLive) {\n      return `${getDateLabel(normalizedLocale, startDate)} â€“ ${getDateLabel(normalizedLocale, endDate)}`;\n    }\n    return renderSelectedAbsoluteRangeAriaLive(\n      getDateLabel(normalizedLocale, startDate),\n      getDateLabel(normalizedLocale, endDate)\n    );\n  };\n\n  const onSelectDateHandler = (selectedDate: Date) => {\n    const { start, end } = value;\n    let newStart: Date | undefined = undefined;\n    let newEnd: Date | null | undefined = undefined;\n    let announcement = '';\n\n    // If both fields are empty, we set the start date\n    if (!start.date && !end.date) {\n      newStart = startOfDay(selectedDate);\n      announcement = announceStart(newStart);\n    }\n    // If both fields are set, we start new\n    else if (start.date && end.date) {\n      newStart = startOfDay(selectedDate);\n      newEnd = null;\n      announcement = announceStart(newStart);\n    }\n    // If only the END date is empty, we fill it (and swap dates if needed)\n    else if (start.date && !end.date) {\n      const parsedStartDate = parseDate(start.date);\n\n      if (isBefore(selectedDate, parsedStartDate)) {\n        // The user has selected the range backwards, so we swap start and end\n        newStart = startOfDay(selectedDate);\n        newEnd = endOfDay(parsedStartDate);\n        announcement = announceStart(newStart) + announceRange(newStart, newEnd);\n      } else {\n        newEnd = endOfDay(selectedDate);\n        announcement = announceEnd(newEnd) + announceRange(parsedStartDate, newEnd);\n      }\n    }\n    // If only the START date is empty, we fill it (and swap dates if needed)\n    else if (!start.date && end.date) {\n      const existingEndDate = parseDate(end.date);\n\n      if (isAfter(selectedDate, existingEndDate)) {\n        // The user has selected the range backwards, so we swap start and end\n        newStart = startOfDay(existingEndDate);\n        newEnd = endOfDay(selectedDate);\n        announcement = announceEnd(newEnd) + announceRange(newStart, newEnd);\n      } else {\n        newStart = startOfDay(selectedDate);\n        announcement = announceStart(newStart) + announceRange(newStart, existingEndDate);\n      }\n    }\n\n    const formatValue = (\n      date: Date | null | undefined,\n      previous: DateRangePickerProps.DateTimeStrings\n    ): DateRangePickerProps.DateTimeStrings => {\n      if (date === null) {\n        // explicitly reset to empty\n        return { date: '', time: '' };\n      } else if (date === undefined) {\n        // keep old value\n        return previous;\n      }\n      return splitDateTime(formatDateTime(date));\n    };\n\n    setValue({\n      start: formatValue(newStart, value.start),\n      end: formatValue(newEnd, value.end),\n    });\n    setAnnouncement(announcement);\n  };\n\n  const onHeaderChangeMonthHandler = (newCurrentMonth: Date) => {\n    setCurrentMonth(newCurrentMonth);\n\n    const newBaseDateMonth = isSingleGrid ? newCurrentMonth : addMonths(newCurrentMonth, -1);\n    const newBaseDate = getBaseDay(newBaseDateMonth, isDateEnabled);\n    setFocusedDate(newBaseDate);\n  };\n\n  const onChangeStartDate = (value: string) => {\n    setValue((oldValue: DateRangePickerProps.PendingAbsoluteValue) => ({\n      ...oldValue,\n      start: { ...oldValue.start, date: value },\n    }));\n    updateCurrentMonth(value);\n  };\n\n  const interceptedSetValue: DateRangePickerCalendarProps['setValue'] = newValue => {\n    setValue(oldValue => {\n      const updated = typeof newValue === 'function' ? newValue(oldValue) : newValue;\n      updateCurrentMonth(updated.start.date);\n      return updated;\n    });\n  };\n\n  const headingIdPrefix = useUniqueId('date-range-picker-calendar-heading');\n  return (\n    <>\n      <div\n        className={clsx(styles['calendar-container'], {\n          [styles['one-grid']]: isSingleGrid,\n        })}\n      >\n        <SpaceBetween size=\"s\">\n          <div\n            className={clsx(styles.calendar, {\n              [styles['one-grid']]: isSingleGrid,\n            })}\n          >\n            <CalendarHeader\n              baseDate={currentMonth}\n              locale={normalizedLocale}\n              onChangeMonth={onHeaderChangeMonthHandler}\n              previousMonthLabel={i18nStrings?.previousMonthAriaLabel}\n              nextMonthLabel={i18nStrings?.nextMonthAriaLabel}\n              isSingleGrid={isSingleGrid}\n              headingIdPrefix={headingIdPrefix}\n            />\n\n            <Grids\n              isSingleGrid={isSingleGrid}\n              locale={normalizedLocale}\n              baseDate={currentMonth}\n              focusedDate={focusedDate}\n              onFocusedDateChange={setFocusedDate}\n              isDateEnabled={isDateEnabled}\n              dateDisabledReason={dateDisabledReason}\n              onSelectDate={onSelectDateHandler}\n              onChangeMonth={setCurrentMonth}\n              startOfWeek={normalizedStartOfWeek}\n              todayAriaLabel={i18nStrings?.todayAriaLabel}\n              selectedStartDate={parseDate(value.start.date, true)}\n              selectedEndDate={parseDate(value.end.date, true)}\n              headingIdPrefix={headingIdPrefix}\n            />\n          </div>\n\n          <RangeInputs\n            startDate={value.start.date}\n            onChangeStartDate={onChangeStartDate}\n            startTime={value.start.time}\n            onChangeStartTime={value =>\n              setValue(oldValue => ({ ...oldValue, start: { ...oldValue.start, time: value } }))\n            }\n            endDate={value.end.date}\n            onChangeEndDate={value => setValue(oldValue => ({ ...oldValue, end: { ...oldValue.end, date: value } }))}\n            endTime={value.end.time}\n            onChangeEndTime={value => setValue(oldValue => ({ ...oldValue, end: { ...oldValue.end, time: value } }))}\n            i18nStrings={i18nStrings}\n            dateOnly={dateOnly}\n            timeInputFormat={timeInputFormat}\n          />\n          {customAbsoluteRangeControl && <div>{customAbsoluteRangeControl(value, interceptedSetValue)}</div>}\n        </SpaceBetween>\n      </div>\n      <LiveRegion className={styles['calendar-aria-live']}>{announcement}</LiveRegion>\n    </>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}