{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { Fragment, memo, useEffect } from 'react';\nimport clsx from 'clsx';\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\nimport styles from './styles.css.js';\nexport default memo(LabelsMeasure);\n// Places the invisible left-hand side labels to calculate their maximum width.\nfunction LabelsMeasure({\n  scale,\n  ticks,\n  tickFormatter,\n  autoWidth,\n  maxLabelsWidth\n}) {\n  const [width, ref] = useContainerQuery(rect => rect.contentBoxWidth);\n  // Tell elements's width to the parent.\n  useEffect(() => {\n    autoWidth(width || 0);\n  }, [autoWidth, width]);\n  const labelMapper = value => {\n    const scaledValue = scale.d3Scale(value);\n    if (scaledValue === undefined || !isFinite(scaledValue)) {\n      return null;\n    }\n    const formattedValue = tickFormatter ? tickFormatter(value) : value.toString();\n    const lines = (formattedValue + '').split('\\n');\n    return React.createElement(Fragment, {\n      key: `${value}`\n    }, lines.map((line, lineIndex) => React.createElement(\"div\", {\n      key: lineIndex,\n      className: styles['labels-inline-start__label'],\n      \"aria-hidden\": \"true\"\n    }, line)));\n  };\n  return React.createElement(\"div\", {\n    ref: ref,\n    className: clsx(styles['labels-inline-start'], styles['labels-inline-start--hidden']),\n    style: {\n      maxWidth: maxLabelsWidth\n    }\n  }, ticks.map(labelMapper));\n}","map":{"version":3,"names":["React","Fragment","memo","useEffect","clsx","useContainerQuery","styles","LabelsMeasure","scale","ticks","tickFormatter","autoWidth","maxLabelsWidth","width","ref","rect","contentBoxWidth","labelMapper","value","scaledValue","d3Scale","undefined","isFinite","formattedValue","toString","lines","split","createElement","key","map","line","lineIndex","className","style","maxWidth"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/internal/components/cartesian-chart/labels-measure.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { Fragment, memo, useEffect } from 'react';\nimport clsx from 'clsx';\n\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\n\nimport { ChartDataTypes } from '../../../mixed-line-bar-chart/interfaces';\nimport { ChartScale, NumericChartScale } from './scales';\n\nimport styles from './styles.css.js';\n\ninterface LabelsMeasureProps {\n  scale: ChartScale | NumericChartScale;\n  ticks: readonly ChartDataTypes[];\n  tickFormatter?: (value: ChartDataTypes) => string;\n  autoWidth: (value: number) => void;\n  maxLabelsWidth?: number;\n}\n\nexport default memo(LabelsMeasure) as typeof LabelsMeasure;\n\n// Places the invisible left-hand side labels to calculate their maximum width.\nfunction LabelsMeasure({ scale, ticks, tickFormatter, autoWidth, maxLabelsWidth }: LabelsMeasureProps) {\n  const [width, ref] = useContainerQuery<number>(rect => rect.contentBoxWidth);\n\n  // Tell elements's width to the parent.\n  useEffect(() => {\n    autoWidth(width || 0);\n  }, [autoWidth, width]);\n\n  const labelMapper = (value: ChartDataTypes) => {\n    const scaledValue = scale.d3Scale(value as any);\n    if (scaledValue === undefined || !isFinite(scaledValue)) {\n      return null;\n    }\n\n    const formattedValue = tickFormatter ? tickFormatter(value as any) : value.toString();\n    const lines = (formattedValue + '').split('\\n');\n\n    return (\n      <Fragment key={`${value}`}>\n        {lines.map((line, lineIndex) => (\n          <div key={lineIndex} className={styles['labels-inline-start__label']} aria-hidden=\"true\">\n            {line}\n          </div>\n        ))}\n      </Fragment>\n    );\n  };\n\n  return (\n    <div\n      ref={ref}\n      className={clsx(styles['labels-inline-start'], styles['labels-inline-start--hidden'])}\n      style={{ maxWidth: maxLabelsWidth }}\n    >\n      {ticks.map(labelMapper)}\n    </div>\n  );\n}\n"],"mappings":"AAAA;AACA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,IAAI,EAAEC,SAAS,QAAQ,OAAO;AACxD,OAAOC,IAAI,MAAM,MAAM;AAEvB,SAASC,iBAAiB,QAAQ,sCAAsC;AAKxE,OAAOC,MAAM,MAAM,iBAAiB;AAUpC,eAAeJ,IAAI,CAACK,aAAa,CAAyB;AAE1D;AACA,SAASA,aAAaA,CAAC;EAAEC,KAAK;EAAEC,KAAK;EAAEC,aAAa;EAAEC,SAAS;EAAEC;AAAc,CAAsB;EACnG,MAAM,CAACC,KAAK,EAAEC,GAAG,CAAC,GAAGT,iBAAiB,CAASU,IAAI,IAAIA,IAAI,CAACC,eAAe,CAAC;EAE5E;EACAb,SAAS,CAAC,MAAK;IACbQ,SAAS,CAACE,KAAK,IAAI,CAAC,CAAC;EACvB,CAAC,EAAE,CAACF,SAAS,EAAEE,KAAK,CAAC,CAAC;EAEtB,MAAMI,WAAW,GAAIC,KAAqB,IAAI;IAC5C,MAAMC,WAAW,GAAGX,KAAK,CAACY,OAAO,CAACF,KAAY,CAAC;IAC/C,IAAIC,WAAW,KAAKE,SAAS,IAAI,CAACC,QAAQ,CAACH,WAAW,CAAC,EAAE;MACvD,OAAO,IAAI;;IAGb,MAAMI,cAAc,GAAGb,aAAa,GAAGA,aAAa,CAACQ,KAAY,CAAC,GAAGA,KAAK,CAACM,QAAQ,EAAE;IACrF,MAAMC,KAAK,GAAG,CAACF,cAAc,GAAG,EAAE,EAAEG,KAAK,CAAC,IAAI,CAAC;IAE/C,OACE1B,KAAA,CAAA2B,aAAA,CAAC1B,QAAQ;MAAC2B,GAAG,EAAE,GAAGV,KAAK;IAAE,GACtBO,KAAK,CAACI,GAAG,CAAC,CAACC,IAAI,EAAEC,SAAS,KACzB/B,KAAA,CAAA2B,aAAA;MAAKC,GAAG,EAAEG,SAAS;MAAEC,SAAS,EAAE1B,MAAM,CAAC,4BAA4B,CAAC;MAAA,eAAc;IAAM,GACrFwB,IAAI,CAER,CAAC,CACO;EAEf,CAAC;EAED,OACE9B,KAAA,CAAA2B,aAAA;IACEb,GAAG,EAAEA,GAAG;IACRkB,SAAS,EAAE5B,IAAI,CAACE,MAAM,CAAC,qBAAqB,CAAC,EAAEA,MAAM,CAAC,6BAA6B,CAAC,CAAC;IACrF2B,KAAK,EAAE;MAAEC,QAAQ,EAAEtB;IAAc;EAAE,GAElCH,KAAK,CAACoB,GAAG,CAACZ,WAAW,CAAC,CACnB;AAEV","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}