{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo } from 'react';\nimport { useInternalI18n } from '../../../i18n/context';\nimport InternalLink from '../../../link/internal';\nimport InternalStatusIndicator from '../../../status-indicator/internal';\nimport { fireNonCancelableEvent } from '../../events';\nimport styles from './styles.css.js';\nexport function getChartStatus(_ref) {\n  let {\n    externalData,\n    visibleData,\n    statusType\n  } = _ref;\n  const isEmpty = !visibleData || visibleData.length === 0;\n  const isNoMatch = isEmpty && visibleData.length !== externalData.length;\n  const showChart = statusType === 'finished' && !isEmpty;\n  return {\n    isEmpty,\n    isNoMatch,\n    showChart\n  };\n}\nexport default function ChartStatusContainer(_ref2) {\n  let {\n    statusType,\n    errorText,\n    loadingText,\n    recoveryText,\n    noMatch,\n    empty,\n    onRecoveryClick,\n    isNoMatch,\n    isEmpty,\n    showChart\n  } = _ref2;\n  const i18n = useInternalI18n('[charts]');\n  const statusContainer = useMemo(() => {\n    const handleRecoveryClick = event => {\n      event.preventDefault();\n      fireNonCancelableEvent(onRecoveryClick);\n    };\n    if (statusType === 'error') {\n      const renderedRecoveryText = i18n('recoveryText', recoveryText);\n      return React.createElement(\"span\", null, React.createElement(InternalStatusIndicator, {\n        type: \"error\"\n      }, i18n('errorText', errorText)), ' ', !!renderedRecoveryText && !!onRecoveryClick && React.createElement(InternalLink, {\n        onFollow: handleRecoveryClick,\n        variant: \"recovery\"\n      }, renderedRecoveryText));\n    }\n    if (statusType === 'loading') {\n      return React.createElement(InternalStatusIndicator, {\n        type: \"loading\"\n      }, i18n('loadingText', loadingText));\n    }\n    if (isNoMatch) {\n      return React.createElement(\"div\", {\n        className: styles.empty\n      }, noMatch);\n    }\n    if (isEmpty) {\n      return React.createElement(\"div\", {\n        className: styles.empty\n      }, empty);\n    }\n  }, [i18n, statusType, onRecoveryClick, isEmpty, isNoMatch, recoveryText, loadingText, errorText, empty, noMatch]);\n  return React.createElement(\"div\", {\n    className: styles.root,\n    \"aria-live\": \"polite\",\n    \"aria-atomic\": \"true\"\n  }, !showChart && statusContainer);\n}","map":{"version":3,"names":["React","useMemo","useInternalI18n","InternalLink","InternalStatusIndicator","fireNonCancelableEvent","styles","getChartStatus","_ref","externalData","visibleData","statusType","isEmpty","length","isNoMatch","showChart","ChartStatusContainer","_ref2","errorText","loadingText","recoveryText","noMatch","empty","onRecoveryClick","i18n","statusContainer","handleRecoveryClick","event","preventDefault","renderedRecoveryText","createElement","type","onFollow","variant","className","root"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/internal/components/chart-status-container/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo } from 'react';\n\nimport { useInternalI18n } from '../../../i18n/context';\nimport InternalLink from '../../../link/internal';\nimport InternalStatusIndicator from '../../../status-indicator/internal';\nimport { BaseComponentProps } from '../../base-component';\nimport { fireNonCancelableEvent, NonCancelableEventHandler } from '../../events';\n\nimport styles from './styles.css.js';\n\ninterface ChartStatusContainerProps extends BaseComponentProps {\n  statusType: 'loading' | 'finished' | 'error';\n\n  empty?: React.ReactNode;\n  noMatch?: React.ReactNode;\n\n  loadingText?: string;\n  errorText?: string;\n  recoveryText?: string;\n\n  onRecoveryClick?: NonCancelableEventHandler;\n\n  // From `getChartStatus`\n  isEmpty?: boolean;\n  isNoMatch?: boolean;\n  showChart?: boolean;\n}\n\nexport function getChartStatus<T, U>({\n  externalData,\n  visibleData,\n  statusType,\n}: {\n  externalData: ReadonlyArray<T>;\n  visibleData: ReadonlyArray<U>;\n  statusType: 'loading' | 'finished' | 'error';\n}) {\n  const isEmpty = !visibleData || visibleData.length === 0;\n  const isNoMatch = isEmpty && visibleData.length !== externalData.length;\n  const showChart = statusType === 'finished' && !isEmpty;\n  return { isEmpty, isNoMatch, showChart };\n}\n\nexport default function ChartStatusContainer({\n  statusType,\n  errorText,\n  loadingText,\n  recoveryText,\n  noMatch,\n  empty,\n  onRecoveryClick,\n  isNoMatch,\n  isEmpty,\n  showChart,\n}: ChartStatusContainerProps) {\n  const i18n = useInternalI18n('[charts]');\n\n  const statusContainer = useMemo(() => {\n    const handleRecoveryClick = (event: CustomEvent) => {\n      event.preventDefault();\n      fireNonCancelableEvent(onRecoveryClick);\n    };\n    if (statusType === 'error') {\n      const renderedRecoveryText = i18n('recoveryText', recoveryText);\n      return (\n        <span>\n          <InternalStatusIndicator type=\"error\">{i18n('errorText', errorText)}</InternalStatusIndicator>{' '}\n          {!!renderedRecoveryText && !!onRecoveryClick && (\n            <InternalLink onFollow={handleRecoveryClick} variant=\"recovery\">\n              {renderedRecoveryText}\n            </InternalLink>\n          )}\n        </span>\n      );\n    }\n\n    if (statusType === 'loading') {\n      return <InternalStatusIndicator type=\"loading\">{i18n('loadingText', loadingText)}</InternalStatusIndicator>;\n    }\n\n    if (isNoMatch) {\n      return <div className={styles.empty}>{noMatch}</div>;\n    }\n\n    if (isEmpty) {\n      return <div className={styles.empty}>{empty}</div>;\n    }\n  }, [i18n, statusType, onRecoveryClick, isEmpty, isNoMatch, recoveryText, loadingText, errorText, empty, noMatch]);\n\n  return (\n    <div className={styles.root} aria-live=\"polite\" aria-atomic=\"true\">\n      {!showChart && statusContainer}\n    </div>\n  );\n}\n"],"mappings":"AAAA;AACA;AACA,OAAOA,KAAK,IAAIC,OAAO,QAAQ,OAAO;AAEtC,SAASC,eAAe,QAAQ,uBAAuB;AACvD,OAAOC,YAAY,MAAM,wBAAwB;AACjD,OAAOC,uBAAuB,MAAM,oCAAoC;AAExE,SAASC,sBAAsB,QAAmC,cAAc;AAEhF,OAAOC,MAAM,MAAM,iBAAiB;AAoBpC,OAAM,SAAUC,cAAcA,CAAAC,IAAA,EAQ7B;EAAA,IARoC;IACnCC,YAAY;IACZC,WAAW;IACXC;EAAU,CAKX,GAAAH,IAAA;EACC,MAAMI,OAAO,GAAG,CAACF,WAAW,IAAIA,WAAW,CAACG,MAAM,KAAK,CAAC;EACxD,MAAMC,SAAS,GAAGF,OAAO,IAAIF,WAAW,CAACG,MAAM,KAAKJ,YAAY,CAACI,MAAM;EACvE,MAAME,SAAS,GAAGJ,UAAU,KAAK,UAAU,IAAI,CAACC,OAAO;EACvD,OAAO;IAAEA,OAAO;IAAEE,SAAS;IAAEC;EAAS,CAAE;AAC1C;AAEA,eAAc,SAAUC,oBAAoBA,CAAAC,KAAA,EAWhB;EAAA,IAXiB;IAC3CN,UAAU;IACVO,SAAS;IACTC,WAAW;IACXC,YAAY;IACZC,OAAO;IACPC,KAAK;IACLC,eAAe;IACfT,SAAS;IACTF,OAAO;IACPG;EAAS,CACiB,GAAAE,KAAA;EAC1B,MAAMO,IAAI,GAAGtB,eAAe,CAAC,UAAU,CAAC;EAExC,MAAMuB,eAAe,GAAGxB,OAAO,CAAC,MAAK;IACnC,MAAMyB,mBAAmB,GAAIC,KAAkB,IAAI;MACjDA,KAAK,CAACC,cAAc,EAAE;MACtBvB,sBAAsB,CAACkB,eAAe,CAAC;IACzC,CAAC;IACD,IAAIZ,UAAU,KAAK,OAAO,EAAE;MAC1B,MAAMkB,oBAAoB,GAAGL,IAAI,CAAC,cAAc,EAAEJ,YAAY,CAAC;MAC/D,OACEpB,KAAA,CAAA8B,aAAA,eACE9B,KAAA,CAAA8B,aAAA,CAAC1B,uBAAuB;QAAC2B,IAAI,EAAC;MAAO,GAAEP,IAAI,CAAC,WAAW,EAAEN,SAAS,CAAC,CAA2B,EAAC,GAAG,EACjG,CAAC,CAACW,oBAAoB,IAAI,CAAC,CAACN,eAAe,IAC1CvB,KAAA,CAAA8B,aAAA,CAAC3B,YAAY;QAAC6B,QAAQ,EAAEN,mBAAmB;QAAEO,OAAO,EAAC;MAAU,GAC5DJ,oBAAoB,CAExB,CACI;;IAIX,IAAIlB,UAAU,KAAK,SAAS,EAAE;MAC5B,OAAOX,KAAA,CAAA8B,aAAA,CAAC1B,uBAAuB;QAAC2B,IAAI,EAAC;MAAS,GAAEP,IAAI,CAAC,aAAa,EAAEL,WAAW,CAAC,CAA2B;;IAG7G,IAAIL,SAAS,EAAE;MACb,OAAOd,KAAA,CAAA8B,aAAA;QAAKI,SAAS,EAAE5B,MAAM,CAACgB;MAAK,GAAGD,OAAO,CAAO;;IAGtD,IAAIT,OAAO,EAAE;MACX,OAAOZ,KAAA,CAAA8B,aAAA;QAAKI,SAAS,EAAE5B,MAAM,CAACgB;MAAK,GAAGA,KAAK,CAAO;;EAEtD,CAAC,EAAE,CAACE,IAAI,EAAEb,UAAU,EAAEY,eAAe,EAAEX,OAAO,EAAEE,SAAS,EAAEM,YAAY,EAAED,WAAW,EAAED,SAAS,EAAEI,KAAK,EAAED,OAAO,CAAC,CAAC;EAEjH,OACErB,KAAA,CAAA8B,aAAA;IAAKI,SAAS,EAAE5B,MAAM,CAAC6B,IAAI;IAAA,aAAY,QAAQ;IAAA,eAAa;EAAM,GAC/D,CAACpB,SAAS,IAAIU,eAAe,CAC1B;AAEV","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}