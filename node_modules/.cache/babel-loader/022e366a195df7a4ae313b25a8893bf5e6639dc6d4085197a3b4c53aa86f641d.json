{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useLayoutEffect, useState } from 'react';\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\nimport { awsuiPluginsInternal } from '../../internal/plugins/api';\nfunction checkAlreadyExists(value, propName) {\n  if (value) {\n    warnOnce('AppLayout', `Another app layout instance on this page already defines ${propName} property. This instance will be ignored.`);\n    return true;\n  }\n  return false;\n}\nfunction mergeProps(ownProps, additionalProps) {\n  var _a;\n  const toolbar = {};\n  for (const props of [ownProps, ...additionalProps]) {\n    toolbar.ariaLabels = Object.assign((_a = toolbar.ariaLabels) !== null && _a !== void 0 ? _a : {}, props.ariaLabels);\n    if (props.drawers && !checkAlreadyExists(!!toolbar.drawers, 'tools or drawers')) {\n      toolbar.drawers = props.drawers;\n      toolbar.activeDrawerId = props.activeDrawerId;\n      toolbar.drawersFocusRef = props.drawersFocusRef;\n      toolbar.onActiveDrawerChange = props.onActiveDrawerChange;\n    }\n    if (props.navigation && !checkAlreadyExists(!!toolbar.hasNavigation, 'navigation')) {\n      toolbar.hasNavigation = true;\n      toolbar.navigationOpen = props.navigationOpen;\n      toolbar.navigationFocusRef = props.navigationFocusRef;\n      toolbar.onNavigationToggle = props.onNavigationToggle;\n    }\n    if (props.splitPanel && !checkAlreadyExists(!!toolbar.hasSplitPanel, 'splitPanel')) {\n      toolbar.hasSplitPanel = true;\n      toolbar.splitPanelFocusRef = props.splitPanelFocusRef;\n      toolbar.splitPanelToggleProps = props.splitPanelToggleProps;\n      toolbar.onSplitPanelToggle = props.onSplitPanelToggle;\n    }\n    if (props.breadcrumbs && !checkAlreadyExists(!!toolbar.hasBreadcrumbsPortal, 'hasBreadcrumbsPortal')) {\n      toolbar.hasBreadcrumbsPortal = true;\n    }\n  }\n  // do not render toolbar if no fields are defined, except ariaLabels, which are always there\n  return Object.keys(toolbar).filter(key => key !== 'ariaLabels').length > 0 ? toolbar : null;\n}\nexport function useMultiAppLayout(props) {\n  const [registration, setRegistration] = useState(null);\n  const {\n    forceDeduplicationType\n  } = props;\n  useLayoutEffect(() => {\n    return awsuiPluginsInternal.appLayoutWidget.register(forceDeduplicationType, props => setRegistration(props));\n  }, [forceDeduplicationType]);\n  useLayoutEffect(() => {\n    if ((registration === null || registration === void 0 ? void 0 : registration.type) === 'secondary') {\n      registration.update(props);\n    }\n  });\n  return {\n    registered: !!(registration === null || registration === void 0 ? void 0 : registration.type),\n    toolbarProps: (registration === null || registration === void 0 ? void 0 : registration.type) === 'primary' ? mergeProps(props, registration.discoveredProps) : null\n  };\n}","map":{"version":3,"names":["useLayoutEffect","useState","warnOnce","awsuiPluginsInternal","checkAlreadyExists","value","propName","mergeProps","ownProps","additionalProps","toolbar","props","ariaLabels","Object","assign","_a","drawers","activeDrawerId","drawersFocusRef","onActiveDrawerChange","navigation","hasNavigation","navigationOpen","navigationFocusRef","onNavigationToggle","splitPanel","hasSplitPanel","splitPanelFocusRef","splitPanelToggleProps","onSplitPanelToggle","breadcrumbs","hasBreadcrumbsPortal","keys","filter","key","length","useMultiAppLayout","registration","setRegistration","forceDeduplicationType","appLayoutWidget","register","type","update","registered","toolbarProps","discoveredProps"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/app-layout/visual-refresh-toolbar/multi-layout.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useLayoutEffect, useState } from 'react';\n\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\n\nimport { awsuiPluginsInternal } from '../../internal/plugins/api';\nimport { RegistrationState } from '../../internal/plugins/controllers/app-layout-widget';\nimport { AppLayoutProps } from '../interfaces';\nimport { Focusable } from '../utils/use-focus-control';\nimport { SplitPanelToggleProps, ToolbarProps } from './toolbar';\n\ninterface SharedProps {\n  forceDeduplicationType?: 'primary' | 'secondary';\n  ariaLabels: AppLayoutProps.Labels | undefined;\n  navigation: React.ReactNode;\n  navigationOpen: boolean;\n  onNavigationToggle: (open: boolean) => void;\n  navigationFocusRef: React.Ref<Focusable> | undefined;\n  breadcrumbs: React.ReactNode;\n  activeDrawerId: string | null;\n  drawers: ReadonlyArray<AppLayoutProps.Drawer> | undefined;\n  onActiveDrawerChange: ((drawerId: string | null) => void) | undefined;\n  drawersFocusRef: React.Ref<Focusable> | undefined;\n  splitPanel: React.ReactNode;\n  splitPanelToggleProps: SplitPanelToggleProps;\n  splitPanelFocusRef: React.Ref<Focusable> | undefined;\n  onSplitPanelToggle: () => void;\n}\n\nfunction checkAlreadyExists(value: boolean, propName: string) {\n  if (value) {\n    warnOnce(\n      'AppLayout',\n      `Another app layout instance on this page already defines ${propName} property. This instance will be ignored.`\n    );\n    return true;\n  }\n  return false;\n}\n\nfunction mergeProps(ownProps: SharedProps, additionalProps: ReadonlyArray<Partial<SharedProps>>): ToolbarProps | null {\n  const toolbar: ToolbarProps = {};\n  for (const props of [ownProps, ...additionalProps]) {\n    toolbar.ariaLabels = Object.assign(toolbar.ariaLabels ?? {}, props.ariaLabels);\n    if (props.drawers && !checkAlreadyExists(!!toolbar.drawers, 'tools or drawers')) {\n      toolbar.drawers = props.drawers;\n      toolbar.activeDrawerId = props.activeDrawerId;\n      toolbar.drawersFocusRef = props.drawersFocusRef;\n      toolbar.onActiveDrawerChange = props.onActiveDrawerChange;\n    }\n    if (props.navigation && !checkAlreadyExists(!!toolbar.hasNavigation, 'navigation')) {\n      toolbar.hasNavigation = true;\n      toolbar.navigationOpen = props.navigationOpen;\n      toolbar.navigationFocusRef = props.navigationFocusRef;\n      toolbar.onNavigationToggle = props.onNavigationToggle;\n    }\n    if (props.splitPanel && !checkAlreadyExists(!!toolbar.hasSplitPanel, 'splitPanel')) {\n      toolbar.hasSplitPanel = true;\n      toolbar.splitPanelFocusRef = props.splitPanelFocusRef;\n      toolbar.splitPanelToggleProps = props.splitPanelToggleProps;\n      toolbar.onSplitPanelToggle = props.onSplitPanelToggle;\n    }\n    if (props.breadcrumbs && !checkAlreadyExists(!!toolbar.hasBreadcrumbsPortal, 'hasBreadcrumbsPortal')) {\n      toolbar.hasBreadcrumbsPortal = true;\n    }\n  }\n  // do not render toolbar if no fields are defined, except ariaLabels, which are always there\n  return Object.keys(toolbar).filter(key => key !== 'ariaLabels').length > 0 ? toolbar : null;\n}\n\nexport function useMultiAppLayout(props: SharedProps) {\n  const [registration, setRegistration] = useState<RegistrationState<SharedProps> | null>(null);\n  const { forceDeduplicationType } = props;\n\n  useLayoutEffect(() => {\n    return awsuiPluginsInternal.appLayoutWidget.register(forceDeduplicationType, props =>\n      setRegistration(props as RegistrationState<SharedProps>)\n    );\n  }, [forceDeduplicationType]);\n\n  useLayoutEffect(() => {\n    if (registration?.type === 'secondary') {\n      registration.update(props);\n    }\n  });\n\n  return {\n    registered: !!registration?.type,\n    toolbarProps: registration?.type === 'primary' ? mergeProps(props, registration.discoveredProps) : null,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}