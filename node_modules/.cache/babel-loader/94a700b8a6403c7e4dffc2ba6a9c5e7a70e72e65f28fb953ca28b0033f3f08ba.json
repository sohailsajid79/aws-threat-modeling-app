{"ast":null,"code":"/** *******************************************************************************************************************\n  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\").\n  You may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n ******************************************************************************************************************** */\n\nimport { z } from 'zod';\nimport { FREE_TEXT_INPUT_MAX_LENGTH, SINGLE_FIELD_INPUT_SMALL_MAX_LENGTH, SINGLE_FIELD_INPUT_TAG_MAX_LENGTH, FREE_TEXT_INPUT_SMALL_MAX_LENGTH, LEVEL_SELECTOR_OPTIONS, REGEX_CONTENT_IMAGE_URL, REGEX_CONTENT_IMAGE_BASE64, IMAGE_BASE64_MAX_LENGTH, IMAGE_URL_MAX_LENGTH } from '../configs';\nimport STRIDE from '../data/stride';\nexport const TagSchema = z.string().nonempty().max(SINGLE_FIELD_INPUT_TAG_MAX_LENGTH);\n_c = TagSchema;\nexport const MetadataCommentSchema = z.string().max(FREE_TEXT_INPUT_SMALL_MAX_LENGTH);\n_c2 = MetadataCommentSchema;\nexport const MetadataSchema = z.object({\n  key: z.string().max(SINGLE_FIELD_INPUT_SMALL_MAX_LENGTH),\n  value: z.union([z.string(), z.array(z.string())])\n}).strict().refine(_c3 = data => {\n  if (data.key === 'Comments') {\n    return MetadataCommentSchema.safeParse(data.value).success;\n  }\n  if (data.key === 'STRIDE') {\n    return Array.isArray(data.value) && data.value.every(v => STRIDE.map(s => s.value).includes(v));\n  }\n  if (data.key === 'Priority') {\n    return typeof data.value === 'string' && LEVEL_SELECTOR_OPTIONS.map(o => o.value).includes(data.value);\n  }\n  return false;\n}, data => ({\n  message: `Invalid key ${data.key} with value ${JSON.stringify(data.value)}`,\n  path: [data.key]\n}));\n_c4 = MetadataSchema;\nexport const EntityBaseSchema = z.object({\n  /**\n   * The unique Id of the entity.\n   */\n  id: z.string().max(36),\n  /**\n   * The numeric id of the entity.\n   * The numericId will be displayed for users to easy identify the entity.\n   */\n  numericId: z.number(),\n  /**\n   * The display order of the entity in the list.\n   */\n  displayOrder: z.optional(z.number()),\n  /**\n   * The metadata.\n   */\n  metadata: MetadataSchema.array().optional(),\n  /**\n   * The tags.\n   */\n  tags: TagSchema.array().optional()\n});\nexport const ContentEntityBaseSchema = EntityBaseSchema.extend({\n  /**\n   * The text content of the Assumption.\n   */\n  content: z.string().max(FREE_TEXT_INPUT_SMALL_MAX_LENGTH)\n});\nexport const EntityLinkBaseSchema = z.object({});\nexport const ImageUrlSchema = z.string().max(IMAGE_URL_MAX_LENGTH).regex(REGEX_CONTENT_IMAGE_URL).optional();\nexport const ImageBase64Schema = z.string().max(IMAGE_BASE64_MAX_LENGTH).regex(REGEX_CONTENT_IMAGE_BASE64).optional();\nexport const BaseImageInfoSchema = z.object({\n  /**\n   * The base64 encoded image or src of the image\n   */\n  image: z.string().optional().refine(data => {\n    return !data || ImageUrlSchema.safeParse(data).success || ImageBase64Schema.safeParse(data).success;\n  }, {\n    message: 'Invalid image format',\n    path: []\n  }),\n  /**\n   * The description of the architecture diagram\n   */\n  description: z.string().max(FREE_TEXT_INPUT_MAX_LENGTH).optional()\n}).strict();\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"TagSchema\");\n$RefreshReg$(_c2, \"MetadataCommentSchema\");\n$RefreshReg$(_c3, \"MetadataSchema$z.object({\\n  key: z.string().max(SINGLE_FIELD_INPUT_SMALL_MAX_LENGTH),\\n  value: z.union([z.string(), z.array(z.string())]),\\n}).strict().refine\");\n$RefreshReg$(_c4, \"MetadataSchema\");","map":{"version":3,"names":["z","FREE_TEXT_INPUT_MAX_LENGTH","SINGLE_FIELD_INPUT_SMALL_MAX_LENGTH","SINGLE_FIELD_INPUT_TAG_MAX_LENGTH","FREE_TEXT_INPUT_SMALL_MAX_LENGTH","LEVEL_SELECTOR_OPTIONS","REGEX_CONTENT_IMAGE_URL","REGEX_CONTENT_IMAGE_BASE64","IMAGE_BASE64_MAX_LENGTH","IMAGE_URL_MAX_LENGTH","STRIDE","TagSchema","string","nonempty","max","_c","MetadataCommentSchema","_c2","MetadataSchema","object","key","value","union","array","strict","refine","_c3","data","safeParse","success","Array","isArray","every","v","map","s","includes","o","message","JSON","stringify","path","_c4","EntityBaseSchema","id","numericId","number","displayOrder","optional","metadata","tags","ContentEntityBaseSchema","extend","content","EntityLinkBaseSchema","ImageUrlSchema","regex","ImageBase64Schema","BaseImageInfoSchema","image","description","$RefreshReg$"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/src/customTypes/entities.ts"],"sourcesContent":["/** *******************************************************************************************************************\n  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\").\n  You may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n ******************************************************************************************************************** */\n\nimport { z } from 'zod';\nimport {\n  FREE_TEXT_INPUT_MAX_LENGTH,\n  SINGLE_FIELD_INPUT_SMALL_MAX_LENGTH,\n  SINGLE_FIELD_INPUT_TAG_MAX_LENGTH,\n  FREE_TEXT_INPUT_SMALL_MAX_LENGTH,\n  LEVEL_SELECTOR_OPTIONS,\n  REGEX_CONTENT_IMAGE_URL,\n  REGEX_CONTENT_IMAGE_BASE64,\n  IMAGE_BASE64_MAX_LENGTH,\n  IMAGE_URL_MAX_LENGTH,\n} from '../configs';\nimport STRIDE from '../data/stride';\n\nexport const TagSchema = z.string().nonempty().max(SINGLE_FIELD_INPUT_TAG_MAX_LENGTH);\n\nexport const MetadataCommentSchema = z.string().max(FREE_TEXT_INPUT_SMALL_MAX_LENGTH);\n\nexport const MetadataSchema = z.object({\n  key: z.string().max(SINGLE_FIELD_INPUT_SMALL_MAX_LENGTH),\n  value: z.union([z.string(), z.array(z.string())]),\n}).strict().refine((data) => {\n  if (data.key === 'Comments') {\n    return MetadataCommentSchema.safeParse(data.value).success;\n  }\n\n  if (data.key === 'STRIDE') {\n    return Array.isArray(data.value) && data.value.every(v => STRIDE.map(s => s.value).includes(v));\n  }\n\n  if (data.key === 'Priority') {\n    return typeof data.value === 'string' && LEVEL_SELECTOR_OPTIONS.map(o => o.value).includes(data.value);\n  }\n\n  return false;\n}, (data) => ({\n  message: `Invalid key ${data.key} with value ${JSON.stringify(data.value)}`,\n  path: [data.key],\n}));\n\nexport const EntityBaseSchema = z.object({\n  /**\n   * The unique Id of the entity.\n   */\n  id: z.string().max(36),\n  /**\n   * The numeric id of the entity.\n   * The numericId will be displayed for users to easy identify the entity.\n   */\n  numericId: z.number(),\n  /**\n   * The display order of the entity in the list.\n   */\n  displayOrder: z.optional(z.number()),\n  /**\n   * The metadata.\n   */\n  metadata: MetadataSchema.array().optional(),\n  /**\n   * The tags.\n   */\n  tags: TagSchema.array().optional(),\n});\n\nexport type EntityBase = z.infer<typeof EntityBaseSchema>;\n\nexport const ContentEntityBaseSchema = EntityBaseSchema.extend({\n  /**\n   * The text content of the Assumption.\n   */\n  content: z.string().max(FREE_TEXT_INPUT_SMALL_MAX_LENGTH),\n});\n\nexport type ContentEntityBase = z.infer<typeof ContentEntityBaseSchema>;\n\nexport const EntityLinkBaseSchema = z.object({\n});\n\nexport type EntityLinkBase = z.infer<typeof EntityLinkBaseSchema>;\n\nexport const ImageUrlSchema = z.string().max(IMAGE_URL_MAX_LENGTH).regex(REGEX_CONTENT_IMAGE_URL).optional();\nexport const ImageBase64Schema = z.string().max(IMAGE_BASE64_MAX_LENGTH).regex(REGEX_CONTENT_IMAGE_BASE64).optional();\n\nexport const BaseImageInfoSchema = z.object({\n  /**\n   * The base64 encoded image or src of the image\n   */\n  image: z.string().optional().refine((data) => {\n    return !data || ImageUrlSchema.safeParse(data).success || ImageBase64Schema.safeParse(data).success;\n  }, {\n    message: 'Invalid image format',\n    path: [],\n  }),\n  /**\n   * The description of the architecture diagram\n   */\n  description: z.string().max(FREE_TEXT_INPUT_MAX_LENGTH).optional(),\n}).strict();\n\nexport type BaseImageInfo = z.infer<typeof BaseImageInfoSchema>;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}