{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo, useState } from 'react';\nimport { DndContext, DragOverlay } from '@dnd-kit/core';\nimport { arrayMove, SortableContext, verticalListSortingStrategy } from '@dnd-kit/sortable';\nimport InternalBox from '../../box/internal';\nimport InternalButton from '../../button/internal';\nimport { useInternalI18n } from '../../i18n/context';\nimport Portal from '../../internal/components/portal';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport InternalSpaceBetween from '../../space-between/internal';\nimport InternalTextFilter from '../../text-filter/internal';\nimport { getAnalyticsInnerContextAttribute } from '../analytics-metadata/utils';\nimport ContentDisplayOption from './content-display-option';\nimport DraggableOption from './draggable-option';\nimport useDragAndDropReorder from './use-drag-and-drop-reorder';\nimport useLiveAnnouncements from './use-live-announcements';\nimport { getFilteredOptions, getSortedOptions } from './utils';\nimport styles from '../styles.css.js';\nconst componentPrefix = 'content-display';\nconst getClassName = suffix => styles[`${componentPrefix}-${suffix}`];\nexport default function ContentDisplayPreference({\n  title,\n  description,\n  options,\n  value = options.map(({\n    id\n  }) => ({\n    id,\n    visible: true\n  })),\n  onChange,\n  liveAnnouncementDndStarted,\n  liveAnnouncementDndItemReordered,\n  liveAnnouncementDndItemCommitted,\n  liveAnnouncementDndDiscarded,\n  dragHandleAriaDescription,\n  dragHandleAriaLabel,\n  enableColumnFiltering = false,\n  i18nStrings\n}) {\n  const idPrefix = useUniqueId(componentPrefix);\n  const i18n = useInternalI18n('collection-preferences');\n  const [columnFilteringText, setColumnFilteringText] = useState('');\n  const titleId = `${idPrefix}-title`;\n  const descriptionId = `${idPrefix}-description`;\n  const [sortedOptions, sortedAndFilteredOptions] = useMemo(() => {\n    const sorted = getSortedOptions({\n      options,\n      contentDisplay: value\n    });\n    const filtered = getFilteredOptions(sorted, columnFilteringText);\n    return [sorted, filtered];\n  }, [columnFilteringText, options, value]);\n  const onToggle = option => {\n    // We use sortedOptions as base and not value because there might be options that\n    // are not in the value yet, so they're added as non-visible after the known ones.\n    onChange(sortedOptions.map(({\n      id,\n      visible\n    }) => ({\n      id,\n      visible: id === option.id ? !option.visible : visible\n    })));\n  };\n  const {\n    activeItem,\n    collisionDetection,\n    handleKeyDown,\n    sensors,\n    setActiveItem\n  } = useDragAndDropReorder({\n    sortedOptions: sortedAndFilteredOptions\n  });\n  const activeOption = activeItem ? sortedAndFilteredOptions.find(({\n    id\n  }) => id === activeItem) : null;\n  const announcements = useLiveAnnouncements({\n    isDragging: activeItem !== null,\n    liveAnnouncementDndStarted: i18n('contentDisplayPreference.liveAnnouncementDndStarted', liveAnnouncementDndStarted, format => (position, total) => format({\n      position,\n      total\n    })),\n    liveAnnouncementDndItemReordered: i18n('contentDisplayPreference.liveAnnouncementDndItemReordered', liveAnnouncementDndItemReordered, format => (initialPosition, currentPosition, total) => format({\n      currentPosition,\n      total,\n      isInitialPosition: `${initialPosition === currentPosition}`\n    })),\n    liveAnnouncementDndItemCommitted: i18n('contentDisplayPreference.liveAnnouncementDndItemCommitted', liveAnnouncementDndItemCommitted, format => (initialPosition, finalPosition, total) => format({\n      initialPosition,\n      finalPosition,\n      total,\n      isInitialPosition: `${initialPosition === finalPosition}`\n    })),\n    liveAnnouncementDndDiscarded: i18n('contentDisplayPreference.liveAnnouncementDndDiscarded', liveAnnouncementDndDiscarded),\n    sortedOptions: sortedAndFilteredOptions\n  });\n  const renderedDragHandleAriaDescription = i18n('contentDisplayPreference.dragHandleAriaDescription', dragHandleAriaDescription);\n  return React.createElement(\"div\", Object.assign({\n    className: styles[componentPrefix]\n  }, getAnalyticsInnerContextAttribute('contentDisplay')), React.createElement(\"h3\", {\n    className: getClassName('title'),\n    id: titleId\n  }, i18n('contentDisplayPreference.title', title)), React.createElement(\"p\", {\n    className: getClassName('description'),\n    id: descriptionId\n  }, i18n('contentDisplayPreference.description', description)), enableColumnFiltering && React.createElement(\"div\", {\n    className: getClassName('text-filter')\n  }, React.createElement(InternalTextFilter, {\n    filteringText: columnFilteringText,\n    filteringPlaceholder: i18n('contentDisplayPreference.i18nStrings.columnFilteringPlaceholder', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnFilteringPlaceholder),\n    filteringAriaLabel: i18n('contentDisplayPreference.i18nStrings.columnFilteringAriaLabel', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnFilteringAriaLabel),\n    filteringClearAriaLabel: i18n('contentDisplayPreference.i18nStrings.columnFilteringClearFilterText', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnFilteringClearFilterText),\n    onChange: ({\n      detail\n    }) => setColumnFilteringText(detail.filteringText),\n    countText: i18n('contentDisplayPreference.i18nStrings.columnFilteringCountText', (i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnFilteringCountText) ? i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnFilteringCountText(sortedAndFilteredOptions.length) : undefined, format => format({\n      count: sortedAndFilteredOptions.length\n    }))\n  })), sortedAndFilteredOptions.length === 0 && React.createElement(\"div\", {\n    className: getClassName('no-match')\n  }, React.createElement(InternalSpaceBetween, {\n    size: \"s\",\n    alignItems: \"center\"\n  }, React.createElement(InternalBox, {\n    margin: {\n      top: 'm'\n    }\n  }, i18n('contentDisplayPreference.i18nStrings.columnFilteringNoMatchText', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnFilteringNoMatchText)), React.createElement(InternalButton, {\n    onClick: () => setColumnFilteringText('')\n  }, i18n('contentDisplayPreference.i18nStrings.columnFilteringClearFilterText', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnFilteringClearFilterText)))), React.createElement(DndContext, {\n    sensors: sensors,\n    collisionDetection: collisionDetection,\n    accessibility: {\n      announcements,\n      restoreFocus: false,\n      screenReaderInstructions: renderedDragHandleAriaDescription ? {\n        draggable: renderedDragHandleAriaDescription\n      } : undefined\n    },\n    onDragStart: ({\n      active\n    }) => setActiveItem(active.id),\n    onDragEnd: event => {\n      setActiveItem(null);\n      const {\n        active,\n        over\n      } = event;\n      if (over && active.id !== over.id) {\n        const oldIndex = sortedOptions.findIndex(({\n          id\n        }) => id === active.id);\n        const newIndex = sortedOptions.findIndex(({\n          id\n        }) => id === over.id);\n        // We need to remember to trim the options down to id and visible to emit changes.\n        onChange(arrayMove([...sortedOptions], oldIndex, newIndex).map(({\n          id,\n          visible\n        }) => ({\n          id,\n          visible\n        })));\n      }\n    },\n    onDragCancel: () => setActiveItem(null)\n  }, React.createElement(\"ul\", {\n    className: getClassName('option-list'),\n    \"aria-describedby\": descriptionId,\n    \"aria-labelledby\": titleId,\n    role: \"list\"\n  }, React.createElement(SortableContext, {\n    disabled: columnFilteringText.trim().length > 0,\n    items: sortedAndFilteredOptions.map(({\n      id\n    }) => id),\n    strategy: verticalListSortingStrategy\n  }, sortedAndFilteredOptions.map(option => {\n    return React.createElement(DraggableOption, {\n      dragHandleAriaLabel: i18n('contentDisplayPreference.dragHandleAriaLabel', dragHandleAriaLabel),\n      key: option.id,\n      onKeyDown: handleKeyDown,\n      onToggle: onToggle,\n      option: option\n    });\n  }))), React.createElement(Portal, null, React.createElement(DragOverlay, {\n    className: styles['drag-overlay'],\n    dropAnimation: null,\n    style: {\n      zIndex: 5000\n    }\n  }, activeOption && React.createElement(ContentDisplayOption, {\n    listeners: {\n      onKeyDown: handleKeyDown\n    },\n    dragHandleAriaLabel: i18n('contentDisplayPreference.dragHandleAriaLabel', dragHandleAriaLabel),\n    onToggle: onToggle,\n    option: activeOption\n  })))));\n}","map":{"version":3,"names":["React","useMemo","useState","DndContext","DragOverlay","arrayMove","SortableContext","verticalListSortingStrategy","InternalBox","InternalButton","useInternalI18n","Portal","useUniqueId","InternalSpaceBetween","InternalTextFilter","getAnalyticsInnerContextAttribute","ContentDisplayOption","DraggableOption","useDragAndDropReorder","useLiveAnnouncements","getFilteredOptions","getSortedOptions","styles","componentPrefix","getClassName","suffix","ContentDisplayPreference","title","description","options","value","map","id","visible","onChange","liveAnnouncementDndStarted","liveAnnouncementDndItemReordered","liveAnnouncementDndItemCommitted","liveAnnouncementDndDiscarded","dragHandleAriaDescription","dragHandleAriaLabel","enableColumnFiltering","i18nStrings","idPrefix","i18n","columnFilteringText","setColumnFilteringText","titleId","descriptionId","sortedOptions","sortedAndFilteredOptions","sorted","contentDisplay","filtered","onToggle","option","activeItem","collisionDetection","handleKeyDown","sensors","setActiveItem","activeOption","find","announcements","isDragging","format","position","total","initialPosition","currentPosition","isInitialPosition","finalPosition","renderedDragHandleAriaDescription","createElement","Object","assign","className","filteringText","filteringPlaceholder","columnFilteringPlaceholder","filteringAriaLabel","columnFilteringAriaLabel","filteringClearAriaLabel","columnFilteringClearFilterText","detail","countText","columnFilteringCountText","length","undefined","count","size","alignItems","margin","top","columnFilteringNoMatchText","onClick","accessibility","restoreFocus","screenReaderInstructions","draggable","onDragStart","active","onDragEnd","event","over","oldIndex","findIndex","newIndex","onDragCancel","role","disabled","trim","items","strategy","key","onKeyDown","dropAnimation","style","zIndex","listeners"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/collection-preferences/content-display/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo, useState } from 'react';\nimport { DndContext, DragOverlay } from '@dnd-kit/core';\nimport { arrayMove, SortableContext, verticalListSortingStrategy } from '@dnd-kit/sortable';\n\nimport InternalBox from '../../box/internal';\nimport InternalButton from '../../button/internal';\nimport { useInternalI18n } from '../../i18n/context';\nimport Portal from '../../internal/components/portal';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport InternalSpaceBetween from '../../space-between/internal';\nimport InternalTextFilter from '../../text-filter/internal';\nimport { getAnalyticsInnerContextAttribute } from '../analytics-metadata/utils';\nimport { CollectionPreferencesProps } from '../interfaces';\nimport ContentDisplayOption from './content-display-option';\nimport DraggableOption from './draggable-option';\nimport useDragAndDropReorder from './use-drag-and-drop-reorder';\nimport useLiveAnnouncements from './use-live-announcements';\nimport { getFilteredOptions, getSortedOptions, OptionWithVisibility } from './utils';\n\nimport styles from '../styles.css.js';\n\nconst componentPrefix = 'content-display';\n\nconst getClassName = (suffix: string) => styles[`${componentPrefix}-${suffix}`];\n\ninterface ContentDisplayPreferenceProps extends CollectionPreferencesProps.ContentDisplayPreference {\n  onChange: (value: ReadonlyArray<CollectionPreferencesProps.ContentDisplayItem>) => void;\n  value?: ReadonlyArray<CollectionPreferencesProps.ContentDisplayItem>;\n}\n\nexport default function ContentDisplayPreference({\n  title,\n  description,\n  options,\n  value = options.map(({ id }) => ({\n    id,\n    visible: true,\n  })),\n  onChange,\n  liveAnnouncementDndStarted,\n  liveAnnouncementDndItemReordered,\n  liveAnnouncementDndItemCommitted,\n  liveAnnouncementDndDiscarded,\n  dragHandleAriaDescription,\n  dragHandleAriaLabel,\n  enableColumnFiltering = false,\n  i18nStrings,\n}: ContentDisplayPreferenceProps) {\n  const idPrefix = useUniqueId(componentPrefix);\n  const i18n = useInternalI18n('collection-preferences');\n  const [columnFilteringText, setColumnFilteringText] = useState('');\n\n  const titleId = `${idPrefix}-title`;\n  const descriptionId = `${idPrefix}-description`;\n\n  const [sortedOptions, sortedAndFilteredOptions] = useMemo(() => {\n    const sorted = getSortedOptions({ options, contentDisplay: value });\n    const filtered = getFilteredOptions(sorted, columnFilteringText);\n    return [sorted, filtered];\n  }, [columnFilteringText, options, value]);\n\n  const onToggle = (option: OptionWithVisibility) => {\n    // We use sortedOptions as base and not value because there might be options that\n    // are not in the value yet, so they're added as non-visible after the known ones.\n    onChange(sortedOptions.map(({ id, visible }) => ({ id, visible: id === option.id ? !option.visible : visible })));\n  };\n\n  const { activeItem, collisionDetection, handleKeyDown, sensors, setActiveItem } = useDragAndDropReorder({\n    sortedOptions: sortedAndFilteredOptions,\n  });\n\n  const activeOption = activeItem ? sortedAndFilteredOptions.find(({ id }) => id === activeItem) : null;\n\n  const announcements = useLiveAnnouncements({\n    isDragging: activeItem !== null,\n    liveAnnouncementDndStarted: i18n(\n      'contentDisplayPreference.liveAnnouncementDndStarted',\n      liveAnnouncementDndStarted,\n      format => (position, total) => format({ position, total })\n    ),\n    liveAnnouncementDndItemReordered: i18n(\n      'contentDisplayPreference.liveAnnouncementDndItemReordered',\n      liveAnnouncementDndItemReordered,\n      format => (initialPosition, currentPosition, total) =>\n        format({ currentPosition, total, isInitialPosition: `${initialPosition === currentPosition}` })\n    ),\n    liveAnnouncementDndItemCommitted: i18n(\n      'contentDisplayPreference.liveAnnouncementDndItemCommitted',\n      liveAnnouncementDndItemCommitted,\n      format => (initialPosition, finalPosition, total) =>\n        format({ initialPosition, finalPosition, total, isInitialPosition: `${initialPosition === finalPosition}` })\n    ),\n    liveAnnouncementDndDiscarded: i18n(\n      'contentDisplayPreference.liveAnnouncementDndDiscarded',\n      liveAnnouncementDndDiscarded\n    ),\n    sortedOptions: sortedAndFilteredOptions,\n  });\n\n  const renderedDragHandleAriaDescription = i18n(\n    'contentDisplayPreference.dragHandleAriaDescription',\n    dragHandleAriaDescription\n  );\n\n  return (\n    <div className={styles[componentPrefix]} {...getAnalyticsInnerContextAttribute('contentDisplay')}>\n      <h3 className={getClassName('title')} id={titleId}>\n        {i18n('contentDisplayPreference.title', title)}\n      </h3>\n      <p className={getClassName('description')} id={descriptionId}>\n        {i18n('contentDisplayPreference.description', description)}\n      </p>\n\n      {/* Filter input */}\n      {enableColumnFiltering && (\n        <div className={getClassName('text-filter')}>\n          <InternalTextFilter\n            filteringText={columnFilteringText}\n            filteringPlaceholder={i18n(\n              'contentDisplayPreference.i18nStrings.columnFilteringPlaceholder',\n              i18nStrings?.columnFilteringPlaceholder\n            )}\n            filteringAriaLabel={i18n(\n              'contentDisplayPreference.i18nStrings.columnFilteringAriaLabel',\n              i18nStrings?.columnFilteringAriaLabel\n            )}\n            filteringClearAriaLabel={i18n(\n              'contentDisplayPreference.i18nStrings.columnFilteringClearFilterText',\n              i18nStrings?.columnFilteringClearFilterText\n            )}\n            onChange={({ detail }) => setColumnFilteringText(detail.filteringText)}\n            countText={i18n(\n              'contentDisplayPreference.i18nStrings.columnFilteringCountText',\n              i18nStrings?.columnFilteringCountText\n                ? i18nStrings?.columnFilteringCountText(sortedAndFilteredOptions.length)\n                : undefined,\n              format => format({ count: sortedAndFilteredOptions.length })\n            )}\n          />\n        </div>\n      )}\n\n      {/* No match */}\n      {sortedAndFilteredOptions.length === 0 && (\n        <div className={getClassName('no-match')}>\n          <InternalSpaceBetween size=\"s\" alignItems=\"center\">\n            <InternalBox margin={{ top: 'm' }}>\n              {i18n(\n                'contentDisplayPreference.i18nStrings.columnFilteringNoMatchText',\n                i18nStrings?.columnFilteringNoMatchText\n              )}\n            </InternalBox>\n            <InternalButton onClick={() => setColumnFilteringText('')}>\n              {i18n(\n                'contentDisplayPreference.i18nStrings.columnFilteringClearFilterText',\n                i18nStrings?.columnFilteringClearFilterText\n              )}\n            </InternalButton>\n          </InternalSpaceBetween>\n        </div>\n      )}\n\n      {/* Drag and drop */}\n      <DndContext\n        sensors={sensors}\n        collisionDetection={collisionDetection}\n        accessibility={{\n          announcements,\n          restoreFocus: false,\n          screenReaderInstructions: renderedDragHandleAriaDescription\n            ? { draggable: renderedDragHandleAriaDescription }\n            : undefined,\n        }}\n        onDragStart={({ active }) => setActiveItem(active.id)}\n        onDragEnd={event => {\n          setActiveItem(null);\n          const { active, over } = event;\n\n          if (over && active.id !== over.id) {\n            const oldIndex = sortedOptions.findIndex(({ id }) => id === active.id);\n            const newIndex = sortedOptions.findIndex(({ id }) => id === over.id);\n            // We need to remember to trim the options down to id and visible to emit changes.\n            onChange(arrayMove([...sortedOptions], oldIndex, newIndex).map(({ id, visible }) => ({ id, visible })));\n          }\n        }}\n        onDragCancel={() => setActiveItem(null)}\n      >\n        {/* Use explicit list role to work around Safari not announcing lists as such when list-style is set to none.\n            See https://bugs.webkit.org/show_bug.cgi?id=170179 */}\n        <ul\n          className={getClassName('option-list')}\n          aria-describedby={descriptionId}\n          aria-labelledby={titleId}\n          role=\"list\"\n        >\n          <SortableContext\n            disabled={columnFilteringText.trim().length > 0}\n            items={sortedAndFilteredOptions.map(({ id }) => id)}\n            strategy={verticalListSortingStrategy}\n          >\n            {sortedAndFilteredOptions.map(option => {\n              return (\n                <DraggableOption\n                  dragHandleAriaLabel={i18n('contentDisplayPreference.dragHandleAriaLabel', dragHandleAriaLabel)}\n                  key={option.id}\n                  onKeyDown={handleKeyDown}\n                  onToggle={onToggle}\n                  option={option}\n                />\n              );\n            })}\n          </SortableContext>\n        </ul>\n        <Portal>\n          {/* Make sure that the drag overlay is above the modal\n              by assigning the z-index as inline style\n              so that it prevails over dnd-kit's inline z-index of 999  */}\n          {/* className is a documented prop of the DragOverlay component:\n              https://docs.dndkit.com/api-documentation/draggable/drag-overlay#class-name-and-inline-styles */\n          /* eslint-disable-next-line react/forbid-component-props */}\n          <DragOverlay className={styles['drag-overlay']} dropAnimation={null} style={{ zIndex: 5000 }}>\n            {activeOption && (\n              <ContentDisplayOption\n                listeners={{ onKeyDown: handleKeyDown }}\n                dragHandleAriaLabel={i18n('contentDisplayPreference.dragHandleAriaLabel', dragHandleAriaLabel)}\n                onToggle={onToggle}\n                option={activeOption}\n              />\n            )}\n          </DragOverlay>\n        </Portal>\n      </DndContext>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}