{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { CLogClient, PanoramaClient } from './log-clients';\nimport { buildMetricDetail, buildMetricName, jsonStringify } from './formatters';\nconst oneTimeMetrics = new Set();\n// In case we need to override the theme for VR.\nlet theme = '';\nfunction setTheme(newTheme) {\n  theme = newTheme;\n}\nexport class Metrics {\n  constructor(source, packageVersion) {\n    this.clog = new CLogClient();\n    this.panorama = new PanoramaClient();\n    this.source = source;\n    this.packageVersion = packageVersion;\n  }\n  initMetrics(theme) {\n    setTheme(theme);\n  }\n  /**\n   * Calls Console Platform's client logging JS API with provided metric name, value, and detail.\n   * Does nothing if Console Platform client logging JS is not present in page.\n   */\n  sendMetric(metricName, value, detail) {\n    if (!theme) {\n      // Metrics need to be initialized first (initMetrics)\n      console.error('Metrics need to be initialized first.');\n      return;\n    }\n    this.clog.sendMetric(metricName, value, detail);\n  }\n  /**\n   * Calls Console Platform's client v2 logging JS API with provided metric name and detail.\n   * Does nothing if Console Platform client logging JS is not present in page.\n   */\n  sendPanoramaMetric(metric) {\n    this.panorama.sendMetric(metric);\n  }\n  sendMetricObject(metric, value) {\n    this.sendMetric(buildMetricName(metric, theme), value, buildMetricDetail(metric, theme));\n  }\n  sendMetricObjectOnce(metric, value) {\n    const metricKey = jsonStringify(metric);\n    if (!oneTimeMetrics.has(metricKey)) {\n      this.sendMetricObject(metric, value);\n      oneTimeMetrics.add(metricKey);\n    }\n  }\n  /*\n   * Calls Console Platform's client logging only the first time the provided metricName is used.\n   * Subsequent calls with the same metricName are ignored.\n   */\n  sendMetricOnce(metricName, value, detail) {\n    if (!oneTimeMetrics.has(metricName)) {\n      this.sendMetric(metricName, value, detail);\n      oneTimeMetrics.add(metricName);\n    }\n  }\n  /*\n   * Reports a metric value 1 to Console Platform's client logging service to indicate that the\n   * component was loaded. The component load event will only be reported as used to client logging\n   * service once per page view.\n   */\n  logComponentsLoaded() {\n    this.sendMetricObjectOnce({\n      source: this.source,\n      action: 'loaded',\n      version: this.packageVersion\n    }, 1);\n  }\n  /*\n   * Reports a metric value 1 to Console Platform's client logging service to indicate that the\n   * component was used in the page.  A component will only be reported as used to client logging\n   * service once per page view.\n   */\n  logComponentUsed(componentName, configuration) {\n    this.sendMetricObjectOnce({\n      source: componentName,\n      action: 'used',\n      version: this.packageVersion,\n      configuration\n    }, 1);\n  }\n}\nexport function clearOneTimeMetricsCache() {\n  oneTimeMetrics.clear();\n}\nexport class MetricsTestHelper {\n  constructor() {\n    this.resetOneTimeMetricsCache = clearOneTimeMetricsCache;\n  }\n}","map":{"version":3,"names":["CLogClient","PanoramaClient","buildMetricDetail","buildMetricName","jsonStringify","oneTimeMetrics","Set","theme","setTheme","newTheme","Metrics","constructor","source","packageVersion","clog","panorama","initMetrics","sendMetric","metricName","value","detail","console","error","sendPanoramaMetric","metric","sendMetricObject","sendMetricObjectOnce","metricKey","has","add","sendMetricOnce","logComponentsLoaded","action","version","logComponentUsed","componentName","configuration","clearOneTimeMetricsCache","clear","MetricsTestHelper","resetOneTimeMetricsCache"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/@cloudscape-design/component-toolkit/internal/base-component/metrics/metrics.js"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { CLogClient, PanoramaClient } from './log-clients';\nimport { buildMetricDetail, buildMetricName, jsonStringify } from './formatters';\nconst oneTimeMetrics = new Set();\n// In case we need to override the theme for VR.\nlet theme = '';\nfunction setTheme(newTheme) {\n    theme = newTheme;\n}\nexport class Metrics {\n    constructor(source, packageVersion) {\n        this.clog = new CLogClient();\n        this.panorama = new PanoramaClient();\n        this.source = source;\n        this.packageVersion = packageVersion;\n    }\n    initMetrics(theme) {\n        setTheme(theme);\n    }\n    /**\n     * Calls Console Platform's client logging JS API with provided metric name, value, and detail.\n     * Does nothing if Console Platform client logging JS is not present in page.\n     */\n    sendMetric(metricName, value, detail) {\n        if (!theme) {\n            // Metrics need to be initialized first (initMetrics)\n            console.error('Metrics need to be initialized first.');\n            return;\n        }\n        this.clog.sendMetric(metricName, value, detail);\n    }\n    /**\n     * Calls Console Platform's client v2 logging JS API with provided metric name and detail.\n     * Does nothing if Console Platform client logging JS is not present in page.\n     */\n    sendPanoramaMetric(metric) {\n        this.panorama.sendMetric(metric);\n    }\n    sendMetricObject(metric, value) {\n        this.sendMetric(buildMetricName(metric, theme), value, buildMetricDetail(metric, theme));\n    }\n    sendMetricObjectOnce(metric, value) {\n        const metricKey = jsonStringify(metric);\n        if (!oneTimeMetrics.has(metricKey)) {\n            this.sendMetricObject(metric, value);\n            oneTimeMetrics.add(metricKey);\n        }\n    }\n    /*\n     * Calls Console Platform's client logging only the first time the provided metricName is used.\n     * Subsequent calls with the same metricName are ignored.\n     */\n    sendMetricOnce(metricName, value, detail) {\n        if (!oneTimeMetrics.has(metricName)) {\n            this.sendMetric(metricName, value, detail);\n            oneTimeMetrics.add(metricName);\n        }\n    }\n    /*\n     * Reports a metric value 1 to Console Platform's client logging service to indicate that the\n     * component was loaded. The component load event will only be reported as used to client logging\n     * service once per page view.\n     */\n    logComponentsLoaded() {\n        this.sendMetricObjectOnce({ source: this.source, action: 'loaded', version: this.packageVersion }, 1);\n    }\n    /*\n     * Reports a metric value 1 to Console Platform's client logging service to indicate that the\n     * component was used in the page.  A component will only be reported as used to client logging\n     * service once per page view.\n     */\n    logComponentUsed(componentName, configuration) {\n        this.sendMetricObjectOnce({\n            source: componentName,\n            action: 'used',\n            version: this.packageVersion,\n            configuration,\n        }, 1);\n    }\n}\nexport function clearOneTimeMetricsCache() {\n    oneTimeMetrics.clear();\n}\nexport class MetricsTestHelper {\n    constructor() {\n        this.resetOneTimeMetricsCache = clearOneTimeMetricsCache;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}