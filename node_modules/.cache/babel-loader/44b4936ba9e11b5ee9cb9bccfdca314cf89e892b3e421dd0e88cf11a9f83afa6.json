{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { getLogicalBoundingClientRect } from '@cloudscape-design/component-toolkit/internal';\nexport function isCellStatesEqual(s1, s2) {\n  if (s1 && s2) {\n    return s1.padInlineStart === s2.padInlineStart && s1.lastInsetInlineStart === s2.lastInsetInlineStart && s1.lastInsetInlineEnd === s2.lastInsetInlineEnd && s1.offset.insetInlineStart === s2.offset.insetInlineStart && s1.offset.insetInlineEnd === s2.offset.insetInlineEnd;\n  }\n  return s1 === s2;\n}\nexport function isWrapperStatesEqual(s1, s2) {\n  return s1.scrollPaddingInlineStart === s2.scrollPaddingInlineStart && s1.scrollPaddingInlineEnd === s2.scrollPaddingInlineEnd;\n}\nexport function updateCellOffsets(cells, props) {\n  var _a, _b, _c, _d;\n  const totalColumns = props.visibleColumns.length;\n  const firstColumnsWidths = [];\n  for (let i = 0; i < Math.min(totalColumns, props.stickyColumnsFirst); i++) {\n    const element = cells.get(props.visibleColumns[i]);\n    const cellWidth = element ? getLogicalBoundingClientRect(element).inlineSize : 0;\n    firstColumnsWidths[i] = ((_a = firstColumnsWidths[i - 1]) !== null && _a !== void 0 ? _a : 0) + cellWidth;\n  }\n  const lastColumnsWidths = [];\n  for (let i = 0; i < Math.min(totalColumns, props.stickyColumnsLast); i++) {\n    const element = cells.get(props.visibleColumns[totalColumns - 1 - i]);\n    const cellWidth = element ? getLogicalBoundingClientRect(element).inlineSize : 0;\n    lastColumnsWidths[i] = ((_b = lastColumnsWidths[i - 1]) !== null && _b !== void 0 ? _b : 0) + cellWidth;\n  }\n  const stickyWidthInlineStart = (_c = firstColumnsWidths[props.stickyColumnsFirst - 1]) !== null && _c !== void 0 ? _c : 0;\n  const stickyWidthInlineEnd = (_d = lastColumnsWidths[props.stickyColumnsLast - 1]) !== null && _d !== void 0 ? _d : 0;\n  const offsets = props.visibleColumns.reduce((map, columnId, columnIndex) => {\n    var _a, _b;\n    return map.set(columnId, {\n      first: (_a = firstColumnsWidths[columnIndex - 1]) !== null && _a !== void 0 ? _a : 0,\n      last: (_b = lastColumnsWidths[totalColumns - 1 - columnIndex - 1]) !== null && _b !== void 0 ? _b : 0\n    });\n  }, new Map());\n  return {\n    offsets,\n    stickyWidthInlineStart,\n    stickyWidthInlineEnd\n  };\n}","map":{"version":3,"names":["getLogicalBoundingClientRect","isCellStatesEqual","s1","s2","padInlineStart","lastInsetInlineStart","lastInsetInlineEnd","offset","insetInlineStart","insetInlineEnd","isWrapperStatesEqual","scrollPaddingInlineStart","scrollPaddingInlineEnd","updateCellOffsets","cells","props","totalColumns","visibleColumns","length","firstColumnsWidths","i","Math","min","stickyColumnsFirst","element","get","cellWidth","inlineSize","_a","lastColumnsWidths","stickyColumnsLast","_b","stickyWidthInlineStart","_c","stickyWidthInlineEnd","_d","offsets","reduce","map","columnId","columnIndex","set","first","last","Map"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/table/sticky-columns/utils.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { getLogicalBoundingClientRect } from '@cloudscape-design/component-toolkit/internal';\n\nimport { CellOffsets, StickyColumnsCellState, StickyColumnsProps, StickyColumnsWrapperState } from './interfaces';\n\nexport function isCellStatesEqual(s1: null | StickyColumnsCellState, s2: null | StickyColumnsCellState): boolean {\n  if (s1 && s2) {\n    return (\n      s1.padInlineStart === s2.padInlineStart &&\n      s1.lastInsetInlineStart === s2.lastInsetInlineStart &&\n      s1.lastInsetInlineEnd === s2.lastInsetInlineEnd &&\n      s1.offset.insetInlineStart === s2.offset.insetInlineStart &&\n      s1.offset.insetInlineEnd === s2.offset.insetInlineEnd\n    );\n  }\n  return s1 === s2;\n}\n\nexport function isWrapperStatesEqual(s1: StickyColumnsWrapperState, s2: StickyColumnsWrapperState): boolean {\n  return (\n    s1.scrollPaddingInlineStart === s2.scrollPaddingInlineStart &&\n    s1.scrollPaddingInlineEnd === s2.scrollPaddingInlineEnd\n  );\n}\n\nexport function updateCellOffsets(cells: Map<PropertyKey, HTMLElement>, props: StickyColumnsProps): CellOffsets {\n  const totalColumns = props.visibleColumns.length;\n\n  const firstColumnsWidths: number[] = [];\n  for (let i = 0; i < Math.min(totalColumns, props.stickyColumnsFirst); i++) {\n    const element = cells.get(props.visibleColumns[i]);\n    const cellWidth = element ? getLogicalBoundingClientRect(element).inlineSize : 0;\n    firstColumnsWidths[i] = (firstColumnsWidths[i - 1] ?? 0) + cellWidth;\n  }\n\n  const lastColumnsWidths: number[] = [];\n  for (let i = 0; i < Math.min(totalColumns, props.stickyColumnsLast); i++) {\n    const element = cells.get(props.visibleColumns[totalColumns - 1 - i]);\n    const cellWidth = element ? getLogicalBoundingClientRect(element).inlineSize : 0;\n    lastColumnsWidths[i] = (lastColumnsWidths[i - 1] ?? 0) + cellWidth;\n  }\n\n  const stickyWidthInlineStart = firstColumnsWidths[props.stickyColumnsFirst - 1] ?? 0;\n  const stickyWidthInlineEnd = lastColumnsWidths[props.stickyColumnsLast - 1] ?? 0;\n  const offsets = props.visibleColumns.reduce(\n    (map, columnId, columnIndex) =>\n      map.set(columnId, {\n        first: firstColumnsWidths[columnIndex - 1] ?? 0,\n        last: lastColumnsWidths[totalColumns - 1 - columnIndex - 1] ?? 0,\n      }),\n    new Map()\n  );\n\n  return { offsets, stickyWidthInlineStart, stickyWidthInlineEnd };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}