{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { isSameMonth, isSameYear } from 'date-fns';\nimport { KeyCode } from '../../internal/keycode';\nimport handleKey from '../../internal/utils/handle-key';\nimport { moveMonthDown, moveMonthUp, moveNextDay, moveNextMonth, moveNextWeek, movePrevDay, movePrevMonth, movePrevWeek } from '../utils/navigation';\nexport default function useCalendarGridKeyboardNavigation({\n  baseDate,\n  focusableDate,\n  granularity,\n  isDateEnabled,\n  isDateFocusable,\n  onChangePage,\n  onFocusDate,\n  onSelectDate\n}) {\n  const isMonthPicker = granularity === 'month';\n  const moveDown = isMonthPicker ? moveMonthDown : moveNextWeek;\n  const moveLeft = isMonthPicker ? movePrevMonth : movePrevDay;\n  const moveRight = isMonthPicker ? moveNextMonth : moveNextDay;\n  const moveUp = isMonthPicker ? moveMonthUp : movePrevWeek;\n  const isSamePage = isMonthPicker ? isSameYear : isSameMonth;\n  const onGridKeyDownHandler = event => {\n    let updatedFocusDate;\n    const keys = [KeyCode.up, KeyCode.down, KeyCode.left, KeyCode.right, KeyCode.space, KeyCode.enter];\n    if (focusableDate === null || keys.indexOf(event.keyCode) === -1) {\n      return;\n    }\n    event.preventDefault();\n    handleKey(event, {\n      onActivate: () => {\n        if (!isDateEnabled(focusableDate)) {\n          return;\n        }\n        onFocusDate(null);\n        onSelectDate(focusableDate);\n      },\n      onBlockEnd: () => updatedFocusDate = moveDown(focusableDate, isDateFocusable),\n      onBlockStart: () => updatedFocusDate = moveUp(focusableDate, isDateFocusable),\n      onInlineStart: () => updatedFocusDate = moveLeft(focusableDate, isDateFocusable),\n      onInlineEnd: () => updatedFocusDate = moveRight(focusableDate, isDateFocusable)\n    });\n    if (!updatedFocusDate) {\n      return;\n    }\n    if (!isSamePage(updatedFocusDate, baseDate)) {\n      onChangePage(updatedFocusDate);\n    }\n    onFocusDate(updatedFocusDate);\n  };\n  return onGridKeyDownHandler;\n}","map":{"version":3,"names":["isSameMonth","isSameYear","KeyCode","handleKey","moveMonthDown","moveMonthUp","moveNextDay","moveNextMonth","moveNextWeek","movePrevDay","movePrevMonth","movePrevWeek","useCalendarGridKeyboardNavigation","baseDate","focusableDate","granularity","isDateEnabled","isDateFocusable","onChangePage","onFocusDate","onSelectDate","isMonthPicker","moveDown","moveLeft","moveRight","moveUp","isSamePage","onGridKeyDownHandler","event","updatedFocusDate","keys","up","down","left","right","space","enter","indexOf","keyCode","preventDefault","onActivate","onBlockEnd","onBlockStart","onInlineStart","onInlineEnd"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/calendar/grid/use-calendar-grid-keyboard-navigation.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React from 'react';\nimport { isSameMonth, isSameYear } from 'date-fns';\n\nimport { KeyCode } from '../../internal/keycode';\nimport handleKey from '../../internal/utils/handle-key';\nimport { CalendarProps } from '../interfaces';\nimport {\n  moveMonthDown,\n  moveMonthUp,\n  moveNextDay,\n  moveNextMonth,\n  moveNextWeek,\n  movePrevDay,\n  movePrevMonth,\n  movePrevWeek,\n} from '../utils/navigation';\n\nexport default function useCalendarGridKeyboardNavigation({\n  baseDate,\n  focusableDate,\n  granularity,\n  isDateEnabled,\n  isDateFocusable,\n  onChangePage,\n  onFocusDate,\n  onSelectDate,\n}: {\n  baseDate: Date;\n  focusableDate: Date | null;\n  granularity: CalendarProps.Granularity;\n  // determines if a date could be selected by user actions\n  isDateEnabled: CalendarProps.IsDateEnabledFunction;\n  // a date could be not enabled (isDateEnabled returns false), but focusable if it's disabled with reason\n  isDateFocusable: CalendarProps.IsDateEnabledFunction;\n  onChangePage: (date: Date) => void;\n  onFocusDate: (date: null | Date) => void;\n  onSelectDate: (date: Date) => void;\n}) {\n  const isMonthPicker = granularity === 'month';\n\n  const moveDown = isMonthPicker ? moveMonthDown : moveNextWeek;\n  const moveLeft = isMonthPicker ? movePrevMonth : movePrevDay;\n  const moveRight = isMonthPicker ? moveNextMonth : moveNextDay;\n  const moveUp = isMonthPicker ? moveMonthUp : movePrevWeek;\n\n  const isSamePage = isMonthPicker ? isSameYear : isSameMonth;\n\n  const onGridKeyDownHandler = (event: React.KeyboardEvent<HTMLElement>) => {\n    let updatedFocusDate;\n\n    const keys = [KeyCode.up, KeyCode.down, KeyCode.left, KeyCode.right, KeyCode.space, KeyCode.enter];\n\n    if (focusableDate === null || keys.indexOf(event.keyCode) === -1) {\n      return;\n    }\n\n    event.preventDefault();\n\n    handleKey(event, {\n      onActivate: () => {\n        if (!isDateEnabled(focusableDate)) {\n          return;\n        }\n\n        onFocusDate(null);\n        onSelectDate(focusableDate);\n      },\n      onBlockEnd: () => (updatedFocusDate = moveDown(focusableDate, isDateFocusable)),\n      onBlockStart: () => (updatedFocusDate = moveUp(focusableDate, isDateFocusable)),\n      onInlineStart: () => (updatedFocusDate = moveLeft(focusableDate, isDateFocusable)),\n      onInlineEnd: () => (updatedFocusDate = moveRight(focusableDate, isDateFocusable)),\n    });\n\n    if (!updatedFocusDate) {\n      return;\n    }\n\n    if (!isSamePage(updatedFocusDate, baseDate)) {\n      onChangePage(updatedFocusDate);\n    }\n    onFocusDate(updatedFocusDate);\n  };\n\n  return onGridKeyDownHandler;\n}\n"],"mappings":"AAAA;AACA;AAGA,SAASA,WAAW,EAAEC,UAAU,QAAQ,UAAU;AAElD,SAASC,OAAO,QAAQ,wBAAwB;AAChD,OAAOC,SAAS,MAAM,iCAAiC;AAEvD,SACEC,aAAa,EACbC,WAAW,EACXC,WAAW,EACXC,aAAa,EACbC,YAAY,EACZC,WAAW,EACXC,aAAa,EACbC,YAAY,QACP,qBAAqB;AAE5B,eAAc,SAAUC,iCAAiCA,CAAC;EACxDC,QAAQ;EACRC,aAAa;EACbC,WAAW;EACXC,aAAa;EACbC,eAAe;EACfC,YAAY;EACZC,WAAW;EACXC;AAAY,CAYb;EACC,MAAMC,aAAa,GAAGN,WAAW,KAAK,OAAO;EAE7C,MAAMO,QAAQ,GAAGD,aAAa,GAAGjB,aAAa,GAAGI,YAAY;EAC7D,MAAMe,QAAQ,GAAGF,aAAa,GAAGX,aAAa,GAAGD,WAAW;EAC5D,MAAMe,SAAS,GAAGH,aAAa,GAAGd,aAAa,GAAGD,WAAW;EAC7D,MAAMmB,MAAM,GAAGJ,aAAa,GAAGhB,WAAW,GAAGM,YAAY;EAEzD,MAAMe,UAAU,GAAGL,aAAa,GAAGpB,UAAU,GAAGD,WAAW;EAE3D,MAAM2B,oBAAoB,GAAIC,KAAuC,IAAI;IACvE,IAAIC,gBAAgB;IAEpB,MAAMC,IAAI,GAAG,CAAC5B,OAAO,CAAC6B,EAAE,EAAE7B,OAAO,CAAC8B,IAAI,EAAE9B,OAAO,CAAC+B,IAAI,EAAE/B,OAAO,CAACgC,KAAK,EAAEhC,OAAO,CAACiC,KAAK,EAAEjC,OAAO,CAACkC,KAAK,CAAC;IAElG,IAAItB,aAAa,KAAK,IAAI,IAAIgB,IAAI,CAACO,OAAO,CAACT,KAAK,CAACU,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE;MAChE;;IAGFV,KAAK,CAACW,cAAc,EAAE;IAEtBpC,SAAS,CAACyB,KAAK,EAAE;MACfY,UAAU,EAAEA,CAAA,KAAK;QACf,IAAI,CAACxB,aAAa,CAACF,aAAa,CAAC,EAAE;UACjC;;QAGFK,WAAW,CAAC,IAAI,CAAC;QACjBC,YAAY,CAACN,aAAa,CAAC;MAC7B,CAAC;MACD2B,UAAU,EAAEA,CAAA,KAAOZ,gBAAgB,GAAGP,QAAQ,CAACR,aAAa,EAAEG,eAAe,CAAE;MAC/EyB,YAAY,EAAEA,CAAA,KAAOb,gBAAgB,GAAGJ,MAAM,CAACX,aAAa,EAAEG,eAAe,CAAE;MAC/E0B,aAAa,EAAEA,CAAA,KAAOd,gBAAgB,GAAGN,QAAQ,CAACT,aAAa,EAAEG,eAAe,CAAE;MAClF2B,WAAW,EAAEA,CAAA,KAAOf,gBAAgB,GAAGL,SAAS,CAACV,aAAa,EAAEG,eAAe;KAChF,CAAC;IAEF,IAAI,CAACY,gBAAgB,EAAE;MACrB;;IAGF,IAAI,CAACH,UAAU,CAACG,gBAAgB,EAAEhB,QAAQ,CAAC,EAAE;MAC3CK,YAAY,CAACW,gBAAgB,CAAC;;IAEhCV,WAAW,CAACU,gBAAgB,CAAC;EAC/B,CAAC;EAED,OAAOF,oBAAoB;AAC7B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}