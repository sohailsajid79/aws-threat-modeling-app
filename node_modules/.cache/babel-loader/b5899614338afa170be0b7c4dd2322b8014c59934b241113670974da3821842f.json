{"ast":null,"code":"export function getSortedOptions(_ref) {\n  let {\n    options,\n    contentDisplay\n  } = _ref;\n  // By using a Map, we are guaranteed to preserve insertion order on future iteration.\n  const optionsById = new Map();\n  // We insert contentDisplay first so we respect the currently selected order\n  for (const {\n    id,\n    visible\n  } of contentDisplay) {\n    // If an option is provided in contentDisplay and not options, we default the label to the id\n    optionsById.set(id, {\n      id,\n      label: id,\n      visible\n    });\n  }\n  // We merge options data, and insert any that were not in contentDisplay as non-visible\n  for (const option of options) {\n    const existing = optionsById.get(option.id);\n    optionsById.set(option.id, Object.assign(Object.assign({}, option), {\n      visible: !!(existing === null || existing === void 0 ? void 0 : existing.visible)\n    }));\n  }\n  return Array.from(optionsById.values());\n}\nexport function getFilteredOptions(options, filterText) {\n  filterText = filterText.trim().toLowerCase();\n  if (!filterText) {\n    return options;\n  }\n  return options.filter(option => option.label.toLowerCase().trim().includes(filterText));\n}","map":{"version":3,"names":["getSortedOptions","_ref","options","contentDisplay","optionsById","Map","id","visible","set","label","option","existing","get","Object","assign","Array","from","values","getFilteredOptions","filterText","trim","toLowerCase","filter","includes"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/collection-preferences/content-display/utils.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { CollectionPreferencesProps } from '../interfaces';\n\nexport interface OptionWithVisibility extends CollectionPreferencesProps.ContentDisplayOption {\n  visible: boolean;\n}\n\nexport function getSortedOptions({\n  options,\n  contentDisplay,\n}: {\n  options: ReadonlyArray<CollectionPreferencesProps.ContentDisplayOption>;\n  contentDisplay: ReadonlyArray<CollectionPreferencesProps.ContentDisplayItem>;\n}): ReadonlyArray<OptionWithVisibility> {\n  // By using a Map, we are guaranteed to preserve insertion order on future iteration.\n  const optionsById = new Map<string, OptionWithVisibility>();\n  // We insert contentDisplay first so we respect the currently selected order\n  for (const { id, visible } of contentDisplay) {\n    // If an option is provided in contentDisplay and not options, we default the label to the id\n    optionsById.set(id, { id, label: id, visible });\n  }\n  // We merge options data, and insert any that were not in contentDisplay as non-visible\n  for (const option of options) {\n    const existing = optionsById.get(option.id);\n    optionsById.set(option.id, { ...option, visible: !!existing?.visible });\n  }\n  return Array.from(optionsById.values());\n}\n\nexport function getFilteredOptions(options: ReadonlyArray<OptionWithVisibility>, filterText: string) {\n  filterText = filterText.trim().toLowerCase();\n\n  if (!filterText) {\n    return options;\n  }\n\n  return options.filter(option => option.label.toLowerCase().trim().includes(filterText));\n}\n"],"mappings":"AAQA,OAAM,SAAUA,gBAAgBA,CAAAC,IAAA,EAM/B;EAAA,IANgC;IAC/BC,OAAO;IACPC;EAAc,CAIf,GAAAF,IAAA;EACC;EACA,MAAMG,WAAW,GAAG,IAAIC,GAAG,EAAgC;EAC3D;EACA,KAAK,MAAM;IAAEC,EAAE;IAAEC;EAAO,CAAE,IAAIJ,cAAc,EAAE;IAC5C;IACAC,WAAW,CAACI,GAAG,CAACF,EAAE,EAAE;MAAEA,EAAE;MAAEG,KAAK,EAAEH,EAAE;MAAEC;IAAO,CAAE,CAAC;;EAEjD;EACA,KAAK,MAAMG,MAAM,IAAIR,OAAO,EAAE;IAC5B,MAAMS,QAAQ,GAAGP,WAAW,CAACQ,GAAG,CAACF,MAAM,CAACJ,EAAE,CAAC;IAC3CF,WAAW,CAACI,GAAG,CAACE,MAAM,CAACJ,EAAE,EAAAO,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAOJ,MAAM;MAAEH,OAAO,EAAE,CAAC,EAACI,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEJ,OAAO;IAAA,GAAG;;EAEzE,OAAOQ,KAAK,CAACC,IAAI,CAACZ,WAAW,CAACa,MAAM,EAAE,CAAC;AACzC;AAEA,OAAM,SAAUC,kBAAkBA,CAAChB,OAA4C,EAAEiB,UAAkB;EACjGA,UAAU,GAAGA,UAAU,CAACC,IAAI,EAAE,CAACC,WAAW,EAAE;EAE5C,IAAI,CAACF,UAAU,EAAE;IACf,OAAOjB,OAAO;;EAGhB,OAAOA,OAAO,CAACoB,MAAM,CAACZ,MAAM,IAAIA,MAAM,CAACD,KAAK,CAACY,WAAW,EAAE,CAACD,IAAI,EAAE,CAACG,QAAQ,CAACJ,UAAU,CAAC,CAAC;AACzF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}