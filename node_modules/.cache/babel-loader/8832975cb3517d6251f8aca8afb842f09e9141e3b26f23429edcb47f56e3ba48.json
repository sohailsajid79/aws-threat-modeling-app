{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\n * @typedef {import('micromark-util-types').Handle} Handle\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('../matters.js').Options} Options\n */\n\nimport { matters } from '../matters.js';\n\n/**\n * Create an extension for `micromark` to support frontmatter when serializing\n * to HTML.\n *\n * > ðŸ‘‰ **Note**: this makes sure nothing is generated in the output HTML for\n * > frontmatter.\n *\n * @param {Options | null | undefined} [options='yaml']\n *   Configuration.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions`, to\n *   support frontmatter when serializing to HTML.\n */\nexport function frontmatterHtml(options) {\n  const listOfMatters = matters(options);\n  /** @type {HtmlExtension['enter']} */\n  const enter = {};\n  /** @type {HtmlExtension['exit']} */\n  const exit = {};\n  let index = -1;\n  while (++index < listOfMatters.length) {\n    const type = /** @type {TokenType} */listOfMatters[index].type;\n    enter[type] = start;\n    exit[type] = end;\n  }\n  return {\n    enter,\n    exit\n  };\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function start() {\n    this.buffer();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function end() {\n    this.resume();\n    this.setData('slurpOneLineEnding', true);\n  }\n}","map":{"version":3,"names":["matters","frontmatterHtml","options","listOfMatters","enter","exit","index","length","type","start","end","buffer","resume","setData"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/micromark-extension-frontmatter/dev/lib/html.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\n * @typedef {import('micromark-util-types').Handle} Handle\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('../matters.js').Options} Options\n */\n\nimport {matters} from '../matters.js'\n\n/**\n * Create an extension for `micromark` to support frontmatter when serializing\n * to HTML.\n *\n * > ðŸ‘‰ **Note**: this makes sure nothing is generated in the output HTML for\n * > frontmatter.\n *\n * @param {Options | null | undefined} [options='yaml']\n *   Configuration.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions`, to\n *   support frontmatter when serializing to HTML.\n */\nexport function frontmatterHtml(options) {\n  const listOfMatters = matters(options)\n  /** @type {HtmlExtension['enter']} */\n  const enter = {}\n  /** @type {HtmlExtension['exit']} */\n  const exit = {}\n  let index = -1\n\n  while (++index < listOfMatters.length) {\n    const type = /** @type {TokenType} */ (listOfMatters[index].type)\n    enter[type] = start\n    exit[type] = end\n  }\n\n  return {enter, exit}\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function start() {\n    this.buffer()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function end() {\n    this.resume()\n    this.setData('slurpOneLineEnding', true)\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,OAAO,QAAO,eAAe;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,eAAeA,CAACC,OAAO,EAAE;EACvC,MAAMC,aAAa,GAAGH,OAAO,CAACE,OAAO,CAAC;EACtC;EACA,MAAME,KAAK,GAAG,CAAC,CAAC;EAChB;EACA,MAAMC,IAAI,GAAG,CAAC,CAAC;EACf,IAAIC,KAAK,GAAG,CAAC,CAAC;EAEd,OAAO,EAAEA,KAAK,GAAGH,aAAa,CAACI,MAAM,EAAE;IACrC,MAAMC,IAAI,GAAG,wBAA0BL,aAAa,CAACG,KAAK,CAAC,CAACE,IAAK;IACjEJ,KAAK,CAACI,IAAI,CAAC,GAAGC,KAAK;IACnBJ,IAAI,CAACG,IAAI,CAAC,GAAGE,GAAG;EAClB;EAEA,OAAO;IAACN,KAAK;IAAEC;EAAI,CAAC;;EAEpB;AACF;AACA;AACA;EACE,SAASI,KAAKA,CAAA,EAAG;IACf,IAAI,CAACE,MAAM,CAAC,CAAC;EACf;;EAEA;AACF;AACA;AACA;EACE,SAASD,GAAGA,CAAA,EAAG;IACb,IAAI,CAACE,MAAM,CAAC,CAAC;IACb,IAAI,CAACC,OAAO,CAAC,oBAAoB,EAAE,IAAI,CAAC;EAC1C;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}