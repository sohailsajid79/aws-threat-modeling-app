{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useRef, useState, useCallback } from 'react';\nimport { useResizeObserver } from '../internal/container-queries/use-resize-observer';\n/**\n * Attaches resize-observer to the referenced element and keeps last observation in state.\n * The hook allows to limit the amount of re-renders to only when the observed value changes.\n *\n * @example\n * Switching display mode under a given condition (only re-renders when mode changes):\n * ```\n * const [smallMode, ref] = useContainerQuery(entry => entry.contentBoxHeight <= smallModeHeight, [smallModeHeight])\n * ```\n *\n * @example\n * Obtaining observer entry (re-renders with each observation):\n * ```\n * const [entry, ref] = useContainerQuery(entry => entry)\n * ```\n *\n * @example\n * Using previous state to avoid unnecessary re-renders:\n * ```\n * const [value, ref] = useContainerQuery((entry, prev) => shouldUpdate(entry) ? getValue(entry) : prev)\n * ```\n *\n * @typeParam ObservedState State obtained from the last observation\n * @param mapFn Function to convert ContainerQueryEntry to ObservedState\n * @param deps Dependency list to indicate when the mapFn changes\n * @returns A tuple of the observed state and a reference to be attached to the target element\n */\nexport default function useContainerQuery(mapFn, deps = []) {\n  const elementRef = useRef(null);\n  const [state, setState] = useState(null);\n  // Update getElement when deps change to trigger new observation.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const getElement = useCallback(() => elementRef.current, deps);\n  useResizeObserver(getElement, entry => setState(prevState => mapFn(entry, prevState)));\n  return [state, elementRef];\n}","map":{"version":3,"names":["useRef","useState","useCallback","useResizeObserver","useContainerQuery","mapFn","deps","elementRef","state","setState","getElement","current","entry","prevState"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/@cloudscape-design/component-toolkit/container-queries/use-container-query.js"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useRef, useState, useCallback } from 'react';\nimport { useResizeObserver } from '../internal/container-queries/use-resize-observer';\n/**\n * Attaches resize-observer to the referenced element and keeps last observation in state.\n * The hook allows to limit the amount of re-renders to only when the observed value changes.\n *\n * @example\n * Switching display mode under a given condition (only re-renders when mode changes):\n * ```\n * const [smallMode, ref] = useContainerQuery(entry => entry.contentBoxHeight <= smallModeHeight, [smallModeHeight])\n * ```\n *\n * @example\n * Obtaining observer entry (re-renders with each observation):\n * ```\n * const [entry, ref] = useContainerQuery(entry => entry)\n * ```\n *\n * @example\n * Using previous state to avoid unnecessary re-renders:\n * ```\n * const [value, ref] = useContainerQuery((entry, prev) => shouldUpdate(entry) ? getValue(entry) : prev)\n * ```\n *\n * @typeParam ObservedState State obtained from the last observation\n * @param mapFn Function to convert ContainerQueryEntry to ObservedState\n * @param deps Dependency list to indicate when the mapFn changes\n * @returns A tuple of the observed state and a reference to be attached to the target element\n */\nexport default function useContainerQuery(mapFn, deps = []) {\n    const elementRef = useRef(null);\n    const [state, setState] = useState(null);\n    // Update getElement when deps change to trigger new observation.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const getElement = useCallback(() => elementRef.current, deps);\n    useResizeObserver(getElement, entry => setState(prevState => mapFn(entry, prevState)));\n    return [state, elementRef];\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,MAAM,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AACrD,SAASC,iBAAiB,QAAQ,mDAAmD;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,iBAAiBA,CAACC,KAAK,EAAEC,IAAI,GAAG,EAAE,EAAE;EACxD,MAAMC,UAAU,GAAGP,MAAM,CAAC,IAAI,CAAC;EAC/B,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACxC;EACA;EACA,MAAMS,UAAU,GAAGR,WAAW,CAAC,MAAMK,UAAU,CAACI,OAAO,EAAEL,IAAI,CAAC;EAC9DH,iBAAiB,CAACO,UAAU,EAAEE,KAAK,IAAIH,QAAQ,CAACI,SAAS,IAAIR,KAAK,CAACO,KAAK,EAAEC,SAAS,CAAC,CAAC,CAAC;EACtF,OAAO,CAACL,KAAK,EAAED,UAAU,CAAC;AAC9B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}