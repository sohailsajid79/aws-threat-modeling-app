{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexport function getPercent(value, range) {\n  return (value - range[0]) / (range[1] - range[0]) * 100;\n}\nfunction countDecimals(value) {\n  var _a;\n  if (Math.floor(value) === value) {\n    return 0;\n  }\n  const str = Math.abs(value).toString();\n  // very small numbers, e.g. 1e-9\n  if (str.indexOf('-') !== -1) {\n    return parseInt(str.split('-')[1], 10) || 0;\n  }\n  return ((_a = str.split('.')[1]) === null || _a === void 0 ? void 0 : _a.length) || 0;\n}\nexport const getStepArray = (step, [min, max]) => {\n  const steps = [min];\n  // JS struggles with rounding errors when using decimals, so include a multiplier\n  // to make step calculations integer-based\n  const multiplier = Math.pow(10, countDecimals(step));\n  let currentStep = min;\n  while (currentStep < max) {\n    currentStep = (multiplier * currentStep + multiplier * step) / multiplier;\n    if (currentStep <= max) {\n      steps.push(currentStep);\n    }\n  }\n  return steps;\n};\nexport const findLowerAndHigherValues = (array, value) => {\n  let sortedArray = [...array];\n  sortedArray = sortedArray.sort((a, b) => a - b);\n  const index = sortedArray.indexOf(value) || 0;\n  const lower = sortedArray[index - 1] || undefined;\n  const higher = sortedArray[index + 1] || undefined;\n  return {\n    lower,\n    higher\n  };\n};\nexport const valuesAreValid = referenceValues => {\n  const valuesWithDecimals = referenceValues === null || referenceValues === void 0 ? void 0 : referenceValues.filter(value => !Number.isInteger(value));\n  return valuesWithDecimals.length === 0;\n};\nexport const THUMB_SIZE = 16;\nexport const THUMB_READONLY_SIZE = 12;","map":{"version":3,"names":["getPercent","value","range","countDecimals","Math","floor","str","abs","toString","indexOf","parseInt","split","_a","length","getStepArray","step","min","max","steps","multiplier","pow","currentStep","push","findLowerAndHigherValues","array","sortedArray","sort","a","b","index","lower","undefined","higher","valuesAreValid","referenceValues","valuesWithDecimals","filter","Number","isInteger","THUMB_SIZE","THUMB_READONLY_SIZE"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/slider/utils.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nexport function getPercent(value: number, range: [min: number, max: number]) {\n  return ((value - range[0]) / (range[1] - range[0])) * 100;\n}\n\nfunction countDecimals(value: number) {\n  if (Math.floor(value) === value) {\n    return 0;\n  }\n\n  const str = Math.abs(value).toString();\n  // very small numbers, e.g. 1e-9\n  if (str.indexOf('-') !== -1) {\n    return parseInt(str.split('-')[1], 10) || 0;\n  }\n  return str.split('.')[1]?.length || 0;\n}\n\nexport const getStepArray = (step: number, [min, max]: [min: number, max: number]) => {\n  const steps = [min];\n\n  // JS struggles with rounding errors when using decimals, so include a multiplier\n  // to make step calculations integer-based\n  const multiplier = Math.pow(10, countDecimals(step));\n\n  let currentStep = min;\n\n  while (currentStep < max) {\n    currentStep = (multiplier * currentStep + multiplier * step) / multiplier;\n    if (currentStep <= max) {\n      steps.push(currentStep);\n    }\n  }\n\n  return steps;\n};\n\nexport const findLowerAndHigherValues = <T extends number>(\n  array: ReadonlyArray<T>,\n  value: T\n): { lower: undefined | T; higher: undefined | T } => {\n  let sortedArray = [...array];\n  sortedArray = sortedArray.sort((a, b) => a - b);\n\n  const index = sortedArray.indexOf(value) || 0;\n  const lower = sortedArray[index - 1] || undefined;\n  const higher = sortedArray[index + 1] || undefined;\n\n  return { lower, higher };\n};\n\nexport const valuesAreValid = (referenceValues: ReadonlyArray<number>) => {\n  const valuesWithDecimals = referenceValues?.filter(value => !Number.isInteger(value));\n\n  return valuesWithDecimals.length === 0;\n};\n\nexport const THUMB_SIZE = 16;\nexport const THUMB_READONLY_SIZE = 12;\n"],"mappings":"AAAA;AACA;AAEA,OAAM,SAAUA,UAAUA,CAACC,KAAa,EAAEC,KAAiC;EACzE,OAAQ,CAACD,KAAK,GAAGC,KAAK,CAAC,CAAC,CAAC,KAAKA,KAAK,CAAC,CAAC,CAAC,GAAGA,KAAK,CAAC,CAAC,CAAC,CAAC,GAAI,GAAG;AAC3D;AAEA,SAASC,aAAaA,CAACF,KAAa;;EAClC,IAAIG,IAAI,CAACC,KAAK,CAACJ,KAAK,CAAC,KAAKA,KAAK,EAAE;IAC/B,OAAO,CAAC;;EAGV,MAAMK,GAAG,GAAGF,IAAI,CAACG,GAAG,CAACN,KAAK,CAAC,CAACO,QAAQ,EAAE;EACtC;EACA,IAAIF,GAAG,CAACG,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;IAC3B,OAAOC,QAAQ,CAACJ,GAAG,CAACK,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC;;EAE7C,OAAO,EAAAC,EAAA,GAAAN,GAAG,CAACK,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,cAAAC,EAAA,uBAAAA,EAAA,CAAEC,MAAM,KAAI,CAAC;AACvC;AAEA,OAAO,MAAMC,YAAY,GAAGA,CAACC,IAAY,EAAE,CAACC,GAAG,EAAEC,GAAG,CAA6B,KAAI;EACnF,MAAMC,KAAK,GAAG,CAACF,GAAG,CAAC;EAEnB;EACA;EACA,MAAMG,UAAU,GAAGf,IAAI,CAACgB,GAAG,CAAC,EAAE,EAAEjB,aAAa,CAACY,IAAI,CAAC,CAAC;EAEpD,IAAIM,WAAW,GAAGL,GAAG;EAErB,OAAOK,WAAW,GAAGJ,GAAG,EAAE;IACxBI,WAAW,GAAG,CAACF,UAAU,GAAGE,WAAW,GAAGF,UAAU,GAAGJ,IAAI,IAAII,UAAU;IACzE,IAAIE,WAAW,IAAIJ,GAAG,EAAE;MACtBC,KAAK,CAACI,IAAI,CAACD,WAAW,CAAC;;;EAI3B,OAAOH,KAAK;AACd,CAAC;AAED,OAAO,MAAMK,wBAAwB,GAAGA,CACtCC,KAAuB,EACvBvB,KAAQ,KAC2C;EACnD,IAAIwB,WAAW,GAAG,CAAC,GAAGD,KAAK,CAAC;EAC5BC,WAAW,GAAGA,WAAW,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC;EAE/C,MAAMC,KAAK,GAAGJ,WAAW,CAAChB,OAAO,CAACR,KAAK,CAAC,IAAI,CAAC;EAC7C,MAAM6B,KAAK,GAAGL,WAAW,CAACI,KAAK,GAAG,CAAC,CAAC,IAAIE,SAAS;EACjD,MAAMC,MAAM,GAAGP,WAAW,CAACI,KAAK,GAAG,CAAC,CAAC,IAAIE,SAAS;EAElD,OAAO;IAAED,KAAK;IAAEE;EAAM,CAAE;AAC1B,CAAC;AAED,OAAO,MAAMC,cAAc,GAAIC,eAAsC,IAAI;EACvE,MAAMC,kBAAkB,GAAGD,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEE,MAAM,CAACnC,KAAK,IAAI,CAACoC,MAAM,CAACC,SAAS,CAACrC,KAAK,CAAC,CAAC;EAErF,OAAOkC,kBAAkB,CAACtB,MAAM,KAAK,CAAC;AACxC,CAAC;AAED,OAAO,MAAM0B,UAAU,GAAG,EAAE;AAC5B,OAAO,MAAMC,mBAAmB,GAAG,EAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}