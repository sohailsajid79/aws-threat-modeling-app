{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { memo, useEffect, useRef } from 'react';\nimport { getIsRtl } from '@cloudscape-design/component-toolkit/internal';\nimport { getTextWidth } from './responsive-text-utils';\nexport default memo(ResponsiveText);\nfunction ResponsiveText({\n  x,\n  y,\n  className,\n  children,\n  maxWidth\n}) {\n  const textRef = useRef(null);\n  // Determine the visible width of the text and if necessary truncate it until it fits.\n  useEffect(() => {\n    const isRtl = getIsRtl(textRef.current);\n    renderTextContent(textRef.current, children, maxWidth, isRtl);\n  }, [maxWidth, children]);\n  return React.createElement(\"text\", {\n    ref: textRef,\n    x: x,\n    y: y,\n    style: {\n      textAnchor: 'end'\n    },\n    className: className\n  }, children);\n}\nexport function renderTextContent(textNode, text, maxWidth, isRtl) {\n  let visibleLength = text.length;\n  while (visibleLength >= 0) {\n    textNode.textContent = truncateText(text, visibleLength, isRtl);\n    if (getTextWidth(textNode) <= maxWidth) {\n      return;\n    } else {\n      visibleLength--;\n    }\n  }\n}\nfunction truncateText(text, maxLength, isRtl) {\n  if (text.length === maxLength) {\n    return text;\n  }\n  if (isRtl) {\n    return text.slice(text.length - maxLength) + '…';\n  }\n  return text.slice(0, maxLength) + '…';\n}","map":{"version":3,"names":["React","memo","useEffect","useRef","getIsRtl","getTextWidth","ResponsiveText","x","y","className","children","maxWidth","textRef","isRtl","current","renderTextContent","createElement","ref","style","textAnchor","textNode","text","visibleLength","length","textContent","truncateText","maxLength","slice"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/internal/components/responsive-text/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { memo, useEffect, useRef } from 'react';\n\nimport { getIsRtl } from '@cloudscape-design/component-toolkit/internal';\n\nimport { getTextWidth } from './responsive-text-utils';\n\ninterface ResponsiveTextProps {\n  x: number;\n  y: number;\n  className?: string;\n  children: string;\n  maxWidth: number;\n}\n\nexport default memo(ResponsiveText);\n\nfunction ResponsiveText({ x, y, className, children, maxWidth }: ResponsiveTextProps) {\n  const textRef = useRef<SVGTextElement>(null);\n\n  // Determine the visible width of the text and if necessary truncate it until it fits.\n  useEffect(() => {\n    const isRtl = getIsRtl(textRef.current!);\n    renderTextContent(textRef.current!, children, maxWidth, isRtl);\n  }, [maxWidth, children]);\n\n  return (\n    <text ref={textRef} x={x} y={y} style={{ textAnchor: 'end' }} className={className}>\n      {children}\n    </text>\n  );\n}\n\nexport function renderTextContent(textNode: SVGTextElement, text: string, maxWidth: number, isRtl: boolean) {\n  let visibleLength = text.length;\n  while (visibleLength >= 0) {\n    textNode.textContent = truncateText(text, visibleLength, isRtl);\n\n    if (getTextWidth(textNode) <= maxWidth) {\n      return;\n    } else {\n      visibleLength--;\n    }\n  }\n}\n\nfunction truncateText(text: string, maxLength: number, isRtl: boolean) {\n  if (text.length === maxLength) {\n    return text;\n  }\n  if (isRtl) {\n    return text.slice(text.length - maxLength) + '…';\n  }\n  return text.slice(0, maxLength) + '…';\n}\n"],"mappings":"AAAA;AACA;AACA,OAAOA,KAAK,IAAIC,IAAI,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAEtD,SAASC,QAAQ,QAAQ,+CAA+C;AAExE,SAASC,YAAY,QAAQ,yBAAyB;AAUtD,eAAeJ,IAAI,CAACK,cAAc,CAAC;AAEnC,SAASA,cAAcA,CAAC;EAAEC,CAAC;EAAEC,CAAC;EAAEC,SAAS;EAAEC,QAAQ;EAAEC;AAAQ,CAAuB;EAClF,MAAMC,OAAO,GAAGT,MAAM,CAAiB,IAAI,CAAC;EAE5C;EACAD,SAAS,CAAC,MAAK;IACb,MAAMW,KAAK,GAAGT,QAAQ,CAACQ,OAAO,CAACE,OAAQ,CAAC;IACxCC,iBAAiB,CAACH,OAAO,CAACE,OAAQ,EAAEJ,QAAQ,EAAEC,QAAQ,EAAEE,KAAK,CAAC;EAChE,CAAC,EAAE,CAACF,QAAQ,EAAED,QAAQ,CAAC,CAAC;EAExB,OACEV,KAAA,CAAAgB,aAAA;IAAMC,GAAG,EAAEL,OAAO;IAAEL,CAAC,EAAEA,CAAC;IAAEC,CAAC,EAAEA,CAAC;IAAEU,KAAK,EAAE;MAAEC,UAAU,EAAE;IAAK,CAAE;IAAEV,SAAS,EAAEA;EAAS,GAC/EC,QAAQ,CACJ;AAEX;AAEA,OAAM,SAAUK,iBAAiBA,CAACK,QAAwB,EAAEC,IAAY,EAAEV,QAAgB,EAAEE,KAAc;EACxG,IAAIS,aAAa,GAAGD,IAAI,CAACE,MAAM;EAC/B,OAAOD,aAAa,IAAI,CAAC,EAAE;IACzBF,QAAQ,CAACI,WAAW,GAAGC,YAAY,CAACJ,IAAI,EAAEC,aAAa,EAAET,KAAK,CAAC;IAE/D,IAAIR,YAAY,CAACe,QAAQ,CAAC,IAAIT,QAAQ,EAAE;MACtC;KACD,MAAM;MACLW,aAAa,EAAE;;;AAGrB;AAEA,SAASG,YAAYA,CAACJ,IAAY,EAAEK,SAAiB,EAAEb,KAAc;EACnE,IAAIQ,IAAI,CAACE,MAAM,KAAKG,SAAS,EAAE;IAC7B,OAAOL,IAAI;;EAEb,IAAIR,KAAK,EAAE;IACT,OAAOQ,IAAI,CAACM,KAAK,CAACN,IAAI,CAACE,MAAM,GAAGG,SAAS,CAAC,GAAG,GAAG;;EAElD,OAAOL,IAAI,CAACM,KAAK,CAAC,CAAC,EAAED,SAAS,CAAC,GAAG,GAAG;AACvC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}