{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { createPlaceholdersLayout, getDefaultColumnSpan, getDefaultRowSpan } from \"../../internal/utils/layout\";\nimport { normalizeInsertionPath } from \"./path\";\nexport function getLayoutColumns(transition) {\n  return transition.itemsLayout.columns;\n}\n// The rows can be overridden during transition to create more drop targets at the bottom.\nexport function getLayoutRows(transition) {\n  var _a, _b, _c;\n  const layout = (_b = (_a = transition.layoutShift) === null || _a === void 0 ? void 0 : _a.next) !== null && _b !== void 0 ? _b : transition.itemsLayout;\n  const layoutItem = layout.items.find(it => it.id === transition.draggableItem.id);\n  const itemHeight = (_c = layoutItem === null || layoutItem === void 0 ? void 0 : layoutItem.height) !== null && _c !== void 0 ? _c : getDefaultRowSpan(transition.draggableItem);\n  // Add extra row for resize when already at the bottom.\n  if (transition.operation === \"resize\") {\n    return Math.max(layout.rows, layoutItem ? layoutItem.y + layoutItem.height + 1 : 0);\n  }\n  // Add extra row(s) for reorder/insert based on item's height.\n  else {\n    return Math.max(layout.rows, transition.itemsLayout.rows + itemHeight);\n  }\n}\nexport function getLayoutPlaceholders(transition) {\n  const rows = getLayoutRows(transition);\n  const columns = getLayoutColumns(transition);\n  return createPlaceholdersLayout(rows, columns);\n}\n/**\n * Retrieves direction from where the inserting item comes.\n */\nexport function getInsertionDirection(cursorOffset) {\n  if (cursorOffset.x < 0) {\n    return \"right\";\n  }\n  if (cursorOffset.x > 0) {\n    return \"left\";\n  }\n  if (cursorOffset.y < 0) {\n    return \"down\";\n  }\n  if (cursorOffset.y > 0) {\n    return \"up\";\n  }\n  return \"right\";\n}\n/**\n * Applies transition operation (reorder/move/insert) and retrieves an object that describes the updated\n * layout and the moves to be made including and not including items float to top.\n *\n * The layout shift w/o refloat is used for rendering and w/ refloat is used for live announcements.\n */\nexport function getLayoutShift(transition, path, insertionDirection) {\n  if (path.length === 0) {\n    return null;\n  }\n  const width = getDefaultColumnSpan(transition.draggableItem, getLayoutColumns(transition));\n  const height = getDefaultRowSpan(transition.draggableItem);\n  const rows = getLayoutRows(transition);\n  const columns = getLayoutColumns(transition);\n  switch (transition.operation) {\n    case \"resize\":\n      return transition.layoutEngine.resize({\n        itemId: transition.draggableItem.id,\n        path\n      });\n    case \"reorder\":\n      return transition.layoutEngine.move({\n        itemId: transition.draggableItem.id,\n        path\n      });\n    case \"insert\":\n      return transition.layoutEngine.insert({\n        itemId: transition.draggableItem.id,\n        width,\n        height,\n        path: normalizeInsertionPath(path, insertionDirection !== null && insertionDirection !== void 0 ? insertionDirection : \"right\", columns, rows)\n      });\n  }\n}","map":{"version":3,"names":["createPlaceholdersLayout","getDefaultColumnSpan","getDefaultRowSpan","normalizeInsertionPath","getLayoutColumns","transition","itemsLayout","columns","getLayoutRows","layout","_b","_a","layoutShift","next","layoutItem","items","find","it","id","draggableItem","itemHeight","_c","height","operation","Math","max","rows","y","getLayoutPlaceholders","getInsertionDirection","cursorOffset","x","getLayoutShift","path","insertionDirection","length","width","layoutEngine","resize","itemId","move","insert"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/board/utils/layout.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Direction } from \"../../internal/interfaces\";\nimport { LayoutShift } from \"../../internal/layout-engine/interfaces\";\nimport { Coordinates } from \"../../internal/utils/coordinates\";\nimport { createPlaceholdersLayout, getDefaultColumnSpan, getDefaultRowSpan } from \"../../internal/utils/layout\";\nimport { Position } from \"../../internal/utils/position\";\nimport { Transition } from \"../interfaces\";\nimport { normalizeInsertionPath } from \"./path\";\n\nexport function getLayoutColumns<D>(transition: Transition<D>) {\n  return transition.itemsLayout.columns;\n}\n\n// The rows can be overridden during transition to create more drop targets at the bottom.\nexport function getLayoutRows<D>(transition: Transition<D>) {\n  const layout = transition.layoutShift?.next ?? transition.itemsLayout;\n\n  const layoutItem = layout.items.find((it) => it.id === transition.draggableItem.id);\n  const itemHeight = layoutItem?.height ?? getDefaultRowSpan(transition.draggableItem);\n  // Add extra row for resize when already at the bottom.\n  if (transition.operation === \"resize\") {\n    return Math.max(layout.rows, layoutItem ? layoutItem.y + layoutItem.height + 1 : 0);\n  }\n  // Add extra row(s) for reorder/insert based on item's height.\n  else {\n    return Math.max(layout.rows, transition.itemsLayout.rows + itemHeight);\n  }\n}\n\nexport function getLayoutPlaceholders<D>(transition: Transition<D>) {\n  const rows = getLayoutRows(transition);\n  const columns = getLayoutColumns(transition);\n  return createPlaceholdersLayout(rows, columns);\n}\n\n/**\n * Retrieves direction from where the inserting item comes.\n */\nexport function getInsertionDirection(cursorOffset: Coordinates): Direction {\n  if (cursorOffset.x < 0) {\n    return \"right\";\n  }\n  if (cursorOffset.x > 0) {\n    return \"left\";\n  }\n  if (cursorOffset.y < 0) {\n    return \"down\";\n  }\n  if (cursorOffset.y > 0) {\n    return \"up\";\n  }\n  return \"right\";\n}\n\n/**\n * Applies transition operation (reorder/move/insert) and retrieves an object that describes the updated\n * layout and the moves to be made including and not including items float to top.\n *\n * The layout shift w/o refloat is used for rendering and w/ refloat is used for live announcements.\n */\nexport function getLayoutShift<D>(\n  transition: Transition<D>,\n  path: readonly Position[],\n  insertionDirection?: Direction,\n): null | LayoutShift {\n  if (path.length === 0) {\n    return null;\n  }\n\n  const width = getDefaultColumnSpan(transition.draggableItem, getLayoutColumns(transition));\n  const height = getDefaultRowSpan(transition.draggableItem);\n  const rows = getLayoutRows(transition);\n  const columns = getLayoutColumns(transition);\n\n  switch (transition.operation) {\n    case \"resize\":\n      return transition.layoutEngine.resize({ itemId: transition.draggableItem.id, path });\n    case \"reorder\":\n      return transition.layoutEngine.move({ itemId: transition.draggableItem.id, path });\n    case \"insert\":\n      return transition.layoutEngine.insert({\n        itemId: transition.draggableItem.id,\n        width,\n        height,\n        path: normalizeInsertionPath(path, insertionDirection ?? \"right\", columns, rows),\n      });\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}