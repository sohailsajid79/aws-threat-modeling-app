{"ast":null,"code":"import { useCallback, useEffect, useMemo, useRef, useState, useSyncExternalStore } from 'react';\n// in memory fallback used when `localStorage` throws an error\nexport const inMemoryData = new Map();\nexport default function useLocalStorageState(key, options) {\n  const serializer = options?.serializer;\n  const [defaultValue] = useState(options?.defaultValue);\n  return useLocalStorage(key, defaultValue, options?.storageSync, serializer?.parse, serializer?.stringify);\n}\nfunction useLocalStorage(key, defaultValue, storageSync = true, parse = parseJSON, stringify = JSON.stringify) {\n  // we keep the `parsed` value in a ref because `useSyncExternalStore` requires a cached version\n  const storageItem = useRef({\n    string: null,\n    parsed: undefined\n  });\n  const value = useSyncExternalStore(\n  // useSyncExternalStore.subscribe\n  useCallback(onStoreChange => {\n    const onChange = localKey => {\n      if (key === localKey) {\n        onStoreChange();\n      }\n    };\n    callbacks.add(onChange);\n    return () => {\n      callbacks.delete(onChange);\n    };\n  }, [key]),\n  // useSyncExternalStore.getSnapshot\n  () => {\n    const string = goodTry(() => localStorage.getItem(key)) ?? null;\n    if (inMemoryData.has(key)) {\n      storageItem.current.parsed = inMemoryData.get(key);\n    } else if (string !== storageItem.current.string) {\n      let parsed;\n      try {\n        parsed = string === null ? defaultValue : parse(string);\n      } catch {\n        parsed = defaultValue;\n      }\n      storageItem.current.parsed = parsed;\n    }\n    storageItem.current.string = string;\n    // store default value in localStorage:\n    // - initial issue: https://github.com/astoilkov/use-local-storage-state/issues/26\n    //   issues that were caused by incorrect initial and secondary implementations:\n    //   - https://github.com/astoilkov/use-local-storage-state/issues/30\n    //   - https://github.com/astoilkov/use-local-storage-state/issues/33\n    if (defaultValue !== undefined && string === null) {\n      // reasons for `localStorage` to throw an error:\n      // - maximum quota is exceeded\n      // - under Mobile Safari (since iOS 5) when the user enters private mode\n      //   `localStorage.setItem()` will throw\n      // - trying to access localStorage object when cookies are disabled in Safari throws\n      //   \"SecurityError: The operation is insecure.\"\n      // eslint-disable-next-line no-console\n      goodTry(() => {\n        const string = stringify(defaultValue);\n        localStorage.setItem(key, string);\n        storageItem.current = {\n          string,\n          parsed: defaultValue\n        };\n      });\n    }\n    return storageItem.current.parsed;\n  },\n  // useSyncExternalStore.getServerSnapshot\n  () => defaultValue);\n  const setState = useCallback(newValue => {\n    const value = newValue instanceof Function ? newValue(storageItem.current.parsed) : newValue;\n    // reasons for `localStorage` to throw an error:\n    // - maximum quota is exceeded\n    // - under Mobile Safari (since iOS 5) when the user enters private mode\n    //   `localStorage.setItem()` will throw\n    // - trying to access `localStorage` object when cookies are disabled in Safari throws\n    //   \"SecurityError: The operation is insecure.\"\n    try {\n      localStorage.setItem(key, stringify(value));\n      inMemoryData.delete(key);\n    } catch {\n      inMemoryData.set(key, value);\n    }\n    triggerCallbacks(key);\n  }, [key, stringify]);\n  const removeItem = useCallback(() => {\n    goodTry(() => localStorage.removeItem(key));\n    inMemoryData.delete(key);\n    triggerCallbacks(key);\n  }, [key]);\n  // - syncs change across tabs, windows, iframes\n  // - the `storage` event is called only in all tabs, windows, iframe's except the one that\n  //   triggered the change\n  useEffect(() => {\n    if (!storageSync) {\n      return undefined;\n    }\n    const onStorage = e => {\n      if (e.key === key && e.storageArea === goodTry(() => localStorage)) {\n        triggerCallbacks(key);\n      }\n    };\n    window.addEventListener('storage', onStorage);\n    return () => window.removeEventListener('storage', onStorage);\n  }, [key, storageSync]);\n  return useMemo(() => [value, setState, {\n    isPersistent: value === defaultValue || !inMemoryData.has(key),\n    removeItem\n  }], [key, setState, value, defaultValue, removeItem]);\n}\n// notifies all instances using the same `key` to update\nconst callbacks = new Set();\nfunction triggerCallbacks(key) {\n  for (const callback of [...callbacks]) {\n    callback(key);\n  }\n}\n// a wrapper for `JSON.parse()` that supports \"undefined\" value. otherwise,\n// `JSON.parse(JSON.stringify(undefined))` returns the string \"undefined\" not the value `undefined`\nfunction parseJSON(value) {\n  return value === 'undefined' ? undefined : JSON.parse(value);\n}\nfunction goodTry(tryFn) {\n  try {\n    return tryFn();\n  } catch {}\n}","map":{"version":3,"names":["useCallback","useEffect","useMemo","useRef","useState","useSyncExternalStore","inMemoryData","Map","useLocalStorageState","key","options","serializer","defaultValue","useLocalStorage","storageSync","parse","stringify","parseJSON","JSON","storageItem","string","parsed","undefined","value","onStoreChange","onChange","localKey","callbacks","add","delete","goodTry","localStorage","getItem","has","current","get","setItem","setState","newValue","Function","set","triggerCallbacks","removeItem","onStorage","e","storageArea","window","addEventListener","removeEventListener","isPersistent","Set","callback","tryFn"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/use-local-storage-state/src/useLocalStorageState.js"],"sourcesContent":["import { useCallback, useEffect, useMemo, useRef, useState, useSyncExternalStore } from 'react';\n// in memory fallback used when `localStorage` throws an error\nexport const inMemoryData = new Map();\nexport default function useLocalStorageState(key, options) {\n    const serializer = options?.serializer;\n    const [defaultValue] = useState(options?.defaultValue);\n    return useLocalStorage(key, defaultValue, options?.storageSync, serializer?.parse, serializer?.stringify);\n}\nfunction useLocalStorage(key, defaultValue, storageSync = true, parse = parseJSON, stringify = JSON.stringify) {\n    // we keep the `parsed` value in a ref because `useSyncExternalStore` requires a cached version\n    const storageItem = useRef({\n        string: null,\n        parsed: undefined,\n    });\n    const value = useSyncExternalStore(\n    // useSyncExternalStore.subscribe\n    useCallback((onStoreChange) => {\n        const onChange = (localKey) => {\n            if (key === localKey) {\n                onStoreChange();\n            }\n        };\n        callbacks.add(onChange);\n        return () => {\n            callbacks.delete(onChange);\n        };\n    }, [key]), \n    // useSyncExternalStore.getSnapshot\n    () => {\n        const string = goodTry(() => localStorage.getItem(key)) ?? null;\n        if (inMemoryData.has(key)) {\n            storageItem.current.parsed = inMemoryData.get(key);\n        }\n        else if (string !== storageItem.current.string) {\n            let parsed;\n            try {\n                parsed = string === null ? defaultValue : parse(string);\n            }\n            catch {\n                parsed = defaultValue;\n            }\n            storageItem.current.parsed = parsed;\n        }\n        storageItem.current.string = string;\n        // store default value in localStorage:\n        // - initial issue: https://github.com/astoilkov/use-local-storage-state/issues/26\n        //   issues that were caused by incorrect initial and secondary implementations:\n        //   - https://github.com/astoilkov/use-local-storage-state/issues/30\n        //   - https://github.com/astoilkov/use-local-storage-state/issues/33\n        if (defaultValue !== undefined && string === null) {\n            // reasons for `localStorage` to throw an error:\n            // - maximum quota is exceeded\n            // - under Mobile Safari (since iOS 5) when the user enters private mode\n            //   `localStorage.setItem()` will throw\n            // - trying to access localStorage object when cookies are disabled in Safari throws\n            //   \"SecurityError: The operation is insecure.\"\n            // eslint-disable-next-line no-console\n            goodTry(() => {\n                const string = stringify(defaultValue);\n                localStorage.setItem(key, string);\n                storageItem.current = { string, parsed: defaultValue };\n            });\n        }\n        return storageItem.current.parsed;\n    }, \n    // useSyncExternalStore.getServerSnapshot\n    () => defaultValue);\n    const setState = useCallback((newValue) => {\n        const value = newValue instanceof Function ? newValue(storageItem.current.parsed) : newValue;\n        // reasons for `localStorage` to throw an error:\n        // - maximum quota is exceeded\n        // - under Mobile Safari (since iOS 5) when the user enters private mode\n        //   `localStorage.setItem()` will throw\n        // - trying to access `localStorage` object when cookies are disabled in Safari throws\n        //   \"SecurityError: The operation is insecure.\"\n        try {\n            localStorage.setItem(key, stringify(value));\n            inMemoryData.delete(key);\n        }\n        catch {\n            inMemoryData.set(key, value);\n        }\n        triggerCallbacks(key);\n    }, [key, stringify]);\n    const removeItem = useCallback(() => {\n        goodTry(() => localStorage.removeItem(key));\n        inMemoryData.delete(key);\n        triggerCallbacks(key);\n    }, [key]);\n    // - syncs change across tabs, windows, iframes\n    // - the `storage` event is called only in all tabs, windows, iframe's except the one that\n    //   triggered the change\n    useEffect(() => {\n        if (!storageSync) {\n            return undefined;\n        }\n        const onStorage = (e) => {\n            if (e.key === key && e.storageArea === goodTry(() => localStorage)) {\n                triggerCallbacks(key);\n            }\n        };\n        window.addEventListener('storage', onStorage);\n        return () => window.removeEventListener('storage', onStorage);\n    }, [key, storageSync]);\n    return useMemo(() => [\n        value,\n        setState,\n        {\n            isPersistent: value === defaultValue || !inMemoryData.has(key),\n            removeItem,\n        },\n    ], [key, setState, value, defaultValue, removeItem]);\n}\n// notifies all instances using the same `key` to update\nconst callbacks = new Set();\nfunction triggerCallbacks(key) {\n    for (const callback of [...callbacks]) {\n        callback(key);\n    }\n}\n// a wrapper for `JSON.parse()` that supports \"undefined\" value. otherwise,\n// `JSON.parse(JSON.stringify(undefined))` returns the string \"undefined\" not the value `undefined`\nfunction parseJSON(value) {\n    return value === 'undefined' ? undefined : JSON.parse(value);\n}\nfunction goodTry(tryFn) {\n    try {\n        return tryFn();\n    }\n    catch { }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}