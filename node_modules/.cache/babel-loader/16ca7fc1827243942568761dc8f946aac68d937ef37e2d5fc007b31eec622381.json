{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { addMonths, isAfter, isBefore, isSameMonth, max, min } from 'date-fns';\nimport { getBaseDay, moveNextDay, moveNextWeek, movePrevDay, movePrevWeek } from '../../../calendar/utils/navigation';\nimport { useDateCache } from '../../../internal/hooks/use-date-cache';\nimport { KeyCode } from '../../../internal/keycode';\nimport handleKey from '../../../internal/utils/handle-key';\nimport { hasValue } from '../../../internal/utils/has-value';\nimport InternalSpaceBetween from '../../../space-between/internal';\nimport { findDateToFocus } from '../utils';\nimport { Grid } from './grid';\nimport styles from '../../styles.css.js';\nfunction isVisible(date, baseDate, isSingleGrid) {\n  if (isSingleGrid) {\n    return isSameMonth(date, baseDate);\n  }\n  const previousMonth = addMonths(baseDate, -1);\n  return isSameMonth(date, previousMonth) || isSameMonth(date, baseDate);\n}\nexport const Grids = _ref => {\n  let {\n    baseDate,\n    selectedStartDate,\n    selectedEndDate,\n    focusedDate,\n    onFocusedDateChange,\n    isDateEnabled,\n    dateDisabledReason,\n    isSingleGrid,\n    onSelectDate,\n    onChangeMonth,\n    locale,\n    startOfWeek,\n    todayAriaLabel,\n    headingIdPrefix\n  } = _ref;\n  const containerRef = useRef(null);\n  const [gridHasFocus, setGridHasFocus] = useState(false);\n  const focusedDateRef = useRef(null);\n  const dateCache = useDateCache();\n  baseDate = dateCache(baseDate);\n  focusedDate = focusedDate ? dateCache(focusedDate) : null;\n  const isDateFocusable = useCallback(date => {\n    return isDateEnabled(date) || !isDateEnabled(date) && !!dateDisabledReason(date);\n  }, [isDateEnabled, dateDisabledReason]);\n  useEffect(() => {\n    if (focusedDate && !isVisible(focusedDate, baseDate, isSingleGrid)) {\n      const direction = isAfter(focusedDate, baseDate) ? -1 : 1;\n      const newMonth = !isSingleGrid && direction === -1 ? addMonths(baseDate, -1) : baseDate;\n      const nearestBaseDate = getBaseDay(newMonth, isDateFocusable);\n      const newFocusedDate = findDateToFocus(focusedDate, nearestBaseDate, isDateFocusable);\n      onFocusedDateChange(newFocusedDate);\n    }\n  }, [baseDate, focusedDate, isSingleGrid, isDateFocusable, onFocusedDateChange]);\n  const onGridKeyDownHandler = event => {\n    let updatedFocusDate;\n    const keys = [KeyCode.up, KeyCode.down, KeyCode.left, KeyCode.right, KeyCode.space, KeyCode.enter];\n    if (focusedDate === null || keys.indexOf(event.keyCode) === -1) {\n      return;\n    }\n    event.preventDefault();\n    handleKey(event, {\n      onActivate: () => {\n        if (!focusedDate || !isDateEnabled(focusedDate)) {\n          return;\n        }\n        onSelectDate(focusedDate);\n      },\n      onBlockEnd: () => focusedDate && (updatedFocusDate = moveNextWeek(focusedDate, isDateFocusable)),\n      onBlockStart: () => focusedDate && (updatedFocusDate = movePrevWeek(focusedDate, isDateFocusable)),\n      onInlineEnd: () => focusedDate && (updatedFocusDate = moveNextDay(focusedDate, isDateFocusable)),\n      onInlineStart: () => focusedDate && (updatedFocusDate = movePrevDay(focusedDate, isDateFocusable))\n    });\n    if (!updatedFocusDate) {\n      return;\n    }\n    const updatedDateIsVisible = isVisible(updatedFocusDate, baseDate, isSingleGrid);\n    if (!updatedDateIsVisible) {\n      const newMonthIsOnLeftSide = !isSingleGrid && isBefore(updatedFocusDate, baseDate);\n      onChangeMonth(newMonthIsOnLeftSide ? addMonths(updatedFocusDate, 1) : updatedFocusDate);\n    }\n    onFocusedDateChange(updatedFocusDate);\n  };\n  useEffect(() => {\n    // focus current date if the focus is already inside the calendar\n    if (focusedDate !== null && gridHasFocus) {\n      if (focusedDateRef.current && focusedDateRef.current !== document.activeElement) {\n        focusedDateRef.current.focus();\n      }\n    }\n  }, [focusedDate, gridHasFocus]);\n  const onGridBlur = event => {\n    var _a;\n    const newFocusTarget = event.relatedTarget || document.activeElement;\n    const newFocusTargetIsInGrid = (_a = containerRef.current) === null || _a === void 0 ? void 0 : _a.contains(newFocusTarget);\n    if (newFocusTarget && !newFocusTargetIsInGrid && gridHasFocus) {\n      setGridHasFocus(false);\n    }\n  };\n  const onGridFocus = () => {\n    if (!gridHasFocus) {\n      setGridHasFocus(true);\n    }\n  };\n  const isRangeVisible = selectedStartDate && selectedEndDate || gridHasFocus;\n  const rangeEnds = [selectedStartDate !== null && selectedStartDate !== void 0 ? selectedStartDate : focusedDate, selectedEndDate !== null && selectedEndDate !== void 0 ? selectedEndDate : focusedDate].filter(hasValue);\n  const rangeStartDate = min(rangeEnds);\n  const rangeEndDate = max(rangeEnds);\n  return React.createElement(\"div\", {\n    ref: containerRef,\n    onFocus: onGridFocus,\n    onBlur: onGridBlur\n  }, React.createElement(InternalSpaceBetween, {\n    size: \"xs\",\n    direction: \"horizontal\"\n  }, !isSingleGrid && React.createElement(Grid, {\n    className: styles['first-grid'],\n    baseDate: addMonths(baseDate, -1),\n    selectedEndDate: selectedEndDate,\n    selectedStartDate: selectedStartDate,\n    rangeStartDate: isRangeVisible ? rangeStartDate : null,\n    rangeEndDate: isRangeVisible ? rangeEndDate : null,\n    focusedDate: focusedDate,\n    focusedDateRef: focusedDateRef,\n    isDateEnabled: isDateEnabled,\n    dateDisabledReason: dateDisabledReason,\n    onSelectDate: onSelectDate,\n    onGridKeyDownHandler: onGridKeyDownHandler,\n    onFocusedDateChange: onFocusedDateChange,\n    locale: locale,\n    startOfWeek: startOfWeek,\n    todayAriaLabel: todayAriaLabel,\n    ariaLabelledby: `${headingIdPrefix}-prevmonth`\n  }), React.createElement(Grid, {\n    className: styles['second-grid'],\n    baseDate: baseDate,\n    selectedEndDate: selectedEndDate,\n    selectedStartDate: selectedStartDate,\n    rangeStartDate: isRangeVisible ? rangeStartDate : null,\n    rangeEndDate: isRangeVisible ? rangeEndDate : null,\n    focusedDate: focusedDate,\n    focusedDateRef: focusedDateRef,\n    isDateEnabled: isDateEnabled,\n    dateDisabledReason: dateDisabledReason,\n    onSelectDate: onSelectDate,\n    onGridKeyDownHandler: onGridKeyDownHandler,\n    onFocusedDateChange: onFocusedDateChange,\n    locale: locale,\n    startOfWeek: startOfWeek,\n    todayAriaLabel: todayAriaLabel,\n    ariaLabelledby: `${headingIdPrefix}-currentmonth`\n  })));\n};","map":{"version":3,"names":["React","useCallback","useEffect","useRef","useState","addMonths","isAfter","isBefore","isSameMonth","max","min","getBaseDay","moveNextDay","moveNextWeek","movePrevDay","movePrevWeek","useDateCache","KeyCode","handleKey","hasValue","InternalSpaceBetween","findDateToFocus","Grid","styles","isVisible","date","baseDate","isSingleGrid","previousMonth","Grids","_ref","selectedStartDate","selectedEndDate","focusedDate","onFocusedDateChange","isDateEnabled","dateDisabledReason","onSelectDate","onChangeMonth","locale","startOfWeek","todayAriaLabel","headingIdPrefix","containerRef","gridHasFocus","setGridHasFocus","focusedDateRef","dateCache","isDateFocusable","direction","newMonth","nearestBaseDate","newFocusedDate","onGridKeyDownHandler","event","updatedFocusDate","keys","up","down","left","right","space","enter","indexOf","keyCode","preventDefault","onActivate","onBlockEnd","onBlockStart","onInlineEnd","onInlineStart","updatedDateIsVisible","newMonthIsOnLeftSide","current","document","activeElement","focus","onGridBlur","newFocusTarget","relatedTarget","newFocusTargetIsInGrid","_a","contains","onGridFocus","isRangeVisible","rangeEnds","filter","rangeStartDate","rangeEndDate","createElement","ref","onFocus","onBlur","size","className","ariaLabelledby"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/date-range-picker/calendar/grids/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { addMonths, isAfter, isBefore, isSameMonth, max, min } from 'date-fns';\n\nimport { getBaseDay, moveNextDay, moveNextWeek, movePrevDay, movePrevWeek } from '../../../calendar/utils/navigation';\nimport { useDateCache } from '../../../internal/hooks/use-date-cache';\nimport { KeyCode } from '../../../internal/keycode';\nimport handleKey from '../../../internal/utils/handle-key';\nimport { hasValue } from '../../../internal/utils/has-value';\nimport InternalSpaceBetween from '../../../space-between/internal';\nimport { DateRangePickerProps, DayIndex } from '../../interfaces';\nimport { findDateToFocus } from '../utils';\nimport { Grid } from './grid';\n\nimport styles from '../../styles.css.js';\n\nfunction isVisible(date: Date, baseDate: Date, isSingleGrid: boolean) {\n  if (isSingleGrid) {\n    return isSameMonth(date, baseDate);\n  }\n\n  const previousMonth = addMonths(baseDate, -1);\n\n  return isSameMonth(date, previousMonth) || isSameMonth(date, baseDate);\n}\n\nexport interface GridProps {\n  baseDate: Date;\n  selectedStartDate: Date | null;\n  selectedEndDate: Date | null;\n\n  focusedDate: Date | null;\n  onFocusedDateChange: React.Dispatch<React.SetStateAction<Date | null>>;\n\n  isDateEnabled: DateRangePickerProps.IsDateEnabledFunction;\n  dateDisabledReason: DateRangePickerProps.DateDisabledReasonFunction;\n  isSingleGrid: boolean;\n\n  onSelectDate: (date: Date) => void;\n  onChangeMonth: (date: Date) => void;\n\n  locale: string;\n  startOfWeek: DayIndex;\n  todayAriaLabel?: string;\n  headingIdPrefix: string;\n}\n\nexport const Grids = ({\n  baseDate,\n  selectedStartDate,\n  selectedEndDate,\n\n  focusedDate,\n  onFocusedDateChange,\n\n  isDateEnabled,\n  dateDisabledReason,\n  isSingleGrid,\n\n  onSelectDate,\n  onChangeMonth,\n\n  locale,\n  startOfWeek,\n  todayAriaLabel,\n  headingIdPrefix,\n}: GridProps) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [gridHasFocus, setGridHasFocus] = useState(false);\n\n  const focusedDateRef = useRef<HTMLTableCellElement>(null);\n\n  const dateCache = useDateCache();\n  baseDate = dateCache(baseDate);\n  focusedDate = focusedDate ? dateCache(focusedDate) : null;\n\n  const isDateFocusable = useCallback(\n    (date: Date) => {\n      return isDateEnabled(date) || (!isDateEnabled(date) && !!dateDisabledReason(date));\n    },\n    [isDateEnabled, dateDisabledReason]\n  );\n\n  useEffect(() => {\n    if (focusedDate && !isVisible(focusedDate, baseDate, isSingleGrid)) {\n      const direction = isAfter(focusedDate, baseDate) ? -1 : 1;\n\n      const newMonth = !isSingleGrid && direction === -1 ? addMonths(baseDate, -1) : baseDate;\n      const nearestBaseDate = getBaseDay(newMonth, isDateFocusable);\n\n      const newFocusedDate = findDateToFocus(focusedDate, nearestBaseDate, isDateFocusable);\n\n      onFocusedDateChange(newFocusedDate);\n    }\n  }, [baseDate, focusedDate, isSingleGrid, isDateFocusable, onFocusedDateChange]);\n\n  const onGridKeyDownHandler = (event: React.KeyboardEvent<HTMLElement>) => {\n    let updatedFocusDate;\n\n    const keys = [KeyCode.up, KeyCode.down, KeyCode.left, KeyCode.right, KeyCode.space, KeyCode.enter];\n\n    if (focusedDate === null || keys.indexOf(event.keyCode) === -1) {\n      return;\n    }\n\n    event.preventDefault();\n\n    handleKey(event, {\n      onActivate: () => {\n        if (!focusedDate || !isDateEnabled(focusedDate)) {\n          return;\n        }\n\n        onSelectDate(focusedDate);\n      },\n      onBlockEnd: () => focusedDate && (updatedFocusDate = moveNextWeek(focusedDate, isDateFocusable)),\n      onBlockStart: () => focusedDate && (updatedFocusDate = movePrevWeek(focusedDate, isDateFocusable)),\n      onInlineEnd: () => focusedDate && (updatedFocusDate = moveNextDay(focusedDate, isDateFocusable)),\n      onInlineStart: () => focusedDate && (updatedFocusDate = movePrevDay(focusedDate, isDateFocusable)),\n    });\n\n    if (!updatedFocusDate) {\n      return;\n    }\n\n    const updatedDateIsVisible = isVisible(updatedFocusDate, baseDate, isSingleGrid);\n\n    if (!updatedDateIsVisible) {\n      const newMonthIsOnLeftSide = !isSingleGrid && isBefore(updatedFocusDate, baseDate);\n\n      onChangeMonth(newMonthIsOnLeftSide ? addMonths(updatedFocusDate, 1) : updatedFocusDate);\n    }\n    onFocusedDateChange(updatedFocusDate);\n  };\n\n  useEffect(() => {\n    // focus current date if the focus is already inside the calendar\n    if (focusedDate !== null && gridHasFocus) {\n      if (focusedDateRef.current && focusedDateRef.current !== document.activeElement) {\n        focusedDateRef.current.focus();\n      }\n    }\n  }, [focusedDate, gridHasFocus]);\n\n  const onGridBlur = (event: React.FocusEvent) => {\n    const newFocusTarget = event.relatedTarget || document.activeElement;\n    const newFocusTargetIsInGrid = containerRef.current?.contains(newFocusTarget as Node);\n    if (newFocusTarget && !newFocusTargetIsInGrid && gridHasFocus) {\n      setGridHasFocus(false);\n    }\n  };\n\n  const onGridFocus = () => {\n    if (!gridHasFocus) {\n      setGridHasFocus(true);\n    }\n  };\n\n  const isRangeVisible = (selectedStartDate && selectedEndDate) || gridHasFocus;\n\n  const rangeEnds: Date[] = [selectedStartDate ?? focusedDate, selectedEndDate ?? focusedDate].filter(hasValue);\n\n  const rangeStartDate = min(rangeEnds);\n  const rangeEndDate = max(rangeEnds);\n\n  return (\n    <div ref={containerRef} onFocus={onGridFocus} onBlur={onGridBlur}>\n      <InternalSpaceBetween size=\"xs\" direction=\"horizontal\">\n        {!isSingleGrid && (\n          <Grid\n            className={styles['first-grid']}\n            baseDate={addMonths(baseDate, -1)}\n            selectedEndDate={selectedEndDate}\n            selectedStartDate={selectedStartDate}\n            rangeStartDate={isRangeVisible ? rangeStartDate : null}\n            rangeEndDate={isRangeVisible ? rangeEndDate : null}\n            focusedDate={focusedDate}\n            focusedDateRef={focusedDateRef}\n            isDateEnabled={isDateEnabled}\n            dateDisabledReason={dateDisabledReason}\n            onSelectDate={onSelectDate}\n            onGridKeyDownHandler={onGridKeyDownHandler}\n            onFocusedDateChange={onFocusedDateChange}\n            locale={locale}\n            startOfWeek={startOfWeek}\n            todayAriaLabel={todayAriaLabel}\n            ariaLabelledby={`${headingIdPrefix}-prevmonth`}\n          />\n        )}\n        <Grid\n          className={styles['second-grid']}\n          baseDate={baseDate}\n          selectedEndDate={selectedEndDate}\n          selectedStartDate={selectedStartDate}\n          rangeStartDate={isRangeVisible ? rangeStartDate : null}\n          rangeEndDate={isRangeVisible ? rangeEndDate : null}\n          focusedDate={focusedDate}\n          focusedDateRef={focusedDateRef}\n          isDateEnabled={isDateEnabled}\n          dateDisabledReason={dateDisabledReason}\n          onSelectDate={onSelectDate}\n          onGridKeyDownHandler={onGridKeyDownHandler}\n          onFocusedDateChange={onFocusedDateChange}\n          locale={locale}\n          startOfWeek={startOfWeek}\n          todayAriaLabel={todayAriaLabel}\n          ariaLabelledby={`${headingIdPrefix}-currentmonth`}\n        />\n      </InternalSpaceBetween>\n    </div>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}