{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useEffect, useMemo, useRef } from 'react';\nimport { useVirtual as useVirtualDefault } from '../../vendor/react-virtual';\nconst MAX_ITEM_MOUNTS = 100;\n/**\n * The useVirtual from react-virtual@2 might produce an infinite update loop caused by setting\n * measured item sizes in the render cycle (as part of the measureRef assignment):\n *      The sum of all measured item sizes is returned as totalSize which is then set on the list container.\n *      Enforcing new container height might result in an items size change e.g. when the content wraps.\n *\n * The infinite update cycle causes React \"Maximum update depth exceeded\" error and can be additionally confirmed\n * by logging the totalSize which should then bounce between two values.\n *\n * The number of item refs assignments is limited to MAX_ITEM_MOUNTS unless items or indices change.\n * That is based on the assumption the item height stays constant after its first render.\n */\nexport function useVirtual(_ref) {\n  let {\n    items,\n    parentRef,\n    estimateSize\n  } = _ref;\n  const rowVirtualizer = useVirtualDefault({\n    size: items.length,\n    parentRef,\n    estimateSize,\n    overscan: 5\n  });\n  // Cache virtual item mounts to limit the amount of mounts per item.\n  const measuresCache = useRef(new WeakMap());\n  // Clear mounts cache every time indices, items, or size estimate change.\n  const indicesKey = rowVirtualizer.virtualItems.map(item => `${item.index}`).join(':');\n  useEffect(() => {\n    measuresCache.current = new WeakMap();\n  }, [indicesKey, items, estimateSize]);\n  const virtualItems = useMemo(() => rowVirtualizer.virtualItems.map(virtualItem => Object.assign(Object.assign({}, virtualItem), {\n    measureRef: node => {\n      var _a;\n      const mountedCount = (_a = measuresCache.current.get(items[virtualItem.index])) !== null && _a !== void 0 ? _a : 0;\n      if (mountedCount < MAX_ITEM_MOUNTS) {\n        virtualItem.measureRef(node);\n        measuresCache.current.set(items[virtualItem.index], mountedCount + 1);\n      }\n    }\n  })), [items, rowVirtualizer.virtualItems]);\n  return {\n    virtualItems,\n    totalSize: rowVirtualizer.totalSize,\n    scrollToIndex: rowVirtualizer.scrollToIndex\n  };\n}","map":{"version":3,"names":["useEffect","useMemo","useRef","useVirtual","useVirtualDefault","MAX_ITEM_MOUNTS","_ref","items","parentRef","estimateSize","rowVirtualizer","size","length","overscan","measuresCache","WeakMap","indicesKey","virtualItems","map","item","index","join","current","virtualItem","Object","assign","measureRef","node","mountedCount","_a","get","set","totalSize","scrollToIndex"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/internal/hooks/use-virtual/index.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useMemo, useRef } from 'react';\n\nimport { useVirtual as useVirtualDefault, VirtualItem } from '../../vendor/react-virtual';\n\nconst MAX_ITEM_MOUNTS = 100;\n\ninterface UseVirtualProps<Item> {\n  items: readonly Item[];\n  parentRef: React.RefObject<HTMLElement>;\n  estimateSize: () => number;\n}\n\ninterface RowVirtualizer {\n  virtualItems: VirtualItem[];\n  totalSize: number;\n  scrollToIndex: (index: number) => void;\n}\n\n/**\n * The useVirtual from react-virtual@2 might produce an infinite update loop caused by setting\n * measured item sizes in the render cycle (as part of the measureRef assignment):\n *      The sum of all measured item sizes is returned as totalSize which is then set on the list container.\n *      Enforcing new container height might result in an items size change e.g. when the content wraps.\n *\n * The infinite update cycle causes React \"Maximum update depth exceeded\" error and can be additionally confirmed\n * by logging the totalSize which should then bounce between two values.\n *\n * The number of item refs assignments is limited to MAX_ITEM_MOUNTS unless items or indices change.\n * That is based on the assumption the item height stays constant after its first render.\n */\nexport function useVirtual<Item extends object>({\n  items,\n  parentRef,\n  estimateSize,\n}: UseVirtualProps<Item>): RowVirtualizer {\n  const rowVirtualizer = useVirtualDefault({ size: items.length, parentRef, estimateSize, overscan: 5 });\n\n  // Cache virtual item mounts to limit the amount of mounts per item.\n  const measuresCache = useRef(new WeakMap<Item, number>());\n\n  // Clear mounts cache every time indices, items, or size estimate change.\n  const indicesKey = rowVirtualizer.virtualItems.map(item => `${item.index}`).join(':');\n  useEffect(() => {\n    measuresCache.current = new WeakMap();\n  }, [indicesKey, items, estimateSize]);\n\n  const virtualItems = useMemo(\n    () =>\n      rowVirtualizer.virtualItems.map(virtualItem => ({\n        ...virtualItem,\n        measureRef: (node: null | HTMLElement) => {\n          const mountedCount = measuresCache.current.get(items[virtualItem.index]) ?? 0;\n          if (mountedCount < MAX_ITEM_MOUNTS) {\n            virtualItem.measureRef(node);\n            measuresCache.current.set(items[virtualItem.index], mountedCount + 1);\n          }\n        },\n      })),\n    [items, rowVirtualizer.virtualItems]\n  );\n\n  return {\n    virtualItems,\n    totalSize: rowVirtualizer.totalSize,\n    scrollToIndex: rowVirtualizer.scrollToIndex,\n  };\n}\n"],"mappings":"AAAA;AACA;AACA,SAAgBA,SAAS,EAAEC,OAAO,EAAEC,MAAM,QAAQ,OAAO;AAEzD,SAASC,UAAU,IAAIC,iBAAiB,QAAqB,4BAA4B;AAEzF,MAAMC,eAAe,GAAG,GAAG;AAc3B;;;;;;;;;;;;AAYA,OAAM,SAAUF,UAAUA,CAAAG,IAAA,EAIF;EAAA,IAJwB;IAC9CC,KAAK;IACLC,SAAS;IACTC;EAAY,CACU,GAAAH,IAAA;EACtB,MAAMI,cAAc,GAAGN,iBAAiB,CAAC;IAAEO,IAAI,EAAEJ,KAAK,CAACK,MAAM;IAAEJ,SAAS;IAAEC,YAAY;IAAEI,QAAQ,EAAE;EAAC,CAAE,CAAC;EAEtG;EACA,MAAMC,aAAa,GAAGZ,MAAM,CAAC,IAAIa,OAAO,EAAgB,CAAC;EAEzD;EACA,MAAMC,UAAU,GAAGN,cAAc,CAACO,YAAY,CAACC,GAAG,CAACC,IAAI,IAAI,GAAGA,IAAI,CAACC,KAAK,EAAE,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;EACrFrB,SAAS,CAAC,MAAK;IACbc,aAAa,CAACQ,OAAO,GAAG,IAAIP,OAAO,EAAE;EACvC,CAAC,EAAE,CAACC,UAAU,EAAET,KAAK,EAAEE,YAAY,CAAC,CAAC;EAErC,MAAMQ,YAAY,GAAGhB,OAAO,CAC1B,MACES,cAAc,CAACO,YAAY,CAACC,GAAG,CAACK,WAAW,IAAIC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAC1CF,WAAW;IACdG,UAAU,EAAGC,IAAwB,IAAI;;MACvC,MAAMC,YAAY,GAAG,CAAAC,EAAA,GAAAf,aAAa,CAACQ,OAAO,CAACQ,GAAG,CAACvB,KAAK,CAACgB,WAAW,CAACH,KAAK,CAAC,CAAC,cAAAS,EAAA,cAAAA,EAAA,GAAI,CAAC;MAC7E,IAAID,YAAY,GAAGvB,eAAe,EAAE;QAClCkB,WAAW,CAACG,UAAU,CAACC,IAAI,CAAC;QAC5Bb,aAAa,CAACQ,OAAO,CAACS,GAAG,CAACxB,KAAK,CAACgB,WAAW,CAACH,KAAK,CAAC,EAAEQ,YAAY,GAAG,CAAC,CAAC;;IAEzE;EAAC,EACD,CAAC,EACL,CAACrB,KAAK,EAAEG,cAAc,CAACO,YAAY,CAAC,CACrC;EAED,OAAO;IACLA,YAAY;IACZe,SAAS,EAAEtB,cAAc,CAACsB,SAAS;IACnCC,aAAa,EAAEvB,cAAc,CAACuB;GAC/B;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}