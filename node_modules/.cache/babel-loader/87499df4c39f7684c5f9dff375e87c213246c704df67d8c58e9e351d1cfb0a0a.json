{"ast":null,"code":"import { defaultCoordinates } from '@dnd-kit/core';\nimport { getOwnerDocument, getWindow, isKeyboardEvent, subtract as getCoordinatesDelta } from '@dnd-kit/utilities';\nimport { scrollElementIntoView } from '../../../internal/utils/scrollable-containers';\nimport { defaultKeyboardCodes } from './defaults';\nimport { EventName } from './utilities/events';\nimport { Listeners } from './utilities/listeners';\nimport { applyScroll } from './utilities/scroll';\n// Slightly modified version of @dnd-kit's KeyboardSensor:\n// https://github.com/clauderic/dnd-kit/blob/master/packages/core/src/sensors/keyboard/KeyboardSensor.ts\n// The only difference is that here, reordering is deactivated on blur, as in\n// this PR: https://github.com/clauderic/dnd-kit/pull/1087.\n// If it is merged, then @dnd-kit's KeyboardSensor can be used instead\n// and all files under this directory (`keyboard-sensor`) can be removed.\n// Changes from mainstream are marked below as \"Customization\"\nexport class KeyboardSensor {\n  constructor(props) {\n    this.props = props;\n    this.autoScrollEnabled = false;\n    const {\n      event: {\n        target\n      }\n    } = props;\n    this.props = props;\n    this.listeners = new Listeners(getOwnerDocument(target));\n    this.windowListeners = new Listeners(getWindow(target));\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleCancel = this.handleCancel.bind(this);\n    this.attach();\n  }\n  attach() {\n    var _a;\n    this.handleStart();\n    this.windowListeners.add(EventName.Resize, this.handleCancel);\n    this.windowListeners.add(EventName.VisibilityChange, this.handleCancel);\n    // Customization: deactivate reordering on blur event\n    (_a = this.props.event.target) === null || _a === void 0 ? void 0 : _a.addEventListener(EventName.Blur, this.handleCancel);\n    setTimeout(() => this.listeners.add(EventName.Keydown, this.handleKeyDown));\n  }\n  handleStart() {\n    const {\n      activeNode,\n      onStart\n    } = this.props;\n    const node = activeNode.node.current;\n    if (node) {\n      scrollElementIntoView(node);\n    }\n    onStart(defaultCoordinates);\n  }\n  handleKeyDown(event) {\n    if (isKeyboardEvent(event)) {\n      const {\n        active,\n        context,\n        options\n      } = this.props;\n      const {\n        keyboardCodes = defaultKeyboardCodes,\n        coordinateGetter\n      } = options;\n      const {\n        code\n      } = event;\n      if (keyboardCodes.end.indexOf(code) !== -1) {\n        this.handleEnd(event);\n        return;\n      }\n      if (keyboardCodes.cancel.indexOf(code) !== -1) {\n        this.handleCancel(event);\n        return;\n      }\n      const {\n        collisionRect\n      } = context.current;\n      const currentCoordinates = collisionRect ? {\n        x: collisionRect.left,\n        y: collisionRect.top\n      } : defaultCoordinates;\n      if (!this.referenceCoordinates) {\n        this.referenceCoordinates = currentCoordinates;\n      }\n      if (!coordinateGetter) {\n        return;\n      }\n      const newCoordinates = coordinateGetter(event, {\n        active,\n        context: context.current,\n        currentCoordinates\n      });\n      if (newCoordinates) {\n        const {\n          scrollableAncestors\n        } = context.current;\n        const direction = event.code;\n        const scrolled = applyScroll({\n          currentCoordinates,\n          direction,\n          newCoordinates,\n          scrollableAncestors\n        });\n        if (!scrolled) {\n          this.handleMove(event, getCoordinatesDelta(newCoordinates, this.referenceCoordinates));\n        }\n      }\n    }\n  }\n  handleMove(event, coordinates) {\n    const {\n      onMove\n    } = this.props;\n    event.preventDefault();\n    onMove(coordinates);\n  }\n  handleEnd(event) {\n    const {\n      onEnd\n    } = this.props;\n    event.preventDefault();\n    this.detach();\n    onEnd();\n  }\n  handleCancel(event) {\n    const {\n      onCancel\n    } = this.props;\n    // Customization: do not prevent browser from managing native focus\n    if (event.type !== EventName.Blur) {\n      event.preventDefault();\n    }\n    this.detach();\n    onCancel();\n  }\n  detach() {\n    var _a;\n    // Customization: clean up listener for blur event\n    (_a = this.props.event.target) === null || _a === void 0 ? void 0 : _a.removeEventListener(EventName.Blur, this.handleCancel);\n    this.listeners.removeAll();\n    this.windowListeners.removeAll();\n  }\n}\nKeyboardSensor.activators = [{\n  eventName: 'onKeyDown',\n  handler: (event, {\n    keyboardCodes = defaultKeyboardCodes,\n    onActivation\n  }, {\n    active\n  }) => {\n    const {\n      code\n    } = event.nativeEvent;\n    if (keyboardCodes.start.indexOf(code) !== -1) {\n      const activator = active.activatorNode.current;\n      if (activator && event.target !== activator) {\n        return false;\n      }\n      event.preventDefault();\n      onActivation === null || onActivation === void 0 ? void 0 : onActivation({\n        event: event.nativeEvent\n      });\n      return true;\n    }\n    return false;\n  }\n}];","map":{"version":3,"names":["defaultCoordinates","getOwnerDocument","getWindow","isKeyboardEvent","subtract","getCoordinatesDelta","scrollElementIntoView","defaultKeyboardCodes","EventName","Listeners","applyScroll","KeyboardSensor","constructor","props","autoScrollEnabled","event","target","listeners","windowListeners","handleKeyDown","bind","handleCancel","attach","handleStart","add","Resize","VisibilityChange","_a","addEventListener","Blur","setTimeout","Keydown","activeNode","onStart","node","current","active","context","options","keyboardCodes","coordinateGetter","code","end","indexOf","handleEnd","cancel","collisionRect","currentCoordinates","x","left","y","top","referenceCoordinates","newCoordinates","scrollableAncestors","direction","scrolled","handleMove","coordinates","onMove","preventDefault","onEnd","detach","onCancel","type","removeEventListener","removeAll","activators","eventName","handler","onActivation","nativeEvent","start","activator","activatorNode"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/collection-preferences/content-display/keyboard-sensor/index.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport type { Activators, SensorInstance } from '@dnd-kit/core';\nimport { defaultCoordinates } from '@dnd-kit/core';\nimport { KeyboardSensorOptions, KeyboardSensorProps } from '@dnd-kit/core';\nimport {\n  Coordinates,\n  getOwnerDocument,\n  getWindow,\n  isKeyboardEvent,\n  subtract as getCoordinatesDelta,\n} from '@dnd-kit/utilities';\n\nimport { scrollElementIntoView } from '../../../internal/utils/scrollable-containers';\nimport { defaultKeyboardCodes } from './defaults';\nimport { EventName } from './utilities/events';\nimport { Listeners } from './utilities/listeners';\nimport { applyScroll } from './utilities/scroll';\n\n// Slightly modified version of @dnd-kit's KeyboardSensor:\n// https://github.com/clauderic/dnd-kit/blob/master/packages/core/src/sensors/keyboard/KeyboardSensor.ts\n\n// The only difference is that here, reordering is deactivated on blur, as in\n// this PR: https://github.com/clauderic/dnd-kit/pull/1087.\n// If it is merged, then @dnd-kit's KeyboardSensor can be used instead\n// and all files under this directory (`keyboard-sensor`) can be removed.\n\n// Changes from mainstream are marked below as \"Customization\"\n\nexport class KeyboardSensor implements SensorInstance {\n  public autoScrollEnabled = false;\n  private referenceCoordinates: Coordinates | undefined;\n  private listeners: Listeners;\n  private windowListeners: Listeners;\n\n  constructor(private props: KeyboardSensorProps) {\n    const {\n      event: { target },\n    } = props;\n\n    this.props = props;\n    this.listeners = new Listeners(getOwnerDocument(target));\n    this.windowListeners = new Listeners(getWindow(target));\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleCancel = this.handleCancel.bind(this);\n\n    this.attach();\n  }\n\n  private attach() {\n    this.handleStart();\n\n    this.windowListeners.add(EventName.Resize, this.handleCancel);\n    this.windowListeners.add(EventName.VisibilityChange, this.handleCancel);\n\n    // Customization: deactivate reordering on blur event\n    this.props.event.target?.addEventListener(EventName.Blur, this.handleCancel);\n\n    setTimeout(() => this.listeners.add(EventName.Keydown, this.handleKeyDown));\n  }\n\n  private handleStart() {\n    const { activeNode, onStart } = this.props;\n    const node = activeNode.node.current;\n\n    if (node) {\n      scrollElementIntoView(node);\n    }\n\n    onStart(defaultCoordinates);\n  }\n\n  private handleKeyDown(event: Event) {\n    if (isKeyboardEvent(event)) {\n      const { active, context, options } = this.props;\n      const { keyboardCodes = defaultKeyboardCodes, coordinateGetter } = options;\n      const { code } = event;\n\n      if (keyboardCodes.end.indexOf(code) !== -1) {\n        this.handleEnd(event);\n        return;\n      }\n\n      if (keyboardCodes.cancel.indexOf(code) !== -1) {\n        this.handleCancel(event);\n        return;\n      }\n\n      const { collisionRect } = context.current;\n      const currentCoordinates = collisionRect ? { x: collisionRect.left, y: collisionRect.top } : defaultCoordinates;\n\n      if (!this.referenceCoordinates) {\n        this.referenceCoordinates = currentCoordinates;\n      }\n\n      if (!coordinateGetter) {\n        return;\n      }\n\n      const newCoordinates = coordinateGetter(event, {\n        active,\n        context: context.current,\n        currentCoordinates,\n      });\n\n      if (newCoordinates) {\n        const { scrollableAncestors } = context.current;\n        const direction = event.code;\n\n        const scrolled = applyScroll({ currentCoordinates, direction, newCoordinates, scrollableAncestors });\n\n        if (!scrolled) {\n          this.handleMove(event, getCoordinatesDelta(newCoordinates, this.referenceCoordinates));\n        }\n      }\n    }\n  }\n\n  private handleMove(event: Event, coordinates: Coordinates) {\n    const { onMove } = this.props;\n\n    event.preventDefault();\n    onMove(coordinates);\n  }\n\n  private handleEnd(event: Event) {\n    const { onEnd } = this.props;\n\n    event.preventDefault();\n    this.detach();\n    onEnd();\n  }\n\n  private handleCancel(event: Event) {\n    const { onCancel } = this.props;\n\n    // Customization: do not prevent browser from managing native focus\n    if (event.type !== EventName.Blur) {\n      event.preventDefault();\n    }\n    this.detach();\n    onCancel();\n  }\n\n  private detach() {\n    // Customization: clean up listener for blur event\n    this.props.event.target?.removeEventListener(EventName.Blur, this.handleCancel);\n\n    this.listeners.removeAll();\n    this.windowListeners.removeAll();\n  }\n\n  static activators: Activators<KeyboardSensorOptions> = [\n    {\n      eventName: 'onKeyDown' as const,\n      handler: (event: React.KeyboardEvent, { keyboardCodes = defaultKeyboardCodes, onActivation }, { active }) => {\n        const { code } = event.nativeEvent;\n\n        if (keyboardCodes.start.indexOf(code) !== -1) {\n          const activator = active.activatorNode.current;\n\n          if (activator && event.target !== activator) {\n            return false;\n          }\n\n          event.preventDefault();\n\n          onActivation?.({ event: event.nativeEvent });\n\n          return true;\n        }\n\n        return false;\n      },\n    },\n  ];\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}