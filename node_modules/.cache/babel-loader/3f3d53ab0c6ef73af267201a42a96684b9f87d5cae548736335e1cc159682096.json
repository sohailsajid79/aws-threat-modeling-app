{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect } from 'react';\nimport clsx from 'clsx';\nimport { splitItems } from '../drawer/drawers-helpers';\nimport OverflowMenu from '../drawer/overflow-menu';\nimport { ToggleButton, togglesConfig } from '../toggles';\nimport { TOOLS_DRAWER_ID } from '../utils/use-drawers';\nimport sharedStyles from '../styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nimport styles from './styles.css.js';\nconst MobileToggle = React.forwardRef(({\n  className,\n  ariaLabels,\n  type,\n  disabled,\n  onClick\n}, ref) => {\n  const {\n    TagName,\n    iconName,\n    getLabels\n  } = togglesConfig[type];\n  const {\n    mainLabel,\n    openLabel\n  } = getLabels(ariaLabels);\n  return React.createElement(TagName, {\n    className: clsx(styles['mobile-toggle'], styles[`mobile-toggle-type-${type}`]),\n    \"aria-hidden\": disabled,\n    \"aria-label\": mainLabel,\n    onClick: e => e.target === e.currentTarget && onClick()\n  }, React.createElement(ToggleButton, {\n    ref: ref,\n    className: className,\n    iconName: iconName,\n    onClick: onClick,\n    ariaLabel: openLabel,\n    disabled: disabled,\n    ariaExpanded: disabled\n  }));\n});\nexport function MobileToolbar({\n  ariaLabels,\n  toggleRefs,\n  topOffset,\n  navigationHide,\n  toolsHide,\n  anyPanelOpen,\n  unfocusable,\n  drawers,\n  activeDrawerId,\n  children,\n  onNavigationOpen,\n  onToolsOpen,\n  onDrawerChange,\n  mobileBarRef\n}) {\n  useEffect(() => {\n    if (anyPanelOpen) {\n      document.body.classList.add(styles['block-body-scroll']);\n      return () => {\n        document.body.classList.remove(styles['block-body-scroll']);\n      };\n    } else {\n      document.body.classList.remove(styles['block-body-scroll']);\n    }\n  }, [anyPanelOpen]);\n  const {\n    overflowItems,\n    visibleItems\n  } = splitItems(drawers, 2, activeDrawerId);\n  const overflowMenuHasBadge = !!overflowItems.find(item => item.badge);\n  return React.createElement(\"div\", {\n    ref: mobileBarRef,\n    className: clsx(styles['mobile-bar'], testutilStyles['mobile-bar'], unfocusable && sharedStyles.unfocusable),\n    style: {\n      top: topOffset\n    }\n  }, !navigationHide && React.createElement(MobileToggle, {\n    ref: toggleRefs.navigation,\n    type: \"navigation\",\n    className: testutilStyles['navigation-toggle'],\n    ariaLabels: ariaLabels,\n    disabled: anyPanelOpen,\n    onClick: onNavigationOpen\n  }), React.createElement(\"div\", {\n    className: styles['mobile-bar-breadcrumbs']\n  }, children && React.createElement(\"div\", {\n    className: testutilStyles.breadcrumbs\n  }, children)), !toolsHide && !drawers && React.createElement(MobileToggle, {\n    ref: toggleRefs.tools,\n    type: \"tools\",\n    className: testutilStyles['tools-toggle'],\n    ariaLabels: ariaLabels,\n    disabled: anyPanelOpen,\n    onClick: onToolsOpen\n  }), drawers && React.createElement(\"aside\", {\n    \"aria-label\": ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawers,\n    role: \"region\"\n  }, React.createElement(\"div\", {\n    className: styles['drawers-container'],\n    role: \"toolbar\",\n    \"aria-orientation\": \"horizontal\"\n  }, visibleItems.map((item, index) => {\n    var _a;\n    return React.createElement(\"div\", {\n      className: clsx(styles['mobile-toggle'], styles['mobile-toggle-type-drawer']),\n      key: index,\n      onClick: () => onDrawerChange(item.id)\n    }, React.createElement(ToggleButton, {\n      className: clsx(testutilStyles['drawers-trigger'], item.id === TOOLS_DRAWER_ID && testutilStyles['tools-toggle']),\n      iconName: item.trigger.iconName,\n      iconSvg: item.trigger.iconSvg,\n      badge: item.badge,\n      ariaLabel: (_a = item.ariaLabels) === null || _a === void 0 ? void 0 : _a.triggerButton,\n      ariaExpanded: activeDrawerId === item.id,\n      testId: `awsui-app-layout-trigger-${item.id}`\n    }));\n  }), overflowItems.length > 0 && React.createElement(\"div\", {\n    className: clsx(styles['mobile-toggle'], styles['mobile-toggle-type-drawer'])\n  }, React.createElement(OverflowMenu, {\n    ariaLabel: overflowMenuHasBadge ? ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawersOverflowWithBadge : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawersOverflow,\n    items: overflowItems,\n    onItemClick: ({\n      detail\n    }) => onDrawerChange(detail.id)\n  })))));\n}","map":{"version":3,"names":["React","useEffect","clsx","splitItems","OverflowMenu","ToggleButton","togglesConfig","TOOLS_DRAWER_ID","sharedStyles","testutilStyles","styles","MobileToggle","forwardRef","className","ariaLabels","type","disabled","onClick","ref","TagName","iconName","getLabels","mainLabel","openLabel","createElement","e","target","currentTarget","ariaLabel","ariaExpanded","MobileToolbar","toggleRefs","topOffset","navigationHide","toolsHide","anyPanelOpen","unfocusable","drawers","activeDrawerId","children","onNavigationOpen","onToolsOpen","onDrawerChange","mobileBarRef","document","body","classList","add","remove","overflowItems","visibleItems","overflowMenuHasBadge","find","item","badge","style","top","navigation","breadcrumbs","tools","role","map","index","key","id","trigger","iconSvg","_a","triggerButton","testId","length","drawersOverflowWithBadge","drawersOverflow","items","onItemClick","detail"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/app-layout/mobile-toolbar/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect } from 'react';\nimport clsx from 'clsx';\n\nimport { ButtonProps } from '../../button/interfaces';\nimport { splitItems } from '../drawer/drawers-helpers';\nimport OverflowMenu from '../drawer/overflow-menu';\nimport { AppLayoutProps } from '../interfaces';\nimport { ToggleButton, togglesConfig } from '../toggles';\nimport { TOOLS_DRAWER_ID } from '../utils/use-drawers';\n\nimport sharedStyles from '../styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nimport styles from './styles.css.js';\n\ninterface MobileToggleProps {\n  className?: string;\n  ariaLabels?: AppLayoutProps.Labels;\n  type: keyof typeof togglesConfig;\n  disabled?: boolean;\n  onClick: () => void;\n}\nconst MobileToggle = React.forwardRef(\n  ({ className, ariaLabels, type, disabled, onClick }: MobileToggleProps, ref: React.Ref<ButtonProps.Ref>) => {\n    const { TagName, iconName, getLabels } = togglesConfig[type];\n    const { mainLabel, openLabel } = getLabels(ariaLabels);\n\n    return (\n      <TagName\n        className={clsx(styles['mobile-toggle'], styles[`mobile-toggle-type-${type}`])}\n        aria-hidden={disabled}\n        aria-label={mainLabel}\n        onClick={e => e.target === e.currentTarget && onClick()}\n      >\n        <ToggleButton\n          ref={ref}\n          className={className}\n          iconName={iconName}\n          onClick={onClick}\n          ariaLabel={openLabel}\n          disabled={disabled}\n          ariaExpanded={disabled}\n        />\n      </TagName>\n    );\n  }\n);\ninterface MobileToolbarProps {\n  anyPanelOpen: boolean;\n  unfocusable: boolean | undefined;\n  toggleRefs: {\n    navigation: React.Ref<ButtonProps.Ref>;\n    tools: React.Ref<ButtonProps.Ref>;\n  };\n  navigationHide: boolean | undefined;\n  toolsHide: boolean | undefined;\n  topOffset?: number;\n  ariaLabels: AppLayoutProps.Labels | undefined;\n  mobileBarRef: React.Ref<HTMLDivElement>;\n  children: React.ReactNode;\n  onNavigationOpen: () => void;\n  onToolsOpen: () => void;\n  drawers: Array<AppLayoutProps.Drawer> | undefined;\n  activeDrawerId: string | null;\n  onDrawerChange: (newDrawerId: string | null) => void;\n}\n\nexport function MobileToolbar({\n  ariaLabels,\n  toggleRefs,\n  topOffset,\n  navigationHide,\n  toolsHide,\n  anyPanelOpen,\n  unfocusable,\n  drawers,\n  activeDrawerId,\n  children,\n  onNavigationOpen,\n  onToolsOpen,\n  onDrawerChange,\n  mobileBarRef,\n}: MobileToolbarProps) {\n  useEffect(() => {\n    if (anyPanelOpen) {\n      document.body.classList.add(styles['block-body-scroll']);\n      return () => {\n        document.body.classList.remove(styles['block-body-scroll']);\n      };\n    } else {\n      document.body.classList.remove(styles['block-body-scroll']);\n    }\n  }, [anyPanelOpen]);\n\n  const { overflowItems, visibleItems } = splitItems(drawers, 2, activeDrawerId);\n  const overflowMenuHasBadge = !!overflowItems.find(item => item.badge);\n\n  return (\n    <div\n      ref={mobileBarRef}\n      className={clsx(styles['mobile-bar'], testutilStyles['mobile-bar'], unfocusable && sharedStyles.unfocusable)}\n      style={{ top: topOffset }}\n    >\n      {!navigationHide && (\n        <MobileToggle\n          ref={toggleRefs.navigation}\n          type=\"navigation\"\n          className={testutilStyles['navigation-toggle']}\n          ariaLabels={ariaLabels}\n          disabled={anyPanelOpen}\n          onClick={onNavigationOpen}\n        />\n      )}\n      <div className={styles['mobile-bar-breadcrumbs']}>\n        {children && <div className={testutilStyles.breadcrumbs}>{children}</div>}\n      </div>\n      {!toolsHide && !drawers && (\n        <MobileToggle\n          ref={toggleRefs.tools}\n          type=\"tools\"\n          className={testutilStyles['tools-toggle']}\n          ariaLabels={ariaLabels}\n          disabled={anyPanelOpen}\n          onClick={onToolsOpen}\n        />\n      )}\n      {drawers && (\n        <aside aria-label={ariaLabels?.drawers} role=\"region\">\n          <div className={styles['drawers-container']} role=\"toolbar\" aria-orientation=\"horizontal\">\n            {visibleItems.map((item, index) => (\n              <div\n                className={clsx(styles['mobile-toggle'], styles['mobile-toggle-type-drawer'])}\n                key={index}\n                onClick={() => onDrawerChange(item.id)}\n              >\n                <ToggleButton\n                  className={clsx(\n                    testutilStyles['drawers-trigger'],\n                    item.id === TOOLS_DRAWER_ID && testutilStyles['tools-toggle']\n                  )}\n                  iconName={item.trigger!.iconName}\n                  iconSvg={item.trigger!.iconSvg}\n                  badge={item.badge}\n                  ariaLabel={item.ariaLabels?.triggerButton}\n                  ariaExpanded={activeDrawerId === item.id}\n                  testId={`awsui-app-layout-trigger-${item.id}`}\n                />\n              </div>\n            ))}\n            {overflowItems.length > 0 && (\n              <div className={clsx(styles['mobile-toggle'], styles['mobile-toggle-type-drawer'])}>\n                <OverflowMenu\n                  ariaLabel={overflowMenuHasBadge ? ariaLabels?.drawersOverflowWithBadge : ariaLabels?.drawersOverflow}\n                  items={overflowItems}\n                  onItemClick={({ detail }) => onDrawerChange(detail.id)}\n                />\n              </div>\n            )}\n          </div>\n        </aside>\n      )}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}