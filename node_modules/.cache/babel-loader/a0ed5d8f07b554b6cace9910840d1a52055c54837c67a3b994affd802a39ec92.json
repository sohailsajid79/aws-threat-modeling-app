{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef, useImperativeHandle, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { useInternalI18n } from '../../../i18n/context';\nimport { useUniqueId } from '../../hooks/use-unique-id';\nimport { KeyCode } from '../../keycode';\nimport LiveRegion from '../live-region/index';\nimport ApplicationController from './application-controller';\nimport FocusOutline from './focus-outline';\nimport styles from './styles.css.js';\nconst DEFAULT_PLOT_FOCUS_OFFSET = 3;\nconst DEFAULT_ELEMENT_FOCUS_OFFSET = 3;\n/**\n  An extension for the SVG to be used for charts. It includes a controller element to\n  handle the focus and keyboard interactions in a way that is supported by screen readers.\n\n  The application mimics the aria-activedescendant behavior which is unsupported by Safari. The\n  activeElementRef is the pointer to the secondary-focus element and activeElementKey denotes when\n  the focus transition was made.\n\n  Alternatively, ariaLiveRegion can be used to make announcements.\n*/\nexport default forwardRef(ChartPlot);\nfunction ChartPlot({\n  width,\n  height,\n  transform,\n  offsetTop,\n  offsetBottom,\n  offsetLeft,\n  offsetRight,\n  ariaLabel,\n  ariaLabelledby,\n  ariaRoleDescription,\n  ariaDescription,\n  ariaDescribedby,\n  activeElementKey,\n  activeElementRef,\n  ariaLiveRegion,\n  isClickable,\n  isPrecise,\n  children,\n  onClick,\n  onKeyDown,\n  focusOffset = DEFAULT_PLOT_FOCUS_OFFSET,\n  activeElementFocusOffset = DEFAULT_ELEMENT_FOCUS_OFFSET,\n  onMouseMove,\n  onMouseOut,\n  onApplicationBlur,\n  onApplicationFocus\n}, ref) {\n  const i18n = useInternalI18n('[charts]');\n  const svgRef = useRef(null);\n  const applicationRef = useRef(null);\n  const plotClickedRef = useRef(false);\n  const [isPlotFocused, setPlotFocused] = useState(false);\n  const [isApplicationFocused, setApplicationFocused] = useState(false);\n  const internalDescriptionId = useUniqueId('awsui-chart-plot__description');\n  const ariaDescriptionId = [ariaDescription && internalDescriptionId, ariaDescribedby].filter(Boolean).join(' ');\n  useImperativeHandle(ref, () => ({\n    svg: svgRef.current,\n    focusPlot: () => svgRef.current.focus(),\n    focusApplication: () => applicationRef.current.focus()\n  }));\n  const onPlotMouseDown = () => {\n    // Record the click was made for the application focus handler.\n    plotClickedRef.current = true;\n  };\n  const onPlotFocus = event => {\n    // If focused via click or an element was highlighted,\n    // focus the internal application, which will manage and show focus accordingly on its internal elements.\n    if (plotClickedRef.current || !!activeElementKey) {\n      applicationRef.current.focus();\n    } else if (event.target === svgRef.current) {\n      // Otherwise, focus the entire plot if it was focused with the keyboard.\n      setPlotFocused(true);\n    }\n  };\n  const onPlotClick = event => {\n    onClick && onClick(event);\n  };\n  const onPlotBlur = event => {\n    if (event.target === svgRef.current) {\n      setPlotFocused(false);\n    }\n  };\n  // Once one of the expected keys is pressed the focus is delegated to the application controller.\n  const onPlotKeyDown = event => {\n    if (isPlotFocused) {\n      // Delegate the focus to the application if one of the expected keys was pressed.\n      const codes = [KeyCode.space, KeyCode.enter, KeyCode.up, KeyCode.left, KeyCode.right, KeyCode.down];\n      if (codes.indexOf(event.keyCode) !== -1) {\n        applicationRef.current.focus();\n      }\n    }\n  };\n  const onPlotApplicationFocus = event => {\n    onApplicationFocus && onApplicationFocus(event, plotClickedRef.current ? 'mouse' : 'keyboard');\n    // \"Release\" the click reference to not affect the next call of this handler.\n    plotClickedRef.current = false;\n    setApplicationFocused(true);\n  };\n  const onPlotApplicationBlur = event => {\n    onApplicationBlur && onApplicationBlur(event);\n    setApplicationFocused(false);\n  };\n  const onApplicationKeyDown = onKeyDown;\n  const plotFocusable = !isApplicationFocused;\n  const plotTabIndex = plotFocusable ? 0 : -1;\n  const plotAria = !isApplicationFocused ? {\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    'aria-describedby': ariaDescriptionId,\n    'aria-roledescription': i18n('i18nStrings.chartAriaRoleDescription', ariaRoleDescription)\n  } : {};\n  return React.createElement(React.Fragment, null, React.createElement(\"svg\", Object.assign({\n    onMouseMove: onMouseMove,\n    onMouseOut: onMouseOut,\n    focusable: plotFocusable,\n    tabIndex: plotTabIndex,\n    role: \"application\",\n    \"aria-hidden\": \"false\"\n  }, plotAria, {\n    ref: svgRef,\n    style: {\n      width,\n      height,\n      marginTop: offsetTop,\n      marginBottom: offsetBottom,\n      marginLeft: offsetLeft,\n      marginRight: offsetRight\n    },\n    className: clsx(styles.root, {\n      [styles.clickable]: isClickable,\n      [styles.precise]: isPrecise\n    }),\n    onMouseDown: onPlotMouseDown,\n    onClick: onPlotClick,\n    onFocus: onPlotFocus,\n    onBlur: onPlotBlur,\n    onKeyDown: onPlotKeyDown\n  }), React.createElement(FocusOutline, {\n    elementRef: svgRef,\n    elementKey: isPlotFocused,\n    offset: focusOffset\n  }), React.createElement(\"g\", {\n    transform: transform\n  }, React.createElement(ApplicationController, {\n    activeElementKey: isApplicationFocused && activeElementKey || null,\n    activeElementRef: activeElementRef,\n    ref: applicationRef,\n    onFocus: onPlotApplicationFocus,\n    onBlur: onPlotApplicationBlur,\n    onKeyDown: onApplicationKeyDown\n  }), ariaDescription && plotFocusable && React.createElement(\"desc\", {\n    \"aria-hidden\": \"true\",\n    id: internalDescriptionId\n  }, ariaDescription), children, React.createElement(FocusOutline, {\n    elementRef: activeElementRef,\n    elementKey: isApplicationFocused && activeElementKey,\n    offset: activeElementFocusOffset\n  }))), React.createElement(LiveRegion, null, ariaLiveRegion));\n}","map":{"version":3,"names":["React","forwardRef","useImperativeHandle","useRef","useState","clsx","useInternalI18n","useUniqueId","KeyCode","LiveRegion","ApplicationController","FocusOutline","styles","DEFAULT_PLOT_FOCUS_OFFSET","DEFAULT_ELEMENT_FOCUS_OFFSET","ChartPlot","width","height","transform","offsetTop","offsetBottom","offsetLeft","offsetRight","ariaLabel","ariaLabelledby","ariaRoleDescription","ariaDescription","ariaDescribedby","activeElementKey","activeElementRef","ariaLiveRegion","isClickable","isPrecise","children","onClick","onKeyDown","focusOffset","activeElementFocusOffset","onMouseMove","onMouseOut","onApplicationBlur","onApplicationFocus","ref","i18n","svgRef","applicationRef","plotClickedRef","isPlotFocused","setPlotFocused","isApplicationFocused","setApplicationFocused","internalDescriptionId","ariaDescriptionId","filter","Boolean","join","svg","current","focusPlot","focus","focusApplication","onPlotMouseDown","onPlotFocus","event","target","onPlotClick","onPlotBlur","onPlotKeyDown","codes","space","enter","up","left","right","down","indexOf","keyCode","onPlotApplicationFocus","onPlotApplicationBlur","onApplicationKeyDown","plotFocusable","plotTabIndex","plotAria","createElement","Fragment","Object","assign","focusable","tabIndex","role","style","marginTop","marginBottom","marginLeft","marginRight","className","root","clickable","precise","onMouseDown","onFocus","onBlur","elementRef","elementKey","offset","id"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/internal/components/chart-plot/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef, useImperativeHandle, useRef, useState } from 'react';\nimport clsx from 'clsx';\n\nimport { useInternalI18n } from '../../../i18n/context';\nimport { useUniqueId } from '../../hooks/use-unique-id';\nimport { KeyCode } from '../../keycode';\nimport { Offset } from '../interfaces';\nimport LiveRegion from '../live-region/index';\nimport ApplicationController, { ApplicationRef } from './application-controller';\nimport FocusOutline from './focus-outline';\n\nimport styles from './styles.css.js';\n\nconst DEFAULT_PLOT_FOCUS_OFFSET = 3;\nconst DEFAULT_ELEMENT_FOCUS_OFFSET = 3;\n\nexport interface ChartPlotRef {\n  svg: SVGSVGElement;\n  focusPlot(): void;\n  focusApplication(): void;\n}\n\nexport interface ChartPlotProps {\n  width: number | string;\n  height: number | string;\n  transform?: string;\n  offsetTop?: number;\n  offsetBottom?: number;\n  offsetLeft?: number;\n  offsetRight?: number;\n  focusOffset?: number;\n  ariaLabel?: string;\n  ariaLabelledby?: string;\n  ariaDescription?: string;\n  ariaDescribedby?: string;\n  ariaRoleDescription?: string;\n  activeElementKey?: null | string | number | boolean;\n  activeElementRef?: React.RefObject<SVGGElement>;\n  activeElementFocusOffset?: Offset;\n  ariaLiveRegion?: string;\n  isClickable?: boolean;\n  isPrecise?: boolean;\n  onClick?: (event: React.MouseEvent<SVGSVGElement>) => void;\n  onMouseMove?: (event: React.MouseEvent<SVGSVGElement>) => void;\n  onMouseOut?: (event: React.MouseEvent<SVGSVGElement>) => void;\n  onApplicationFocus?: (event: React.FocusEvent<SVGGElement>, trigger: 'mouse' | 'keyboard') => void;\n  onApplicationBlur?: (event: React.FocusEvent<SVGGElement>) => void;\n  onKeyDown?: (event: React.KeyboardEvent<SVGGElement>) => void;\n  children: React.ReactNode;\n}\n\n/**\n  An extension for the SVG to be used for charts. It includes a controller element to\n  handle the focus and keyboard interactions in a way that is supported by screen readers.\n\n  The application mimics the aria-activedescendant behavior which is unsupported by Safari. The\n  activeElementRef is the pointer to the secondary-focus element and activeElementKey denotes when\n  the focus transition was made.\n\n  Alternatively, ariaLiveRegion can be used to make announcements.\n*/\nexport default forwardRef(ChartPlot);\n\nfunction ChartPlot(\n  {\n    width,\n    height,\n    transform,\n    offsetTop,\n    offsetBottom,\n    offsetLeft,\n    offsetRight,\n    ariaLabel,\n    ariaLabelledby,\n    ariaRoleDescription,\n    ariaDescription,\n    ariaDescribedby,\n    activeElementKey,\n    activeElementRef,\n    ariaLiveRegion,\n    isClickable,\n    isPrecise,\n    children,\n    onClick,\n    onKeyDown,\n    focusOffset = DEFAULT_PLOT_FOCUS_OFFSET,\n    activeElementFocusOffset = DEFAULT_ELEMENT_FOCUS_OFFSET,\n    onMouseMove,\n    onMouseOut,\n    onApplicationBlur,\n    onApplicationFocus,\n  }: ChartPlotProps,\n  ref: React.Ref<ChartPlotRef>\n) {\n  const i18n = useInternalI18n('[charts]');\n  const svgRef = useRef<SVGSVGElement>(null);\n  const applicationRef = useRef<ApplicationRef>(null);\n  const plotClickedRef = useRef(false);\n  const [isPlotFocused, setPlotFocused] = useState(false);\n  const [isApplicationFocused, setApplicationFocused] = useState(false);\n\n  const internalDescriptionId = useUniqueId('awsui-chart-plot__description');\n  const ariaDescriptionId = [ariaDescription && internalDescriptionId, ariaDescribedby].filter(Boolean).join(' ');\n\n  useImperativeHandle(ref, () => ({\n    svg: svgRef.current!,\n    focusPlot: () => svgRef.current!.focus(),\n    focusApplication: () => applicationRef.current!.focus(),\n  }));\n\n  const onPlotMouseDown = () => {\n    // Record the click was made for the application focus handler.\n    plotClickedRef.current = true;\n  };\n  const onPlotFocus = (event: React.FocusEvent<SVGSVGElement>) => {\n    // If focused via click or an element was highlighted,\n    // focus the internal application, which will manage and show focus accordingly on its internal elements.\n    if (plotClickedRef.current || !!activeElementKey) {\n      applicationRef.current!.focus();\n    } else if (event.target === svgRef.current) {\n      // Otherwise, focus the entire plot if it was focused with the keyboard.\n      setPlotFocused(true);\n    }\n  };\n  const onPlotClick = (event: React.MouseEvent<SVGSVGElement, MouseEvent>) => {\n    onClick && onClick(event);\n  };\n  const onPlotBlur = (event: React.FocusEvent<SVGSVGElement>) => {\n    if (event.target === svgRef.current) {\n      setPlotFocused(false);\n    }\n  };\n  // Once one of the expected keys is pressed the focus is delegated to the application controller.\n  const onPlotKeyDown = (event: React.KeyboardEvent) => {\n    if (isPlotFocused) {\n      // Delegate the focus to the application if one of the expected keys was pressed.\n      const codes = [KeyCode.space, KeyCode.enter, KeyCode.up, KeyCode.left, KeyCode.right, KeyCode.down];\n      if (codes.indexOf(event.keyCode) !== -1) {\n        applicationRef.current!.focus();\n      }\n    }\n  };\n\n  const onPlotApplicationFocus = (event: React.FocusEvent<SVGGElement>) => {\n    onApplicationFocus && onApplicationFocus(event, plotClickedRef.current ? 'mouse' : 'keyboard');\n    // \"Release\" the click reference to not affect the next call of this handler.\n    plotClickedRef.current = false;\n    setApplicationFocused(true);\n  };\n  const onPlotApplicationBlur = (event: React.FocusEvent<SVGGElement>) => {\n    onApplicationBlur && onApplicationBlur(event);\n    setApplicationFocused(false);\n  };\n  const onApplicationKeyDown = onKeyDown;\n\n  const plotFocusable = !isApplicationFocused;\n  const plotTabIndex = plotFocusable ? 0 : -1;\n  const plotAria = !isApplicationFocused\n    ? {\n        'aria-label': ariaLabel,\n        'aria-labelledby': ariaLabelledby,\n        'aria-describedby': ariaDescriptionId,\n        'aria-roledescription': i18n('i18nStrings.chartAriaRoleDescription', ariaRoleDescription),\n      }\n    : {};\n\n  return (\n    <>\n      <svg\n        onMouseMove={onMouseMove}\n        onMouseOut={onMouseOut}\n        focusable={plotFocusable}\n        tabIndex={plotTabIndex}\n        role=\"application\"\n        aria-hidden=\"false\"\n        {...plotAria}\n        ref={svgRef}\n        style={{\n          width,\n          height,\n          marginTop: offsetTop,\n          marginBottom: offsetBottom,\n          marginLeft: offsetLeft,\n          marginRight: offsetRight,\n        }}\n        className={clsx(styles.root, {\n          [styles.clickable]: isClickable,\n          [styles.precise]: isPrecise,\n        })}\n        onMouseDown={onPlotMouseDown}\n        onClick={onPlotClick}\n        onFocus={onPlotFocus}\n        onBlur={onPlotBlur}\n        onKeyDown={onPlotKeyDown}\n      >\n        <FocusOutline elementRef={svgRef} elementKey={isPlotFocused} offset={focusOffset} />\n\n        <g transform={transform}>\n          <ApplicationController\n            activeElementKey={(isApplicationFocused && activeElementKey) || null}\n            activeElementRef={activeElementRef}\n            ref={applicationRef}\n            onFocus={onPlotApplicationFocus}\n            onBlur={onPlotApplicationBlur}\n            onKeyDown={onApplicationKeyDown}\n          />\n\n          {/* Only show description when plot is focusable to avoid repetition in Safari and Firefox */}\n          {ariaDescription && plotFocusable && (\n            <desc aria-hidden=\"true\" id={internalDescriptionId}>\n              {ariaDescription}\n            </desc>\n          )}\n\n          {children}\n\n          <FocusOutline\n            elementRef={activeElementRef}\n            elementKey={isApplicationFocused && activeElementKey}\n            offset={activeElementFocusOffset}\n          />\n        </g>\n      </svg>\n\n      <LiveRegion>{ariaLiveRegion}</LiveRegion>\n    </>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}