{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useMemo } from 'react';\nimport { getCalendarMonth } from 'mnth';\nimport { normalizeStartOfWeek } from '../../internal/utils/locale/index.js';\nexport default function useCalendarGridRows(_ref) {\n  let {\n    baseDate,\n    granularity,\n    locale,\n    startOfWeek\n  } = _ref;\n  const isMonthPicker = granularity === 'month';\n  const rows = useMemo(() => isMonthPicker ? getCalendarYear(baseDate) : getCalendarMonth(baseDate, {\n    firstDayOfWeek: normalizeStartOfWeek(startOfWeek, locale)\n  }), [baseDate, isMonthPicker, startOfWeek, locale]);\n  return rows;\n}\n// Returns a 3-by-4 matrix with dates corresponding to the initial date-time of each month of the year for a given date.\nfunction getCalendarYear(date) {\n  const year = date.getFullYear();\n  return new Array(4).fill(0).map((_, i) => new Array(3).fill(0).map((_, j) => new Date(year, i * 3 + j)));\n}","map":{"version":3,"names":["useMemo","getCalendarMonth","normalizeStartOfWeek","useCalendarGridRows","_ref","baseDate","granularity","locale","startOfWeek","isMonthPicker","rows","getCalendarYear","firstDayOfWeek","date","year","getFullYear","Array","fill","map","_","i","j","Date"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/calendar/grid/use-calendar-grid-rows.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { useMemo } from 'react';\nimport { getCalendarMonth } from 'mnth';\n\nimport { normalizeStartOfWeek } from '../../internal/utils/locale/index.js';\nimport { CalendarProps } from '../interfaces.js';\n\nexport default function useCalendarGridRows({\n  baseDate,\n  granularity,\n  locale,\n  startOfWeek,\n}: {\n  baseDate: Date;\n  granularity: CalendarProps.Granularity;\n  locale: string;\n  startOfWeek?: number;\n}) {\n  const isMonthPicker = granularity === 'month';\n\n  const rows = useMemo<Date[][]>(\n    () =>\n      isMonthPicker\n        ? getCalendarYear(baseDate)\n        : getCalendarMonth(baseDate, { firstDayOfWeek: normalizeStartOfWeek(startOfWeek, locale) }),\n    [baseDate, isMonthPicker, startOfWeek, locale]\n  );\n\n  return rows;\n}\n\n// Returns a 3-by-4 matrix with dates corresponding to the initial date-time of each month of the year for a given date.\nfunction getCalendarYear(date: Date): Date[][] {\n  const year = date.getFullYear();\n  return new Array(4)\n    .fill(0)\n    .map((_, i: number) => new Array(3).fill(0).map((_, j: number) => new Date(year, i * 3 + j)));\n}\n"],"mappings":"AAAA;AACA;AAEA,SAASA,OAAO,QAAQ,OAAO;AAC/B,SAASC,gBAAgB,QAAQ,MAAM;AAEvC,SAASC,oBAAoB,QAAQ,sCAAsC;AAG3E,eAAc,SAAUC,mBAAmBA,CAAAC,IAAA,EAU1C;EAAA,IAV2C;IAC1CC,QAAQ;IACRC,WAAW;IACXC,MAAM;IACNC;EAAW,CAMZ,GAAAJ,IAAA;EACC,MAAMK,aAAa,GAAGH,WAAW,KAAK,OAAO;EAE7C,MAAMI,IAAI,GAAGV,OAAO,CAClB,MACES,aAAa,GACTE,eAAe,CAACN,QAAQ,CAAC,GACzBJ,gBAAgB,CAACI,QAAQ,EAAE;IAAEO,cAAc,EAAEV,oBAAoB,CAACM,WAAW,EAAED,MAAM;EAAC,CAAE,CAAC,EAC/F,CAACF,QAAQ,EAAEI,aAAa,EAAED,WAAW,EAAED,MAAM,CAAC,CAC/C;EAED,OAAOG,IAAI;AACb;AAEA;AACA,SAASC,eAAeA,CAACE,IAAU;EACjC,MAAMC,IAAI,GAAGD,IAAI,CAACE,WAAW,EAAE;EAC/B,OAAO,IAAIC,KAAK,CAAC,CAAC,CAAC,CAChBC,IAAI,CAAC,CAAC,CAAC,CACPC,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAS,KAAK,IAAIJ,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAACC,GAAG,CAAC,CAACC,CAAC,EAAEE,CAAS,KAAK,IAAIC,IAAI,CAACR,IAAI,EAAEM,CAAC,GAAG,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC;AACjG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}