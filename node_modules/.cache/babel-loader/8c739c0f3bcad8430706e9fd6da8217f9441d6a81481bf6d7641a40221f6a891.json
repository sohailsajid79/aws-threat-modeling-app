{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { checkItemsIntersection } from \"./utils\";\nexport class ReadonlyLayoutEngineGrid {\n  static clone(grid) {\n    const clone = new LayoutEngineGrid([], 0);\n    clone._width = grid._width;\n    clone._height = grid._height;\n    for (const item of grid._items) {\n      const itemClone = {\n        ...item\n      };\n      clone._itemsMap.set(itemClone.id, itemClone);\n      clone._items.push(itemClone);\n    }\n    return clone;\n  }\n  constructor(items, columns) {\n    this._items = new Array();\n    this._itemsMap = new Map();\n    this._width = columns;\n    this._height = 0;\n    for (const item of items) {\n      if (item.x < 0 || item.y < 0 || item.x + item.width > this._width) {\n        throw new Error(\"Invalid grid: items outside the boundaries.\");\n      }\n      if (item.width < 1 || item.height < 1) {\n        throw new Error(\"Invalid grid: items of invalid size.\");\n      }\n      for (const gridItem of this._items) {\n        if (checkItemsIntersection(gridItem, item)) {\n          throw new Error(\"Invalid grid: items overlap.\");\n        }\n      }\n      const itemClone = {\n        ...item\n      };\n      this._itemsMap.set(itemClone.id, itemClone);\n      this._items.push(itemClone);\n      this._height = Math.max(this.height, itemClone.y + itemClone.height);\n    }\n  }\n  get width() {\n    return this._width;\n  }\n  get height() {\n    return this._height;\n  }\n  get items() {\n    return this._items;\n  }\n  getItem(itemId) {\n    const item = this._itemsMap.get(itemId);\n    if (!item) {\n      throw new Error(`Item with id \"${itemId}\" not found in the grid.`);\n    }\n    return item;\n  }\n  getOverlaps(item) {\n    return this._items.filter(gridItem => checkItemsIntersection(gridItem, item));\n  }\n}\nexport class LayoutEngineGrid extends ReadonlyLayoutEngineGrid {\n  move(itemId, x, y) {\n    const item = this.getItem(itemId);\n    item.x = x;\n    item.y = y;\n    this._height = Math.max(this.height, item.y + item.height);\n  }\n  resize(itemId, width, height) {\n    const item = this.getItem(itemId);\n    item.width = width;\n    item.height = height;\n    this._height = Math.max(this.height, item.y + item.height);\n  }\n  insert(item) {\n    if (item.x < 0 || item.y < 0 || item.x + item.width > this._width) {\n      throw new Error(\"Inserting item is outside the boundaries.\");\n    }\n    if (item.width < 1 || item.height < 1) {\n      throw new Error(\"Inserting item has invalid size.\");\n    }\n    const itemClone = {\n      ...item\n    };\n    this._itemsMap.set(itemClone.id, itemClone);\n    this._items.push(itemClone);\n    this._height = Math.max(this.height, item.y + item.height);\n  }\n  remove(itemId) {\n    this._itemsMap.delete(itemId);\n    this._items = this._items.filter(item => item.id !== itemId);\n  }\n}","map":{"version":3,"names":["checkItemsIntersection","ReadonlyLayoutEngineGrid","clone","grid","LayoutEngineGrid","_width","_height","item","_items","itemClone","_itemsMap","set","id","push","constructor","items","columns","Array","Map","x","y","width","Error","height","gridItem","Math","max","getItem","itemId","get","getOverlaps","filter","move","resize","insert","remove","delete"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/internal/layout-engine/grid.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { GridLayoutItem, ItemId } from \"../interfaces\";\nimport { checkItemsIntersection } from \"./utils\";\n\nexport class ReadonlyLayoutEngineGrid {\n  protected _width: number;\n  protected _height: number;\n  protected _items = new Array<GridLayoutItem>();\n  protected _itemsMap = new Map<ItemId, GridLayoutItem>();\n\n  static clone(grid: ReadonlyLayoutEngineGrid): LayoutEngineGrid {\n    const clone = new LayoutEngineGrid([], 0);\n    clone._width = grid._width;\n    clone._height = grid._height;\n    for (const item of grid._items) {\n      const itemClone = { ...item };\n      clone._itemsMap.set(itemClone.id, itemClone);\n      clone._items.push(itemClone);\n    }\n    return clone;\n  }\n\n  constructor(items: readonly GridLayoutItem[], columns: number) {\n    this._width = columns;\n    this._height = 0;\n\n    for (const item of items) {\n      if (item.x < 0 || item.y < 0 || item.x + item.width > this._width) {\n        throw new Error(\"Invalid grid: items outside the boundaries.\");\n      }\n      if (item.width < 1 || item.height < 1) {\n        throw new Error(\"Invalid grid: items of invalid size.\");\n      }\n\n      for (const gridItem of this._items) {\n        if (checkItemsIntersection(gridItem, item)) {\n          throw new Error(\"Invalid grid: items overlap.\");\n        }\n      }\n\n      const itemClone = { ...item };\n      this._itemsMap.set(itemClone.id, itemClone);\n      this._items.push(itemClone);\n      this._height = Math.max(this.height, itemClone.y + itemClone.height);\n    }\n  }\n\n  get width(): number {\n    return this._width;\n  }\n\n  get height(): number {\n    return this._height;\n  }\n\n  get items(): GridLayoutItem[] {\n    return this._items;\n  }\n\n  getItem(itemId: ItemId): GridLayoutItem {\n    const item = this._itemsMap.get(itemId);\n    if (!item) {\n      throw new Error(`Item with id \"${itemId}\" not found in the grid.`);\n    }\n    return item;\n  }\n\n  getOverlaps(item: GridLayoutItem): GridLayoutItem[] {\n    return this._items.filter((gridItem) => checkItemsIntersection(gridItem, item));\n  }\n}\n\nexport class LayoutEngineGrid extends ReadonlyLayoutEngineGrid {\n  move(itemId: ItemId, x: number, y: number): void {\n    const item = this.getItem(itemId);\n    item.x = x;\n    item.y = y;\n    this._height = Math.max(this.height, item.y + item.height);\n  }\n\n  resize(itemId: ItemId, width: number, height: number): void {\n    const item = this.getItem(itemId);\n    item.width = width;\n    item.height = height;\n    this._height = Math.max(this.height, item.y + item.height);\n  }\n\n  insert(item: GridLayoutItem): void {\n    if (item.x < 0 || item.y < 0 || item.x + item.width > this._width) {\n      throw new Error(\"Inserting item is outside the boundaries.\");\n    }\n    if (item.width < 1 || item.height < 1) {\n      throw new Error(\"Inserting item has invalid size.\");\n    }\n    const itemClone = { ...item };\n    this._itemsMap.set(itemClone.id, itemClone);\n    this._items.push(itemClone);\n    this._height = Math.max(this.height, item.y + item.height);\n  }\n\n  remove(itemId: ItemId): void {\n    this._itemsMap.delete(itemId);\n    this._items = this._items.filter((item) => item.id !== itemId);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}