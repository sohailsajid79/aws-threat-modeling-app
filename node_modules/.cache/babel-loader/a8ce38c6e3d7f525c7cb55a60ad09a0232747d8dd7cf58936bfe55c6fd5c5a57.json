{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect } from 'react';\nimport { getAnalyticsMetadataAttribute } from '@cloudscape-design/component-toolkit/internal/analytics-metadata';\nimport { FunnelMetrics } from '../internal/analytics';\nimport { useFunnel, useFunnelStep, useFunnelSubStep } from '../internal/analytics/hooks/use-funnel';\nimport { getSubStepAllSelector, getTextFromSelector } from '../internal/analytics/selectors';\nimport { getAnalyticsMetadataProps } from '../internal/base-component';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport InternalAlert from './internal';\nimport analyticsSelectors from './analytics-metadata/styles.css.js';\nconst Alert = React.forwardRef((_a, ref) => {\n  var {\n      type = 'info',\n      visible = true\n    } = _a,\n    props = __rest(_a, [\"type\", \"visible\"]);\n  const analyticsMetadata = getAnalyticsMetadataProps(props);\n  const baseComponentProps = useBaseComponent('Alert', {\n    props: {\n      type,\n      visible,\n      dismissible: props.dismissible\n    }\n  }, analyticsMetadata);\n  const {\n    funnelIdentifier,\n    funnelInteractionId,\n    funnelErrorContext,\n    submissionAttempt,\n    funnelState,\n    errorCount\n  } = useFunnel();\n  const {\n    stepNumber,\n    stepNameSelector,\n    stepIdentifier\n  } = useFunnelStep();\n  const {\n    subStepSelector,\n    subStepNameSelector,\n    subStepIdentifier,\n    subStepErrorContext\n  } = useFunnelSubStep();\n  useEffect(() => {\n    var _a, _b, _c;\n    if (funnelInteractionId && visible && type === 'error' && funnelState.current !== 'complete') {\n      const stepName = getTextFromSelector(stepNameSelector);\n      const subStepName = getTextFromSelector(subStepNameSelector);\n      errorCount.current++;\n      // We don't want to report an error if it is hidden, e.g. inside an Expandable Section.\n      const errorIsVisible = ((_c = (_b = (_a = baseComponentProps.__internalRootRef.current) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect()) === null || _b === void 0 ? void 0 : _b.width) !== null && _c !== void 0 ? _c : 0) > 0;\n      if (errorIsVisible) {\n        if (subStepSelector) {\n          FunnelMetrics.funnelSubStepError({\n            funnelInteractionId,\n            funnelIdentifier,\n            stepIdentifier,\n            subStepSelector,\n            subStepName,\n            subStepNameSelector,\n            stepNumber,\n            stepName,\n            stepNameSelector,\n            subStepAllSelector: getSubStepAllSelector(),\n            subStepIdentifier,\n            subStepErrorContext\n          });\n        } else {\n          FunnelMetrics.funnelError({\n            funnelIdentifier,\n            funnelInteractionId,\n            funnelErrorContext\n          });\n        }\n      }\n      return () => {\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        errorCount.current--;\n      };\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [funnelInteractionId, visible, submissionAttempt, errorCount]);\n  const componentAnalyticsMetadata = {\n    name: 'awsui.Alert',\n    label: `.${analyticsSelectors.header}`,\n    properties: {\n      type\n    }\n  };\n  return React.createElement(InternalAlert, Object.assign({\n    type: type,\n    visible: visible\n  }, props, baseComponentProps, {\n    ref: ref\n  }, getAnalyticsMetadataAttribute({\n    component: componentAnalyticsMetadata\n  })));\n});\napplyDisplayName(Alert, 'Alert');\nexport default Alert;","map":{"version":3,"names":["React","useEffect","getAnalyticsMetadataAttribute","FunnelMetrics","useFunnel","useFunnelStep","useFunnelSubStep","getSubStepAllSelector","getTextFromSelector","getAnalyticsMetadataProps","useBaseComponent","applyDisplayName","InternalAlert","analyticsSelectors","Alert","forwardRef","_a","ref","type","visible","props","__rest","analyticsMetadata","baseComponentProps","dismissible","funnelIdentifier","funnelInteractionId","funnelErrorContext","submissionAttempt","funnelState","errorCount","stepNumber","stepNameSelector","stepIdentifier","subStepSelector","subStepNameSelector","subStepIdentifier","subStepErrorContext","current","stepName","subStepName","errorIsVisible","_c","_b","__internalRootRef","getBoundingClientRect","width","funnelSubStepError","subStepAllSelector","funnelError","componentAnalyticsMetadata","name","label","header","properties","createElement","Object","assign","component"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/alert/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect } from 'react';\n\nimport { getAnalyticsMetadataAttribute } from '@cloudscape-design/component-toolkit/internal/analytics-metadata';\n\nimport { FunnelMetrics } from '../internal/analytics';\nimport { useFunnel, useFunnelStep, useFunnelSubStep } from '../internal/analytics/hooks/use-funnel';\nimport { getSubStepAllSelector, getTextFromSelector } from '../internal/analytics/selectors';\nimport { BasePropsWithAnalyticsMetadata, getAnalyticsMetadataProps } from '../internal/base-component';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport { GeneratedAnalyticsMetadataAlertComponent } from './analytics-metadata/interfaces';\nimport { AlertProps } from './interfaces';\nimport InternalAlert from './internal';\n\nimport analyticsSelectors from './analytics-metadata/styles.css.js';\n\nexport { AlertProps };\n\nconst Alert = React.forwardRef(\n  ({ type = 'info', visible = true, ...props }: AlertProps, ref: React.Ref<AlertProps.Ref>) => {\n    const analyticsMetadata = getAnalyticsMetadataProps(props as BasePropsWithAnalyticsMetadata);\n    const baseComponentProps = useBaseComponent<HTMLDivElement>(\n      'Alert',\n      {\n        props: { type, visible, dismissible: props.dismissible },\n      },\n      analyticsMetadata\n    );\n\n    const { funnelIdentifier, funnelInteractionId, funnelErrorContext, submissionAttempt, funnelState, errorCount } =\n      useFunnel();\n    const { stepNumber, stepNameSelector, stepIdentifier } = useFunnelStep();\n    const { subStepSelector, subStepNameSelector, subStepIdentifier, subStepErrorContext } = useFunnelSubStep();\n\n    useEffect(() => {\n      if (funnelInteractionId && visible && type === 'error' && funnelState.current !== 'complete') {\n        const stepName = getTextFromSelector(stepNameSelector);\n        const subStepName = getTextFromSelector(subStepNameSelector);\n\n        errorCount.current++;\n\n        // We don't want to report an error if it is hidden, e.g. inside an Expandable Section.\n        const errorIsVisible = (baseComponentProps.__internalRootRef.current?.getBoundingClientRect()?.width ?? 0) > 0;\n\n        if (errorIsVisible) {\n          if (subStepSelector) {\n            FunnelMetrics.funnelSubStepError({\n              funnelInteractionId,\n              funnelIdentifier,\n              stepIdentifier,\n              subStepSelector,\n              subStepName,\n              subStepNameSelector,\n              stepNumber,\n              stepName,\n              stepNameSelector,\n              subStepAllSelector: getSubStepAllSelector(),\n              subStepIdentifier,\n              subStepErrorContext,\n            });\n          } else {\n            FunnelMetrics.funnelError({\n              funnelIdentifier,\n              funnelInteractionId,\n              funnelErrorContext,\n            });\n          }\n        }\n\n        return () => {\n          // eslint-disable-next-line react-hooks/exhaustive-deps\n          errorCount.current--;\n        };\n      }\n\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [funnelInteractionId, visible, submissionAttempt, errorCount]);\n\n    const componentAnalyticsMetadata: GeneratedAnalyticsMetadataAlertComponent = {\n      name: 'awsui.Alert',\n      label: `.${analyticsSelectors.header}`,\n      properties: {\n        type,\n      },\n    };\n\n    return (\n      <InternalAlert\n        type={type}\n        visible={visible}\n        {...props}\n        {...baseComponentProps}\n        ref={ref}\n        {...getAnalyticsMetadataAttribute({ component: componentAnalyticsMetadata })}\n      />\n    );\n  }\n);\n\napplyDisplayName(Alert, 'Alert');\nexport default Alert;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}