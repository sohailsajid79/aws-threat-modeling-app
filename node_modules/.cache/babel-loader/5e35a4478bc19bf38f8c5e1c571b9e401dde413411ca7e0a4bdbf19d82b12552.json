{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { memo, useEffect, useRef } from \"react\";\nimport ScreenreaderOnly from \"../screenreader-only\";\n/**\n * The live region is hidden in the layout, but visible for screen readers.\n * It's purpose it to announce changes e.g. when custom navigation logic is used.\n *\n * The way live region works differently in different browsers and screen readers and\n * it is recommended to manually test every new implementation.\n *\n * If you notice there are different words being merged together,\n * check if there are text nodes not being wrapped in elements, like:\n * <LiveRegion>\n *   {title}\n *   <span><Details /></span>\n * </LiveRegion>\n *\n * To fix, wrap \"title\" in an element:\n * <LiveRegion>\n *   <span>{title}</span>\n *   <span><Details /></span>\n * </LiveRegion>\n *\n * Or create a single text node if possible:\n * <LiveRegion>\n *   {`${title} ${details}`}\n * </LiveRegion>\n *\n * The live region is always atomic, because non-atomic regions can be treated by screen readers\n * differently and produce unexpected results. To imitate non-atomic announcements simply use\n * multiple live regions:\n * <>\n *   <LiveRegion>{title}</LiveRegion>\n *   <LiveRegion><Details /></LiveRegion>\n * </>\n */\nexport default memo(LiveRegion);\nfunction LiveRegion({\n  assertive = false,\n  delay = 10,\n  visible = false,\n  children,\n  ...restProps\n}) {\n  const sourceRef = useRef(null);\n  const targetRef = useRef(null);\n  /*\n    When React state changes, React often produces too many DOM updates, causing NVDA to\n    issue many announcements for the same logical event (See https://github.com/nvaccess/nvda/issues/7996).\n    The code below imitates a debouncing, scheduling a callback every time new React state\n    update is detected. When a callback resolves, it copies content from a muted element\n    to the live region, which is recognized by screen readers as an update.\n    If the use case requires no announcement to be ignored, use delay = 0, but ensure it\n    does not impact the performance. If it does, prefer using a string as children prop.\n  */\n  useEffect(() => {\n    function updateLiveRegion() {\n      if (targetRef.current && sourceRef.current) {\n        const sourceContent = extractInnerText(sourceRef.current);\n        const targetContent = extractInnerText(targetRef.current);\n        if (targetContent !== sourceContent) {\n          // The aria-atomic does not work properly in Voice Over, causing\n          // certain parts of the content to be ignored. To fix that,\n          // we assign the source text content as a single node.\n          targetRef.current.innerText = sourceContent;\n        }\n      }\n    }\n    let timeoutId;\n    if (delay) {\n      timeoutId = setTimeout(updateLiveRegion, delay);\n    } else {\n      updateLiveRegion();\n    }\n    return () => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n    };\n  });\n  return _jsxs(_Fragment, {\n    children: [visible && _jsx(\"span\", {\n      ref: sourceRef,\n      children: children\n    }), _jsxs(ScreenreaderOnly, {\n      ...restProps,\n      className: restProps.className,\n      children: [!visible && _jsx(\"span\", {\n        ref: sourceRef,\n        \"aria-hidden\": \"true\",\n        children: children\n      }), _jsx(\"span\", {\n        ref: targetRef,\n        \"aria-atomic\": \"true\",\n        \"aria-live\": assertive ? \"assertive\" : \"polite\"\n      })]\n    })]\n  });\n}\n// This only extracts text content from the node including all its children which is enough for now.\n// To make it more powerful, it is possible to create a more sophisticated extractor with respect to\n// ARIA properties to ignore aria-hidden nodes and read ARIA labels from the live content.\nfunction extractInnerText(node) {\n  return (node.innerText || \"\").replace(/\\s+/g, \" \").trim();\n}","map":{"version":3,"names":["memo","useEffect","useRef","ScreenreaderOnly","LiveRegion","assertive","delay","visible","children","restProps","sourceRef","targetRef","updateLiveRegion","current","sourceContent","extractInnerText","targetContent","innerText","timeoutId","setTimeout","clearTimeout","_jsxs","_Fragment","_jsx","ref","className","node","replace","trim"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/internal/live-region/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { memo, useEffect, useRef } from \"react\";\n\nimport ScreenreaderOnly, { ScreenreaderOnlyProps } from \"../screenreader-only\";\n\n// The code is copied from https://github.com/cloudscape-design/components/blob/main/src/internal/components/live-region/index.tsx\n\nexport interface LiveRegionProps extends ScreenreaderOnlyProps {\n  assertive?: boolean;\n  delay?: number;\n  visible?: boolean;\n  children: React.ReactNode;\n}\n\n/**\n * The live region is hidden in the layout, but visible for screen readers.\n * It's purpose it to announce changes e.g. when custom navigation logic is used.\n *\n * The way live region works differently in different browsers and screen readers and\n * it is recommended to manually test every new implementation.\n *\n * If you notice there are different words being merged together,\n * check if there are text nodes not being wrapped in elements, like:\n * <LiveRegion>\n *   {title}\n *   <span><Details /></span>\n * </LiveRegion>\n *\n * To fix, wrap \"title\" in an element:\n * <LiveRegion>\n *   <span>{title}</span>\n *   <span><Details /></span>\n * </LiveRegion>\n *\n * Or create a single text node if possible:\n * <LiveRegion>\n *   {`${title} ${details}`}\n * </LiveRegion>\n *\n * The live region is always atomic, because non-atomic regions can be treated by screen readers\n * differently and produce unexpected results. To imitate non-atomic announcements simply use\n * multiple live regions:\n * <>\n *   <LiveRegion>{title}</LiveRegion>\n *   <LiveRegion><Details /></LiveRegion>\n * </>\n */\nexport default memo(LiveRegion);\n\nfunction LiveRegion({ assertive = false, delay = 10, visible = false, children, ...restProps }: LiveRegionProps) {\n  const sourceRef = useRef<HTMLSpanElement>(null);\n  const targetRef = useRef<HTMLSpanElement>(null);\n\n  /*\n    When React state changes, React often produces too many DOM updates, causing NVDA to\n    issue many announcements for the same logical event (See https://github.com/nvaccess/nvda/issues/7996).\n    The code below imitates a debouncing, scheduling a callback every time new React state\n    update is detected. When a callback resolves, it copies content from a muted element\n    to the live region, which is recognized by screen readers as an update.\n    If the use case requires no announcement to be ignored, use delay = 0, but ensure it\n    does not impact the performance. If it does, prefer using a string as children prop.\n  */\n  useEffect(() => {\n    function updateLiveRegion() {\n      if (targetRef.current && sourceRef.current) {\n        const sourceContent = extractInnerText(sourceRef.current);\n        const targetContent = extractInnerText(targetRef.current);\n        if (targetContent !== sourceContent) {\n          // The aria-atomic does not work properly in Voice Over, causing\n          // certain parts of the content to be ignored. To fix that,\n          // we assign the source text content as a single node.\n          targetRef.current.innerText = sourceContent;\n        }\n      }\n    }\n\n    let timeoutId: null | ReturnType<typeof setTimeout>;\n    if (delay) {\n      timeoutId = setTimeout(updateLiveRegion, delay);\n    } else {\n      updateLiveRegion();\n    }\n\n    return () => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n    };\n  });\n\n  return (\n    <>\n      {visible && <span ref={sourceRef}>{children}</span>}\n\n      <ScreenreaderOnly {...restProps} className={restProps.className}>\n        {!visible && (\n          <span ref={sourceRef} aria-hidden=\"true\">\n            {children}\n          </span>\n        )}\n\n        <span ref={targetRef} aria-atomic=\"true\" aria-live={assertive ? \"assertive\" : \"polite\"}></span>\n      </ScreenreaderOnly>\n    </>\n  );\n}\n\n// This only extracts text content from the node including all its children which is enough for now.\n// To make it more powerful, it is possible to create a more sophisticated extractor with respect to\n// ARIA properties to ignore aria-hidden nodes and read ARIA labels from the live content.\nfunction extractInnerText(node: HTMLElement) {\n  return (node.innerText || \"\").replace(/\\s+/g, \" \").trim();\n}\n"],"mappings":";AAAA;AACA;AAEA,SAASA,IAAI,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAE/C,OAAOC,gBAA2C,MAAM,sBAAsB;AAW9E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,eAAeH,IAAI,CAACI,UAAU,CAAC;AAE/B,SAASA,UAAUA,CAAC;EAAEC,SAAS,GAAG,KAAK;EAAEC,KAAK,GAAG,EAAE;EAAEC,OAAO,GAAG,KAAK;EAAEC,QAAQ;EAAE,GAAGC;AAAS,CAAmB;EAC7G,MAAMC,SAAS,GAAGR,MAAM,CAAkB,IAAI,CAAC;EAC/C,MAAMS,SAAS,GAAGT,MAAM,CAAkB,IAAI,CAAC;EAE/C;;;;;;;;;EASAD,SAAS,CAAC,MAAK;IACb,SAASW,gBAAgBA,CAAA;MACvB,IAAID,SAAS,CAACE,OAAO,IAAIH,SAAS,CAACG,OAAO,EAAE;QAC1C,MAAMC,aAAa,GAAGC,gBAAgB,CAACL,SAAS,CAACG,OAAO,CAAC;QACzD,MAAMG,aAAa,GAAGD,gBAAgB,CAACJ,SAAS,CAACE,OAAO,CAAC;QACzD,IAAIG,aAAa,KAAKF,aAAa,EAAE;UACnC;UACA;UACA;UACAH,SAAS,CAACE,OAAO,CAACI,SAAS,GAAGH,aAAa;;;IAGjD;IAEA,IAAII,SAA+C;IACnD,IAAIZ,KAAK,EAAE;MACTY,SAAS,GAAGC,UAAU,CAACP,gBAAgB,EAAEN,KAAK,CAAC;KAChD,MAAM;MACLM,gBAAgB,EAAE;;IAGpB,OAAO,MAAK;MACV,IAAIM,SAAS,EAAE;QACbE,YAAY,CAACF,SAAS,CAAC;;IAE3B,CAAC;EACH,CAAC,CAAC;EAEF,OACEG,KAAA,CAAAC,SAAA;IAAAd,QAAA,GACGD,OAAO,IAAIgB,IAAA;MAAMC,GAAG,EAAEd,SAAS;MAAAF,QAAA,EAAGA;IAAQ,EAAQ,EAEnDa,KAAA,CAAClB,gBAAgB;MAAA,GAAKM,SAAS;MAAEgB,SAAS,EAAEhB,SAAS,CAACgB,SAAS;MAAAjB,QAAA,GAC5D,CAACD,OAAO,IACPgB,IAAA;QAAMC,GAAG,EAAEd,SAAS;QAAA,eAAc,MAAM;QAAAF,QAAA,EACrCA;MAAQ,EAEZ,EAEDe,IAAA;QAAMC,GAAG,EAAEb,SAAS;QAAA,eAAc,MAAM;QAAA,aAAYN,SAAS,GAAG,WAAW,GAAG;MAAQ,EAAS;IAAA,EAC9E;EAAA,EAClB;AAEP;AAEA;AACA;AACA;AACA,SAASU,gBAAgBA,CAACW,IAAiB;EACzC,OAAO,CAACA,IAAI,CAACT,SAAS,IAAI,EAAE,EAAEU,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAACC,IAAI,EAAE;AAC3D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}