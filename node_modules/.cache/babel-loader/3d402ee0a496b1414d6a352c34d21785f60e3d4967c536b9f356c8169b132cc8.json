{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport { getAnalyticsMetadataAttribute } from '@cloudscape-design/component-toolkit/internal/analytics-metadata';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport { getExternalProps } from '../internal/utils/external-props';\nimport InternalSelect from './internal';\nimport analyticsSelectors from '../internal/components/button-trigger/analytics-metadata/styles.css.js';\nconst Select = React.forwardRef((_a, ref) => {\n  var {\n      options = [],\n      filteringType = 'none',\n      statusType = 'finished',\n      triggerVariant = 'label'\n    } = _a,\n    restProps = __rest(_a, [\"options\", \"filteringType\", \"statusType\", \"triggerVariant\"]);\n  const baseComponentProps = useBaseComponent('Select', {\n    props: {\n      autoFocus: restProps.autoFocus,\n      expandToViewport: restProps.expandToViewport,\n      filteringType,\n      triggerVariant,\n      virtualScroll: restProps.virtualScroll,\n      readOnly: restProps.readOnly\n    },\n    metadata: {\n      hasInlineLabel: Boolean(restProps.inlineLabelText)\n    }\n  });\n  const externalProps = getExternalProps(restProps);\n  const componentAnalyticsMetadata = {\n    name: 'awsui.Select',\n    label: `.${analyticsSelectors['button-trigger']}`,\n    properties: {\n      disabled: `${!!externalProps.disabled}`\n    }\n  };\n  return React.createElement(InternalSelect, Object.assign({\n    options: options,\n    filteringType: filteringType,\n    statusType: statusType,\n    triggerVariant: triggerVariant\n  }, externalProps, baseComponentProps, {\n    ref: ref\n  }, getAnalyticsMetadataAttribute({\n    component: componentAnalyticsMetadata\n  })));\n});\napplyDisplayName(Select, 'Select');\nexport default Select;","map":{"version":3,"names":["React","getAnalyticsMetadataAttribute","useBaseComponent","applyDisplayName","getExternalProps","InternalSelect","analyticsSelectors","Select","forwardRef","_a","ref","options","filteringType","statusType","triggerVariant","restProps","__rest","baseComponentProps","props","autoFocus","expandToViewport","virtualScroll","readOnly","metadata","hasInlineLabel","Boolean","inlineLabelText","externalProps","componentAnalyticsMetadata","name","label","properties","disabled","createElement","Object","assign","component"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/select/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\n\nimport { getAnalyticsMetadataAttribute } from '@cloudscape-design/component-toolkit/internal/analytics-metadata';\n\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport { getExternalProps } from '../internal/utils/external-props';\nimport { GeneratedAnalyticsMetadataSelectComponent } from './analytics-metadata/interfaces';\nimport { SelectProps } from './interfaces';\nimport InternalSelect from './internal';\n\nexport { SelectProps };\n\nimport analyticsSelectors from '../internal/components/button-trigger/analytics-metadata/styles.css.js';\n\nconst Select = React.forwardRef(\n  (\n    {\n      options = [],\n      filteringType = 'none',\n      statusType = 'finished',\n      triggerVariant = 'label',\n      ...restProps\n    }: SelectProps,\n    ref: React.Ref<SelectProps.Ref>\n  ) => {\n    const baseComponentProps = useBaseComponent('Select', {\n      props: {\n        autoFocus: restProps.autoFocus,\n        expandToViewport: restProps.expandToViewport,\n        filteringType,\n        triggerVariant,\n        virtualScroll: restProps.virtualScroll,\n        readOnly: restProps.readOnly,\n      },\n      metadata: {\n        hasInlineLabel: Boolean(restProps.inlineLabelText),\n      },\n    });\n    const externalProps = getExternalProps(restProps);\n\n    const componentAnalyticsMetadata: GeneratedAnalyticsMetadataSelectComponent = {\n      name: 'awsui.Select',\n      label: `.${analyticsSelectors['button-trigger']}`,\n      properties: {\n        disabled: `${!!externalProps.disabled}`,\n      },\n    };\n\n    return (\n      <InternalSelect\n        options={options}\n        filteringType={filteringType}\n        statusType={statusType}\n        triggerVariant={triggerVariant}\n        {...externalProps}\n        {...baseComponentProps}\n        ref={ref}\n        {...getAnalyticsMetadataAttribute({ component: componentAnalyticsMetadata })}\n      />\n    );\n  }\n);\n\napplyDisplayName(Select, 'Select');\nexport default Select;\n"],"mappings":";AAAA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,6BAA6B,QAAQ,kEAAkE;AAEhH,OAAOC,gBAAgB,MAAM,sCAAsC;AACnE,SAASC,gBAAgB,QAAQ,sCAAsC;AACvE,SAASC,gBAAgB,QAAQ,kCAAkC;AAGnE,OAAOC,cAAc,MAAM,YAAY;AAIvC,OAAOC,kBAAkB,MAAM,wEAAwE;AAEvG,MAAMC,MAAM,GAAGP,KAAK,CAACQ,UAAU,CAC7B,CACEC,EAMc,EACdC,GAA+B,KAC7B;MARF;MACEC,OAAO,GAAG,EAAE;MACZC,aAAa,GAAG,MAAM;MACtBC,UAAU,GAAG,UAAU;MACvBC,cAAc,GAAG;IAAO,IAAAL,EAEZ;IADTM,SAAS,GAAAC,MAAA,CAAAP,EAAA,EALd,4DAMC,CADa;EAId,MAAMQ,kBAAkB,GAAGf,gBAAgB,CAAC,QAAQ,EAAE;IACpDgB,KAAK,EAAE;MACLC,SAAS,EAAEJ,SAAS,CAACI,SAAS;MAC9BC,gBAAgB,EAAEL,SAAS,CAACK,gBAAgB;MAC5CR,aAAa;MACbE,cAAc;MACdO,aAAa,EAAEN,SAAS,CAACM,aAAa;MACtCC,QAAQ,EAAEP,SAAS,CAACO;KACrB;IACDC,QAAQ,EAAE;MACRC,cAAc,EAAEC,OAAO,CAACV,SAAS,CAACW,eAAe;;GAEpD,CAAC;EACF,MAAMC,aAAa,GAAGvB,gBAAgB,CAACW,SAAS,CAAC;EAEjD,MAAMa,0BAA0B,GAA8C;IAC5EC,IAAI,EAAE,cAAc;IACpBC,KAAK,EAAE,IAAIxB,kBAAkB,CAAC,gBAAgB,CAAC,EAAE;IACjDyB,UAAU,EAAE;MACVC,QAAQ,EAAE,GAAG,CAAC,CAACL,aAAa,CAACK,QAAQ;;GAExC;EAED,OACEhC,KAAA,CAAAiC,aAAA,CAAC5B,cAAc,EAAA6B,MAAA,CAAAC,MAAA;IACbxB,OAAO,EAAEA,OAAO;IAChBC,aAAa,EAAEA,aAAa;IAC5BC,UAAU,EAAEA,UAAU;IACtBC,cAAc,EAAEA;EAAc,GAC1Ba,aAAa,EACbV,kBAAkB;IACtBP,GAAG,EAAEA;EAAG,GACJT,6BAA6B,CAAC;IAAEmC,SAAS,EAAER;EAA0B,CAAE,CAAC,EAC5E;AAEN,CAAC,CACF;AAEDzB,gBAAgB,CAACI,MAAM,EAAE,QAAQ,CAAC;AAClC,eAAeA,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}