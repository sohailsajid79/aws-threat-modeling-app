{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo } from 'react';\nimport clsx from 'clsx';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport BarSeries from './bar-series';\nimport LineSeries from './line-series';\nimport { calculateStackedBarValues } from './utils';\nimport styles from './styles.css.js';\n// Should have the same value as the `border-line-chart-width` token.\nconst STROKE_WIDTH = 2;\nexport default function DataSeries({\n  axis,\n  plotHeight,\n  plotWidth,\n  highlightedGroupIndex,\n  highlightedSeries,\n  stackedBars,\n  isGroupNavigation,\n  visibleSeries,\n  xScale,\n  yScale,\n  isRtl\n}) {\n  const chartAreaClipPath = useUniqueId('awsui-mixed-line-bar-chart__chart-area-');\n  // Lines get a small extra space at the top and bottom to account for the strokes when they are at the edge of the graph.\n  const lineAreaClipPath = useUniqueId('awsui-line-chart__chart-area-');\n  const stackedBarValues = useMemo(() => {\n    if (!stackedBars) {\n      return undefined;\n    }\n    const barData = [];\n    visibleSeries.forEach(({\n      series\n    }) => {\n      if (series.type === 'bar') {\n        barData.push(series.data);\n      } else {\n        barData.push([]);\n      }\n    });\n    return calculateStackedBarValues(barData);\n  }, [visibleSeries, stackedBars]);\n  return React.createElement(React.Fragment, null, React.createElement(\"defs\", {\n    \"aria-hidden\": \"true\"\n  }, React.createElement(\"clipPath\", {\n    id: chartAreaClipPath\n  }, React.createElement(\"rect\", {\n    x: 0,\n    y: 0,\n    width: plotWidth,\n    height: plotHeight\n  })), React.createElement(\"clipPath\", {\n    id: lineAreaClipPath\n  }, React.createElement(\"rect\", {\n    x: 0,\n    y: -STROKE_WIDTH / 2,\n    width: plotWidth,\n    height: plotHeight + STROKE_WIDTH\n  }))), React.createElement(\"g\", {\n    \"aria-hidden\": isGroupNavigation ? true : undefined,\n    role: \"group\"\n  }, visibleSeries.map(({\n    series,\n    color\n  }, index) => {\n    const isHighlighted = series === highlightedSeries;\n    const isDimmed = !!highlightedSeries && !isHighlighted;\n    switch (series.type) {\n      case 'line':\n      case 'threshold':\n        {\n          return React.createElement(\"g\", {\n            key: index,\n            role: \"group\",\n            \"aria-label\": series.title,\n            className: clsx(styles.series, styles[`series--${series.type}`], {\n              [styles['series--highlighted']]: isHighlighted,\n              [styles['series--dimmed']]: isDimmed\n            })\n          }, React.createElement(LineSeries, {\n            axis: axis,\n            series: series,\n            color: color,\n            xScale: xScale,\n            yScale: yScale,\n            chartAreaClipPath: lineAreaClipPath\n          }));\n        }\n      case 'bar':\n        return React.createElement(BarSeries, {\n          key: index,\n          axis: axis,\n          series: series,\n          color: color,\n          totalSeriesCount: visibleSeries.filter(s => s.series.type === 'bar').length,\n          seriesIndex: index,\n          xScale: xScale,\n          yScale: yScale,\n          plotSize: axis === 'y' ? plotWidth : plotHeight,\n          highlighted: isHighlighted,\n          dimmed: isDimmed,\n          chartAreaClipPath: chartAreaClipPath,\n          stackedBarValues: stackedBarValues,\n          highlightedGroupIndex: highlightedGroupIndex,\n          isRtl: isRtl\n        });\n    }\n  })));\n}","map":{"version":3,"names":["React","useMemo","clsx","useUniqueId","BarSeries","LineSeries","calculateStackedBarValues","styles","STROKE_WIDTH","DataSeries","axis","plotHeight","plotWidth","highlightedGroupIndex","highlightedSeries","stackedBars","isGroupNavigation","visibleSeries","xScale","yScale","isRtl","chartAreaClipPath","lineAreaClipPath","stackedBarValues","undefined","barData","forEach","series","type","push","data","createElement","Fragment","id","x","y","width","height","role","map","color","index","isHighlighted","isDimmed","key","title","className","totalSeriesCount","filter","s","length","seriesIndex","plotSize","highlighted","dimmed"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/mixed-line-bar-chart/data-series.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo } from 'react';\nimport clsx from 'clsx';\n\nimport { ChartScale, NumericChartScale } from '../internal/components/cartesian-chart/scales';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport BarSeries from './bar-series';\nimport { ChartDataTypes, InternalChartSeries, MixedLineBarChartProps } from './interfaces';\nimport LineSeries from './line-series';\nimport { calculateStackedBarValues } from './utils';\n\nimport styles from './styles.css.js';\n\n// Should have the same value as the `border-line-chart-width` token.\nconst STROKE_WIDTH = 2;\n\nexport interface DataSeriesProps<T> {\n  axis: 'x' | 'y';\n\n  plotHeight: number;\n  plotWidth: number;\n\n  highlightedSeries: MixedLineBarChartProps.ChartSeries<T> | null;\n  highlightedGroupIndex: number | null;\n\n  stackedBars: boolean;\n  isGroupNavigation: boolean;\n\n  visibleSeries: ReadonlyArray<InternalChartSeries<T>>;\n  xScale: ChartScale;\n  yScale: NumericChartScale;\n  isRtl?: boolean;\n}\n\nexport default function DataSeries<T extends ChartDataTypes>({\n  axis,\n  plotHeight,\n  plotWidth,\n  highlightedGroupIndex,\n  highlightedSeries,\n  stackedBars,\n  isGroupNavigation,\n  visibleSeries,\n  xScale,\n  yScale,\n  isRtl,\n}: DataSeriesProps<T>) {\n  const chartAreaClipPath = useUniqueId('awsui-mixed-line-bar-chart__chart-area-');\n\n  // Lines get a small extra space at the top and bottom to account for the strokes when they are at the edge of the graph.\n  const lineAreaClipPath = useUniqueId('awsui-line-chart__chart-area-');\n\n  const stackedBarValues = useMemo(() => {\n    if (!stackedBars) {\n      return undefined;\n    }\n    const barData: Array<readonly MixedLineBarChartProps.Datum<ChartDataTypes>[]> = [];\n    visibleSeries.forEach(({ series }) => {\n      if (series.type === 'bar') {\n        barData.push(series.data);\n      } else {\n        barData.push([]);\n      }\n    });\n    return calculateStackedBarValues(barData);\n  }, [visibleSeries, stackedBars]);\n\n  return (\n    <>\n      <defs aria-hidden=\"true\">\n        <clipPath id={chartAreaClipPath}>\n          <rect x={0} y={0} width={plotWidth} height={plotHeight} />\n        </clipPath>\n        <clipPath id={lineAreaClipPath}>\n          <rect x={0} y={-STROKE_WIDTH / 2} width={plotWidth} height={plotHeight + STROKE_WIDTH} />\n        </clipPath>\n      </defs>\n      <g aria-hidden={isGroupNavigation ? true : undefined} role=\"group\">\n        {visibleSeries.map(({ series, color }, index) => {\n          const isHighlighted = series === highlightedSeries;\n          const isDimmed = !!highlightedSeries && !isHighlighted;\n\n          switch (series.type) {\n            case 'line':\n            case 'threshold': {\n              return (\n                <g\n                  key={index}\n                  role=\"group\"\n                  aria-label={series.title}\n                  className={clsx(styles.series, styles[`series--${series.type}`], {\n                    [styles['series--highlighted']]: isHighlighted,\n                    [styles['series--dimmed']]: isDimmed,\n                  })}\n                >\n                  <LineSeries\n                    axis={axis}\n                    series={series}\n                    color={color}\n                    xScale={xScale}\n                    yScale={yScale}\n                    chartAreaClipPath={lineAreaClipPath}\n                  />\n                </g>\n              );\n            }\n\n            case 'bar':\n              return (\n                <BarSeries\n                  key={index}\n                  axis={axis}\n                  series={series}\n                  color={color}\n                  totalSeriesCount={visibleSeries.filter(s => s.series.type === 'bar').length}\n                  seriesIndex={index}\n                  xScale={xScale}\n                  yScale={yScale}\n                  plotSize={axis === 'y' ? plotWidth : plotHeight}\n                  highlighted={isHighlighted}\n                  dimmed={isDimmed}\n                  chartAreaClipPath={chartAreaClipPath}\n                  stackedBarValues={stackedBarValues}\n                  highlightedGroupIndex={highlightedGroupIndex}\n                  isRtl={isRtl}\n                />\n              );\n          }\n        })}\n      </g>\n    </>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}