{"ast":null,"code":"var _jsxFileName = \"/Users/sohailsajid/Desktop/threat-modeling-app/src/components/assumptions/AssumptionList/index.tsx\",\n  _s = $RefreshSig$();\n/** *******************************************************************************************************************\n  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\").\n  You may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n ******************************************************************************************************************** */\n\nimport Button from '@cloudscape-design/components/button';\nimport Container from '@cloudscape-design/components/container';\nimport Grid from '@cloudscape-design/components/grid';\nimport Header from '@cloudscape-design/components/header';\nimport SpaceBetween from '@cloudscape-design/components/space-between';\nimport TextFilter from '@cloudscape-design/components/text-filter';\nimport { useCallback, useMemo, useState } from 'react';\nimport { useAssumptionLinksContext } from '../../../contexts';\nimport { useAssumptionsContext } from '../../../contexts/AssumptionsContext/context';\nimport { addTagToEntity, removeTagFromEntity } from '../../../utils/entityTag';\nimport LinkedEntityFilter, { ALL, WITHOUT_NO_LINKED_ENTITY, WITH_LINKED_ENTITY } from '../../generic/LinkedEntityFilter';\nimport TagSelector from '../../generic/TagSelector';\nimport AssumptionCard from '../AssumptionCard';\nimport AssumptionCreationCard from '../AssumptionCreationCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AssumptionList = () => {\n  _s();\n  const {\n    assumptionList,\n    removeAssumption,\n    saveAssumption\n  } = useAssumptionsContext();\n  const {\n    assumptionLinkList,\n    addAssumptionLinks,\n    removeAssumptionLinksByAssumptionId\n  } = useAssumptionLinksContext();\n  const [filteringText, setFilteringText] = useState('');\n  const [selectedTags, setSelectedTags] = useState([]);\n  const [selectedLinkedThreatsFilter, setSelectedLinkedThreatsFilter] = useState(ALL);\n  const [selectedLinkedControlFilter, setSelectedLinkedControlFilter] = useState(ALL);\n  const [selectedLinkedMitigationFilter, setSelectedLinkedMitigationFilter] = useState(ALL);\n  const handleAddTagToEntity = useCallback((assumption, tag) => {\n    const updated = addTagToEntity(assumption, tag);\n    saveAssumption(updated);\n  }, [saveAssumption]);\n  const handleRemoveTagFromEntity = useCallback((assumption, tag) => {\n    const updated = removeTagFromEntity(assumption, tag);\n    saveAssumption(updated);\n  }, [saveAssumption]);\n  const handleRemove = useCallback(async assumptionId => {\n    removeAssumption(assumptionId);\n    await removeAssumptionLinksByAssumptionId(assumptionId);\n  }, [removeAssumption, removeAssumptionLinksByAssumptionId]);\n  const filteredList = useMemo(() => {\n    let output = assumptionList;\n    if (filteringText) {\n      output = output.filter(st => st.content && st.content.toLowerCase().indexOf(filteringText.toLowerCase()) >= 0);\n    }\n    if (selectedTags && selectedTags.length > 0) {\n      output = output.filter(st => {\n        var _st$tags;\n        return (_st$tags = st.tags) === null || _st$tags === void 0 ? void 0 : _st$tags.some(t => selectedTags.includes(t));\n      });\n    }\n    if (selectedLinkedThreatsFilter !== ALL) {\n      output = output.filter(st => {\n        return assumptionLinkList.some(al => al.assumptionId === st.id && al.type === 'Threat') ? selectedLinkedThreatsFilter === WITH_LINKED_ENTITY : selectedLinkedThreatsFilter === WITHOUT_NO_LINKED_ENTITY;\n      });\n    }\n    if (selectedLinkedMitigationFilter !== ALL) {\n      output = output.filter(st => {\n        return assumptionLinkList.some(al => al.assumptionId === st.id && al.type === 'Mitigation') ? selectedLinkedMitigationFilter === WITH_LINKED_ENTITY : selectedLinkedMitigationFilter === WITHOUT_NO_LINKED_ENTITY;\n      });\n    }\n    if (selectedLinkedControlFilter !== ALL) {\n      output = output.filter(st => {\n        return assumptionLinkList.some(al => al.assumptionId === st.id && al.type === 'Control') ? selectedLinkedControlFilter === WITH_LINKED_ENTITY : selectedLinkedControlFilter === WITHOUT_NO_LINKED_ENTITY;\n      });\n    }\n    output = output.sort((op1, op2) => (op2.displayOrder || Number.MAX_VALUE) - (op1.displayOrder || Number.MAX_VALUE));\n    return output;\n  }, [filteringText, assumptionList, selectedTags, assumptionLinkList, selectedLinkedMitigationFilter, selectedLinkedControlFilter, selectedLinkedThreatsFilter]);\n  const hasNoFilter = useMemo(() => {\n    return filteringText === '' && selectedLinkedMitigationFilter === ALL && selectedLinkedControlFilter === ALL && selectedLinkedThreatsFilter === ALL && selectedTags.length === 0;\n  }, [filteringText, selectedTags, selectedLinkedThreatsFilter, selectedLinkedControlFilter, selectedLinkedMitigationFilter]);\n  const allTags = useMemo(() => {\n    return assumptionList.reduce((all, cur) => {\n      var _cur$tags;\n      return [...all, ...(((_cur$tags = cur.tags) === null || _cur$tags === void 0 ? void 0 : _cur$tags.filter(ia => !all.includes(ia))) || [])];\n    }, []);\n  }, [assumptionList]);\n  const handleClearFilter = useCallback(() => {\n    setFilteringText('');\n    setSelectedTags([]);\n    setSelectedLinkedMitigationFilter(ALL);\n    setSelectedLinkedControlFilter(ALL);\n    setSelectedLinkedThreatsFilter(ALL);\n  }, []);\n  const handleSaveNew = useCallback((assumption, linkedMitigationIds, linkedThreatIds) => {\n    const updated = saveAssumption(assumption);\n    const assumptionLinks = [];\n    linkedMitigationIds.forEach(id => {\n      assumptionLinks.push({\n        linkedId: id,\n        assumptionId: updated.id,\n        type: 'Mitigation'\n      });\n    });\n    linkedThreatIds.forEach(id => {\n      assumptionLinks.push({\n        linkedId: id,\n        assumptionId: updated.id,\n        type: 'Threat'\n      });\n    });\n    addAssumptionLinks(assumptionLinks);\n  }, [saveAssumption, addAssumptionLinks]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(SpaceBetween, {\n      direction: \"vertical\",\n      size: \"s\",\n      children: [/*#__PURE__*/_jsxDEV(Container, {\n        header: /*#__PURE__*/_jsxDEV(Header, {\n          counter: `(${filteredList.length})`,\n          children: \"Assumption List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 9\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(SpaceBetween, {\n          direction: \"vertical\",\n          size: \"s\",\n          children: [/*#__PURE__*/_jsxDEV(TextFilter, {\n            filteringText: filteringText,\n            filteringPlaceholder: \"Find assumptions\",\n            filteringAriaLabel: \"Filter assumptions\",\n            onChange: ({\n              detail\n            }) => setFilteringText(detail.filteringText)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            gridDefinition: [{\n              colspan: {\n                default: 12,\n                xs: 2\n              }\n            }, {\n              colspan: {\n                default: 12,\n                xs: 3\n              }\n            }, {\n              colspan: {\n                default: 12,\n                xs: 3\n              }\n            }, {\n              colspan: {\n                default: 12,\n                xs: 3\n              }\n            }, {\n              colspan: {\n                default: 1\n              }\n            }],\n            children: [/*#__PURE__*/_jsxDEV(TagSelector, {\n              allTags: allTags,\n              selectedTags: selectedTags,\n              setSelectedTags: setSelectedTags\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(LinkedEntityFilter, {\n              label: \"Linked threats\",\n              entityDisplayName: \"threats\",\n              callerName: \"assumptions\",\n              selected: selectedLinkedThreatsFilter,\n              setSelected: setSelectedLinkedThreatsFilter\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(LinkedEntityFilter, {\n              label: \"Linked controls\",\n              entityDisplayName: \"controls\",\n              callerName: \"assumptions\",\n              selected: selectedLinkedControlFilter,\n              setSelected: setSelectedLinkedControlFilter\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(LinkedEntityFilter, {\n              label: \"Linked mitigations\",\n              entityDisplayName: \"mitigations\",\n              callerName: \"assumptions\",\n              selected: selectedLinkedMitigationFilter,\n              setSelected: setSelectedLinkedMitigationFilter\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: handleClearFilter,\n              variant: \"icon\",\n              iconSvg: /*#__PURE__*/_jsxDEV(\"svg\", {\n                focusable: \"false\",\n                \"aria-hidden\": \"true\",\n                viewBox: \"0 0 24 24\",\n                tabIndex: -1,\n                children: /*#__PURE__*/_jsxDEV(\"path\", {\n                  d: \"M19.79 5.61C20.3 4.95 19.83 4 19 4H6.83l7.97 7.97 4.99-6.36zM2.81 2.81 1.39 4.22 10 13v6c0 .55.45 1 1 1h2c.55 0 1-.45 1-1v-2.17l5.78 5.78 1.41-1.41L2.81 2.81z\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 234,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 228,\n                columnNumber: 24\n              }, this),\n              ariaLabel: \"Clear filters\",\n              disabled: hasNoFilter\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 7\n      }, this), filteredList === null || filteredList === void 0 ? void 0 : filteredList.map(entity => /*#__PURE__*/_jsxDEV(AssumptionCard, {\n        assumption: entity,\n        onRemove: handleRemove,\n        onEdit: saveAssumption,\n        onAddTagToAssumption: handleAddTagToEntity,\n        onRemoveTagFromAssumption: handleRemoveTagFromEntity\n      }, entity.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 37\n      }, this)), /*#__PURE__*/_jsxDEV(AssumptionCreationCard, {\n        onSave: handleSaveNew\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 11\n  }, this);\n};\n_s(AssumptionList, \"LJI3lm3EhmAje0+jOu0BfxQba3I=\", false, function () {\n  return [useAssumptionsContext, useAssumptionLinksContext];\n});\n_c = AssumptionList;\nexport default AssumptionList;\nvar _c;\n$RefreshReg$(_c, \"AssumptionList\");","map":{"version":3,"names":["Button","Container","Grid","Header","SpaceBetween","TextFilter","useCallback","useMemo","useState","useAssumptionLinksContext","useAssumptionsContext","addTagToEntity","removeTagFromEntity","LinkedEntityFilter","ALL","WITHOUT_NO_LINKED_ENTITY","WITH_LINKED_ENTITY","TagSelector","AssumptionCard","AssumptionCreationCard","jsxDEV","_jsxDEV","AssumptionList","_s","assumptionList","removeAssumption","saveAssumption","assumptionLinkList","addAssumptionLinks","removeAssumptionLinksByAssumptionId","filteringText","setFilteringText","selectedTags","setSelectedTags","selectedLinkedThreatsFilter","setSelectedLinkedThreatsFilter","selectedLinkedControlFilter","setSelectedLinkedControlFilter","selectedLinkedMitigationFilter","setSelectedLinkedMitigationFilter","handleAddTagToEntity","assumption","tag","updated","handleRemoveTagFromEntity","handleRemove","assumptionId","filteredList","output","filter","st","content","toLowerCase","indexOf","length","_st$tags","tags","some","t","includes","al","id","type","sort","op1","op2","displayOrder","Number","MAX_VALUE","hasNoFilter","allTags","reduce","all","cur","_cur$tags","ia","handleClearFilter","handleSaveNew","linkedMitigationIds","linkedThreatIds","assumptionLinks","forEach","push","linkedId","children","direction","size","header","counter","fileName","_jsxFileName","lineNumber","columnNumber","filteringPlaceholder","filteringAriaLabel","onChange","detail","gridDefinition","colspan","default","xs","label","entityDisplayName","callerName","selected","setSelected","onClick","variant","iconSvg","focusable","viewBox","tabIndex","d","ariaLabel","disabled","map","entity","onRemove","onEdit","onAddTagToAssumption","onRemoveTagFromAssumption","onSave","_c","$RefreshReg$"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/src/components/assumptions/AssumptionList/index.tsx"],"sourcesContent":["/** *******************************************************************************************************************\n  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\").\n  You may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n ******************************************************************************************************************** */\n\nimport Button from '@cloudscape-design/components/button';\nimport Container from '@cloudscape-design/components/container';\nimport Grid from '@cloudscape-design/components/grid';\nimport Header from '@cloudscape-design/components/header';\nimport SpaceBetween from '@cloudscape-design/components/space-between';\nimport TextFilter from '@cloudscape-design/components/text-filter';\nimport { FC, useCallback, useMemo, useState } from 'react';\nimport { useAssumptionLinksContext } from '../../../contexts';\nimport { useAssumptionsContext } from '../../../contexts/AssumptionsContext/context';\nimport { Assumption, AssumptionLink } from '../../../customTypes';\nimport { addTagToEntity, removeTagFromEntity } from '../../../utils/entityTag';\nimport LinkedEntityFilter, { ALL, WITHOUT_NO_LINKED_ENTITY, WITH_LINKED_ENTITY } from '../../generic/LinkedEntityFilter';\nimport TagSelector from '../../generic/TagSelector';\nimport AssumptionCard from '../AssumptionCard';\nimport AssumptionCreationCard from '../AssumptionCreationCard';\n\nconst AssumptionList: FC = () => {\n  const {\n    assumptionList,\n    removeAssumption,\n    saveAssumption,\n  } = useAssumptionsContext();\n\n  const {\n    assumptionLinkList,\n    addAssumptionLinks,\n    removeAssumptionLinksByAssumptionId,\n  } = useAssumptionLinksContext();\n\n  const [filteringText, setFilteringText] = useState('');\n\n  const [\n    selectedTags,\n    setSelectedTags,\n  ] = useState<string[]>([]);\n\n  const [\n    selectedLinkedThreatsFilter,\n    setSelectedLinkedThreatsFilter,\n  ] = useState(ALL);\n\n  const [\n    selectedLinkedControlFilter,\n    setSelectedLinkedControlFilter,\n  ] = useState(ALL);\n\n  const [\n    selectedLinkedMitigationFilter,\n    setSelectedLinkedMitigationFilter,\n  ] = useState(ALL);\n\n  const handleAddTagToEntity = useCallback((assumption: Assumption, tag: string) => {\n    const updated = addTagToEntity(assumption, tag);\n    saveAssumption(updated as Assumption);\n  }, [saveAssumption]);\n\n  const handleRemoveTagFromEntity = useCallback((assumption: Assumption, tag: string) => {\n    const updated = removeTagFromEntity(assumption, tag);\n    saveAssumption(updated as Assumption);\n  }, [saveAssumption]);\n\n  const handleRemove = useCallback(async (assumptionId: string) => {\n    removeAssumption(assumptionId);\n    await removeAssumptionLinksByAssumptionId(assumptionId);\n  }, [removeAssumption, removeAssumptionLinksByAssumptionId]);\n\n  const filteredList = useMemo(() => {\n    let output = assumptionList;\n\n    if (filteringText) {\n      output = output.filter(st => st.content && st.content.toLowerCase().indexOf(filteringText.toLowerCase()) >= 0);\n    }\n\n    if (selectedTags && selectedTags.length > 0) {\n      output = output.filter(st => {\n        return st.tags?.some(t => selectedTags.includes(t));\n      });\n    }\n\n    if (selectedLinkedThreatsFilter !== ALL) {\n      output = output.filter(st => {\n        return assumptionLinkList.some(al => al.assumptionId === st.id && al.type === 'Threat') ?\n          selectedLinkedThreatsFilter === WITH_LINKED_ENTITY :\n          selectedLinkedThreatsFilter === WITHOUT_NO_LINKED_ENTITY;\n      });\n    }\n\n    if (selectedLinkedMitigationFilter !== ALL) {\n      output = output.filter(st => {\n        return assumptionLinkList.some(al => al.assumptionId === st.id && al.type === 'Mitigation') ?\n          selectedLinkedMitigationFilter === WITH_LINKED_ENTITY :\n          selectedLinkedMitigationFilter === WITHOUT_NO_LINKED_ENTITY;\n      });\n    }\n\n    if (selectedLinkedControlFilter !== ALL) {\n      output = output.filter(st => {\n        return assumptionLinkList.some(al => al.assumptionId === st.id && al.type === 'Control') ?\n          selectedLinkedControlFilter === WITH_LINKED_ENTITY :\n          selectedLinkedControlFilter === WITHOUT_NO_LINKED_ENTITY;\n      });\n    }\n\n    output = output.sort((op1, op2) => (op2.displayOrder || Number.MAX_VALUE) - (op1.displayOrder || Number.MAX_VALUE));\n\n    return output;\n  }, [filteringText, assumptionList, selectedTags,\n    assumptionLinkList,\n    selectedLinkedMitigationFilter, selectedLinkedControlFilter, selectedLinkedThreatsFilter]);\n\n  const hasNoFilter = useMemo(() => {\n    return (filteringText === ''\n      && selectedLinkedMitigationFilter === ALL\n      && selectedLinkedControlFilter === ALL\n      && selectedLinkedThreatsFilter === ALL\n      && selectedTags.length === 0);\n  }, [filteringText, selectedTags, selectedLinkedThreatsFilter, selectedLinkedControlFilter, selectedLinkedMitigationFilter]);\n\n  const allTags = useMemo(() => {\n    return assumptionList\n      .reduce((all: string[], cur) => {\n        return [...all, ...cur.tags?.filter(ia => !all.includes(ia)) || []];\n      }, []);\n  }, [assumptionList]);\n\n  const handleClearFilter = useCallback(() => {\n    setFilteringText('');\n    setSelectedTags([]);\n    setSelectedLinkedMitigationFilter(ALL);\n    setSelectedLinkedControlFilter(ALL);\n    setSelectedLinkedThreatsFilter(ALL);\n  }, []);\n\n  const handleSaveNew = useCallback((assumption: Assumption,\n    linkedMitigationIds: string[],\n    linkedThreatIds: string[]) => {\n    const updated = saveAssumption(assumption);\n\n    const assumptionLinks: AssumptionLink[] = [];\n\n    linkedMitigationIds.forEach(id => {\n      assumptionLinks.push({\n        linkedId: id,\n        assumptionId: updated.id,\n        type: 'Mitigation',\n      });\n    });\n\n    linkedThreatIds.forEach(id => {\n      assumptionLinks.push({\n        linkedId: id,\n        assumptionId: updated.id,\n        type: 'Threat',\n      });\n    });\n\n    addAssumptionLinks(assumptionLinks);\n\n  }, [saveAssumption, addAssumptionLinks]);\n\n  return (<div>\n    <SpaceBetween direction='vertical' size='s'>\n      <Container header={\n        <Header counter={`(${filteredList.length})`}>Assumption List</Header>\n      }>\n        <SpaceBetween direction='vertical' size='s'>\n          <TextFilter\n            filteringText={filteringText}\n            filteringPlaceholder=\"Find assumptions\"\n            filteringAriaLabel=\"Filter assumptions\"\n            onChange={({ detail }) =>\n              setFilteringText(detail.filteringText)\n            }\n          />\n          <Grid\n            gridDefinition={[\n              { colspan: { default: 12, xs: 2 } },\n              { colspan: { default: 12, xs: 3 } },\n              { colspan: { default: 12, xs: 3 } },\n              { colspan: { default: 12, xs: 3 } },\n              { colspan: { default: 1 } },\n            ]}\n          >\n            <TagSelector\n              allTags={allTags}\n              selectedTags={selectedTags}\n              setSelectedTags={setSelectedTags}\n            />\n            <LinkedEntityFilter\n              label='Linked threats'\n              entityDisplayName='threats'\n              callerName='assumptions'\n              selected={selectedLinkedThreatsFilter}\n              setSelected={setSelectedLinkedThreatsFilter}\n            />\n            <LinkedEntityFilter\n              label='Linked controls'\n              entityDisplayName='controls'\n              callerName='assumptions'\n              selected={selectedLinkedControlFilter}\n              setSelected={setSelectedLinkedControlFilter}\n            />\n            <LinkedEntityFilter\n              label='Linked mitigations'\n              entityDisplayName='mitigations'\n              callerName='assumptions'\n              selected={selectedLinkedMitigationFilter}\n              setSelected={setSelectedLinkedMitigationFilter}\n            />\n            <Button onClick={handleClearFilter}\n              variant='icon'\n              iconSvg={<svg\n                focusable=\"false\"\n                aria-hidden=\"true\"\n                viewBox=\"0 0 24 24\"\n                tabIndex={-1}\n              >\n                <path d=\"M19.79 5.61C20.3 4.95 19.83 4 19 4H6.83l7.97 7.97 4.99-6.36zM2.81 2.81 1.39 4.22 10 13v6c0 .55.45 1 1 1h2c.55 0 1-.45 1-1v-2.17l5.78 5.78 1.41-1.41L2.81 2.81z\"></path>\n              </svg>}\n              ariaLabel='Clear filters'\n              disabled={hasNoFilter}\n            />\n          </Grid>\n        </SpaceBetween>\n      </Container>\n      {filteredList?.map(entity => (<AssumptionCard\n        key={entity.id}\n        assumption={entity}\n        onRemove={handleRemove}\n        onEdit={saveAssumption}\n        onAddTagToAssumption={handleAddTagToEntity}\n        onRemoveTagFromAssumption={handleRemoveTagFromEntity}\n      />))}\n      <AssumptionCreationCard\n        onSave={handleSaveNew}\n      />\n    </SpaceBetween>\n  </div>);\n};\n\nexport default AssumptionList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}