{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { formatTimeOffsetLocalized } from './format-time-offset';\nexport default function formatDateLocalized({\n  date: isoDate,\n  hideTimeOffset,\n  isDateOnly,\n  timeOffset,\n  locale\n}) {\n  const date = new Date(isoDate);\n  const formattedDate = new Intl.DateTimeFormat(locale, {\n    day: 'numeric',\n    month: 'long',\n    year: 'numeric'\n  }).format(date);\n  if (isDateOnly) {\n    return formattedDate;\n  }\n  const formattedTime = new Intl.DateTimeFormat(locale, {\n    hour: '2-digit',\n    hourCycle: 'h23',\n    minute: '2-digit',\n    second: '2-digit'\n  }).format(date);\n  const formattedDateTime = formattedDate + getDateTimeSeparator(locale) + formattedTime;\n  if (hideTimeOffset) {\n    return formattedDateTime;\n  }\n  const formattedTimeOffset = formatTimeOffsetLocalized(isoDate, timeOffset);\n  return formattedDateTime + ' ' + formattedTimeOffset;\n}\n// Languages in which date and time are separated just with a space, without comma\nconst languagesWithoutDateTimeSeparator = ['ja', 'zh-CN', 'zh-TW'];\nfunction getDateTimeSeparator(locale) {\n  return locale && languagesWithoutDateTimeSeparator.includes(locale) ? ' ' : ', ';\n}","map":{"version":3,"names":["formatTimeOffsetLocalized","formatDateLocalized","date","isoDate","hideTimeOffset","isDateOnly","timeOffset","locale","Date","formattedDate","Intl","DateTimeFormat","day","month","year","format","formattedTime","hour","hourCycle","minute","second","formattedDateTime","getDateTimeSeparator","formattedTimeOffset","languagesWithoutDateTimeSeparator","includes"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/internal/utils/date-time/format-date-localized.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { formatTimeOffsetLocalized } from './format-time-offset';\n\nexport default function formatDateLocalized({\n  date: isoDate,\n  hideTimeOffset,\n  isDateOnly,\n  timeOffset,\n  locale,\n}: {\n  date: string;\n  hideTimeOffset?: boolean;\n  isDateOnly: boolean;\n  timeOffset?: number;\n  locale?: string;\n}) {\n  const date = new Date(isoDate);\n\n  const formattedDate = new Intl.DateTimeFormat(locale, {\n    day: 'numeric',\n    month: 'long',\n    year: 'numeric',\n  }).format(date);\n\n  if (isDateOnly) {\n    return formattedDate;\n  }\n\n  const formattedTime = new Intl.DateTimeFormat(locale, {\n    hour: '2-digit',\n    hourCycle: 'h23',\n    minute: '2-digit',\n    second: '2-digit',\n  }).format(date);\n\n  const formattedDateTime = formattedDate + getDateTimeSeparator(locale) + formattedTime;\n\n  if (hideTimeOffset) {\n    return formattedDateTime;\n  }\n\n  const formattedTimeOffset = formatTimeOffsetLocalized(isoDate, timeOffset);\n  return formattedDateTime + ' ' + formattedTimeOffset;\n}\n\n// Languages in which date and time are separated just with a space, without comma\nconst languagesWithoutDateTimeSeparator = ['ja', 'zh-CN', 'zh-TW'];\n\nfunction getDateTimeSeparator(locale?: string) {\n  return locale && languagesWithoutDateTimeSeparator.includes(locale) ? ' ' : ', ';\n}\n"],"mappings":"AAAA;AACA;AAEA,SAASA,yBAAyB,QAAQ,sBAAsB;AAEhE,eAAc,SAAUC,mBAAmBA,CAAC;EAC1CC,IAAI,EAAEC,OAAO;EACbC,cAAc;EACdC,UAAU;EACVC,UAAU;EACVC;AAAM,CAOP;EACC,MAAML,IAAI,GAAG,IAAIM,IAAI,CAACL,OAAO,CAAC;EAE9B,MAAMM,aAAa,GAAG,IAAIC,IAAI,CAACC,cAAc,CAACJ,MAAM,EAAE;IACpDK,GAAG,EAAE,SAAS;IACdC,KAAK,EAAE,MAAM;IACbC,IAAI,EAAE;GACP,CAAC,CAACC,MAAM,CAACb,IAAI,CAAC;EAEf,IAAIG,UAAU,EAAE;IACd,OAAOI,aAAa;;EAGtB,MAAMO,aAAa,GAAG,IAAIN,IAAI,CAACC,cAAc,CAACJ,MAAM,EAAE;IACpDU,IAAI,EAAE,SAAS;IACfC,SAAS,EAAE,KAAK;IAChBC,MAAM,EAAE,SAAS;IACjBC,MAAM,EAAE;GACT,CAAC,CAACL,MAAM,CAACb,IAAI,CAAC;EAEf,MAAMmB,iBAAiB,GAAGZ,aAAa,GAAGa,oBAAoB,CAACf,MAAM,CAAC,GAAGS,aAAa;EAEtF,IAAIZ,cAAc,EAAE;IAClB,OAAOiB,iBAAiB;;EAG1B,MAAME,mBAAmB,GAAGvB,yBAAyB,CAACG,OAAO,EAAEG,UAAU,CAAC;EAC1E,OAAOe,iBAAiB,GAAG,GAAG,GAAGE,mBAAmB;AACtD;AAEA;AACA,MAAMC,iCAAiC,GAAG,CAAC,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC;AAElE,SAASF,oBAAoBA,CAACf,MAAe;EAC3C,OAAOA,MAAM,IAAIiB,iCAAiC,CAACC,QAAQ,CAAClB,MAAM,CAAC,GAAG,GAAG,GAAG,IAAI;AAClF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}