{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useState } from 'react';\nimport clsx from 'clsx';\nimport InternalButton from '../button/internal';\nimport { getBaseProps } from '../internal/base-component';\nimport InternalPopover from '../popover/internal';\nimport InternalStatusIndicator from '../status-indicator/internal';\nimport styles from './styles.css.js';\nimport testStyles from './test-classes/styles.css.js';\nexport default function InternalCopyToClipboard(_a) {\n  var {\n      variant = 'button',\n      copyButtonAriaLabel,\n      copyButtonText,\n      copySuccessText,\n      copyErrorText,\n      textToCopy,\n      popoverRenderWithPortal,\n      __internalRootRef = null\n    } = _a,\n    restProps = __rest(_a, [\"variant\", \"copyButtonAriaLabel\", \"copyButtonText\", \"copySuccessText\", \"copyErrorText\", \"textToCopy\", \"popoverRenderWithPortal\", \"__internalRootRef\"]);\n  const [status, setStatus] = useState('pending');\n  const [statusText, setStatusText] = useState('');\n  const baseProps = getBaseProps(restProps);\n  const onClick = () => {\n    if (!navigator.clipboard) {\n      // The clipboard API is not available in insecure contexts.\n      setStatus('error');\n      setStatusText(copyErrorText);\n      return;\n    }\n    setStatus('pending');\n    setStatusText('');\n    navigator.clipboard.writeText(textToCopy).then(() => {\n      setStatus('success');\n      setStatusText(copySuccessText);\n    }).catch(() => {\n      setStatus('error');\n      setStatusText(copyErrorText);\n    });\n  };\n  const triggerVariant = {\n    button: 'normal',\n    icon: 'icon',\n    inline: 'inline-icon'\n  }[variant];\n  const isInline = variant === 'inline';\n  const trigger = React.createElement(InternalPopover, {\n    className: clsx(isInline && styles['inline-trigger']),\n    size: \"medium\",\n    position: \"top\",\n    triggerType: \"custom\",\n    dismissButton: false,\n    renderWithPortal: popoverRenderWithPortal,\n    content: React.createElement(InternalStatusIndicator, {\n      type: status\n    }, statusText)\n  }, React.createElement(InternalButton, {\n    ariaLabel: copyButtonAriaLabel !== null && copyButtonAriaLabel !== void 0 ? copyButtonAriaLabel : copyButtonText,\n    iconName: \"copy\",\n    onClick: onClick,\n    variant: triggerVariant,\n    wrapText: false,\n    formAction: \"none\"\n  }, copyButtonText));\n  return React.createElement(\"span\", Object.assign({}, baseProps, {\n    ref: __internalRootRef,\n    className: clsx(baseProps.className, styles.root, testStyles.root)\n  }), isInline ? React.createElement(\"span\", {\n    className: styles['inline-container']\n  }, React.createElement(\"span\", {\n    className: styles['inline-container-trigger']\n  }, trigger), React.createElement(\"span\", {\n    className: testStyles['text-to-copy']\n  }, textToCopy)) : trigger);\n}","map":{"version":3,"names":["React","useState","clsx","InternalButton","getBaseProps","InternalPopover","InternalStatusIndicator","styles","testStyles","InternalCopyToClipboard","_a","variant","copyButtonAriaLabel","copyButtonText","copySuccessText","copyErrorText","textToCopy","popoverRenderWithPortal","__internalRootRef","restProps","__rest","status","setStatus","statusText","setStatusText","baseProps","onClick","navigator","clipboard","writeText","then","catch","triggerVariant","button","icon","inline","isInline","trigger","createElement","className","size","position","triggerType","dismissButton","renderWithPortal","content","type","ariaLabel","iconName","wrapText","formAction","Object","assign","ref","root"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/copy-to-clipboard/internal.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useState } from 'react';\nimport clsx from 'clsx';\n\nimport InternalButton from '../button/internal';\nimport { getBaseProps } from '../internal/base-component';\nimport { InternalBaseComponentProps } from '../internal/hooks/use-base-component';\nimport InternalPopover from '../popover/internal';\nimport InternalStatusIndicator from '../status-indicator/internal';\nimport { CopyToClipboardProps } from './interfaces';\n\nimport styles from './styles.css.js';\nimport testStyles from './test-classes/styles.css.js';\n\nexport interface InternalCopyToClipboardProps extends CopyToClipboardProps, InternalBaseComponentProps {}\n\nexport default function InternalCopyToClipboard({\n  variant = 'button',\n  copyButtonAriaLabel,\n  copyButtonText,\n  copySuccessText,\n  copyErrorText,\n  textToCopy,\n  popoverRenderWithPortal,\n  __internalRootRef = null,\n  ...restProps\n}: InternalCopyToClipboardProps) {\n  const [status, setStatus] = useState<'pending' | 'success' | 'error'>('pending');\n  const [statusText, setStatusText] = useState('');\n\n  const baseProps = getBaseProps(restProps);\n  const onClick = () => {\n    if (!navigator.clipboard) {\n      // The clipboard API is not available in insecure contexts.\n      setStatus('error');\n      setStatusText(copyErrorText);\n      return;\n    }\n\n    setStatus('pending');\n    setStatusText('');\n    navigator.clipboard\n      .writeText(textToCopy)\n      .then(() => {\n        setStatus('success');\n        setStatusText(copySuccessText);\n      })\n      .catch(() => {\n        setStatus('error');\n        setStatusText(copyErrorText);\n      });\n  };\n\n  const triggerVariant = (\n    {\n      button: 'normal',\n      icon: 'icon',\n      inline: 'inline-icon',\n    } as const\n  )[variant];\n\n  const isInline = variant === 'inline';\n  const trigger = (\n    <InternalPopover\n      className={clsx(isInline && styles['inline-trigger'])}\n      size=\"medium\"\n      position=\"top\"\n      triggerType=\"custom\"\n      dismissButton={false}\n      renderWithPortal={popoverRenderWithPortal}\n      content={<InternalStatusIndicator type={status}>{statusText}</InternalStatusIndicator>}\n    >\n      <InternalButton\n        ariaLabel={copyButtonAriaLabel ?? copyButtonText}\n        iconName=\"copy\"\n        onClick={onClick}\n        variant={triggerVariant}\n        wrapText={false}\n        formAction=\"none\"\n      >\n        {copyButtonText}\n      </InternalButton>\n    </InternalPopover>\n  );\n\n  return (\n    <span {...baseProps} ref={__internalRootRef} className={clsx(baseProps.className, styles.root, testStyles.root)}>\n      {isInline ? (\n        <span className={styles['inline-container']}>\n          <span className={styles['inline-container-trigger']}>{trigger}</span>\n          <span className={testStyles['text-to-copy']}>{textToCopy}</span>\n        </span>\n      ) : (\n        trigger\n      )}\n    </span>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}