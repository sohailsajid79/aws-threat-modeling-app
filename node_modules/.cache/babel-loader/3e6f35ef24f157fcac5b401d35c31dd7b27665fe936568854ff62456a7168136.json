{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { useStableCallback } from '@cloudscape-design/component-toolkit/internal';\nimport { getIsRtl, getLogicalBoundingClientRect, getLogicalPageX } from '@cloudscape-design/component-toolkit/internal';\nimport { useSingleTabStopNavigation } from '../../internal/context/single-tab-stop-navigation-context.js';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport { KeyCode } from '../../internal/keycode';\nimport handleKey, { isEventLike } from '../../internal/utils/handle-key';\nimport { DEFAULT_COLUMN_WIDTH } from '../use-column-widths';\nimport { getHeaderWidth, getResizerElements } from './resizer-lookup';\nimport styles from './styles.css.js';\nconst AUTO_GROW_START_TIME = 10;\nconst AUTO_GROW_INTERVAL = 10;\nconst AUTO_GROW_INCREMENT = 5;\nexport function Divider({\n  className\n}) {\n  return React.createElement(\"span\", {\n    className: clsx(styles.divider, styles['divider-disabled'], className)\n  });\n}\nexport function Resizer({\n  onWidthUpdate,\n  onWidthUpdateCommit,\n  ariaLabelledby,\n  minWidth = DEFAULT_COLUMN_WIDTH,\n  tabIndex,\n  showFocusRing,\n  focusId,\n  roleDescription\n}) {\n  onWidthUpdate = useStableCallback(onWidthUpdate);\n  onWidthUpdateCommit = useStableCallback(onWidthUpdateCommit);\n  const separatorId = useUniqueId();\n  const resizerToggleRef = useRef(null);\n  const resizerSeparatorRef = useRef(null);\n  const [isDragging, setIsDragging] = useState(false);\n  const [isKeyboardDragging, setIsKeyboardDragging] = useState(false);\n  const autoGrowTimeout = useRef();\n  const [resizerHasFocus, setResizerHasFocus] = useState(false);\n  const [headerCellWidth, setHeaderCellWidth] = useState(0);\n  // Read header width after mounting for it to be available in the element's ARIA label before it gets focused.\n  useEffect(() => {\n    setHeaderCellWidth(getHeaderWidth(resizerToggleRef.current));\n  }, []);\n  useEffect(() => {\n    var _a, _b;\n    const elements = getResizerElements(resizerToggleRef.current);\n    const document = (_b = (_a = resizerToggleRef.current) === null || _a === void 0 ? void 0 : _a.ownerDocument) !== null && _b !== void 0 ? _b : window.document;\n    if (!isDragging && !resizerHasFocus || !elements) {\n      return;\n    }\n    const {\n      insetInlineStart: inlineStartEdge,\n      insetInlineEnd: inlineEndEdge\n    } = getLogicalBoundingClientRect(elements.scrollParent);\n    const updateTrackerPosition = newOffset => {\n      const {\n        insetInlineStart: scrollParentInsetInlineStart\n      } = getLogicalBoundingClientRect(elements.table);\n      elements.tracker.style.insetBlockStart = getLogicalBoundingClientRect(elements.header).blockSize + 'px';\n      // minus one pixel to offset the cell border\n      elements.tracker.style.insetInlineStart = newOffset - scrollParentInsetInlineStart - 1 + 'px';\n    };\n    const updateColumnWidth = newWidth => {\n      const {\n        insetInlineEnd,\n        inlineSize\n      } = getLogicalBoundingClientRect(elements.header);\n      const updatedWidth = newWidth < minWidth ? minWidth : newWidth;\n      updateTrackerPosition(insetInlineEnd + updatedWidth - inlineSize);\n      if (newWidth >= minWidth) {\n        setHeaderCellWidth(newWidth);\n      }\n      // callbacks must be the last calls in the handler, because they may cause an extra update\n      onWidthUpdate(newWidth);\n    };\n    const resizeColumn = offset => {\n      if (offset > inlineStartEdge) {\n        const cellLeft = getLogicalBoundingClientRect(elements.header).insetInlineStart;\n        const newWidth = offset - cellLeft;\n        // callbacks must be the last calls in the handler, because they may cause an extra update\n        updateColumnWidth(newWidth);\n      }\n    };\n    const onAutoGrow = () => {\n      const inlineSize = getLogicalBoundingClientRect(elements.header).inlineSize;\n      autoGrowTimeout.current = setTimeout(onAutoGrow, AUTO_GROW_INTERVAL);\n      // callbacks must be the last calls in the handler, because they may cause an extra update\n      updateColumnWidth(inlineSize + AUTO_GROW_INCREMENT);\n      elements.scrollParent.scrollLeft += AUTO_GROW_INCREMENT * (getIsRtl(elements.scrollParent) ? -1 : 1);\n    };\n    const onMouseMove = event => {\n      clearTimeout(autoGrowTimeout.current);\n      const offset = getLogicalPageX(event);\n      if (offset > inlineEndEdge) {\n        autoGrowTimeout.current = setTimeout(onAutoGrow, AUTO_GROW_START_TIME);\n      } else {\n        resizeColumn(offset);\n      }\n    };\n    const onMouseUp = event => {\n      resizeColumn(getLogicalPageX(event));\n      setIsDragging(false);\n      onWidthUpdateCommit();\n      clearTimeout(autoGrowTimeout.current);\n    };\n    const onKeyDown = event => {\n      if (isKeyboardDragging) {\n        const keys = [KeyCode.left, KeyCode.right, KeyCode.enter, KeyCode.right, KeyCode.space, KeyCode.escape];\n        if (keys.indexOf(event.keyCode) !== -1) {\n          event.preventDefault();\n          isEventLike(event) && handleKey(event, {\n            onActivate: () => {\n              var _a;\n              setIsKeyboardDragging(false);\n              (_a = resizerToggleRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n            },\n            onEscape: () => {\n              var _a;\n              setIsKeyboardDragging(false);\n              (_a = resizerToggleRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n            },\n            onInlineStart: () => updateColumnWidth(getLogicalBoundingClientRect(elements.header).inlineSize - 10),\n            onInlineEnd: () => updateColumnWidth(getLogicalBoundingClientRect(elements.header).inlineSize + 10)\n          });\n        }\n      }\n      // Enter keyboard dragging mode\n      else if (event.keyCode === KeyCode.enter || event.keyCode === KeyCode.space) {\n        event.preventDefault();\n        isEventLike(event) && handleKey(event, {\n          onActivate: () => {\n            var _a;\n            setIsKeyboardDragging(true);\n            (_a = resizerSeparatorRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n          }\n        });\n      }\n    };\n    updateTrackerPosition(getLogicalBoundingClientRect(elements.header).insetInlineEnd);\n    if (isDragging) {\n      document.body.classList.add(styles['resize-active']);\n      document.addEventListener('mousemove', onMouseMove);\n      document.addEventListener('mouseup', onMouseUp);\n    }\n    if (resizerHasFocus) {\n      document.body.classList.add(styles['resize-active-with-focus']);\n      elements.header.addEventListener('keydown', onKeyDown);\n    }\n    if (isKeyboardDragging) {\n      document.body.classList.add(styles['resize-active']);\n    }\n    return () => {\n      clearTimeout(autoGrowTimeout.current);\n      document.body.classList.remove(styles['resize-active']);\n      document.body.classList.remove(styles['resize-active-with-focus']);\n      document.removeEventListener('mousemove', onMouseMove);\n      document.removeEventListener('mouseup', onMouseUp);\n      elements.header.removeEventListener('keydown', onKeyDown);\n    };\n  }, [minWidth, isDragging, isKeyboardDragging, resizerHasFocus, onWidthUpdate, onWidthUpdateCommit]);\n  const {\n    tabIndex: resizerTabIndex\n  } = useSingleTabStopNavigation(resizerToggleRef, {\n    tabIndex\n  });\n  return React.createElement(React.Fragment, null, React.createElement(\"button\", {\n    ref: resizerToggleRef,\n    className: clsx(styles.resizer, (resizerHasFocus || showFocusRing || isKeyboardDragging) && styles['has-focus']),\n    onMouseDown: event => {\n      if (event.button !== 0) {\n        return;\n      }\n      event.preventDefault();\n      setIsDragging(true);\n    },\n    onClick: () => {\n      var _a;\n      // Prevent mouse drag activation and activate keyboard dragging for VO+Space click.\n      setIsDragging(false);\n      setResizerHasFocus(true);\n      setIsKeyboardDragging(true);\n      (_a = resizerSeparatorRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    },\n    onFocus: () => {\n      setHeaderCellWidth(getHeaderWidth(resizerToggleRef.current));\n      setResizerHasFocus(true);\n    },\n    onBlur: event => {\n      // Ignoring blur event when focus moves to the resizer separator element.\n      // (This focus transition is done programmatically when the resizer button is clicked).\n      if (event.relatedTarget !== resizerSeparatorRef.current) {\n        setResizerHasFocus(false);\n      }\n    },\n    \"aria-roledescription\": roleDescription,\n    \"aria-labelledby\": ariaLabelledby,\n    tabIndex: resizerTabIndex,\n    \"data-focus-id\": focusId\n  }), React.createElement(\"span\", {\n    className: clsx(styles.divider, isDragging && styles['divider-active']),\n    \"data-awsui-table-suppress-navigation\": true,\n    ref: resizerSeparatorRef,\n    id: separatorId,\n    role: \"separator\",\n    tabIndex: -1,\n    \"aria-hidden\": !isKeyboardDragging,\n    \"aria-orientation\": \"vertical\",\n    \"aria-valuenow\": headerCellWidth,\n    \"aria-valuetext\": headerCellWidth.toFixed(0),\n    \"aria-valuemin\": minWidth,\n    \"data-focus-id\": focusId,\n    onBlur: () => {\n      setResizerHasFocus(false);\n      if (isKeyboardDragging) {\n        setIsKeyboardDragging(false);\n      }\n      onWidthUpdateCommit();\n    }\n  }));\n}\nexport function ResizeTracker() {\n  return React.createElement(\"span\", {\n    className: styles.tracker\n  });\n}","map":{"version":3,"names":["React","useEffect","useRef","useState","clsx","useStableCallback","getIsRtl","getLogicalBoundingClientRect","getLogicalPageX","useSingleTabStopNavigation","useUniqueId","KeyCode","handleKey","isEventLike","DEFAULT_COLUMN_WIDTH","getHeaderWidth","getResizerElements","styles","AUTO_GROW_START_TIME","AUTO_GROW_INTERVAL","AUTO_GROW_INCREMENT","Divider","className","createElement","divider","Resizer","onWidthUpdate","onWidthUpdateCommit","ariaLabelledby","minWidth","tabIndex","showFocusRing","focusId","roleDescription","separatorId","resizerToggleRef","resizerSeparatorRef","isDragging","setIsDragging","isKeyboardDragging","setIsKeyboardDragging","autoGrowTimeout","resizerHasFocus","setResizerHasFocus","headerCellWidth","setHeaderCellWidth","current","elements","document","_b","_a","ownerDocument","window","insetInlineStart","inlineStartEdge","insetInlineEnd","inlineEndEdge","scrollParent","updateTrackerPosition","newOffset","scrollParentInsetInlineStart","table","tracker","style","insetBlockStart","header","blockSize","updateColumnWidth","newWidth","inlineSize","updatedWidth","resizeColumn","offset","cellLeft","onAutoGrow","setTimeout","scrollLeft","onMouseMove","event","clearTimeout","onMouseUp","onKeyDown","keys","left","right","enter","space","escape","indexOf","keyCode","preventDefault","onActivate","focus","onEscape","onInlineStart","onInlineEnd","body","classList","add","addEventListener","remove","removeEventListener","resizerTabIndex","Fragment","ref","resizer","onMouseDown","button","onClick","onFocus","onBlur","relatedTarget","id","role","toFixed","ResizeTracker"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/table/resizer/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef, useState } from 'react';\nimport clsx from 'clsx';\n\nimport { useStableCallback } from '@cloudscape-design/component-toolkit/internal';\nimport { getIsRtl, getLogicalBoundingClientRect, getLogicalPageX } from '@cloudscape-design/component-toolkit/internal';\n\nimport { useSingleTabStopNavigation } from '../../internal/context/single-tab-stop-navigation-context.js';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport { KeyCode } from '../../internal/keycode';\nimport handleKey, { isEventLike } from '../../internal/utils/handle-key';\nimport { DEFAULT_COLUMN_WIDTH } from '../use-column-widths';\nimport { getHeaderWidth, getResizerElements } from './resizer-lookup';\n\nimport styles from './styles.css.js';\n\ninterface ResizerProps {\n  onWidthUpdate: (newWidth: number) => void;\n  onWidthUpdateCommit: () => void;\n  ariaLabelledby?: string;\n  minWidth?: number;\n  tabIndex?: number;\n  focusId?: string;\n  showFocusRing?: boolean;\n  roleDescription?: string;\n}\n\nconst AUTO_GROW_START_TIME = 10;\nconst AUTO_GROW_INTERVAL = 10;\nconst AUTO_GROW_INCREMENT = 5;\n\nexport function Divider({ className }: { className?: string }) {\n  return <span className={clsx(styles.divider, styles['divider-disabled'], className)} />;\n}\n\nexport function Resizer({\n  onWidthUpdate,\n  onWidthUpdateCommit,\n  ariaLabelledby,\n  minWidth = DEFAULT_COLUMN_WIDTH,\n  tabIndex,\n  showFocusRing,\n  focusId,\n  roleDescription,\n}: ResizerProps) {\n  onWidthUpdate = useStableCallback(onWidthUpdate);\n  onWidthUpdateCommit = useStableCallback(onWidthUpdateCommit);\n\n  const separatorId = useUniqueId();\n  const resizerToggleRef = useRef<HTMLButtonElement>(null);\n  const resizerSeparatorRef = useRef<HTMLSpanElement>(null);\n\n  const [isDragging, setIsDragging] = useState(false);\n  const [isKeyboardDragging, setIsKeyboardDragging] = useState(false);\n  const autoGrowTimeout = useRef<ReturnType<typeof setTimeout> | undefined>();\n  const [resizerHasFocus, setResizerHasFocus] = useState(false);\n  const [headerCellWidth, setHeaderCellWidth] = useState(0);\n\n  // Read header width after mounting for it to be available in the element's ARIA label before it gets focused.\n  useEffect(() => {\n    setHeaderCellWidth(getHeaderWidth(resizerToggleRef.current));\n  }, []);\n\n  useEffect(() => {\n    const elements = getResizerElements(resizerToggleRef.current);\n    const document = resizerToggleRef.current?.ownerDocument ?? window.document;\n\n    if ((!isDragging && !resizerHasFocus) || !elements) {\n      return;\n    }\n\n    const { insetInlineStart: inlineStartEdge, insetInlineEnd: inlineEndEdge } = getLogicalBoundingClientRect(\n      elements.scrollParent\n    );\n\n    const updateTrackerPosition = (newOffset: number) => {\n      const { insetInlineStart: scrollParentInsetInlineStart } = getLogicalBoundingClientRect(elements.table);\n      elements.tracker.style.insetBlockStart = getLogicalBoundingClientRect(elements.header).blockSize + 'px';\n      // minus one pixel to offset the cell border\n      elements.tracker.style.insetInlineStart = newOffset - scrollParentInsetInlineStart - 1 + 'px';\n    };\n\n    const updateColumnWidth = (newWidth: number) => {\n      const { insetInlineEnd, inlineSize } = getLogicalBoundingClientRect(elements.header);\n      const updatedWidth = newWidth < minWidth ? minWidth : newWidth;\n      updateTrackerPosition(insetInlineEnd + updatedWidth - inlineSize);\n      if (newWidth >= minWidth) {\n        setHeaderCellWidth(newWidth);\n      }\n      // callbacks must be the last calls in the handler, because they may cause an extra update\n      onWidthUpdate(newWidth);\n    };\n\n    const resizeColumn = (offset: number) => {\n      if (offset > inlineStartEdge) {\n        const cellLeft = getLogicalBoundingClientRect(elements.header).insetInlineStart;\n        const newWidth = offset - cellLeft;\n        // callbacks must be the last calls in the handler, because they may cause an extra update\n        updateColumnWidth(newWidth);\n      }\n    };\n\n    const onAutoGrow = () => {\n      const inlineSize = getLogicalBoundingClientRect(elements.header).inlineSize;\n      autoGrowTimeout.current = setTimeout(onAutoGrow, AUTO_GROW_INTERVAL);\n      // callbacks must be the last calls in the handler, because they may cause an extra update\n      updateColumnWidth(inlineSize + AUTO_GROW_INCREMENT);\n      elements.scrollParent.scrollLeft += AUTO_GROW_INCREMENT * (getIsRtl(elements.scrollParent) ? -1 : 1);\n    };\n\n    const onMouseMove = (event: MouseEvent) => {\n      clearTimeout(autoGrowTimeout.current);\n      const offset = getLogicalPageX(event);\n      if (offset > inlineEndEdge) {\n        autoGrowTimeout.current = setTimeout(onAutoGrow, AUTO_GROW_START_TIME);\n      } else {\n        resizeColumn(offset);\n      }\n    };\n\n    const onMouseUp = (event: MouseEvent) => {\n      resizeColumn(getLogicalPageX(event));\n      setIsDragging(false);\n      onWidthUpdateCommit();\n      clearTimeout(autoGrowTimeout.current);\n    };\n\n    const onKeyDown = (event: KeyboardEvent) => {\n      if (isKeyboardDragging) {\n        const keys = [KeyCode.left, KeyCode.right, KeyCode.enter, KeyCode.right, KeyCode.space, KeyCode.escape];\n\n        if (keys.indexOf(event.keyCode) !== -1) {\n          event.preventDefault();\n\n          isEventLike(event) &&\n            handleKey(event, {\n              onActivate: () => {\n                setIsKeyboardDragging(false);\n                resizerToggleRef.current?.focus();\n              },\n              onEscape: () => {\n                setIsKeyboardDragging(false);\n                resizerToggleRef.current?.focus();\n              },\n              onInlineStart: () => updateColumnWidth(getLogicalBoundingClientRect(elements.header).inlineSize - 10),\n              onInlineEnd: () => updateColumnWidth(getLogicalBoundingClientRect(elements.header).inlineSize + 10),\n            });\n        }\n      }\n      // Enter keyboard dragging mode\n      else if (event.keyCode === KeyCode.enter || event.keyCode === KeyCode.space) {\n        event.preventDefault();\n\n        isEventLike(event) &&\n          handleKey(event, {\n            onActivate: () => {\n              setIsKeyboardDragging(true);\n              resizerSeparatorRef.current?.focus();\n            },\n          });\n      }\n    };\n\n    updateTrackerPosition(getLogicalBoundingClientRect(elements.header).insetInlineEnd);\n\n    if (isDragging) {\n      document.body.classList.add(styles['resize-active']);\n      document.addEventListener('mousemove', onMouseMove);\n      document.addEventListener('mouseup', onMouseUp);\n    }\n    if (resizerHasFocus) {\n      document.body.classList.add(styles['resize-active-with-focus']);\n      elements.header.addEventListener('keydown', onKeyDown);\n    }\n    if (isKeyboardDragging) {\n      document.body.classList.add(styles['resize-active']);\n    }\n\n    return () => {\n      clearTimeout(autoGrowTimeout.current);\n      document.body.classList.remove(styles['resize-active']);\n      document.body.classList.remove(styles['resize-active-with-focus']);\n      document.removeEventListener('mousemove', onMouseMove);\n      document.removeEventListener('mouseup', onMouseUp);\n      elements.header.removeEventListener('keydown', onKeyDown);\n    };\n  }, [minWidth, isDragging, isKeyboardDragging, resizerHasFocus, onWidthUpdate, onWidthUpdateCommit]);\n\n  const { tabIndex: resizerTabIndex } = useSingleTabStopNavigation(resizerToggleRef, { tabIndex });\n\n  return (\n    <>\n      <button\n        ref={resizerToggleRef}\n        className={clsx(\n          styles.resizer,\n          (resizerHasFocus || showFocusRing || isKeyboardDragging) && styles['has-focus']\n        )}\n        onMouseDown={event => {\n          if (event.button !== 0) {\n            return;\n          }\n          event.preventDefault();\n          setIsDragging(true);\n        }}\n        onClick={() => {\n          // Prevent mouse drag activation and activate keyboard dragging for VO+Space click.\n          setIsDragging(false);\n          setResizerHasFocus(true);\n          setIsKeyboardDragging(true);\n          resizerSeparatorRef.current?.focus();\n        }}\n        onFocus={() => {\n          setHeaderCellWidth(getHeaderWidth(resizerToggleRef.current));\n          setResizerHasFocus(true);\n        }}\n        onBlur={event => {\n          // Ignoring blur event when focus moves to the resizer separator element.\n          // (This focus transition is done programmatically when the resizer button is clicked).\n          if (event.relatedTarget !== resizerSeparatorRef.current) {\n            setResizerHasFocus(false);\n          }\n        }}\n        // Using a custom role-description to make the element's purpose better clear.\n        // The role-description must include the word \"button\" to imply the interaction model.\n        // See https://www.w3.org/TR/wai-aria-1.1/#aria-roledescription\n        aria-roledescription={roleDescription}\n        aria-labelledby={ariaLabelledby}\n        tabIndex={resizerTabIndex}\n        data-focus-id={focusId}\n      />\n      <span\n        className={clsx(styles.divider, isDragging && styles['divider-active'])}\n        data-awsui-table-suppress-navigation={true}\n        ref={resizerSeparatorRef}\n        id={separatorId}\n        role=\"separator\"\n        tabIndex={-1}\n        aria-hidden={!isKeyboardDragging}\n        aria-orientation=\"vertical\"\n        aria-valuenow={headerCellWidth}\n        // aria-valuetext is needed because the VO announces \"collapsed\" when only aria-valuenow set without aria-valuemax\n        aria-valuetext={headerCellWidth.toFixed(0)}\n        aria-valuemin={minWidth}\n        data-focus-id={focusId}\n        onBlur={() => {\n          setResizerHasFocus(false);\n          if (isKeyboardDragging) {\n            setIsKeyboardDragging(false);\n          }\n          onWidthUpdateCommit();\n        }}\n      />\n    </>\n  );\n}\n\nexport function ResizeTracker() {\n  return <span className={styles.tracker} />;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}