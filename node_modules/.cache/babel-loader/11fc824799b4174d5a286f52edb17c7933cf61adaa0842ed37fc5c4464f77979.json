{"ast":null,"code":"var _jsxFileName = \"/Users/sohailsajid/Desktop/threat-modeling-app/src/contexts/ControlsContext/components/LocalStorageContextProvider/index.tsx\",\n  _s = $RefreshSig$();\n/** *******************************************************************************************************************\n  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\").\n  You may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n ******************************************************************************************************************** */\n\nimport { useCallback } from 'react';\nimport useLocalStorageState from 'use-local-storage-state';\nimport { LOCAL_STORAGE_KEY_CONTROL_LIST } from '../../../../configs/localStorageKeys';\nimport removeLocalStorageKey from '../../../../utils/removeLocalStorageKey';\nimport { ControlsContext } from '../../context';\nimport useControls from '../../useControls';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getLocalStorageKey = workspaceId => {\n  if (workspaceId) {\n    return `${LOCAL_STORAGE_KEY_CONTROL_LIST}_${workspaceId}`;\n  }\n  return LOCAL_STORAGE_KEY_CONTROL_LIST;\n};\nconst ControlsLocalStorageContextProvider = ({\n  children,\n  workspaceId: currentWorkspaceId\n}) => {\n  _s();\n  const [controlList, setControlList, {\n    removeItem\n  }] = useLocalStorageState(getLocalStorageKey(currentWorkspaceId), {\n    defaultValue: []\n  });\n  const {\n    handlRemoveControl,\n    handleSaveControl\n  } = useControls(controlList, setControlList);\n  const handleRemoveAllControls = useCallback(async () => {\n    removeItem();\n  }, [removeItem]);\n  const handleDeleteWorkspace = useCallback(async workspaceId => {\n    window.setTimeout(() => {\n      // to delete after the workspace is switched. Otherwise the default value is set again.\n      removeLocalStorageKey(getLocalStorageKey(workspaceId));\n    }, 1000);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ControlsContext.Provider, {\n    value: {\n      controlList,\n      setControlList,\n      removeControl: handlRemoveControl,\n      saveControl: handleSaveControl,\n      removeAllControls: handleRemoveAllControls,\n      onDeleteWorkspace: handleDeleteWorkspace\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 11\n  }, this);\n};\n_s(ControlsLocalStorageContextProvider, \"j3SKxS65q0Djuy/yQiUamWZ8XCg=\", false, function () {\n  return [useLocalStorageState, useControls];\n});\n_c = ControlsLocalStorageContextProvider;\nexport default ControlsLocalStorageContextProvider;\nvar _c;\n$RefreshReg$(_c, \"ControlsLocalStorageContextProvider\");","map":{"version":3,"names":["useCallback","useLocalStorageState","LOCAL_STORAGE_KEY_CONTROL_LIST","removeLocalStorageKey","ControlsContext","useControls","jsxDEV","_jsxDEV","getLocalStorageKey","workspaceId","ControlsLocalStorageContextProvider","children","currentWorkspaceId","_s","controlList","setControlList","removeItem","defaultValue","handlRemoveControl","handleSaveControl","handleRemoveAllControls","handleDeleteWorkspace","window","setTimeout","Provider","value","removeControl","saveControl","removeAllControls","onDeleteWorkspace","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/src/contexts/ControlsContext/components/LocalStorageContextProvider/index.tsx"],"sourcesContent":["/** *******************************************************************************************************************\n  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\").\n  You may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n ******************************************************************************************************************** */\n\nimport { FC, PropsWithChildren, useCallback } from 'react';\nimport useLocalStorageState from 'use-local-storage-state';\nimport { LOCAL_STORAGE_KEY_CONTROL_LIST } from '../../../../configs/localStorageKeys';\nimport { Control } from '../../../../customTypes';\nimport removeLocalStorageKey from '../../../../utils/removeLocalStorageKey';\nimport { ControlsContext } from '../../context';\nimport { ControlsContextProviderProps } from '../../types';\nimport useControls from '../../useControls';\n\nconst getLocalStorageKey = (workspaceId: string | null) => {\n  if (workspaceId) {\n    return `${LOCAL_STORAGE_KEY_CONTROL_LIST}_${workspaceId}`;\n  }\n\n  return LOCAL_STORAGE_KEY_CONTROL_LIST;\n};\n\nconst ControlsLocalStorageContextProvider: FC<PropsWithChildren<ControlsContextProviderProps>> = ({\n  children,\n  workspaceId: currentWorkspaceId,\n}) => {\n  const [controlList, setControlList, { removeItem }] = useLocalStorageState<Control[]>(getLocalStorageKey(currentWorkspaceId), {\n    defaultValue: [],\n  });\n\n  const {\n    handlRemoveControl,\n    handleSaveControl,\n  } = useControls(controlList, setControlList);\n\n  const handleRemoveAllControls = useCallback(async () => {\n    removeItem();\n  }, [removeItem]);\n\n  const handleDeleteWorkspace = useCallback(async (workspaceId: string) => {\n    window.setTimeout(() => {\n      // to delete after the workspace is switched. Otherwise the default value is set again.\n      removeLocalStorageKey(getLocalStorageKey(workspaceId));\n    }, 1000);\n  }, []);\n\n  return (<ControlsContext.Provider value={{\n    controlList,\n    setControlList,\n    removeControl: handlRemoveControl,\n    saveControl: handleSaveControl,\n    removeAllControls: handleRemoveAllControls,\n    onDeleteWorkspace: handleDeleteWorkspace,\n  }}>\n    {children}\n  </ControlsContext.Provider>);\n};\n\nexport default ControlsLocalStorageContextProvider;\n\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAgCA,WAAW,QAAQ,OAAO;AAC1D,OAAOC,oBAAoB,MAAM,yBAAyB;AAC1D,SAASC,8BAA8B,QAAQ,sCAAsC;AAErF,OAAOC,qBAAqB,MAAM,yCAAyC;AAC3E,SAASC,eAAe,QAAQ,eAAe;AAE/C,OAAOC,WAAW,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,kBAAkB,GAAIC,WAA0B,IAAK;EACzD,IAAIA,WAAW,EAAE;IACf,OAAO,GAAGP,8BAA8B,IAAIO,WAAW,EAAE;EAC3D;EAEA,OAAOP,8BAA8B;AACvC,CAAC;AAED,MAAMQ,mCAAwF,GAAGA,CAAC;EAChGC,QAAQ;EACRF,WAAW,EAAEG;AACf,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAM,CAACC,WAAW,EAAEC,cAAc,EAAE;IAAEC;EAAW,CAAC,CAAC,GAAGf,oBAAoB,CAAYO,kBAAkB,CAACI,kBAAkB,CAAC,EAAE;IAC5HK,YAAY,EAAE;EAChB,CAAC,CAAC;EAEF,MAAM;IACJC,kBAAkB;IAClBC;EACF,CAAC,GAAGd,WAAW,CAACS,WAAW,EAAEC,cAAc,CAAC;EAE5C,MAAMK,uBAAuB,GAAGpB,WAAW,CAAC,YAAY;IACtDgB,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,CAACA,UAAU,CAAC,CAAC;EAEhB,MAAMK,qBAAqB,GAAGrB,WAAW,CAAC,MAAOS,WAAmB,IAAK;IACvEa,MAAM,CAACC,UAAU,CAAC,MAAM;MACtB;MACApB,qBAAqB,CAACK,kBAAkB,CAACC,WAAW,CAAC,CAAC;IACxD,CAAC,EAAE,IAAI,CAAC;EACV,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAQF,OAAA,CAACH,eAAe,CAACoB,QAAQ;IAACC,KAAK,EAAE;MACvCX,WAAW;MACXC,cAAc;MACdW,aAAa,EAAER,kBAAkB;MACjCS,WAAW,EAAER,iBAAiB;MAC9BS,iBAAiB,EAAER,uBAAuB;MAC1CS,iBAAiB,EAAER;IACrB,CAAE;IAAAV,QAAA,EACCA;EAAQ;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAC7B,CAAC;AAACpB,EAAA,CAlCIH,mCAAwF;EAAA,QAItCT,oBAAoB,EAOtEI,WAAW;AAAA;AAAA6B,EAAA,GAXXxB,mCAAwF;AAoC9F,eAAeA,mCAAmC;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}