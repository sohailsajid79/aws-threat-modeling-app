{"ast":null,"code":"import { getLimitedValue } from '../../../split-panel/utils/size-utils';\nimport { useKeyboardEvents } from '../../utils/use-keyboard-events';\nimport { usePointerEvents } from '../../utils/use-pointer-events';\nexport function useResize(_ref) {\n  let {\n    currentWidth,\n    minWidth,\n    maxWidth,\n    panelRef,\n    handleRef,\n    onResize\n  } = _ref;\n  const onResizeHandler = newWidth => {\n    const size = getLimitedValue(minWidth, newWidth, maxWidth);\n    if (maxWidth >= minWidth) {\n      onResize(size);\n    }\n  };\n  const sizeControlProps = {\n    position: 'side',\n    panelRef,\n    handleRef,\n    onResize: onResizeHandler,\n    hasTransitions: true\n  };\n  const clampedWidth = getLimitedValue(minWidth, currentWidth, maxWidth);\n  const relativeSize = (clampedWidth - minWidth) / (maxWidth - minWidth) * 100;\n  const onPointerDown = usePointerEvents(sizeControlProps);\n  const onKeyDown = useKeyboardEvents(sizeControlProps);\n  return {\n    onKeyDown,\n    onPointerDown,\n    relativeSize\n  };\n}","map":{"version":3,"names":["getLimitedValue","useKeyboardEvents","usePointerEvents","useResize","_ref","currentWidth","minWidth","maxWidth","panelRef","handleRef","onResize","onResizeHandler","newWidth","size","sizeControlProps","position","hasTransitions","clampedWidth","relativeSize","onPointerDown","onKeyDown"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/app-layout/visual-refresh-toolbar/drawer/use-resize.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\n\nimport { getLimitedValue } from '../../../split-panel/utils/size-utils';\nimport { SizeControlProps } from '../../utils/interfaces';\nimport { useKeyboardEvents } from '../../utils/use-keyboard-events';\nimport { usePointerEvents } from '../../utils/use-pointer-events';\n\ninterface ResizeProps {\n  currentWidth: number;\n  minWidth: number;\n  maxWidth: number;\n  panelRef: React.RefObject<HTMLDivElement>;\n  handleRef: React.RefObject<HTMLDivElement>;\n  onResize: (newWidth: number) => void;\n}\n\nexport function useResize({ currentWidth, minWidth, maxWidth, panelRef, handleRef, onResize }: ResizeProps) {\n  const onResizeHandler = (newWidth: number) => {\n    const size = getLimitedValue(minWidth, newWidth, maxWidth);\n\n    if (maxWidth >= minWidth) {\n      onResize(size);\n    }\n  };\n\n  const sizeControlProps: SizeControlProps = {\n    position: 'side',\n    panelRef,\n    handleRef,\n    onResize: onResizeHandler,\n    hasTransitions: true,\n  };\n\n  const clampedWidth = getLimitedValue(minWidth, currentWidth, maxWidth);\n  const relativeSize = ((clampedWidth - minWidth) / (maxWidth - minWidth)) * 100;\n\n  const onPointerDown = usePointerEvents(sizeControlProps);\n  const onKeyDown = useKeyboardEvents(sizeControlProps);\n\n  return { onKeyDown, onPointerDown, relativeSize };\n}\n"],"mappings":"AAIA,SAASA,eAAe,QAAQ,uCAAuC;AAEvE,SAASC,iBAAiB,QAAQ,iCAAiC;AACnE,SAASC,gBAAgB,QAAQ,gCAAgC;AAWjE,OAAM,SAAUC,SAASA,CAAAC,IAAA,EAAiF;EAAA,IAAhF;IAAEC,YAAY;IAAEC,QAAQ;IAAEC,QAAQ;IAAEC,QAAQ;IAAEC,SAAS;IAAEC;EAAQ,CAAe,GAAAN,IAAA;EACxG,MAAMO,eAAe,GAAIC,QAAgB,IAAI;IAC3C,MAAMC,IAAI,GAAGb,eAAe,CAACM,QAAQ,EAAEM,QAAQ,EAAEL,QAAQ,CAAC;IAE1D,IAAIA,QAAQ,IAAID,QAAQ,EAAE;MACxBI,QAAQ,CAACG,IAAI,CAAC;;EAElB,CAAC;EAED,MAAMC,gBAAgB,GAAqB;IACzCC,QAAQ,EAAE,MAAM;IAChBP,QAAQ;IACRC,SAAS;IACTC,QAAQ,EAAEC,eAAe;IACzBK,cAAc,EAAE;GACjB;EAED,MAAMC,YAAY,GAAGjB,eAAe,CAACM,QAAQ,EAAED,YAAY,EAAEE,QAAQ,CAAC;EACtE,MAAMW,YAAY,GAAI,CAACD,YAAY,GAAGX,QAAQ,KAAKC,QAAQ,GAAGD,QAAQ,CAAC,GAAI,GAAG;EAE9E,MAAMa,aAAa,GAAGjB,gBAAgB,CAACY,gBAAgB,CAAC;EACxD,MAAMM,SAAS,GAAGnB,iBAAiB,CAACa,gBAAgB,CAAC;EAErD,OAAO;IAAEM,SAAS;IAAED,aAAa;IAAED;EAAY,CAAE;AACnD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}