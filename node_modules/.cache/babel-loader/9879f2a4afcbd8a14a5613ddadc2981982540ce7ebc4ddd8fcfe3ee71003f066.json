{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n/** *******************************************************************************************************************\n  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n  \n  Licensed under the Apache License, Version 2.0 (the \"License\").\n  You may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n  \n      http://www.apache.org/licenses/LICENSE-2.0\n  \n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.                                                                              *\n ******************************************************************************************************************** */\nimport { memo, useMemo } from 'react';\nimport AttributeEditor from '@cloudscape-design/components/attribute-editor';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { FieldArray as FieldArrayBase } from '@data-driven-forms/react-form-renderer';\nimport withDataDrivenFormField from '../../hoc/withDataDrivenFormField';\nconst DEFAULT_ADD_BUTTON_TEXT = 'Add new item';\nconst DEFAULT_REMOVE_BUTTON_TEXT = 'Remove';\nconst FieldArray = _ref => {\n  let {\n    ...props\n  } = _ref;\n  const {\n    renderForm\n  } = useFormApi();\n  const {\n    input,\n    fields,\n    isReadOnly,\n    isDisabled,\n    arrayValidator,\n    maxItems = Number.MAX_SAFE_INTEGER,\n    defaultItem,\n    'data-testid': testId = 'field-array',\n    controlId,\n    showError,\n    ...rest\n  } = props;\n  const definition = useMemo(() => {\n    return fields.map(field => {\n      const {\n        label,\n        name,\n        ...fieldRest\n      } = field;\n      return {\n        label: label,\n        control: (_item, itemIndex) => {\n          return renderForm([{\n            ...fieldRest,\n            isReadOnly,\n            isDisabled,\n            showError,\n            name: `${input.name}[${itemIndex}].${name}`,\n            'data-testid': `${testId}[${itemIndex}].${name}`\n          }]);\n        }\n      };\n    });\n  }, [fields, renderForm, input.name, isReadOnly, isDisabled, testId, showError]);\n  return _jsx(FieldArrayBase, {\n    name: controlId,\n    validate: arrayValidator,\n    children: _ref2 => {\n      let {\n        fields\n      } = _ref2;\n      const {\n        length,\n        push,\n        remove\n      } = fields;\n      return _jsx(AttributeEditor, {\n        addButtonText: DEFAULT_ADD_BUTTON_TEXT,\n        removeButtonText: DEFAULT_REMOVE_BUTTON_TEXT,\n        disableAddButton: isDisabled || isReadOnly || !!length && length >= maxItems,\n        ...rest,\n        ...input,\n        isItemRemovable: () => {\n          return !isDisabled && !isReadOnly;\n        },\n        items: input.value || [],\n        definition: definition,\n        onAddButtonClick: () => push(defaultItem || {}),\n        onRemoveButtonClick: _ref3 => {\n          let {\n            detail: {\n              itemIndex\n            }\n          } = _ref3;\n          return remove(itemIndex);\n        }\n      });\n    }\n  }, controlId);\n};\nexport default memo(withDataDrivenFormField(FieldArray));","map":{"version":3,"names":["jsx","_jsx","memo","useMemo","AttributeEditor","useFormApi","FieldArray","FieldArrayBase","withDataDrivenFormField","DEFAULT_ADD_BUTTON_TEXT","DEFAULT_REMOVE_BUTTON_TEXT","_ref","props","renderForm","input","fields","isReadOnly","isDisabled","arrayValidator","maxItems","Number","MAX_SAFE_INTEGER","defaultItem","testId","controlId","showError","rest","definition","map","field","label","name","fieldRest","control","_item","itemIndex","validate","children","_ref2","length","push","remove","addButtonText","removeButtonText","disableAddButton","isItemRemovable","items","value","onAddButtonClick","onRemoveButtonClick","_ref3","detail"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/@aws-northstar/ui/components/FormRenderer/components/FieldArray/index.js"],"sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\n/** *******************************************************************************************************************\n  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n  \n  Licensed under the Apache License, Version 2.0 (the \"License\").\n  You may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n  \n      http://www.apache.org/licenses/LICENSE-2.0\n  \n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.                                                                              *\n ******************************************************************************************************************** */\nimport { memo, useMemo } from 'react';\nimport AttributeEditor from '@cloudscape-design/components/attribute-editor';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { FieldArray as FieldArrayBase } from '@data-driven-forms/react-form-renderer';\nimport withDataDrivenFormField from '../../hoc/withDataDrivenFormField';\nconst DEFAULT_ADD_BUTTON_TEXT = 'Add new item';\nconst DEFAULT_REMOVE_BUTTON_TEXT = 'Remove';\nconst FieldArray = ({ ...props }) => {\n    const { renderForm } = useFormApi();\n    const { input, fields, isReadOnly, isDisabled, arrayValidator, maxItems = Number.MAX_SAFE_INTEGER, defaultItem, 'data-testid': testId = 'field-array', controlId, showError, ...rest } = props;\n    const definition = useMemo(() => {\n        return fields.map((field) => {\n            const { label, name, ...fieldRest } = field;\n            return {\n                label: label,\n                control: (_item, itemIndex) => {\n                    return renderForm([\n                        {\n                            ...fieldRest,\n                            isReadOnly,\n                            isDisabled,\n                            showError,\n                            name: `${input.name}[${itemIndex}].${name}`,\n                            'data-testid': `${testId}[${itemIndex}].${name}`,\n                        },\n                    ]);\n                },\n            };\n        });\n    }, [fields, renderForm, input.name, isReadOnly, isDisabled, testId, showError]);\n    return (_jsx(FieldArrayBase, { name: controlId, validate: arrayValidator, children: ({ fields }) => {\n            const { length, push, remove } = fields;\n            return (_jsx(AttributeEditor, { addButtonText: DEFAULT_ADD_BUTTON_TEXT, removeButtonText: DEFAULT_REMOVE_BUTTON_TEXT, disableAddButton: isDisabled || isReadOnly || (!!length && length >= maxItems), ...rest, ...input, isItemRemovable: () => {\n                    return !isDisabled && !isReadOnly;\n                }, items: input.value || [], definition: definition, onAddButtonClick: () => push(defaultItem || {}), onRemoveButtonClick: ({ detail: { itemIndex } }) => remove(itemIndex) }));\n        } }, controlId));\n};\nexport default memo(withDataDrivenFormField(FieldArray));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}