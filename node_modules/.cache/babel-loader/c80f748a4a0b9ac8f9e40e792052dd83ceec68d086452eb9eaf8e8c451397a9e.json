{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\nexport function checkColumnWidths(columnDefinitions) {\n  for (const column of columnDefinitions) {\n    checkProperty(column, 'minWidth');\n    checkProperty(column, 'width');\n  }\n}\nexport function setElementWidths(element, styles) {\n  function setProperty(property) {\n    const value = styles[property];\n    let widthCssValue = '';\n    if (typeof value === 'number') {\n      widthCssValue = value + 'px';\n    }\n    if (typeof value === 'string') {\n      widthCssValue = value;\n    }\n    if (element.style[property] !== widthCssValue) {\n      element.style[property] = widthCssValue;\n    }\n  }\n  setProperty('width');\n  setProperty('minWidth');\n  setProperty('maxWidth');\n}\nfunction checkProperty(column, name) {\n  const value = column[name];\n  if (typeof value !== 'number' && typeof value !== 'undefined') {\n    warnOnce('Table', `resizableColumns feature requires ${name} property to be a number, got ${value}. The component may work incorrectly.`);\n  }\n}","map":{"version":3,"names":["warnOnce","checkColumnWidths","columnDefinitions","column","checkProperty","setElementWidths","element","styles","setProperty","property","value","widthCssValue","style","name"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/table/column-widths-utils.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\n\nimport { TableProps } from './interfaces';\n\nexport function checkColumnWidths(columnDefinitions: ReadonlyArray<TableProps.ColumnDefinition<any>>) {\n  for (const column of columnDefinitions) {\n    checkProperty(column, 'minWidth');\n    checkProperty(column, 'width');\n  }\n}\n\nexport function setElementWidths(element: HTMLElement, styles: React.CSSProperties) {\n  function setProperty(property: 'width' | 'minWidth' | 'maxWidth') {\n    const value = styles[property];\n    let widthCssValue = '';\n    if (typeof value === 'number') {\n      widthCssValue = value + 'px';\n    }\n    if (typeof value === 'string') {\n      widthCssValue = value;\n    }\n    if (element.style[property] !== widthCssValue) {\n      element.style[property] = widthCssValue;\n    }\n  }\n  setProperty('width');\n  setProperty('minWidth');\n  setProperty('maxWidth');\n}\n\nfunction checkProperty(column: TableProps.ColumnDefinition<any>, name: 'width' | 'minWidth') {\n  const value = column[name];\n  if (typeof value !== 'number' && typeof value !== 'undefined') {\n    warnOnce(\n      'Table',\n      `resizableColumns feature requires ${name} property to be a number, got ${value}. The component may work incorrectly.`\n    );\n  }\n}\n"],"mappings":"AAAA;AACA;AAEA,SAASA,QAAQ,QAAQ,+CAA+C;AAIxE,OAAM,SAAUC,iBAAiBA,CAACC,iBAAkE;EAClG,KAAK,MAAMC,MAAM,IAAID,iBAAiB,EAAE;IACtCE,aAAa,CAACD,MAAM,EAAE,UAAU,CAAC;IACjCC,aAAa,CAACD,MAAM,EAAE,OAAO,CAAC;;AAElC;AAEA,OAAM,SAAUE,gBAAgBA,CAACC,OAAoB,EAAEC,MAA2B;EAChF,SAASC,WAAWA,CAACC,QAA2C;IAC9D,MAAMC,KAAK,GAAGH,MAAM,CAACE,QAAQ,CAAC;IAC9B,IAAIE,aAAa,GAAG,EAAE;IACtB,IAAI,OAAOD,KAAK,KAAK,QAAQ,EAAE;MAC7BC,aAAa,GAAGD,KAAK,GAAG,IAAI;;IAE9B,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC7BC,aAAa,GAAGD,KAAK;;IAEvB,IAAIJ,OAAO,CAACM,KAAK,CAACH,QAAQ,CAAC,KAAKE,aAAa,EAAE;MAC7CL,OAAO,CAACM,KAAK,CAACH,QAAQ,CAAC,GAAGE,aAAa;;EAE3C;EACAH,WAAW,CAAC,OAAO,CAAC;EACpBA,WAAW,CAAC,UAAU,CAAC;EACvBA,WAAW,CAAC,UAAU,CAAC;AACzB;AAEA,SAASJ,aAAaA,CAACD,MAAwC,EAAEU,IAA0B;EACzF,MAAMH,KAAK,GAAGP,MAAM,CAACU,IAAI,CAAC;EAC1B,IAAI,OAAOH,KAAK,KAAK,QAAQ,IAAI,OAAOA,KAAK,KAAK,WAAW,EAAE;IAC7DV,QAAQ,CACN,OAAO,EACP,qCAAqCa,IAAI,iCAAiCH,KAAK,uCAAuC,CACvH;;AAEL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}