{"ast":null,"code":"import { useContainerQuery } from '@cloudscape-design/component-toolkit';\nimport { getMatchingBreakpoint } from '../../breakpoints';\n/**\n * Re-renders the component when the breakpoint for the component changes. Scopes the re-renders to the specific\n * breakpoints you want to break at. \"default\" is always included as a fallback, so [\"xs\"] would trigger for\n * \"default\" and \"xs\".\n *\n * @param triggers The relevant breakpoints to trigger for.\n */\nexport function useContainerBreakpoints(triggers) {\n  // triggers.join() gives us a stable value to use for the dependencies argument\n  const triggersDep = triggers === null || triggers === void 0 ? void 0 : triggers.join();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useContainerQuery(rect => getMatchingBreakpoint(rect.contentBoxWidth, triggers), [triggersDep]);\n}","map":{"version":3,"names":["useContainerQuery","getMatchingBreakpoint","useContainerBreakpoints","triggers","triggersDep","join","rect","contentBoxWidth"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/internal/hooks/container-queries/use-container-breakpoints.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\n\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\n\nimport { Breakpoint, getMatchingBreakpoint } from '../../breakpoints';\n\n/**\n * Re-renders the component when the breakpoint for the component changes. Scopes the re-renders to the specific\n * breakpoints you want to break at. \"default\" is always included as a fallback, so [\"xs\"] would trigger for\n * \"default\" and \"xs\".\n *\n * @param triggers The relevant breakpoints to trigger for.\n */\nexport function useContainerBreakpoints<T extends readonly Breakpoint[], E extends Element = any>(triggers?: T) {\n  // triggers.join() gives us a stable value to use for the dependencies argument\n  const triggersDep = triggers?.join();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useContainerQuery(rect => getMatchingBreakpoint(rect.contentBoxWidth, triggers), [triggersDep]) as [\n    'default' | T[number] | null,\n    React.Ref<E>,\n  ];\n}\n"],"mappings":"AAIA,SAASA,iBAAiB,QAAQ,sCAAsC;AAExE,SAAqBC,qBAAqB,QAAQ,mBAAmB;AAErE;;;;;;;AAOA,OAAM,SAAUC,uBAAuBA,CAA2DC,QAAY;EAC5G;EACA,MAAMC,WAAW,GAAGD,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEE,IAAI,EAAE;EACpC;EACA,OAAOL,iBAAiB,CAACM,IAAI,IAAIL,qBAAqB,CAACK,IAAI,CAACC,eAAe,EAAEJ,QAAQ,CAAC,EAAE,CAACC,WAAW,CAAC,CAGpG;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}