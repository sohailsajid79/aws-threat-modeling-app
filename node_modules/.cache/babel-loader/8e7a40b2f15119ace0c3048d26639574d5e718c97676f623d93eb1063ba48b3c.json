{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { useCurrentMode } from '@cloudscape-design/component-toolkit/internal';\nimport { getAceTheme, getDefaultConfig, getDefaultTheme } from './util';\nexport function useEditor(ace, themes, loading) {\n  const editorRef = useRef(null);\n  const [editor, setEditor] = useState(null);\n  const [initialTheme] = useState(getAceTheme(getDefaultTheme(useCurrentMode(editorRef), themes)));\n  useEffect(() => {\n    const elem = editorRef.current;\n    if (!ace || !elem) {\n      return;\n    }\n    const config = getDefaultConfig(ace);\n    setEditor(ace.edit(elem, Object.assign(Object.assign({}, config), {\n      theme: initialTheme\n    })));\n  }, [ace, loading, initialTheme]);\n  return {\n    editorRef,\n    editor\n  };\n}\nexport function useSyncEditorLabels(editor, _ref) {\n  let {\n    controlId,\n    ariaLabel,\n    ariaLabelledby,\n    ariaDescribedby\n  } = _ref;\n  useEffect(() => {\n    if (!editor) {\n      return;\n    }\n    const {\n      textarea\n    } = editor.renderer;\n    if (!textarea) {\n      return;\n    }\n    // Update attributes on the textarea element manually. This is fine as long as ace\n    // doesn't touch these attributes as well.\n    const updateAttribute = (attribute, value) => {\n      if (value) {\n        textarea.setAttribute(attribute, value);\n      } else {\n        textarea.removeAttribute(attribute);\n      }\n    };\n    updateAttribute('id', controlId);\n    updateAttribute('aria-labelledby', ariaLabelledby);\n    updateAttribute('aria-describedby', ariaDescribedby);\n    // Ace (starting from v1.34.0) has a built-in setting to provide an aria-label.\n    // For older versions (before aria-label was managed by ace), we still use the\n    // attribute method.\n    if (typeof editor.getOption('textInputAriaLabel') === 'string') {\n      editor.setOption('textInputAriaLabel', ariaLabel !== null && ariaLabel !== void 0 ? ariaLabel : '');\n    } else {\n      updateAttribute('aria-label', ariaLabel);\n    }\n  }, [ariaLabel, ariaDescribedby, ariaLabelledby, controlId, editor]);\n}\nexport function useSyncEditorSize(editor, _ref2) {\n  let {\n    width,\n    height\n  } = _ref2;\n  useEffect(() => {\n    editor === null || editor === void 0 ? void 0 : editor.resize();\n  }, [editor, width, height]);\n  const onResize = useCallback(() => {\n    editor === null || editor === void 0 ? void 0 : editor.resize();\n  }, [editor]);\n  return {\n    onResize\n  };\n}\nexport function useSyncEditorValue(editor, value) {\n  useEffect(() => {\n    if (!editor) {\n      return;\n    }\n    if (value === editor.getValue()) {\n      return;\n    }\n    const pos = editor.session.selection.toJSON();\n    editor.setValue(value, -1);\n    editor.session.selection.fromJSON(pos);\n  }, [editor, value]);\n}\nexport function useSyncEditorLanguage(editor, language) {\n  useEffect(() => {\n    editor === null || editor === void 0 ? void 0 : editor.session.setMode(`ace/mode/${language}`);\n  }, [editor, language]);\n}\nexport function useSyncEditorWrapLines(editor, wrapLines) {\n  useEffect(() => {\n    editor === null || editor === void 0 ? void 0 : editor.session.setUseWrapMode(wrapLines !== null && wrapLines !== void 0 ? wrapLines : true);\n  }, [editor, wrapLines]);\n}\nexport function useSyncEditorTheme(editor, theme) {\n  useEffect(() => {\n    editor === null || editor === void 0 ? void 0 : editor.setTheme(getAceTheme(theme));\n  }, [editor, theme]);\n}","map":{"version":3,"names":["useCallback","useEffect","useRef","useState","useCurrentMode","getAceTheme","getDefaultConfig","getDefaultTheme","useEditor","ace","themes","loading","editorRef","editor","setEditor","initialTheme","elem","current","config","edit","Object","assign","theme","useSyncEditorLabels","_ref","controlId","ariaLabel","ariaLabelledby","ariaDescribedby","textarea","renderer","updateAttribute","attribute","value","setAttribute","removeAttribute","getOption","setOption","useSyncEditorSize","_ref2","width","height","resize","onResize","useSyncEditorValue","getValue","pos","session","selection","toJSON","setValue","fromJSON","useSyncEditorLanguage","language","setMode","useSyncEditorWrapLines","wrapLines","setUseWrapMode","useSyncEditorTheme","setTheme"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/code-editor/use-editor.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { Ace } from 'ace-builds';\n\nimport { useCurrentMode } from '@cloudscape-design/component-toolkit/internal';\n\nimport { CodeEditorProps } from './interfaces';\nimport { getAceTheme, getDefaultConfig, getDefaultTheme } from './util';\n\nexport function useEditor(ace: any, themes?: CodeEditorProps.AvailableThemes, loading?: boolean) {\n  const editorRef = useRef<HTMLDivElement>(null);\n  const [editor, setEditor] = useState<null | Ace.Editor>(null);\n  const [initialTheme] = useState(getAceTheme(getDefaultTheme(useCurrentMode(editorRef), themes)));\n\n  useEffect(() => {\n    const elem = editorRef.current;\n    if (!ace || !elem) {\n      return;\n    }\n    const config = getDefaultConfig(ace);\n    setEditor(\n      ace.edit(elem, {\n        ...config,\n        theme: initialTheme,\n      })\n    );\n  }, [ace, loading, initialTheme]);\n\n  return { editorRef, editor };\n}\n\nexport function useSyncEditorLabels(\n  editor: null | Ace.Editor,\n  {\n    controlId,\n    ariaLabel,\n    ariaLabelledby,\n    ariaDescribedby,\n  }: { controlId?: string; ariaLabel?: string; ariaLabelledby?: string; ariaDescribedby?: string }\n) {\n  useEffect(() => {\n    if (!editor) {\n      return;\n    }\n\n    const { textarea } = editor.renderer as unknown as { textarea: HTMLTextAreaElement };\n    if (!textarea) {\n      return;\n    }\n\n    // Update attributes on the textarea element manually. This is fine as long as ace\n    // doesn't touch these attributes as well.\n    const updateAttribute = (attribute: string, value: string | undefined) => {\n      if (value) {\n        textarea.setAttribute(attribute, value);\n      } else {\n        textarea.removeAttribute(attribute);\n      }\n    };\n    updateAttribute('id', controlId);\n    updateAttribute('aria-labelledby', ariaLabelledby);\n    updateAttribute('aria-describedby', ariaDescribedby);\n\n    // Ace (starting from v1.34.0) has a built-in setting to provide an aria-label.\n    // For older versions (before aria-label was managed by ace), we still use the\n    // attribute method.\n    if (typeof editor.getOption('textInputAriaLabel') === 'string') {\n      editor.setOption('textInputAriaLabel', ariaLabel ?? '');\n    } else {\n      updateAttribute('aria-label', ariaLabel);\n    }\n  }, [ariaLabel, ariaDescribedby, ariaLabelledby, controlId, editor]);\n}\n\nexport function useSyncEditorSize(\n  editor: null | Ace.Editor,\n  { width, height }: { width?: null | number; height?: null | number }\n) {\n  useEffect(() => {\n    editor?.resize();\n  }, [editor, width, height]);\n\n  const onResize = useCallback(() => {\n    editor?.resize();\n  }, [editor]);\n\n  return { onResize };\n}\n\nexport function useSyncEditorValue(editor: null | Ace.Editor, value: string) {\n  useEffect(() => {\n    if (!editor) {\n      return;\n    }\n    if (value === editor.getValue()) {\n      return;\n    }\n    const pos = editor.session.selection.toJSON();\n    editor.setValue(value, -1);\n    editor.session.selection.fromJSON(pos);\n  }, [editor, value]);\n}\n\nexport function useSyncEditorLanguage(editor: null | Ace.Editor, language: string) {\n  useEffect(() => {\n    editor?.session.setMode(`ace/mode/${language}`);\n  }, [editor, language]);\n}\n\nexport function useSyncEditorWrapLines(editor: null | Ace.Editor, wrapLines?: boolean) {\n  useEffect(() => {\n    editor?.session.setUseWrapMode(wrapLines ?? true);\n  }, [editor, wrapLines]);\n}\n\nexport function useSyncEditorTheme(editor: null | Ace.Editor, theme: CodeEditorProps.Theme) {\n  useEffect(() => {\n    editor?.setTheme(getAceTheme(theme));\n  }, [editor, theme]);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}