{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useState } from 'react';\nimport PanelResizeHandle from '../../internal/components/panel-resize-handle';\nimport { getLimitedValue } from '../../split-panel/utils/size-utils';\nimport { useKeyboardEvents } from './use-keyboard-events';\nimport { usePointerEvents } from './use-pointer-events';\nimport testutilStyles from '../test-classes/styles.css.js';\nfunction useResize(drawerRefObject, {\n  activeDrawer,\n  activeDrawerSize,\n  onActiveDrawerResize,\n  drawersRefs,\n  isToolsOpen,\n  drawersMinWidth,\n  drawersMaxWidth\n}) {\n  var _a;\n  const [relativeSize, setRelativeSize] = useState(0);\n  const drawerSize = !activeDrawer && !isToolsOpen ? 0 : activeDrawerSize;\n  useEffect(() => {\n    // effects are called inside out in the components tree\n    // wait one frame to allow app-layout to complete its calculations\n    const handle = requestAnimationFrame(() => {\n      const maxSize = drawersMaxWidth;\n      setRelativeSize((drawerSize - drawersMinWidth) / (maxSize - drawersMinWidth) * 100);\n    });\n    return () => cancelAnimationFrame(handle);\n  }, [drawerSize, drawersMaxWidth, drawersMinWidth]);\n  const setSidePanelWidth = width => {\n    const maxWidth = drawersMaxWidth;\n    const size = getLimitedValue(drawersMinWidth, width, maxWidth);\n    const id = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id;\n    if (id && maxWidth >= drawersMinWidth) {\n      onActiveDrawerResize({\n        size,\n        id\n      });\n    }\n  };\n  const sizeControlProps = {\n    position: 'side',\n    panelRef: drawerRefObject,\n    handleRef: drawersRefs.slider,\n    onResize: setSidePanelWidth,\n    hasTransitions: true\n  };\n  const onSliderPointerDown = usePointerEvents(sizeControlProps);\n  const onKeyDown = useKeyboardEvents(sizeControlProps);\n  const resizeHandle = React.createElement(PanelResizeHandle, {\n    ref: drawersRefs.slider,\n    position: \"side\",\n    ariaLabel: (_a = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _a === void 0 ? void 0 : _a.resizeHandle,\n    ariaValuenow: relativeSize,\n    className: testutilStyles['drawers-slider'],\n    onKeyDown: onKeyDown,\n    onPointerDown: onSliderPointerDown\n  });\n  return {\n    resizeHandle,\n    drawerSize\n  };\n}\nexport default useResize;","map":{"version":3,"names":["React","useEffect","useState","PanelResizeHandle","getLimitedValue","useKeyboardEvents","usePointerEvents","testutilStyles","useResize","drawerRefObject","activeDrawer","activeDrawerSize","onActiveDrawerResize","drawersRefs","isToolsOpen","drawersMinWidth","drawersMaxWidth","relativeSize","setRelativeSize","drawerSize","handle","requestAnimationFrame","maxSize","cancelAnimationFrame","setSidePanelWidth","width","maxWidth","size","id","sizeControlProps","position","panelRef","handleRef","slider","onResize","hasTransitions","onSliderPointerDown","onKeyDown","resizeHandle","createElement","ref","ariaLabel","_a","ariaLabels","ariaValuenow","className","onPointerDown"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/app-layout/utils/use-resize.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useState } from 'react';\n\nimport PanelResizeHandle from '../../internal/components/panel-resize-handle';\nimport { getLimitedValue } from '../../split-panel/utils/size-utils';\nimport { AppLayoutProps } from '../interfaces';\nimport { SizeControlProps } from './interfaces';\nimport { FocusControlRefs } from './use-focus-control';\nimport { useKeyboardEvents } from './use-keyboard-events';\nimport { usePointerEvents } from './use-pointer-events';\n\nimport testutilStyles from '../test-classes/styles.css.js';\n\nexport interface DrawerResizeProps {\n  activeDrawer: AppLayoutProps.Drawer | undefined;\n  activeDrawerSize: number;\n  onActiveDrawerResize: (detail: { id: string; size: number }) => void;\n  drawersRefs: FocusControlRefs;\n  isToolsOpen: boolean;\n  drawersMaxWidth: number;\n  drawersMinWidth: number;\n}\n\nfunction useResize(\n  drawerRefObject: React.RefObject<HTMLDivElement>,\n  {\n    activeDrawer,\n    activeDrawerSize,\n    onActiveDrawerResize,\n    drawersRefs,\n    isToolsOpen,\n    drawersMinWidth,\n    drawersMaxWidth,\n  }: DrawerResizeProps\n) {\n  const [relativeSize, setRelativeSize] = useState(0);\n\n  const drawerSize = !activeDrawer && !isToolsOpen ? 0 : activeDrawerSize;\n\n  useEffect(() => {\n    // effects are called inside out in the components tree\n    // wait one frame to allow app-layout to complete its calculations\n    const handle = requestAnimationFrame(() => {\n      const maxSize = drawersMaxWidth;\n      setRelativeSize(((drawerSize - drawersMinWidth) / (maxSize - drawersMinWidth)) * 100);\n    });\n    return () => cancelAnimationFrame(handle);\n  }, [drawerSize, drawersMaxWidth, drawersMinWidth]);\n\n  const setSidePanelWidth = (width: number) => {\n    const maxWidth = drawersMaxWidth;\n    const size = getLimitedValue(drawersMinWidth, width, maxWidth);\n    const id = activeDrawer?.id;\n\n    if (id && maxWidth >= drawersMinWidth) {\n      onActiveDrawerResize({ size, id });\n    }\n  };\n\n  const sizeControlProps: SizeControlProps = {\n    position: 'side',\n    panelRef: drawerRefObject,\n    handleRef: drawersRefs.slider,\n    onResize: setSidePanelWidth,\n    hasTransitions: true,\n  };\n\n  const onSliderPointerDown = usePointerEvents(sizeControlProps);\n  const onKeyDown = useKeyboardEvents(sizeControlProps);\n\n  const resizeHandle = (\n    <PanelResizeHandle\n      ref={drawersRefs.slider}\n      position=\"side\"\n      ariaLabel={activeDrawer?.ariaLabels?.resizeHandle}\n      ariaValuenow={relativeSize}\n      className={testutilStyles['drawers-slider']}\n      onKeyDown={onKeyDown}\n      onPointerDown={onSliderPointerDown}\n    />\n  );\n\n  return { resizeHandle, drawerSize };\n}\n\nexport default useResize;\n"],"mappings":"AAAA;AACA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAElD,OAAOC,iBAAiB,MAAM,+CAA+C;AAC7E,SAASC,eAAe,QAAQ,oCAAoC;AAIpE,SAASC,iBAAiB,QAAQ,uBAAuB;AACzD,SAASC,gBAAgB,QAAQ,sBAAsB;AAEvD,OAAOC,cAAc,MAAM,+BAA+B;AAY1D,SAASC,SAASA,CAChBC,eAAgD,EAChD;EACEC,YAAY;EACZC,gBAAgB;EAChBC,oBAAoB;EACpBC,WAAW;EACXC,WAAW;EACXC,eAAe;EACfC;AAAe,CACG;;EAEpB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC;EAEnD,MAAMiB,UAAU,GAAG,CAACT,YAAY,IAAI,CAACI,WAAW,GAAG,CAAC,GAAGH,gBAAgB;EAEvEV,SAAS,CAAC,MAAK;IACb;IACA;IACA,MAAMmB,MAAM,GAAGC,qBAAqB,CAAC,MAAK;MACxC,MAAMC,OAAO,GAAGN,eAAe;MAC/BE,eAAe,CAAE,CAACC,UAAU,GAAGJ,eAAe,KAAKO,OAAO,GAAGP,eAAe,CAAC,GAAI,GAAG,CAAC;IACvF,CAAC,CAAC;IACF,OAAO,MAAMQ,oBAAoB,CAACH,MAAM,CAAC;EAC3C,CAAC,EAAE,CAACD,UAAU,EAAEH,eAAe,EAAED,eAAe,CAAC,CAAC;EAElD,MAAMS,iBAAiB,GAAIC,KAAa,IAAI;IAC1C,MAAMC,QAAQ,GAAGV,eAAe;IAChC,MAAMW,IAAI,GAAGvB,eAAe,CAACW,eAAe,EAAEU,KAAK,EAAEC,QAAQ,CAAC;IAC9D,MAAME,EAAE,GAAGlB,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEkB,EAAE;IAE3B,IAAIA,EAAE,IAAIF,QAAQ,IAAIX,eAAe,EAAE;MACrCH,oBAAoB,CAAC;QAAEe,IAAI;QAAEC;MAAE,CAAE,CAAC;;EAEtC,CAAC;EAED,MAAMC,gBAAgB,GAAqB;IACzCC,QAAQ,EAAE,MAAM;IAChBC,QAAQ,EAAEtB,eAAe;IACzBuB,SAAS,EAAEnB,WAAW,CAACoB,MAAM;IAC7BC,QAAQ,EAAEV,iBAAiB;IAC3BW,cAAc,EAAE;GACjB;EAED,MAAMC,mBAAmB,GAAG9B,gBAAgB,CAACuB,gBAAgB,CAAC;EAC9D,MAAMQ,SAAS,GAAGhC,iBAAiB,CAACwB,gBAAgB,CAAC;EAErD,MAAMS,YAAY,GAChBtC,KAAA,CAAAuC,aAAA,CAACpC,iBAAiB;IAChBqC,GAAG,EAAE3B,WAAW,CAACoB,MAAM;IACvBH,QAAQ,EAAC,MAAM;IACfW,SAAS,EAAE,CAAAC,EAAA,GAAAhC,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEiC,UAAU,cAAAD,EAAA,uBAAAA,EAAA,CAAEJ,YAAY;IACjDM,YAAY,EAAE3B,YAAY;IAC1B4B,SAAS,EAAEtC,cAAc,CAAC,gBAAgB,CAAC;IAC3C8B,SAAS,EAAEA,SAAS;IACpBS,aAAa,EAAEV;EAAmB,EAErC;EAED,OAAO;IAAEE,YAAY;IAAEnB;EAAU,CAAE;AACrC;AAEA,eAAeX,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}