{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport { InternalButton } from '../../button/internal';\nimport Icon from '../../icon/internal';\nimport { useAppLayoutInternals } from './context';\nimport styles from './styles.css.js';\nfunction TriggerButton(_ref, ref) {\n  let {\n    ariaLabel,\n    className,\n    iconName,\n    iconSvg,\n    ariaExpanded,\n    ariaControls,\n    onClick,\n    testId,\n    disabled = false,\n    badge,\n    selected = false,\n    highContrastHeader\n  } = _ref;\n  const {\n    isMobile\n  } = useAppLayoutInternals();\n  return React.createElement(\"div\", {\n    className: clsx(styles['trigger-wrapper'], !highContrastHeader && styles['remove-high-contrast-header'])\n  }, isMobile ? React.createElement(InternalButton, {\n    ariaExpanded: ariaExpanded,\n    ariaLabel: ariaLabel,\n    ariaControls: ariaControls,\n    className: className,\n    disabled: disabled,\n    ref: ref,\n    formAction: \"none\",\n    iconName: iconName,\n    iconSvg: iconSvg,\n    badge: badge,\n    onClick: onClick,\n    variant: \"icon\",\n    __nativeAttributes: Object.assign({\n      'aria-haspopup': true\n    }, testId && {\n      'data-testid': testId\n    })\n  }) : React.createElement(React.Fragment, null, React.createElement(\"button\", {\n    \"aria-expanded\": ariaExpanded,\n    \"aria-controls\": ariaControls,\n    \"aria-haspopup\": true,\n    \"aria-label\": ariaLabel,\n    \"aria-disabled\": disabled,\n    disabled: disabled,\n    className: clsx(styles.trigger, styles['trigger-button-styles'], {\n      [styles.selected]: selected,\n      [styles.badge]: badge\n    }, className),\n    onClick: onClick,\n    ref: ref,\n    type: \"button\",\n    \"data-testid\": testId\n  }, React.createElement(\"span\", {\n    className: clsx(badge && clsx(styles['trigger-badge-wrapper'], styles['trigger-button-styles']))\n  }, (iconName || iconSvg) && React.createElement(Icon, {\n    name: iconName,\n    svg: iconSvg\n  }))), badge && React.createElement(\"div\", {\n    className: styles.dot\n  })));\n}\nexport default React.forwardRef(TriggerButton);","map":{"version":3,"names":["React","clsx","InternalButton","Icon","useAppLayoutInternals","styles","TriggerButton","_ref","ref","ariaLabel","className","iconName","iconSvg","ariaExpanded","ariaControls","onClick","testId","disabled","badge","selected","highContrastHeader","isMobile","createElement","formAction","variant","__nativeAttributes","Object","assign","Fragment","trigger","type","name","svg","dot","forwardRef"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/app-layout/visual-refresh/trigger-button.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { Ref } from 'react';\nimport clsx from 'clsx';\n\nimport { ButtonProps } from '../../button/interfaces';\nimport { InternalButton } from '../../button/internal';\nimport { IconProps } from '../../icon/interfaces';\nimport Icon from '../../icon/internal';\nimport { useAppLayoutInternals } from './context';\n\nimport styles from './styles.css.js';\n\nexport interface TriggerButtonProps {\n  ariaLabel?: string;\n  className?: string;\n  iconName?: IconProps.Name;\n  iconSvg?: React.ReactNode;\n  ariaExpanded: boolean | undefined;\n  ariaControls?: string;\n  disabled?: boolean;\n  /**\n   * Ovewrwrites any internal testIds when provided\n   */\n  testId?: string;\n  /**\n   * If button is selected. Used only for desktop and applies a selected class for desktop. Mobile does not need the class as the trigger buttons are hidden by the open drawer\n   */\n  selected?: boolean;\n  onClick: () => void;\n  badge?: boolean;\n  highContrastHeader?: boolean;\n}\n\nfunction TriggerButton(\n  {\n    ariaLabel,\n    className,\n    iconName,\n    iconSvg,\n    ariaExpanded,\n    ariaControls,\n    onClick,\n    testId,\n    disabled = false,\n    badge,\n    selected = false,\n    highContrastHeader,\n  }: TriggerButtonProps,\n  ref: React.Ref<ButtonProps.Ref>\n) {\n  const { isMobile } = useAppLayoutInternals();\n\n  return (\n    <div className={clsx(styles['trigger-wrapper'], !highContrastHeader && styles['remove-high-contrast-header'])}>\n      {isMobile ? (\n        <InternalButton\n          ariaExpanded={ariaExpanded}\n          ariaLabel={ariaLabel}\n          ariaControls={ariaControls}\n          className={className}\n          disabled={disabled}\n          ref={ref}\n          formAction=\"none\"\n          iconName={iconName}\n          iconSvg={iconSvg}\n          badge={badge}\n          onClick={onClick}\n          variant=\"icon\"\n          __nativeAttributes={{\n            'aria-haspopup': true,\n            ...(testId && {\n              'data-testid': testId,\n            }),\n          }}\n        />\n      ) : (\n        <>\n          <button\n            aria-expanded={ariaExpanded}\n            aria-controls={ariaControls}\n            aria-haspopup={true}\n            aria-label={ariaLabel}\n            aria-disabled={disabled}\n            disabled={disabled}\n            className={clsx(\n              styles.trigger,\n              styles['trigger-button-styles'],\n              {\n                [styles.selected]: selected,\n                [styles.badge]: badge,\n              },\n              className\n            )}\n            onClick={onClick}\n            ref={ref as Ref<HTMLButtonElement>}\n            type=\"button\"\n            data-testid={testId}\n          >\n            <span className={clsx(badge && clsx(styles['trigger-badge-wrapper'], styles['trigger-button-styles']))}>\n              {(iconName || iconSvg) && <Icon name={iconName} svg={iconSvg} />}\n            </span>\n          </button>\n          {badge && <div className={styles.dot} />}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default React.forwardRef(TriggerButton);\n"],"mappings":"AAAA;AACA;AACA,OAAOA,KAAc,MAAM,OAAO;AAClC,OAAOC,IAAI,MAAM,MAAM;AAGvB,SAASC,cAAc,QAAQ,uBAAuB;AAEtD,OAAOC,IAAI,MAAM,qBAAqB;AACtC,SAASC,qBAAqB,QAAQ,WAAW;AAEjD,OAAOC,MAAM,MAAM,iBAAiB;AAuBpC,SAASC,aAAaA,CAAAC,IAAA,EAepBC,GAA+B;EAAA,IAd/B;IACEC,SAAS;IACTC,SAAS;IACTC,QAAQ;IACRC,OAAO;IACPC,YAAY;IACZC,YAAY;IACZC,OAAO;IACPC,MAAM;IACNC,QAAQ,GAAG,KAAK;IAChBC,KAAK;IACLC,QAAQ,GAAG,KAAK;IAChBC;EAAkB,CACC,GAAAb,IAAA;EAGrB,MAAM;IAAEc;EAAQ,CAAE,GAAGjB,qBAAqB,EAAE;EAE5C,OACEJ,KAAA,CAAAsB,aAAA;IAAKZ,SAAS,EAAET,IAAI,CAACI,MAAM,CAAC,iBAAiB,CAAC,EAAE,CAACe,kBAAkB,IAAIf,MAAM,CAAC,6BAA6B,CAAC;EAAC,GAC1GgB,QAAQ,GACPrB,KAAA,CAAAsB,aAAA,CAACpB,cAAc;IACbW,YAAY,EAAEA,YAAY;IAC1BJ,SAAS,EAAEA,SAAS;IACpBK,YAAY,EAAEA,YAAY;IAC1BJ,SAAS,EAAEA,SAAS;IACpBO,QAAQ,EAAEA,QAAQ;IAClBT,GAAG,EAAEA,GAAG;IACRe,UAAU,EAAC,MAAM;IACjBZ,QAAQ,EAAEA,QAAQ;IAClBC,OAAO,EAAEA,OAAO;IAChBM,KAAK,EAAEA,KAAK;IACZH,OAAO,EAAEA,OAAO;IAChBS,OAAO,EAAC,MAAM;IACdC,kBAAkB,EAAAC,MAAA,CAAAC,MAAA;MAChB,eAAe,EAAE;IAAI,GACjBX,MAAM,IAAI;MACZ,aAAa,EAAEA;KACf;EAAA,EAEJ,GAEFhB,KAAA,CAAAsB,aAAA,CAAAtB,KAAA,CAAA4B,QAAA,QACE5B,KAAA,CAAAsB,aAAA;IAAA,iBACiBT,YAAY;IAAA,iBACZC,YAAY;IAAA,iBACZ,IAAI;IAAA,cACPL,SAAS;IAAA,iBACNQ,QAAQ;IACvBA,QAAQ,EAAEA,QAAQ;IAClBP,SAAS,EAAET,IAAI,CACbI,MAAM,CAACwB,OAAO,EACdxB,MAAM,CAAC,uBAAuB,CAAC,EAC/B;MACE,CAACA,MAAM,CAACc,QAAQ,GAAGA,QAAQ;MAC3B,CAACd,MAAM,CAACa,KAAK,GAAGA;KACjB,EACDR,SAAS,CACV;IACDK,OAAO,EAAEA,OAAO;IAChBP,GAAG,EAAEA,GAA6B;IAClCsB,IAAI,EAAC,QAAQ;IAAA,eACAd;EAAM,GAEnBhB,KAAA,CAAAsB,aAAA;IAAMZ,SAAS,EAAET,IAAI,CAACiB,KAAK,IAAIjB,IAAI,CAACI,MAAM,CAAC,uBAAuB,CAAC,EAAEA,MAAM,CAAC,uBAAuB,CAAC,CAAC;EAAC,GACnG,CAACM,QAAQ,IAAIC,OAAO,KAAKZ,KAAA,CAAAsB,aAAA,CAACnB,IAAI;IAAC4B,IAAI,EAAEpB,QAAQ;IAAEqB,GAAG,EAAEpB;EAAO,EAAI,CAC3D,CACA,EACRM,KAAK,IAAIlB,KAAA,CAAAsB,aAAA;IAAKZ,SAAS,EAAEL,MAAM,CAAC4B;EAAG,EAAI,CAE3C,CACG;AAEV;AAEA,eAAejC,KAAK,CAACkC,UAAU,CAAC5B,aAAa,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}