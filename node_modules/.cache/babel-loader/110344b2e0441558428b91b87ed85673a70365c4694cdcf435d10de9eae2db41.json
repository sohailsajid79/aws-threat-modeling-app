{"ast":null,"code":"/**\n * Creates a mapping of between items and transforms to be applied while in transition.\n */\nexport function createTransforms(grid, moves, gridContext) {\n  const transforms = {};\n  for (const move of moves) {\n    const item = grid.items.find(prev => prev.id === move.itemId);\n    if (move.type === \"REMOVE\") {\n      transforms[move.itemId] = {\n        type: \"remove\"\n      };\n    } else if (item) {\n      transforms[item.id] = {\n        type: \"move\",\n        x: gridContext.getColOffset(move.x - item.x),\n        y: gridContext.getRowOffset(move.y - item.y),\n        width: gridContext.getWidth(move.width),\n        height: gridContext.getHeight(move.height)\n      };\n    }\n  }\n  return transforms;\n}","map":{"version":3,"names":["createTransforms","grid","moves","gridContext","transforms","move","item","items","find","prev","id","itemId","type","x","getColOffset","y","getRowOffset","width","getWidth","height","getHeight"],"sources":["/Users/sohailsajid/Desktop/threat-modeling-app/node_modules/src/board/utils/create-transforms.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { GridContext } from \"../../internal/grid/interfaces\";\nimport { GridLayout, ItemId, Transform } from \"../../internal/interfaces\";\nimport { CommittedMove } from \"../../internal/layout-engine/interfaces\";\n\n/**\n * Creates a mapping of between items and transforms to be applied while in transition.\n */\nexport function createTransforms(grid: GridLayout, moves: readonly CommittedMove[], gridContext: GridContext) {\n  const transforms: Record<ItemId, Transform> = {};\n\n  for (const move of moves) {\n    const item = grid.items.find((prev) => prev.id === move.itemId);\n\n    if (move.type === \"REMOVE\") {\n      transforms[move.itemId] = { type: \"remove\" };\n    } else if (item) {\n      transforms[item.id] = {\n        type: \"move\",\n        x: gridContext.getColOffset(move.x - item.x),\n        y: gridContext.getRowOffset(move.y - item.y),\n        width: gridContext.getWidth(move.width),\n        height: gridContext.getHeight(move.height),\n      };\n    }\n  }\n\n  return transforms;\n}\n"],"mappings":"AAMA;;;AAGA,OAAM,SAAUA,gBAAgBA,CAACC,IAAgB,EAAEC,KAA+B,EAAEC,WAAwB;EAC1G,MAAMC,UAAU,GAA8B,EAAE;EAEhD,KAAK,MAAMC,IAAI,IAAIH,KAAK,EAAE;IACxB,MAAMI,IAAI,GAAGL,IAAI,CAACM,KAAK,CAACC,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKL,IAAI,CAACM,MAAM,CAAC;IAE/D,IAAIN,IAAI,CAACO,IAAI,KAAK,QAAQ,EAAE;MAC1BR,UAAU,CAACC,IAAI,CAACM,MAAM,CAAC,GAAG;QAAEC,IAAI,EAAE;MAAQ,CAAE;KAC7C,MAAM,IAAIN,IAAI,EAAE;MACfF,UAAU,CAACE,IAAI,CAACI,EAAE,CAAC,GAAG;QACpBE,IAAI,EAAE,MAAM;QACZC,CAAC,EAAEV,WAAW,CAACW,YAAY,CAACT,IAAI,CAACQ,CAAC,GAAGP,IAAI,CAACO,CAAC,CAAC;QAC5CE,CAAC,EAAEZ,WAAW,CAACa,YAAY,CAACX,IAAI,CAACU,CAAC,GAAGT,IAAI,CAACS,CAAC,CAAC;QAC5CE,KAAK,EAAEd,WAAW,CAACe,QAAQ,CAACb,IAAI,CAACY,KAAK,CAAC;QACvCE,MAAM,EAAEhB,WAAW,CAACiB,SAAS,CAACf,IAAI,CAACc,MAAM;OAC1C;;;EAIL,OAAOf,UAAU;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}