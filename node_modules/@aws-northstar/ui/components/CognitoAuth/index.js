import { jsx as _jsx } from "react/jsx-runtime";
/** *******************************************************************************************************************
  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
  
  Licensed under the Apache License, Version 2.0 (the "License").
  You may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
      http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.                                                                              *
 ******************************************************************************************************************** */
import { useState, useCallback, useMemo, useReducer } from 'react';
import { CognitoUserPool, } from 'amazon-cognito-identity-js';
import Tabs from '@cloudscape-design/components/tabs';
import Container from './components/Container';
import ConfigError from './components/ConfigError';
import MFA from './components/MFA';
import MFASelection from './components/MFASelection';
import MFATotpSetup from './components/MFATotpSetup';
import NewPassword from './components/NewPassword';
import SignIn from './components/SignIn';
import SignUp from './components/SignUp';
import ForgotPassword from './components/ForgotPassword';
import ErrorMessage from './components/ErrorMessage';
import { CognitoAuthContext } from './context';
/**
 * Support Cognito authentication flows.
 *
 * **Limitations:**
 * The following authentication flows are not supported in the current version of CognitoAuth component:
 * * Cognito Federated SignIn
 * * App Client with Client Secret
 * * [Cognito hosted UI](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-app-integration.html)
 *
 * **useSigv4Client**
 *
 * A React hook returning an instance of Sigv4Client to be used to run fetch call with AWS signed API requests.
 * Refer to [Docs](https://aws.github.io/aws-northstar/?path=/docs/components-cognitoauth-sigv4client-docs--page) for more details.
 **/
const CognitoAuth = ({ children, userPoolId, clientId, region, identityPoolId, allowSignup, signUpAttributes, logo, header, hrefTermsAndConditions, }) => {
    const [transition, setTransition] = useState();
    const [activeTab, setActiveTab] = useState('signIn');
    const [, forceUpdate] = useReducer((x) => x + 1, 0);
    const userPool = useMemo(() => {
        if (!userPoolId || !clientId) {
            return null;
        }
        try {
            return new CognitoUserPool({
                UserPoolId: userPoolId,
                ClientId: clientId,
            });
        }
        catch (err) {
            console.info('Error in initiating CognitoUserPool', err);
            return null;
        }
    }, [userPoolId, clientId]);
    const resetView = useCallback(() => {
        setActiveTab('signIn');
        setTransition(undefined);
        forceUpdate();
    }, [forceUpdate]);
    const handleSignOut = useCallback(() => {
        userPool?.getCurrentUser()?.signOut();
        setTransition(undefined);
        forceUpdate();
    }, [userPool]);
    const getAuthenticatedUser = useCallback(() => {
        return userPool?.getCurrentUser() || null;
    }, [userPool]);
    const getAuthenticatedUserSession = useCallback((options) => {
        return new Promise((resolve, reject) => {
            const cognitoUser = userPool?.getCurrentUser();
            if (!cognitoUser) {
                resolve(undefined);
            }
            else {
                cognitoUser.getSession((error, session) => {
                    if (error) {
                        reject(error);
                    }
                    else {
                        resolve(session || undefined);
                    }
                }, options);
            }
        });
    }, [userPool]);
    const getAuthenticatedUserAttributes = useCallback(() => {
        return new Promise((resolve, reject) => {
            const cognitoUser = userPool?.getCurrentUser();
            if (!cognitoUser) {
                resolve(undefined);
            }
            else {
                cognitoUser.getSession((errorGetSession, _session) => {
                    if (errorGetSession) {
                        reject(errorGetSession);
                        return;
                    }
                    cognitoUser.getUserAttributes((error, result) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            resolve(result || undefined);
                        }
                    });
                });
            }
        });
    }, [userPool]);
    const handleMFARequired = useCallback((cognitoUser, challengeName, challengeParams) => {
        setTransition(_jsx(MFA, { cognitoUser: cognitoUser, challengeName: challengeName, challengeParams: challengeParams, resetView: resetView }));
    }, [resetView]);
    const handleMFATotpSetup = useCallback((cognitoUser) => {
        cognitoUser.associateSoftwareToken({
            associateSecretCode(secretCode) {
                setTransition(_jsx(MFATotpSetup, { secretCode: secretCode, cognitoUser: cognitoUser, resetView: resetView }));
            },
            onFailure(err) {
                setTransition(_jsx(ErrorMessage, { onBackToSignIn: resetView, children: err.message }));
            },
        });
    }, [resetView]);
    const handleMFASelection = useCallback((cognitoUser, challengeName, challengeParams) => {
        setTransition(_jsx(MFASelection, { challengeName: challengeName, challengeParams: challengeParams, onMFARequired: handleMFARequired, cognitoUser: cognitoUser, resetView: resetView }));
    }, [resetView, handleMFARequired]);
    const handleNewPasswordRequired = useCallback((cognitoUser, userAttributes, requiredAttributes) => {
        setTransition(_jsx(NewPassword, { cognitoUser: cognitoUser, userAttributes: userAttributes, requiredAttributes: requiredAttributes, resetView: resetView, onMFARequired: handleMFARequired, onMFASelection: handleMFASelection, onMFASetup: handleMFATotpSetup }));
    }, [handleMFARequired, handleMFATotpSetup, handleMFASelection, resetView]);
    const handleForgotPassword = useCallback(() => {
        setTransition(_jsx(ForgotPassword, { userPool: userPool, resetView: resetView }));
    }, [userPool, resetView]);
    if (!userPool) {
        return (_jsx(Container, { children: _jsx(ConfigError, {}) }));
    }
    const user = getAuthenticatedUser();
    if (user) {
        return (_jsx(CognitoAuthContext.Provider, { value: {
                userPoolId,
                userPool,
                region,
                identityPoolId,
                onSignOut: handleSignOut,
                getAuthenticatedUser,
                getAuthenticatedUserAttributes,
                getAuthenticatedUserSession,
            }, children: typeof children === 'function' ? children(handleSignOut, user) : children }));
    }
    return (_jsx(Container, { header: header, logo: logo, children: transition ??
            (allowSignup ? (_jsx(Tabs, { activeTabId: activeTab, onChange: ({ detail }) => setActiveTab(detail.activeTabId), tabs: [
                    {
                        label: 'Sign In',
                        id: 'signIn',
                        content: (_jsx(SignIn, { userPool: userPool, onMFARequired: handleMFARequired, onMFASelection: handleMFASelection, onMFASetup: handleMFATotpSetup, onNewPasswordRequired: handleNewPasswordRequired, resetView: resetView, onForgotPassword: handleForgotPassword })),
                    },
                    {
                        label: 'Sign Up',
                        id: 'signUp',
                        content: (_jsx(SignUp, { userPool: userPool, resetView: resetView, attributes: signUpAttributes, hrefTermsAndConditions: hrefTermsAndConditions })),
                    },
                ] })) : (_jsx(SignIn, { userPool: userPool, onMFARequired: handleMFARequired, onMFASelection: handleMFASelection, onMFASetup: handleMFATotpSetup, onNewPasswordRequired: handleNewPasswordRequired, resetView: resetView, onForgotPassword: handleForgotPassword }))) }));
};
export default CognitoAuth;
export { CognitoUser, CognitoUserSession } from 'amazon-cognito-identity-js';
export * from './types';
export * from './context';
